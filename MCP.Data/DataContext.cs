// Bring in the necessary namespaces for the classes and interfaces used in this code
using CED.Data.Entities;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;

namespace MCP.Data
{
    public partial class DataContext : DbContext
    {
        private readonly IHttpContextAccessor _httpContextAccessor;
        public DataContext() 
        {
            
        }
        public DataContext(DbContextOptions<DataContext> options) : base(options)
        {
           
        }
        
        public DataContext(DbContextOptions<DataContext> options, IHttpContextAccessor httpContextAccessor) : base(options)
        {
            _httpContextAccessor = httpContextAccessor;
        }

        public virtual DbSet<ActivityExecution> ActivityExecutions { get; set; }

        public virtual DbSet<ActivityMapping> ActivityMappings { get; set; }

        public virtual DbSet<ActivityOption> ActivityOptions { get; set; }

        public virtual DbSet<ActivityOptionRelation> ActivityOptionRelations { get; set; }

        public virtual DbSet<ActivityOptionType> ActivityOptionTypes { get; set; }

        public virtual DbSet<Address> Addresses { get; set; }

        public virtual DbSet<Address1> Addresses1 { get; set; }

        public virtual DbSet<AddressType> AddressTypes { get; set; }

        public virtual DbSet<AddressType1> AddressTypes1 { get; set; }

        public virtual DbSet<AdviceDossier> AdviceDossiers { get; set; }

        public virtual DbSet<AdviceDossiersHistory> AdviceDossiersHistories { get; set; }

        public virtual DbSet<Agent> Agents { get; set; }

        public virtual DbSet<Agent1> Agents1 { get; set; }

        public virtual DbSet<AgentsView> AgentsViews { get; set; }

        public virtual DbSet<AgentsViewWithContactInformation> AgentsViewWithContactInformations { get; set; }

        public virtual DbSet<AlarmCenter> AlarmCenters { get; set; }

        public virtual DbSet<AlarmCenter1> AlarmCenters1 { get; set; }

        public virtual DbSet<Application> Applications { get; set; }

        public virtual DbSet<Application1> Applications1 { get; set; }

        public virtual DbSet<ApplicationSetting> ApplicationSettings { get; set; }

        public virtual DbSet<ApplicationsView> ApplicationsViews { get; set; }

        public virtual DbSet<AppointmentTimeSlot> AppointmentTimeSlots { get; set; }

        public virtual DbSet<AssignmentViewHandlingStatus> AssignmentViewHandlingStatuses { get; set; }

        public virtual DbSet<AssistanceDossier> AssistanceDossiers { get; set; }

        public virtual DbSet<AssistanceDossiersHistory> AssistanceDossiersHistories { get; set; }

        public virtual DbSet<AssistanceDossiersOpenView> AssistanceDossiersOpenViews { get; set; }

        public virtual DbSet<AssistanceDossiersView> AssistanceDossiersViews { get; set; }

        public virtual DbSet<AssistanceLocationType> AssistanceLocationTypes { get; set; }

        public virtual DbSet<AssistancePlan> AssistancePlans { get; set; }

        public virtual DbSet<AssistancePlanAllPurchaseInvoicesWaitingForApprovalView> AssistancePlanAllPurchaseInvoicesWaitingForApprovalViews { get; set; }

        public virtual DbSet<AssistancePlanClientsView> AssistancePlanClientsViews { get; set; }

        public virtual DbSet<AssistancePlanCoverage> AssistancePlanCoverages { get; set; }

        public virtual DbSet<AssistancePlanCoveragesHistory> AssistancePlanCoveragesHistories { get; set; }

        public virtual DbSet<AssistancePlanCoveragesView> AssistancePlanCoveragesViews { get; set; }

        public virtual DbSet<AssistancePlanCreditableSalesOrdersView> AssistancePlanCreditableSalesOrdersViews { get; set; }

        public virtual DbSet<AssistancePlanLine> AssistancePlanLines { get; set; }

        public virtual DbSet<AssistancePlanLinesHistory> AssistancePlanLinesHistories { get; set; }

        public virtual DbSet<AssistancePlanLinesView> AssistancePlanLinesViews { get; set; }

        public virtual DbSet<AssistancePlanLocation> AssistancePlanLocations { get; set; }

        public virtual DbSet<AssistancePlanLocationsHistory> AssistancePlanLocationsHistories { get; set; }

        public virtual DbSet<AssistancePlanPendingMatchPurchaseInvoicesView> AssistancePlanPendingMatchPurchaseInvoicesViews { get; set; }

        public virtual DbSet<AssistancePlanStatus> AssistancePlanStatuses { get; set; }

        public virtual DbSet<AssistancePlanStatusHistory> AssistancePlanStatusHistories { get; set; }

        public virtual DbSet<AssistancePlanStatusHistoryHistory> AssistancePlanStatusHistoryHistories { get; set; }

        public virtual DbSet<AssistancePlanStatusesHistory> AssistancePlanStatusesHistories { get; set; }

        public virtual DbSet<AssistancePlanType> AssistancePlanTypes { get; set; }

        public virtual DbSet<AssistancePlansHistory> AssistancePlansHistories { get; set; }

        public virtual DbSet<AssistancePlansView> AssistancePlansViews { get; set; }

        public virtual DbSet<AssistancePlansWithoutPurchaseInvoicesView> AssistancePlansWithoutPurchaseInvoicesViews { get; set; }

        public virtual DbSet<AuthorizationGroupRole> AuthorizationGroupRoles { get; set; }

        public virtual DbSet<AuthorizationRole> AuthorizationRoles { get; set; }

        public virtual DbSet<AuthorizationRoleInheritance> AuthorizationRoleInheritances { get; set; }

        public virtual DbSet<AuthorizationRoleInheritanceView> AuthorizationRoleInheritanceViews { get; set; }

        public virtual DbSet<AuthorizationRoleType> AuthorizationRoleTypes { get; set; }

        public virtual DbSet<AuthorizationRolesView> AuthorizationRolesViews { get; set; }

        public virtual DbSet<AuthorizedSupplierBankAccountsView> AuthorizedSupplierBankAccountsViews { get; set; }

        public virtual DbSet<AutomaticMessageLog> AutomaticMessageLogs { get; set; }

        public virtual DbSet<Bank> Banks { get; set; }

        public virtual DbSet<Bank1> Banks1 { get; set; }

        public virtual DbSet<BankAccount> BankAccounts { get; set; }

        public virtual DbSet<BankAccount1> BankAccounts1 { get; set; }

        public virtual DbSet<BankAccountAttachment> BankAccountAttachments { get; set; }

        public virtual DbSet<BankAccountValidation> BankAccountValidations { get; set; }

        public virtual DbSet<BankAccountsView> BankAccountsViews { get; set; }

        public virtual DbSet<BankIdentifierCode> BankIdentifierCodes { get; set; }

        public virtual DbSet<BankJournalEntry> BankJournalEntries { get; set; }

        public virtual DbSet<BankJournalEntryLine> BankJournalEntryLines { get; set; }

        public virtual DbSet<BankStatement> BankStatements { get; set; }

        public virtual DbSet<BankStatementAttachment> BankStatementAttachments { get; set; }

        public virtual DbSet<BankStatementAttachmentsView> BankStatementAttachmentsViews { get; set; }

        public virtual DbSet<BankStatementCorrection> BankStatementCorrections { get; set; }

        public virtual DbSet<BankStatementCorrectionLine> BankStatementCorrectionLines { get; set; }

        public virtual DbSet<BankStatementJournalEntryLinesView> BankStatementJournalEntryLinesViews { get; set; }

        public virtual DbSet<BankStatementLine> BankStatementLines { get; set; }

        public virtual DbSet<BankStatementLineAttachment> BankStatementLineAttachments { get; set; }

        public virtual DbSet<BankStatementLineAttachmentsView> BankStatementLineAttachmentsViews { get; set; }

        public virtual DbSet<BankStatementLinesReconciliationView> BankStatementLinesReconciliationViews { get; set; }

        public virtual DbSet<BankStatementLinesView> BankStatementLinesViews { get; set; }

        public virtual DbSet<BankStatementReconcilliation> BankStatementReconcilliations { get; set; }

        public virtual DbSet<BankStatementReconcilliationsReport> BankStatementReconcilliationsReports { get; set; }

        public virtual DbSet<BankStatementReconcilliationsView> BankStatementReconcilliationsViews { get; set; }

        public virtual DbSet<BankStatementStatus> BankStatementStatuses { get; set; }

        public virtual DbSet<BankStatementStatusHistory> BankStatementStatusHistories { get; set; }

        public virtual DbSet<BankStatementsFinalizedView> BankStatementsFinalizedViews { get; set; }

        public virtual DbSet<BankStatementsNextToReconcileView> BankStatementsNextToReconcileViews { get; set; }

        public virtual DbSet<BankStatementsPendingJournalEntryView> BankStatementsPendingJournalEntryViews { get; set; }

        public virtual DbSet<BankStatementsReconcilableView> BankStatementsReconcilableViews { get; set; }

        public virtual DbSet<BankStatementsView> BankStatementsViews { get; set; }

        public virtual DbSet<BlacklistCheckResult> BlacklistCheckResults { get; set; }

        public virtual DbSet<BlacklistSource> BlacklistSources { get; set; }

        public virtual DbSet<BookingDimension> BookingDimensions { get; set; }

        public virtual DbSet<BookingDimensionsView> BookingDimensionsViews { get; set; }

        public virtual DbSet<Brand> Brands { get; set; }

        public virtual DbSet<BusinessHour> BusinessHours { get; set; }

        public virtual DbSet<BusinessUnit> BusinessUnits { get; set; }

        public virtual DbSet<BusinessUnit1> BusinessUnits1 { get; set; }

        public virtual DbSet<BusinessUnitsView> BusinessUnitsViews { get; set; }

        public virtual DbSet<CalculationGroup> CalculationGroups { get; set; }

        public virtual DbSet<CalculationGroupHistory> CalculationGroupHistories { get; set; }

        public virtual DbSet<CancelledPurchaseBacklogsView> CancelledPurchaseBacklogsViews { get; set; }

        public virtual DbSet<Chain> Chains { get; set; }

        public virtual DbSet<Claim> Claims { get; set; }

        public virtual DbSet<ClaimDossier> ClaimDossiers { get; set; }

        public virtual DbSet<ClaimDossiersHistory> ClaimDossiersHistories { get; set; }

        public virtual DbSet<ClaimReserf> ClaimReserves { get; set; }

        public virtual DbSet<ClaimReserveAssistancePlan> ClaimReserveAssistancePlans { get; set; }

        public virtual DbSet<ClaimReserveAssistancePlanType> ClaimReserveAssistancePlanTypes { get; set; }

        public virtual DbSet<ClaimReserveClassification> ClaimReserveClassifications { get; set; }

        public virtual DbSet<ClaimReserveLine> ClaimReserveLines { get; set; }

        public virtual DbSet<ClaimReserveLinesView> ClaimReserveLinesViews { get; set; }

        public virtual DbSet<ClaimReservePayment> ClaimReservePayments { get; set; }

        public virtual DbSet<ClaimReservePaymentsCreditableView> ClaimReservePaymentsCreditableViews { get; set; }

        public virtual DbSet<ClaimReservePaymentsView> ClaimReservePaymentsViews { get; set; }

        public virtual DbSet<ClaimReserveService> ClaimReserveServices { get; set; }

        public virtual DbSet<ClaimReserveStatus> ClaimReserveStatuses { get; set; }

        public virtual DbSet<ClaimReserveStatusHistory> ClaimReserveStatusHistories { get; set; }

        public virtual DbSet<ClaimReserveType> ClaimReserveTypes { get; set; }

        public virtual DbSet<ClaimReserveWorkingOrder> ClaimReserveWorkingOrders { get; set; }

        public virtual DbSet<ClaimReservesOnWorkingOrderSelectView> ClaimReservesOnWorkingOrderSelectViews { get; set; }

        public virtual DbSet<ClaimReservesPendingCancellationView> ClaimReservesPendingCancellationViews { get; set; }

        public virtual DbSet<ClaimReservesSelectView> ClaimReservesSelectViews { get; set; }

        public virtual DbSet<ClaimReservesView> ClaimReservesViews { get; set; }

        public virtual DbSet<ClaimReservesWorkingOrderPendingCancellationView> ClaimReservesWorkingOrderPendingCancellationViews { get; set; }

        public virtual DbSet<ClaimsHistory> ClaimsHistories { get; set; }

        public virtual DbSet<Client> Clients { get; set; }

        public virtual DbSet<Client1> Clients1 { get; set; }

        public virtual DbSet<ClientAgent> ClientAgents { get; set; }

        public virtual DbSet<ClientAgent1> ClientAgents1 { get; set; }

        public virtual DbSet<ClientInsuranceProduct> ClientInsuranceProducts { get; set; }

        public virtual DbSet<ClientInvoiceDeliveryMethod> ClientInvoiceDeliveryMethods { get; set; }

        public virtual DbSet<ClientInvoiceRecipient> ClientInvoiceRecipients { get; set; }

        public virtual DbSet<ClientInvoiceRuleMethod> ClientInvoiceRuleMethods { get; set; }

        public virtual DbSet<ClientMandate> ClientMandates { get; set; }

        public virtual DbSet<ClientMandate1> ClientMandates1 { get; set; }

        public virtual DbSet<ClientMandateContractRelation> ClientMandateContractRelations { get; set; }

        public virtual DbSet<ClientMandatesView> ClientMandatesViews { get; set; }

        public virtual DbSet<ClientMapping> ClientMappings { get; set; }

        public virtual DbSet<ClientPreferredSupplier> ClientPreferredSuppliers { get; set; }

        public virtual DbSet<ClientTemplate> ClientTemplates { get; set; }

        public virtual DbSet<ClientsMissingDebtorsView> ClientsMissingDebtorsViews { get; set; }

        public virtual DbSet<ClientsView> ClientsViews { get; set; }

        public virtual DbSet<ClientsView1> ClientsViews1 { get; set; }

        public virtual DbSet<CollectionCode> CollectionCodes { get; set; }

        public virtual DbSet<CollectionCode1> CollectionCodes1 { get; set; }

        public virtual DbSet<Color> Colors { get; set; }

        public virtual DbSet<CombinedDossierAssignmentStatusHistory> CombinedDossierAssignmentStatusHistories { get; set; }

        public virtual DbSet<CombinedDossierStatusHistory> CombinedDossierStatusHistories { get; set; }

        public virtual DbSet<CommunicationType> CommunicationTypes { get; set; }

        public virtual DbSet<CompletedAssistancePlanPendingSalesOrder> CompletedAssistancePlanPendingSalesOrders { get; set; }

        public virtual DbSet<CompletedDossierPendingSalesOrder> CompletedDossierPendingSalesOrders { get; set; }

        public virtual DbSet<ContactPerson> ContactPersons { get; set; }

        public virtual DbSet<ContactPersonType> ContactPersonTypes { get; set; }

        public virtual DbSet<ContactType> ContactTypes { get; set; }

        public virtual DbSet<ContractActivityExecution> ContractActivityExecutions { get; set; }

        public virtual DbSet<ContractActivityOption> ContractActivityOptions { get; set; }

        public virtual DbSet<ContractInsuranceCoverage> ContractInsuranceCoverages { get; set; }

        public virtual DbSet<ContractInsuranceObject> ContractInsuranceObjects { get; set; }

        public virtual DbSet<ContractParty> ContractParties { get; set; }

        public virtual DbSet<ContractWorkActivity> ContractWorkActivities { get; set; }

        public virtual DbSet<ContractsView> ContractsViews { get; set; }

        public virtual DbSet<ConvenantParty> ConvenantParties { get; set; }

        public virtual DbSet<CopyOrganizationContact> CopyOrganizationContacts { get; set; }

        public virtual DbSet<CorrespondenceMethod> CorrespondenceMethods { get; set; }

        public virtual DbSet<CostAgreement> CostAgreements { get; set; }

        public virtual DbSet<CostAgreementType> CostAgreementTypes { get; set; }

        public virtual DbSet<CostCenter> CostCenters { get; set; }

        public virtual DbSet<CostCentersView> CostCentersViews { get; set; }

        public virtual DbSet<CostFeeAgreement> CostFeeAgreements { get; set; }

        public virtual DbSet<CostFeeSettlement> CostFeeSettlements { get; set; }

        public virtual DbSet<CostFeeSettlementLine> CostFeeSettlementLines { get; set; }

        public virtual DbSet<CostOfSale> CostOfSales { get; set; }

        public virtual DbSet<CostOfSalesJournalEntryLine> CostOfSalesJournalEntryLines { get; set; }

        public virtual DbSet<CostOfSalesLine> CostOfSalesLines { get; set; }

        public virtual DbSet<CostOfSalesPendingJournalEntryView> CostOfSalesPendingJournalEntryViews { get; set; }

        public virtual DbSet<CostSettlement> CostSettlements { get; set; }

        public virtual DbSet<CostSettlementLine> CostSettlementLines { get; set; }

        public virtual DbSet<CostSettlementLinesView> CostSettlementLinesViews { get; set; }

        public virtual DbSet<CostType> CostTypes { get; set; }

        public virtual DbSet<CostUnit> CostUnits { get; set; }

        public virtual DbSet<CostUnitsView> CostUnitsViews { get; set; }

        public virtual DbSet<CountriesView> CountriesViews { get; set; }

        public virtual DbSet<Country> Countries { get; set; }

        public virtual DbSet<Country1> Countries1 { get; set; }

        public virtual DbSet<CoverageMapping> CoverageMappings { get; set; }

        public virtual DbSet<CoverageProduct> CoverageProducts { get; set; }

        public virtual DbSet<CoverageProductType> CoverageProductTypes { get; set; }

        public virtual DbSet<CreateVabhondaSalesInvoicesFromDossier> CreateVabhondaSalesInvoicesFromDossiers { get; set; }

        public virtual DbSet<CreditTransfer> CreditTransfers { get; set; }

        public virtual DbSet<CreditTransferDossier> CreditTransferDossiers { get; set; }

        public virtual DbSet<CreditTransferJournalEntryCreationsView> CreditTransferJournalEntryCreationsViews { get; set; }

        public virtual DbSet<CreditTransferJournalEntryLine> CreditTransferJournalEntryLines { get; set; }

        public virtual DbSet<CreditTransferPurchaseInvoice> CreditTransferPurchaseInvoices { get; set; }

        public virtual DbSet<CreditTransferPurchaseInvoicesView> CreditTransferPurchaseInvoicesViews { get; set; }

        public virtual DbSet<CreditTransferReconcilliation> CreditTransferReconcilliations { get; set; }

        public virtual DbSet<CreditTransferRecoveryStatement> CreditTransferRecoveryStatements { get; set; }

        public virtual DbSet<CreditTransferSalesInvoice> CreditTransferSalesInvoices { get; set; }

        public virtual DbSet<CreditTransferStatus> CreditTransferStatuses { get; set; }

        public virtual DbSet<CreditTransferStatusHistory> CreditTransferStatusHistories { get; set; }

        public virtual DbSet<CreditTransfersPayReadyPurchaseInvoicesView> CreditTransfersPayReadyPurchaseInvoicesViews { get; set; }

        public virtual DbSet<CreditTransfersPayReadyView> CreditTransfersPayReadyViews { get; set; }

        public virtual DbSet<CreditTransfersPendingJournalEntryView> CreditTransfersPendingJournalEntryViews { get; set; }

        public virtual DbSet<CreditVabhondaSalesInvoice> CreditVabhondaSalesInvoices { get; set; }

        public virtual DbSet<Creditor> Creditors { get; set; }

        public virtual DbSet<CreditorAccount> CreditorAccounts { get; set; }

        public virtual DbSet<CreditorAttribute> CreditorAttributes { get; set; }

        public virtual DbSet<CreditorOrganizationRelation> CreditorOrganizationRelations { get; set; }

        public virtual DbSet<CreditorStatus> CreditorStatuses { get; set; }

        public virtual DbSet<CreditorStatusHistory> CreditorStatusHistories { get; set; }

        public virtual DbSet<CreditorTemplate> CreditorTemplates { get; set; }

        public virtual DbSet<CreditorsView> CreditorsViews { get; set; }

        public virtual DbSet<CrossBorderClaimDossier> CrossBorderClaimDossiers { get; set; }

        public virtual DbSet<CrossBorderClaimDossiersHistory> CrossBorderClaimDossiersHistories { get; set; }

        public virtual DbSet<CrossBorderClaimDossiersView> CrossBorderClaimDossiersViews { get; set; }

        public virtual DbSet<Currency> Currencies { get; set; }

        public virtual DbSet<CurrencyCountry> CurrencyCountries { get; set; }

        public virtual DbSet<DamageLocation> DamageLocations { get; set; }

        public virtual DbSet<DamageReason> DamageReasons { get; set; }

        public virtual DbSet<DamageReasonCause> DamageReasonCauses { get; set; }

        public virtual DbSet<DamageReasonMapping> DamageReasonMappings { get; set; }

        public virtual DbSet<DamageReasonRelation> DamageReasonRelations { get; set; }

        public virtual DbSet<DamageReasonType> DamageReasonTypes { get; set; }

        public virtual DbSet<Dbaudit> Dbaudits { get; set; }

        public virtual DbSet<DebitSalesOrderToPurchaseMappingView> DebitSalesOrderToPurchaseMappingViews { get; set; }

        public virtual DbSet<Debtor> Debtors { get; set; }

        public virtual DbSet<DebtorAccount> DebtorAccounts { get; set; }

        public virtual DbSet<DebtorAttribute> DebtorAttributes { get; set; }

        public virtual DbSet<DebtorOrganizationRelation> DebtorOrganizationRelations { get; set; }

        public virtual DbSet<DebtorOrganizationRelationsView> DebtorOrganizationRelationsViews { get; set; }

        public virtual DbSet<DebtorOrganizationSummaryStatement> DebtorOrganizationSummaryStatements { get; set; }

        public virtual DbSet<DebtorPaymentConditionsView> DebtorPaymentConditionsViews { get; set; }

        public virtual DbSet<DebtorStatus> DebtorStatuses { get; set; }

        public virtual DbSet<DebtorStatusHistory> DebtorStatusHistories { get; set; }

        public virtual DbSet<DebtorSummaryLayout> DebtorSummaryLayouts { get; set; }

        public virtual DbSet<DebtorTemplate> DebtorTemplates { get; set; }

        public virtual DbSet<DebtorsView> DebtorsViews { get; set; }

        public virtual DbSet<DeedOfAssignmentMapping> DeedOfAssignmentMappings { get; set; }

        public virtual DbSet<DefaultTemplate> DefaultTemplates { get; set; }

        public virtual DbSet<DeliveryMethod> DeliveryMethods { get; set; }

        public virtual DbSet<Department> Departments { get; set; }

        public virtual DbSet<Department1> Departments1 { get; set; }

        public virtual DbSet<DepartmentMapping> DepartmentMappings { get; set; }

        public virtual DbSet<DepartmentOffice> DepartmentOffices { get; set; }

        public virtual DbSet<DepartmentsView> DepartmentsViews { get; set; }

        public virtual DbSet<DitzoPaymentsJournalFooterView> DitzoPaymentsJournalFooterViews { get; set; }

        public virtual DbSet<DitzoPaymentsJournalLinesView> DitzoPaymentsJournalLinesViews { get; set; }

        public virtual DbSet<Document> Documents { get; set; }

        public virtual DbSet<DocumentAttribute> DocumentAttributes { get; set; }

        public virtual DbSet<DocumentAttribute1> DocumentAttributes1 { get; set; }

        public virtual DbSet<DocumentNumber> DocumentNumbers { get; set; }

        public virtual DbSet<DocumentPage> DocumentPages { get; set; }

        public virtual DbSet<DocumentPageAttribute> DocumentPageAttributes { get; set; }

        public virtual DbSet<DocumentType> DocumentTypes { get; set; }

        public virtual DbSet<DocumentTypeDepartment> DocumentTypeDepartments { get; set; }

        public virtual DbSet<DocumentTypeMapping> DocumentTypeMappings { get; set; }

        public virtual DbSet<Dossier> Dossiers { get; set; }

        public virtual DbSet<DossierApproval> DossierApprovals { get; set; }

        public virtual DbSet<DossierApprovalsHistory> DossierApprovalsHistories { get; set; }

        public virtual DbSet<DossierAssignment> DossierAssignments { get; set; }

        public virtual DbSet<DossierAssignmentClosingHistory> DossierAssignmentClosingHistories { get; set; }

        public virtual DbSet<DossierAssignmentClosingHistoryHistory> DossierAssignmentClosingHistoryHistories { get; set; }

        public virtual DbSet<DossierAssignmentCorrectionApproval> DossierAssignmentCorrectionApprovals { get; set; }

        public virtual DbSet<DossierAssignmentCorrectionAuthorization> DossierAssignmentCorrectionAuthorizations { get; set; }

        public virtual DbSet<DossierAssignmentCurrentStatus> DossierAssignmentCurrentStatuses { get; set; }

        public virtual DbSet<DossierAssignmentEmployeeType> DossierAssignmentEmployeeTypes { get; set; }

        public virtual DbSet<DossierAssignmentEmployeeTypesHistory> DossierAssignmentEmployeeTypesHistories { get; set; }

        public virtual DbSet<DossierAssignmentHandlerHistory> DossierAssignmentHandlerHistories { get; set; }

        public virtual DbSet<DossierAssignmentHandlerHistoryHistory> DossierAssignmentHandlerHistoryHistories { get; set; }

        public virtual DbSet<DossierAssignmentInvolvedObject> DossierAssignmentInvolvedObjects { get; set; }

        public virtual DbSet<DossierAssignmentLogHistory> DossierAssignmentLogHistories { get; set; }

        public virtual DbSet<DossierAssignmentNote> DossierAssignmentNotes { get; set; }

        public virtual DbSet<DossierAssignmentNoteRole> DossierAssignmentNoteRoles { get; set; }

        public virtual DbSet<DossierAssignmentNotesHistory> DossierAssignmentNotesHistories { get; set; }

        public virtual DbSet<DossierAssignmentOperationalStatus> DossierAssignmentOperationalStatuses { get; set; }

        public virtual DbSet<DossierAssignmentOperationalStatusHistory> DossierAssignmentOperationalStatusHistories { get; set; }

        public virtual DbSet<DossierAssignmentOperationalStatusType> DossierAssignmentOperationalStatusTypes { get; set; }

        public virtual DbSet<DossierAssignmentPartiesHistory> DossierAssignmentPartiesHistories { get; set; }

        public virtual DbSet<DossierAssignmentParty> DossierAssignmentParties { get; set; }

        public virtual DbSet<DossierAssignmentStatus> DossierAssignmentStatuses { get; set; }

        public virtual DbSet<DossierAssignmentStatusHistory> DossierAssignmentStatusHistories { get; set; }

        public virtual DbSet<DossierAssignmentStatusHistoryHistory> DossierAssignmentStatusHistoryHistories { get; set; }

        public virtual DbSet<DossierAssignmentStatusType> DossierAssignmentStatusTypes { get; set; }

        public virtual DbSet<DossierAssignmentStatusTypesHistory> DossierAssignmentStatusTypesHistories { get; set; }

        public virtual DbSet<DossierAssignmentStatusesHistory> DossierAssignmentStatusesHistories { get; set; }

        public virtual DbSet<DossierAssignmentType> DossierAssignmentTypes { get; set; }

        public virtual DbSet<DossierAssignmentTypesHistory> DossierAssignmentTypesHistories { get; set; }

        public virtual DbSet<DossierAssignmentView> DossierAssignmentViews { get; set; }

        public virtual DbSet<DossierAssignmentVisitInformation> DossierAssignmentVisitInformations { get; set; }

        public virtual DbSet<DossierAssignmentVisitInformationsHistory> DossierAssignmentVisitInformationsHistories { get; set; }

        public virtual DbSet<DossierAssignmentsHistory> DossierAssignmentsHistories { get; set; }

        public virtual DbSet<DossierAssignmentsSearchView> DossierAssignmentsSearchViews { get; set; }

        public virtual DbSet<DossierAssignmentsView> DossierAssignmentsViews { get; set; }

        public virtual DbSet<DossierAttachment> DossierAttachments { get; set; }

        public virtual DbSet<DossierAuthorization> DossierAuthorizations { get; set; }

        public virtual DbSet<DossierAuthorizationsHistory> DossierAuthorizationsHistories { get; set; }

        public virtual DbSet<DossierAuthorizationsView> DossierAuthorizationsViews { get; set; }

        public virtual DbSet<DossierAuthorizationsWithoutApprovalsView> DossierAuthorizationsWithoutApprovalsViews { get; set; }

        public virtual DbSet<DossierClientHandlerHistory> DossierClientHandlerHistories { get; set; }

        public virtual DbSet<DossierClientHandlerHistoryHistory> DossierClientHandlerHistoryHistories { get; set; }

        public virtual DbSet<DossierClosingHistoriesView> DossierClosingHistoriesViews { get; set; }

        public virtual DbSet<DossierClosingHistory> DossierClosingHistories { get; set; }

        public virtual DbSet<DossierClosingHistoryHistory> DossierClosingHistoryHistories { get; set; }

        public virtual DbSet<DossierContactPerson> DossierContactPersons { get; set; }

        public virtual DbSet<DossierContactPersonsHistory> DossierContactPersonsHistories { get; set; }

        public virtual DbSet<DossierCostType> DossierCostTypes { get; set; }

        public virtual DbSet<DossierCostTypesHistory> DossierCostTypesHistories { get; set; }

        public virtual DbSet<DossierFeeSalesOrdersView> DossierFeeSalesOrdersViews { get; set; }

        public virtual DbSet<DossierHandler> DossierHandlers { get; set; }

        public virtual DbSet<DossierHandlersHistory> DossierHandlersHistories { get; set; }

        public virtual DbSet<DossierInsuree> DossierInsurees { get; set; }

        public virtual DbSet<DossierInsureesHistory> DossierInsureesHistories { get; set; }

        public virtual DbSet<DossierLine> DossierLines { get; set; }

        public virtual DbSet<DossierLinesHistory> DossierLinesHistories { get; set; }

        public virtual DbSet<DossierLogHistory> DossierLogHistories { get; set; }

        public virtual DbSet<DossierLogHistoryHistory> DossierLogHistoryHistories { get; set; }

        public virtual DbSet<DossierNote> DossierNotes { get; set; }

        public virtual DbSet<DossierOperationalStatus> DossierOperationalStatuses { get; set; }

        public virtual DbSet<DossierOperationalStatusHistory> DossierOperationalStatusHistories { get; set; }

        public virtual DbSet<DossierOperationalStatusType> DossierOperationalStatusTypes { get; set; }

        public virtual DbSet<DossierPartiesHistory> DossierPartiesHistories { get; set; }

        public virtual DbSet<DossierPartiesView> DossierPartiesViews { get; set; }

        public virtual DbSet<DossierParty> DossierParties { get; set; }

        public virtual DbSet<DossierPartyInvolvedCoverage> DossierPartyInvolvedCoverages { get; set; }

        public virtual DbSet<DossierPartyObjectRelation> DossierPartyObjectRelations { get; set; }

        public virtual DbSet<DossierPartyObjectRelationsHistory> DossierPartyObjectRelationsHistories { get; set; }

        public virtual DbSet<DossierPartyObjectsView> DossierPartyObjectsViews { get; set; }

        public virtual DbSet<DossierPartyRole> DossierPartyRoles { get; set; }

        public virtual DbSet<DossierPartyRolesHistory> DossierPartyRolesHistories { get; set; }

        public virtual DbSet<DossierPendingFeeSalesInvoicesView> DossierPendingFeeSalesInvoicesViews { get; set; }

        public virtual DbSet<DossierPendingFeeSalesOrdersView> DossierPendingFeeSalesOrdersViews { get; set; }

        public virtual DbSet<DossierPrioritiesHistory> DossierPrioritiesHistories { get; set; }

        public virtual DbSet<DossierPriority> DossierPriorities { get; set; }

        public virtual DbSet<DossierStatus> DossierStatuses { get; set; }

        public virtual DbSet<DossierStatusApplication> DossierStatusApplications { get; set; }

        public virtual DbSet<DossierStatusApplicationsHistory> DossierStatusApplicationsHistories { get; set; }

        public virtual DbSet<DossierStatusHistory> DossierStatusHistories { get; set; }

        public virtual DbSet<DossierStatusHistoryHistory> DossierStatusHistoryHistories { get; set; }

        public virtual DbSet<DossierStatusType> DossierStatusTypes { get; set; }

        public virtual DbSet<DossierStatusTypesHistory> DossierStatusTypesHistories { get; set; }

        public virtual DbSet<DossierStatusesHistory> DossierStatusesHistories { get; set; }

        public virtual DbSet<DossierSummaryInfo> DossierSummaryInfos { get; set; }

        public virtual DbSet<DossierSummaryView> DossierSummaryViews { get; set; }

        public virtual DbSet<DossierType> DossierTypes { get; set; }

        public virtual DbSet<DossierTypesHistory> DossierTypesHistories { get; set; }

        public virtual DbSet<DossierWorkActivitiesHistory> DossierWorkActivitiesHistories { get; set; }

        public virtual DbSet<DossierWorkActivitiesInvoiceableView> DossierWorkActivitiesInvoiceableViews { get; set; }

        public virtual DbSet<DossierWorkActivitiesView> DossierWorkActivitiesViews { get; set; }

        public virtual DbSet<DossierWorkActivitiesWithoutFeeSalesOrdersView> DossierWorkActivitiesWithoutFeeSalesOrdersViews { get; set; }

        public virtual DbSet<DossierWorkActivity> DossierWorkActivities { get; set; }

        public virtual DbSet<DossierWorkActivityCoveragesView> DossierWorkActivityCoveragesViews { get; set; }

        public virtual DbSet<DossierWorkActivityTrigger> DossierWorkActivityTriggers { get; set; }

        public virtual DbSet<DossierWorkActivityTriggerType> DossierWorkActivityTriggerTypes { get; set; }

        public virtual DbSet<DossiersHistory> DossiersHistories { get; set; }

        public virtual DbSet<DossiersSearchView> DossiersSearchViews { get; set; }

        public virtual DbSet<DossiersUnifiedView> DossiersUnifiedViews { get; set; }

        public virtual DbSet<DossiersView> DossiersViews { get; set; }

        public virtual DbSet<DossiersView1> DossiersViews1 { get; set; }

        public virtual DbSet<DraftApproval> DraftApprovals { get; set; }

        public virtual DbSet<DraftForm> DraftForms { get; set; }

        public virtual DbSet<DraftSelection> DraftSelections { get; set; }

        public virtual DbSet<DraftSuppliersCountView> DraftSuppliersCountViews { get; set; }

        public virtual DbSet<DraftUpload> DraftUploads { get; set; }

        public virtual DbSet<EdiStatus> EdiStatuses { get; set; }

        public virtual DbSet<Employee> Employees { get; set; }

        public virtual DbSet<EmployeeAuthorization> EmployeeAuthorizations { get; set; }

        public virtual DbSet<EmployeeAuthorizationGroupsView> EmployeeAuthorizationGroupsViews { get; set; }

        public virtual DbSet<EmployeeAuthorizationsOptimizedView> EmployeeAuthorizationsOptimizedViews { get; set; }

        public virtual DbSet<EmployeeAuthorizationsView> EmployeeAuthorizationsViews { get; set; }

        public virtual DbSet<EmployeeAuthorizationsViewEmployeeIdAuthorizationRoleId> EmployeeAuthorizationsViewEmployeeIdAuthorizationRoleIds { get; set; }

        public virtual DbSet<EmployeeAuthorizationsViewUnionAll> EmployeeAuthorizationsViewUnionAlls { get; set; }

        public virtual DbSet<EmployeeAuthorizationsViewUnionAllEmployeeIdAuthorizationRoleId> EmployeeAuthorizationsViewUnionAllEmployeeIdAuthorizationRoleIds { get; set; }

        public virtual DbSet<EmployeeMapping> EmployeeMappings { get; set; }

        public virtual DbSet<EmployeeSkill> EmployeeSkills { get; set; }

        public virtual DbSet<EmployeeTeam> EmployeeTeams { get; set; }

        public virtual DbSet<EmployeesView> EmployeesViews { get; set; }

        public virtual DbSet<EnumProperty> EnumProperties { get; set; }

        public virtual DbSet<EuropeanUnionCountry> EuropeanUnionCountries { get; set; }

        public virtual DbSet<ExactAccountCategory> ExactAccountCategories { get; set; }

        public virtual DbSet<ExactGlobeLegalEntity> ExactGlobeLegalEntities { get; set; }

        public virtual DbSet<ExchangeAskRatesView> ExchangeAskRatesViews { get; set; }

        public virtual DbSet<ExchangeBidRatesView> ExchangeBidRatesViews { get; set; }

        public virtual DbSet<ExchangeConversionRatesView> ExchangeConversionRatesViews { get; set; }

        public virtual DbSet<ExchangeMidRatesView> ExchangeMidRatesViews { get; set; }

        public virtual DbSet<ExchangePendingExportsView> ExchangePendingExportsViews { get; set; }

        public virtual DbSet<ExchangePendingRetrievalView> ExchangePendingRetrievalViews { get; set; }

        public virtual DbSet<ExchangeRate> ExchangeRates { get; set; }

        public virtual DbSet<ExchangeRateCurrency> ExchangeRateCurrencies { get; set; }

        public virtual DbSet<ExchangeRateExport> ExchangeRateExports { get; set; }

        public virtual DbSet<ExchangeRateExportSystem> ExchangeRateExportSystems { get; set; }

        public virtual DbSet<ExchangeRateExportSystemLine> ExchangeRateExportSystemLines { get; set; }

        public virtual DbSet<ExchangeRateProvider> ExchangeRateProviders { get; set; }

        public virtual DbSet<ExchangeRateType> ExchangeRateTypes { get; set; }

        public virtual DbSet<ExchangeRatesExactView> ExchangeRatesExactViews { get; set; }

        public virtual DbSet<ExchangeRatesExactView1> ExchangeRatesExactViews1 { get; set; }

        public virtual DbSet<ExchangeRatesView> ExchangeRatesViews { get; set; }

        public virtual DbSet<ExportGrid658e72a5E0d34144B445Abd2a8d806fa> ExportGrid658e72a5E0d34144B445Abd2a8d806fas { get; set; }

        public virtual DbSet<ExportService> ExportServices { get; set; }

        public virtual DbSet<ExternalMaterial> ExternalMaterials { get; set; }

        public virtual DbSet<FailedExactExportCreditorsView> FailedExactExportCreditorsViews { get; set; }

        public virtual DbSet<FailedExactExportDebtorsView> FailedExactExportDebtorsViews { get; set; }

        public virtual DbSet<FailedExactExportJournalEntriesView> FailedExactExportJournalEntriesViews { get; set; }

        public virtual DbSet<FailedQueueMessage> FailedQueueMessages { get; set; }

        public virtual DbSet<FeeAgreement> FeeAgreements { get; set; }

        public virtual DbSet<FeeAgreementType> FeeAgreementTypes { get; set; }

        public virtual DbSet<FeeAgreementsView> FeeAgreementsViews { get; set; }

        public virtual DbSet<FeeSettlement> FeeSettlements { get; set; }

        public virtual DbSet<FeeSettlementLine> FeeSettlementLines { get; set; }

        public virtual DbSet<FeeSettlementLineOperationalClient> FeeSettlementLineOperationalClients { get; set; }

        public virtual DbSet<FeeSettlementReportingFormOption> FeeSettlementReportingFormOptions { get; set; }

        public virtual DbSet<FeeSettlementStatus> FeeSettlementStatuses { get; set; }

        public virtual DbSet<FeeSettlementStatusHistory> FeeSettlementStatusHistories { get; set; }

        public virtual DbSet<FeeSettlementStatusType> FeeSettlementStatusTypes { get; set; }

        public virtual DbSet<FeeSettlementsView> FeeSettlementsViews { get; set; }

        public virtual DbSet<FinancialBookingPeriod> FinancialBookingPeriods { get; set; }

        public virtual DbSet<FiscalEntity> FiscalEntities { get; set; }

        public virtual DbSet<FixedCostAgreement> FixedCostAgreements { get; set; }

        public virtual DbSet<FixedFeeAgreement> FixedFeeAgreements { get; set; }

        public virtual DbSet<FixedSalesAgreement> FixedSalesAgreements { get; set; }

        public virtual DbSet<FlsdispatcherLog> FlsdispatcherLogs { get; set; }

        public virtual DbSet<FollowTheGenerationOfReverseBillingView> FollowTheGenerationOfReverseBillingViews { get; set; }

        public virtual DbSet<FraudDetectionLog> FraudDetectionLogs { get; set; }

        public virtual DbSet<Fuel> Fuels { get; set; }

        public virtual DbSet<FuelType> FuelTypes { get; set; }

        public virtual DbSet<FuelTypesHistory> FuelTypesHistories { get; set; }

        public virtual DbSet<FundingsPayment> FundingsPayments { get; set; }

        public virtual DbSet<FundingsPaymentStatus> FundingsPaymentStatuses { get; set; }

        public virtual DbSet<FundingsPaymentStatusHistory> FundingsPaymentStatusHistories { get; set; }

        public virtual DbSet<FundingsPaymentsView> FundingsPaymentsViews { get; set; }

        public virtual DbSet<Gender> Genders { get; set; }

        public virtual DbSet<GeneralCreditor> GeneralCreditors { get; set; }

        public virtual DbSet<GeneralCreditorsView> GeneralCreditorsViews { get; set; }

        public virtual DbSet<GeneralJournalEntriesExactView> GeneralJournalEntriesExactViews { get; set; }

        public virtual DbSet<GeneralJournalEntryLinesExactView> GeneralJournalEntryLinesExactViews { get; set; }

        public virtual DbSet<GeneralLedger> GeneralLedgers { get; set; }

        public virtual DbSet<GeneralLedgerBalancesView> GeneralLedgerBalancesViews { get; set; }

        public virtual DbSet<GeneralLedgerSuspendedBalancesView> GeneralLedgerSuspendedBalancesViews { get; set; }

        public virtual DbSet<GeneralLedgersView> GeneralLedgersViews { get; set; }

        public virtual DbSet<GreenCardOffice> GreenCardOffices { get; set; }

        public virtual DbSet<GreenCardOfficeCountry> GreenCardOfficeCountries { get; set; }

        public virtual DbSet<HandlingCountry> HandlingCountries { get; set; }

        public virtual DbSet<HandlingType> HandlingTypes { get; set; }

        public virtual DbSet<HierarchyType> HierarchyTypes { get; set; }

        public virtual DbSet<HierarchyType1> HierarchyTypes1 { get; set; }

        public virtual DbSet<HourlyFeeAgreement> HourlyFeeAgreements { get; set; }

        public virtual DbSet<IbanCountry> IbanCountries { get; set; }

        public virtual DbSet<InputMethod> InputMethods { get; set; }

        public virtual DbSet<InsuranceCoverage> InsuranceCoverages { get; set; }

        public virtual DbSet<InsuranceCoverageHierarchy> InsuranceCoverageHierarchies { get; set; }

        public virtual DbSet<InsuranceCoverageType> InsuranceCoverageTypes { get; set; }

        public virtual DbSet<InsuranceCoveragesHierarchyView> InsuranceCoveragesHierarchyViews { get; set; }

        public virtual DbSet<InsuranceObject> InsuranceObjects { get; set; }

        public virtual DbSet<InsuranceObjectDamageLocation> InsuranceObjectDamageLocations { get; set; }

        public virtual DbSet<InsuranceObjectExternalMaterial> InsuranceObjectExternalMaterials { get; set; }

        public virtual DbSet<InsuranceObjectHierarchy> InsuranceObjectHierarchies { get; set; }

        public virtual DbSet<InsuranceObjectRoofCovering> InsuranceObjectRoofCoverings { get; set; }

        public virtual DbSet<InsuranceObjectType> InsuranceObjectTypes { get; set; }

        public virtual DbSet<InsurancePoliciesCorrectionApproval> InsurancePoliciesCorrectionApprovals { get; set; }

        public virtual DbSet<InsurancePoliciesCorrectionAuthorization> InsurancePoliciesCorrectionAuthorizations { get; set; }

        public virtual DbSet<InsurancePoliciesHistory> InsurancePoliciesHistories { get; set; }

        public virtual DbSet<InsurancePoliciesView> InsurancePoliciesViews { get; set; }

        public virtual DbSet<InsurancePolicy> InsurancePolicies { get; set; }

        public virtual DbSet<InsurancePolicyClientsView> InsurancePolicyClientsViews { get; set; }

        public virtual DbSet<InsurancePolicyCreditableSalesOrdersView> InsurancePolicyCreditableSalesOrdersViews { get; set; }

        public virtual DbSet<InsuranceProductType> InsuranceProductTypes { get; set; }

        public virtual DbSet<InsuranceProductTypesHistory> InsuranceProductTypesHistories { get; set; }

        public virtual DbSet<Insurer> Insurers { get; set; }

        public virtual DbSet<Insurer1> Insurers1 { get; set; }

        public virtual DbSet<InsurerAlarmCenter> InsurerAlarmCenters { get; set; }

        public virtual DbSet<InsurerAlarmCenter1> InsurerAlarmCenters1 { get; set; }

        public virtual DbSet<InsurersView> InsurersViews { get; set; }

        public virtual DbSet<InsurersViewWithContactInformation> InsurersViewWithContactInformations { get; set; }

        public virtual DbSet<IntakeMethodMapping> IntakeMethodMappings { get; set; }

        public virtual DbSet<InternationalAssistanceGroup> InternationalAssistanceGroups { get; set; }

        public virtual DbSet<InternationalAssistanceGroup1> InternationalAssistanceGroups1 { get; set; }

        public virtual DbSet<InternationalAssistanceGroupType> InternationalAssistanceGroupTypes { get; set; }

        public virtual DbSet<InvoiceAttributeType> InvoiceAttributeTypes { get; set; }

        public virtual DbSet<InvoiceDeliveryMethod> InvoiceDeliveryMethods { get; set; }

        public virtual DbSet<InvoiceDeliveryMethodType> InvoiceDeliveryMethodTypes { get; set; }

        public virtual DbSet<InvoicePriorityType> InvoicePriorityTypes { get; set; }

        public virtual DbSet<InvoiceRuleType> InvoiceRuleTypes { get; set; }

        public virtual DbSet<InvoiceType> InvoiceTypes { get; set; }

        public virtual DbSet<InvoiceTypesView> InvoiceTypesViews { get; set; }

        public virtual DbSet<InvoiceablePurchaseInvoicesView> InvoiceablePurchaseInvoicesViews { get; set; }

        public virtual DbSet<InvolvedComponent> InvolvedComponents { get; set; }

        public virtual DbSet<InvolvedComponentsHistory> InvolvedComponentsHistories { get; set; }

        public virtual DbSet<InvolvedCoverage> InvolvedCoverages { get; set; }

        public virtual DbSet<InvolvedCoverageObjectRelation> InvolvedCoverageObjectRelations { get; set; }

        public virtual DbSet<InvolvedCoverageObjectRelationsHistory> InvolvedCoverageObjectRelationsHistories { get; set; }

        public virtual DbSet<InvolvedCoverageObjectsView> InvolvedCoverageObjectsViews { get; set; }

        public virtual DbSet<InvolvedCoverageProductsView> InvolvedCoverageProductsViews { get; set; }

        public virtual DbSet<InvolvedCoveragesHistory> InvolvedCoveragesHistories { get; set; }

        public virtual DbSet<InvolvedCoveragesView> InvolvedCoveragesViews { get; set; }

        public virtual DbSet<InvolvedObject> InvolvedObjects { get; set; }

        public virtual DbSet<InvolvedObjectDamageLocation> InvolvedObjectDamageLocations { get; set; }

        public virtual DbSet<InvolvedObjectDamageLocationsHistory> InvolvedObjectDamageLocationsHistories { get; set; }

        public virtual DbSet<InvolvedObjectsHistory> InvolvedObjectsHistories { get; set; }

        public virtual DbSet<InvolvedObjectsView> InvolvedObjectsViews { get; set; }

        public virtual DbSet<InvolvedPartiesHistory> InvolvedPartiesHistories { get; set; }

        public virtual DbSet<InvolvedPartiesView> InvolvedPartiesViews { get; set; }

        public virtual DbSet<InvolvedParty> InvolvedParties { get; set; }

        public virtual DbSet<Job> Jobs { get; set; }

        public virtual DbSet<Journal> Journals { get; set; }

        public virtual DbSet<JournalBalancesView> JournalBalancesViews { get; set; }

        public virtual DbSet<JournalEntriesPendingExportView> JournalEntriesPendingExportViews { get; set; }

        public virtual DbSet<JournalEntriesPendingExportViewOld> JournalEntriesPendingExportViewOlds { get; set; }

        public virtual DbSet<JournalEntriesSuspendedView> JournalEntriesSuspendedViews { get; set; }

        public virtual DbSet<JournalEntriesView> JournalEntriesViews { get; set; }

        public virtual DbSet<JournalEntry> JournalEntries { get; set; }

        public virtual DbSet<JournalEntryLine> JournalEntryLines { get; set; }

        public virtual DbSet<JournalEntryLinesView> JournalEntryLinesViews { get; set; }

        public virtual DbSet<JournalEntryStatus> JournalEntryStatuses { get; set; }

        public virtual DbSet<JournalEntryStatusHistory> JournalEntryStatusHistories { get; set; }

        public virtual DbSet<JournalGeneralLedgerBalancesView> JournalGeneralLedgerBalancesViews { get; set; }

        public virtual DbSet<JournalSetting> JournalSettings { get; set; }

        public virtual DbSet<JournalSettingType> JournalSettingTypes { get; set; }

        public virtual DbSet<JournalType> JournalTypes { get; set; }

        public virtual DbSet<JournalsView> JournalsViews { get; set; }

        public virtual DbSet<KeyPerformanceIndicatorTrigger> KeyPerformanceIndicatorTriggers { get; set; }

        public virtual DbSet<KpiLog> KpiLogs { get; set; }

        public virtual DbSet<LatestBankStatementsView> LatestBankStatementsViews { get; set; }

        public virtual DbSet<LcmexpiredPurchaseOrdersView> LcmexpiredPurchaseOrdersViews { get; set; }

        public virtual DbSet<LeasingCompany> LeasingCompanies { get; set; }

        public virtual DbSet<LeasingCompanyAlarmCenter> LeasingCompanyAlarmCenters { get; set; }

        public virtual DbSet<LedgerSetting> LedgerSettings { get; set; }

        public virtual DbSet<LegalEntitiesView> LegalEntitiesViews { get; set; }

        public virtual DbSet<LegalEntity> LegalEntities { get; set; }

        public virtual DbSet<LegalEntity1> LegalEntities1 { get; set; }

        public virtual DbSet<LegalEntityAccount> LegalEntityAccounts { get; set; }

        public virtual DbSet<LegalEntityPaymentMethod> LegalEntityPaymentMethods { get; set; }

        public virtual DbSet<LegalEntityTaxCategory> LegalEntityTaxCategories { get; set; }

        public virtual DbSet<LegalEntityType> LegalEntityTypes { get; set; }

        public virtual DbSet<LiabilityStatus> LiabilityStatuses { get; set; }

        public virtual DbSet<LiabilityStatusHistory> LiabilityStatusHistories { get; set; }

        public virtual DbSet<LiabilityStatusHistoryHistory> LiabilityStatusHistoryHistories { get; set; }

        public virtual DbSet<LiabilityStatusesHistory> LiabilityStatusesHistories { get; set; }

        public virtual DbSet<LiablePartiesHistory> LiablePartiesHistories { get; set; }

        public virtual DbSet<LiableParty> LiableParties { get; set; }

        public virtual DbSet<LocalizableEntry> LocalizableEntries { get; set; }

        public virtual DbSet<LocalizableEntry1> LocalizableEntries1 { get; set; }

        public virtual DbSet<LocalizableType> LocalizableTypes { get; set; }

        public virtual DbSet<LocalizableType1> LocalizableTypes1 { get; set; }

        public virtual DbSet<LocalizedEntry> LocalizedEntries { get; set; }

        public virtual DbSet<LocalizedEntry1> LocalizedEntries1 { get; set; }

        public virtual DbSet<LocationTaxCode> LocationTaxCodes { get; set; }

        public virtual DbSet<LocationTaxRate> LocationTaxRates { get; set; }

        public virtual DbSet<LocationType> LocationTypes { get; set; }

        public virtual DbSet<LocationTypesHistory> LocationTypesHistories { get; set; }

        public virtual DbSet<LogHistoryType> LogHistoryTypes { get; set; }

        public virtual DbSet<LogHistoryTypesHistory> LogHistoryTypesHistories { get; set; }

        public virtual DbSet<MainContract> MainContracts { get; set; }

        public virtual DbSet<Mandate> Mandates { get; set; }

        public virtual DbSet<Mandate1> Mandates1 { get; set; }

        public virtual DbSet<MandateAlarmCenter> MandateAlarmCenters { get; set; }

        public virtual DbSet<MandateAlarmCenter1> MandateAlarmCenters1 { get; set; }

        public virtual DbSet<MandatesView> MandatesViews { get; set; }

        public virtual DbSet<MandatesViewWithContactInformation> MandatesViewWithContactInformations { get; set; }

        public virtual DbSet<MappingCostCenter> MappingCostCenters { get; set; }

        public virtual DbSet<MappingCostCentersView> MappingCostCentersViews { get; set; }

        public virtual DbSet<MappingJournal> MappingJournals { get; set; }

        public virtual DbSet<MappingLedger> MappingLedgers { get; set; }

        public virtual DbSet<MappingPaymentCondition> MappingPaymentConditions { get; set; }

        public virtual DbSet<MappingPaymentConditionsView> MappingPaymentConditionsViews { get; set; }

        public virtual DbSet<MappingPurchaseLedgerSetting> MappingPurchaseLedgerSettings { get; set; }

        public virtual DbSet<MedicalDossier> MedicalDossiers { get; set; }

        public virtual DbSet<MedicalDossiersHistory> MedicalDossiersHistories { get; set; }

        public virtual DbSet<MedicalDossiersView> MedicalDossiersViews { get; set; }

        public virtual DbSet<MeterReadingDetermined> MeterReadingDetermineds { get; set; }

        public virtual DbSet<MeterReadingQuantity> MeterReadingQuantities { get; set; }

        public virtual DbSet<MissingSalesOrderApprovalMessage> MissingSalesOrderApprovalMessages { get; set; }

        public virtual DbSet<Model> Models { get; set; }

        public virtual DbSet<ModelProduct> ModelProducts { get; set; }

        public virtual DbSet<ModelSpecification> ModelSpecifications { get; set; }

        public virtual DbSet<MostCommonReporter> MostCommonReporters { get; set; }

        public virtual DbSet<NewTable> NewTables { get; set; }

        public virtual DbSet<NextNumber> NextNumbers { get; set; }

        public virtual DbSet<Nextnumbervalue> Nextnumbervalues { get; set; }

        public virtual DbSet<NotCreatedPurchaseOrdersView> NotCreatedPurchaseOrdersViews { get; set; }

        public virtual DbSet<NoteType> NoteTypes { get; set; }

        public virtual DbSet<NoteTypesHistory> NoteTypesHistories { get; set; }

        public virtual DbSet<ObjectClassification> ObjectClassifications { get; set; }

        public virtual DbSet<ObjectMapping> ObjectMappings { get; set; }

        public virtual DbSet<Office> Offices { get; set; }

        public virtual DbSet<OrganizationAccount> OrganizationAccounts { get; set; }

        public virtual DbSet<OrganizationAccount1> OrganizationAccounts1 { get; set; }

        public virtual DbSet<OrganizationAccountAttachment> OrganizationAccountAttachments { get; set; }

        public virtual DbSet<OrganizationAccountValidation> OrganizationAccountValidations { get; set; }

        public virtual DbSet<OrganizationAccountsApprovalsCountView> OrganizationAccountsApprovalsCountViews { get; set; }

        public virtual DbSet<OrganizationAddress> OrganizationAddresses { get; set; }

        public virtual DbSet<OrganizationAddress1> OrganizationAddresses1 { get; set; }

        public virtual DbSet<OrganizationApplication> OrganizationApplications { get; set; }

        public virtual DbSet<OrganizationApplication1> OrganizationApplications1 { get; set; }

        public virtual DbSet<OrganizationBankAccountsView> OrganizationBankAccountsViews { get; set; }

        public virtual DbSet<OrganizationCode> OrganizationCodes { get; set; }

        public virtual DbSet<OrganizationCode1> OrganizationCodes1 { get; set; }

        public virtual DbSet<OrganizationCodeType> OrganizationCodeTypes { get; set; }

        public virtual DbSet<OrganizationCodeType1> OrganizationCodeTypes1 { get; set; }

        public virtual DbSet<OrganizationContact> OrganizationContacts { get; set; }

        public virtual DbSet<OrganizationCoverageProduct> OrganizationCoverageProducts { get; set; }

        public virtual DbSet<OrganizationCoverageProductsExtension> OrganizationCoverageProductsExtensions { get; set; }

        public virtual DbSet<OrganizationGroup> OrganizationGroups { get; set; }

        public virtual DbSet<OrganizationGroup1> OrganizationGroups1 { get; set; }

        public virtual DbSet<OrganizationHierarchy> OrganizationHierarchies { get; set; }

        public virtual DbSet<OrganizationHierarchy1> OrganizationHierarchies1 { get; set; }

        public virtual DbSet<OrganizationHierarchyView> OrganizationHierarchyViews { get; set; }

        public virtual DbSet<OrganizationLabel> OrganizationLabels { get; set; }

        public virtual DbSet<OrganizationLabel1> OrganizationLabels1 { get; set; }

        public virtual DbSet<OrganizationLabelType> OrganizationLabelTypes { get; set; }

        public virtual DbSet<OrganizationLabelType1> OrganizationLabelTypes1 { get; set; }

        public virtual DbSet<OrganizationNote> OrganizationNotes { get; set; }

        public virtual DbSet<OrganizationNote1> OrganizationNotes1 { get; set; }

        public virtual DbSet<OrganizationPaymentCondition> OrganizationPaymentConditions { get; set; }

        public virtual DbSet<OrganizationPaymentMethod> OrganizationPaymentMethods { get; set; }

        public virtual DbSet<OrganizationTaxCode> OrganizationTaxCodes { get; set; }

        public virtual DbSet<OrganizationType> OrganizationTypes { get; set; }

        public virtual DbSet<OrganizationType1> OrganizationTypes1 { get; set; }

        public virtual DbSet<OrganizationUnit> OrganizationUnits { get; set; }

        public virtual DbSet<OrganizationUnit1> OrganizationUnits1 { get; set; }

        public virtual DbSet<OrganizationUnitValidationStatus> OrganizationUnitValidationStatuses { get; set; }

        public virtual DbSet<OrganizationUnitValidationStatus1> OrganizationUnitValidationStatuses1 { get; set; }

        public virtual DbSet<OrganizationUnitValidationStatusHistory> OrganizationUnitValidationStatusHistories { get; set; }

        public virtual DbSet<OrganizationUnitValidationStatusHistory1> OrganizationUnitValidationStatusHistories1 { get; set; }

        public virtual DbSet<OrganizationUnitsView> OrganizationUnitsViews { get; set; }

        public virtual DbSet<OrganizationUnitsViewWithContactInformation> OrganizationUnitsViewWithContactInformations { get; set; }

        public virtual DbSet<OrganizationUnitsWithCurrentStatus> OrganizationUnitsWithCurrentStatuses { get; set; }

        public virtual DbSet<OrganizationUnitsWithCurrentStatusInnerSelect> OrganizationUnitsWithCurrentStatusInnerSelects { get; set; }

        public virtual DbSet<OrganizationUnitsWithCurrentStatusOuterApply> OrganizationUnitsWithCurrentStatusOuterApplies { get; set; }

        public virtual DbSet<OrganizationVatRegistration> OrganizationVatRegistrations { get; set; }

        public virtual DbSet<OrganizationVatValidation> OrganizationVatValidations { get; set; }

        public virtual DbSet<Origin> Origins { get; set; }

        public virtual DbSet<OriginsHistory> OriginsHistories { get; set; }

        public virtual DbSet<OvsCode> OvsCodes { get; set; }

        public virtual DbSet<OvsDeregistrationReason> OvsDeregistrationReasons { get; set; }

        public virtual DbSet<OvsLiabilityPercentage> OvsLiabilityPercentages { get; set; }

        public virtual DbSet<OvsMessageIncoming> OvsMessageIncomings { get; set; }

        public virtual DbSet<OvsMessageOutgoing> OvsMessageOutgoings { get; set; }

        public virtual DbSet<OvsMessageStatus> OvsMessageStatuses { get; set; }

        public virtual DbSet<OvsMessageType> OvsMessageTypes { get; set; }

        public virtual DbSet<OvsPayment> OvsPayments { get; set; }

        public virtual DbSet<OvsRegre> OvsRegres { get; set; }

        public virtual DbSet<OvsRegresStatus> OvsRegresStatuses { get; set; }

        public virtual DbSet<OvsStatus> OvsStatuses { get; set; }

        public virtual DbSet<PacxHistoryView> PacxHistoryViews { get; set; }

        public virtual DbSet<PacxView> PacxViews { get; set; }

        public virtual DbSet<PaintType> PaintTypes { get; set; }

        public virtual DbSet<Partner> Partners { get; set; }

        public virtual DbSet<Partner1> Partners1 { get; set; }

        public virtual DbSet<PartyRoleMapping> PartyRoleMappings { get; set; }

        public virtual DbSet<Payment> Payments { get; set; }

        public virtual DbSet<PaymentBatch> PaymentBatches { get; set; }

        public virtual DbSet<PaymentBatchCreditorsView> PaymentBatchCreditorsViews { get; set; }

        public virtual DbSet<PaymentBatchLine> PaymentBatchLines { get; set; }

        public virtual DbSet<PaymentBatchLinesReconciliationsView> PaymentBatchLinesReconciliationsViews { get; set; }

        public virtual DbSet<PaymentBatchLinesView> PaymentBatchLinesViews { get; set; }

        public virtual DbSet<PaymentBatchSuppliersView> PaymentBatchSuppliersViews { get; set; }

        public virtual DbSet<PaymentBatchesPendingJournalEntryView> PaymentBatchesPendingJournalEntryViews { get; set; }

        public virtual DbSet<PaymentBatchesView> PaymentBatchesViews { get; set; }

        public virtual DbSet<PaymentCondition> PaymentConditions { get; set; }

        public virtual DbSet<PaymentConditionsView> PaymentConditionsViews { get; set; }

        public virtual DbSet<PaymentCurrency> PaymentCurrencies { get; set; }

        public virtual DbSet<PaymentMethod> PaymentMethods { get; set; }

        public virtual DbSet<PaymentMethodsView> PaymentMethodsViews { get; set; }

        public virtual DbSet<PaymentStatus> PaymentStatuses { get; set; }

        public virtual DbSet<PaymentStatusHistory> PaymentStatusHistories { get; set; }

        public virtual DbSet<PaymentStatusHistoryHistory> PaymentStatusHistoryHistories { get; set; }

        public virtual DbSet<PaymentStatusesHistory> PaymentStatusesHistories { get; set; }

        public virtual DbSet<PaymentTransferReport> PaymentTransferReports { get; set; }

        public virtual DbSet<PaymentsHistory> PaymentsHistories { get; set; }

        public virtual DbSet<PayorType> PayorTypes { get; set; }

        public virtual DbSet<Person> Persons { get; set; }

        public virtual DbSet<PhotoSheetSetting> PhotoSheetSettings { get; set; }

        public virtual DbSet<PossibleMatch> PossibleMatches { get; set; }

        public virtual DbSet<Post> Posts { get; set; }

        public virtual DbSet<PostAttachment> PostAttachments { get; set; }

        public virtual DbSet<PostCurrentStatus> PostCurrentStatuses { get; set; }

        public virtual DbSet<PostHandlingPriority> PostHandlingPriorities { get; set; }

        public virtual DbSet<PostOfficeBox> PostOfficeBoxes { get; set; }

        public virtual DbSet<PostOfficeBox1> PostOfficeBoxes1 { get; set; }

        public virtual DbSet<PostStatus> PostStatuses { get; set; }

        public virtual DbSet<PostStatusHistory> PostStatusHistories { get; set; }

        public virtual DbSet<PostTag> PostTags { get; set; }

        public virtual DbSet<PreferredLanguage> PreferredLanguages { get; set; }

        public virtual DbSet<PreferredLanguage1> PreferredLanguages1 { get; set; }

        public virtual DbSet<ProcessedFailedQueueMessagesView> ProcessedFailedQueueMessagesViews { get; set; }

        public virtual DbSet<Product> Products { get; set; }

        public virtual DbSet<ProductActivityOption> ProductActivityOptions { get; set; }

        public virtual DbSet<ProductApplication> ProductApplications { get; set; }

        public virtual DbSet<ProductCatalogViewProspect> ProductCatalogViewProspects { get; set; }

        public virtual DbSet<ProductCatalogViewProspectTest> ProductCatalogViewProspectTests { get; set; }

        public virtual DbSet<ProductCatalogueView> ProductCatalogueViews { get; set; }

        public virtual DbSet<ProductClassification> ProductClassifications { get; set; }

        public virtual DbSet<ProductDamageReason> ProductDamageReasons { get; set; }

        public virtual DbSet<ProductDamageReasonsHierarchyView> ProductDamageReasonsHierarchyViews { get; set; }

        public virtual DbSet<ProductDeliveryMethod> ProductDeliveryMethods { get; set; }

        public virtual DbSet<ProductDepartment> ProductDepartments { get; set; }

        public virtual DbSet<ProductExclusion> ProductExclusions { get; set; }

        public virtual DbSet<ProductExclusionOption> ProductExclusionOptions { get; set; }

        public virtual DbSet<ProductGroup> ProductGroups { get; set; }

        public virtual DbSet<ProductHierarchy> ProductHierarchies { get; set; }

        public virtual DbSet<ProductInsuranceCoverage> ProductInsuranceCoverages { get; set; }

        public virtual DbSet<ProductInsuranceCoveragesHierarchyView> ProductInsuranceCoveragesHierarchyViews { get; set; }

        public virtual DbSet<ProductInsuranceObject> ProductInsuranceObjects { get; set; }

        public virtual DbSet<ProductInsuranceObjectsHierarchyView> ProductInsuranceObjectsHierarchyViews { get; set; }

        public virtual DbSet<ProductLine> ProductLines { get; set; }

        public virtual DbSet<ProductMapping> ProductMappings { get; set; }

        public virtual DbSet<ProductProperty> ProductProperties { get; set; }

        public virtual DbSet<ProductType> ProductTypes { get; set; }

        public virtual DbSet<ProductWorkActivitiesHierarchyView> ProductWorkActivitiesHierarchyViews { get; set; }

        public virtual DbSet<ProductWorkActivity> ProductWorkActivities { get; set; }

        public virtual DbSet<ProductsView> ProductsViews { get; set; }

        public virtual DbSet<PropertiesHistory> PropertiesHistories { get; set; }

        public virtual DbSet<Property> Properties { get; set; }

        public virtual DbSet<PurchaseAuthorizationLimit> PurchaseAuthorizationLimits { get; set; }

        public virtual DbSet<PurchaseBacklog> PurchaseBacklogs { get; set; }

        public virtual DbSet<PurchaseBacklogAssistancePlan> PurchaseBacklogAssistancePlans { get; set; }

        public virtual DbSet<PurchaseBacklogAttachment> PurchaseBacklogAttachments { get; set; }

        public virtual DbSet<PurchaseBacklogAttachmentsView> PurchaseBacklogAttachmentsViews { get; set; }

        public virtual DbSet<PurchaseBacklogLine> PurchaseBacklogLines { get; set; }

        public virtual DbSet<PurchaseBacklogNote> PurchaseBacklogNotes { get; set; }

        public virtual DbSet<PurchaseBacklogNotesView> PurchaseBacklogNotesViews { get; set; }

        public virtual DbSet<PurchaseBacklogSourceType> PurchaseBacklogSourceTypes { get; set; }

        public virtual DbSet<PurchaseBacklogStatus> PurchaseBacklogStatuses { get; set; }

        public virtual DbSet<PurchaseBacklogStatusHistory> PurchaseBacklogStatusHistories { get; set; }

        public virtual DbSet<PurchaseBacklogSummariesView> PurchaseBacklogSummariesViews { get; set; }

        public virtual DbSet<PurchaseBacklogValidation> PurchaseBacklogValidations { get; set; }

        public virtual DbSet<PurchaseBacklogValidationLine> PurchaseBacklogValidationLines { get; set; }

        public virtual DbSet<PurchaseBacklogWorkingOrder> PurchaseBacklogWorkingOrders { get; set; }

        public virtual DbSet<PurchaseBacklogWorkingOrderLineCost> PurchaseBacklogWorkingOrderLineCosts { get; set; }

        public virtual DbSet<PurchaseBacklogsCancelledView> PurchaseBacklogsCancelledViews { get; set; }

        public virtual DbSet<PurchaseBacklogsIncorrectCountView> PurchaseBacklogsIncorrectCountViews { get; set; }

        public virtual DbSet<PurchaseBacklogsIncorrectView> PurchaseBacklogsIncorrectViews { get; set; }

        public virtual DbSet<PurchaseBacklogsNewView> PurchaseBacklogsNewViews { get; set; }

        public virtual DbSet<PurchaseBacklogsNextToProcessView> PurchaseBacklogsNextToProcessViews { get; set; }

        public virtual DbSet<PurchaseBacklogsPendingEntryCountView> PurchaseBacklogsPendingEntryCountViews { get; set; }

        public virtual DbSet<PurchaseBacklogsPendingEntryView> PurchaseBacklogsPendingEntryViews { get; set; }

        public virtual DbSet<PurchaseBacklogsPendingIndexCountView> PurchaseBacklogsPendingIndexCountViews { get; set; }

        public virtual DbSet<PurchaseBacklogsPendingIndexView> PurchaseBacklogsPendingIndexViews { get; set; }

        public virtual DbSet<PurchaseBacklogsPendingInvestigationCountView> PurchaseBacklogsPendingInvestigationCountViews { get; set; }

        public virtual DbSet<PurchaseBacklogsPendingInvestigationView> PurchaseBacklogsPendingInvestigationViews { get; set; }

        public virtual DbSet<PurchaseBacklogsPendingRegistrationView> PurchaseBacklogsPendingRegistrationViews { get; set; }

        public virtual DbSet<PurchaseBacklogsProcessedView> PurchaseBacklogsProcessedViews { get; set; }

        public virtual DbSet<PurchaseBacklogsUnprocessedReportsView> PurchaseBacklogsUnprocessedReportsViews { get; set; }

        public virtual DbSet<PurchaseBacklogsUnprocessedView> PurchaseBacklogsUnprocessedViews { get; set; }

        public virtual DbSet<PurchaseBacklogsUnprocessedWithPurchaseInvoicesView> PurchaseBacklogsUnprocessedWithPurchaseInvoicesViews { get; set; }

        public virtual DbSet<PurchaseBacklogsView> PurchaseBacklogsViews { get; set; }

        public virtual DbSet<PurchaseInvoice> PurchaseInvoices { get; set; }

        public virtual DbSet<PurchaseInvoiceApproval> PurchaseInvoiceApprovals { get; set; }

        public virtual DbSet<PurchaseInvoiceApprovalsView> PurchaseInvoiceApprovalsViews { get; set; }

        public virtual DbSet<PurchaseInvoiceApprovalsWithoutCreditTransfersView> PurchaseInvoiceApprovalsWithoutCreditTransfersViews { get; set; }

        public virtual DbSet<PurchaseInvoiceAssistancePlan> PurchaseInvoiceAssistancePlans { get; set; }

        public virtual DbSet<PurchaseInvoiceAttachment> PurchaseInvoiceAttachments { get; set; }

        public virtual DbSet<PurchaseInvoiceAttachmentsView> PurchaseInvoiceAttachmentsViews { get; set; }

        public virtual DbSet<PurchaseInvoiceAttribute> PurchaseInvoiceAttributes { get; set; }

        public virtual DbSet<PurchaseInvoiceAuthorization> PurchaseInvoiceAuthorizations { get; set; }

        public virtual DbSet<PurchaseInvoiceAuthorizationsView> PurchaseInvoiceAuthorizationsViews { get; set; }

        public virtual DbSet<PurchaseInvoiceAuthorizationsWithoutApprovalsView> PurchaseInvoiceAuthorizationsWithoutApprovalsViews { get; set; }

        public virtual DbSet<PurchaseInvoiceClaimReservesInfo> PurchaseInvoiceClaimReservesInfos { get; set; }

        public virtual DbSet<PurchaseInvoiceCreditableSalesOrdersView> PurchaseInvoiceCreditableSalesOrdersViews { get; set; }

        public virtual DbSet<PurchaseInvoiceDossierAssignment> PurchaseInvoiceDossierAssignments { get; set; }

        public virtual DbSet<PurchaseInvoiceFinancesView> PurchaseInvoiceFinancesViews { get; set; }

        public virtual DbSet<PurchaseInvoiceLine> PurchaseInvoiceLines { get; set; }

        public virtual DbSet<PurchaseInvoiceLineAttribute> PurchaseInvoiceLineAttributes { get; set; }

        public virtual DbSet<PurchaseInvoiceLineCandidateCostOfSalesView> PurchaseInvoiceLineCandidateCostOfSalesViews { get; set; }

        public virtual DbSet<PurchaseInvoiceLineClaimReserveCoveragesView> PurchaseInvoiceLineClaimReserveCoveragesViews { get; set; }

        public virtual DbSet<PurchaseInvoiceLineCostOfSalesAmountsView> PurchaseInvoiceLineCostOfSalesAmountsViews { get; set; }

        public virtual DbSet<PurchaseInvoiceLineCostOfSalesLinesEntryView> PurchaseInvoiceLineCostOfSalesLinesEntryViews { get; set; }

        public virtual DbSet<PurchaseInvoiceLineCoveragesView> PurchaseInvoiceLineCoveragesViews { get; set; }

        public virtual DbSet<PurchaseInvoiceLineExpectedCostOfSalesView> PurchaseInvoiceLineExpectedCostOfSalesViews { get; set; }

        public virtual DbSet<PurchaseInvoiceLinesEntryView> PurchaseInvoiceLinesEntryViews { get; set; }

        public virtual DbSet<PurchaseInvoiceLinesFailedSalesOrder> PurchaseInvoiceLinesFailedSalesOrders { get; set; }

        public virtual DbSet<PurchaseInvoiceLinesMatchedView> PurchaseInvoiceLinesMatchedViews { get; set; }

        public virtual DbSet<PurchaseInvoiceLinesOpenView> PurchaseInvoiceLinesOpenViews { get; set; }

        public virtual DbSet<PurchaseInvoiceLinesUnmatchedView> PurchaseInvoiceLinesUnmatchedViews { get; set; }

        public virtual DbSet<PurchaseInvoiceLogsView> PurchaseInvoiceLogsViews { get; set; }

        public virtual DbSet<PurchaseInvoiceNote> PurchaseInvoiceNotes { get; set; }

        public virtual DbSet<PurchaseInvoicePaymentApprovalsCountView> PurchaseInvoicePaymentApprovalsCountViews { get; set; }

        public virtual DbSet<PurchaseInvoicePaymentApprovalsInactiveBankAccountsView> PurchaseInvoicePaymentApprovalsInactiveBankAccountsViews { get; set; }

        public virtual DbSet<PurchaseInvoicePaymentApprovalsSelectableView> PurchaseInvoicePaymentApprovalsSelectableViews { get; set; }

        public virtual DbSet<PurchaseInvoicePaymentApprovalsView> PurchaseInvoicePaymentApprovalsViews { get; set; }

        public virtual DbSet<PurchaseInvoicePaymentAuthorizationsView> PurchaseInvoicePaymentAuthorizationsViews { get; set; }

        public virtual DbSet<PurchaseInvoicePaymentCreationsView> PurchaseInvoicePaymentCreationsViews { get; set; }

        public virtual DbSet<PurchaseInvoicePendingSalesOrderView> PurchaseInvoicePendingSalesOrderViews { get; set; }

        public virtual DbSet<PurchaseInvoiceStatus> PurchaseInvoiceStatuses { get; set; }

        public virtual DbSet<PurchaseInvoiceStatusHistory> PurchaseInvoiceStatusHistories { get; set; }

        public virtual DbSet<PurchaseInvoiceSummariesView> PurchaseInvoiceSummariesViews { get; set; }

        public virtual DbSet<PurchaseInvoiceToAssistancePlanMappingsView> PurchaseInvoiceToAssistancePlanMappingsViews { get; set; }

        public virtual DbSet<PurchaseInvoiceToCreditableSalesInvoicesView> PurchaseInvoiceToCreditableSalesInvoicesViews { get; set; }

        public virtual DbSet<PurchaseInvoiceToCreditableSalesOrdersView> PurchaseInvoiceToCreditableSalesOrdersViews { get; set; }

        public virtual DbSet<PurchaseInvoiceToOrderMapping> PurchaseInvoiceToOrderMappings { get; set; }

        public virtual DbSet<PurchaseInvoiceToPurchaseOrderMappingsView> PurchaseInvoiceToPurchaseOrderMappingsViews { get; set; }

        public virtual DbSet<PurchaseInvoiceToPurchaseOrdersView> PurchaseInvoiceToPurchaseOrdersViews { get; set; }

        public virtual DbSet<PurchaseInvoiceToSalesInvoicesView> PurchaseInvoiceToSalesInvoicesViews { get; set; }

        public virtual DbSet<PurchaseInvoiceToSalesOrdersView> PurchaseInvoiceToSalesOrdersViews { get; set; }

        public virtual DbSet<PurchaseInvoiceToWorkingOrderMappingsView> PurchaseInvoiceToWorkingOrderMappingsViews { get; set; }

        public virtual DbSet<PurchaseInvoiceWorkingOrder> PurchaseInvoiceWorkingOrders { get; set; }

        public virtual DbSet<PurchaseInvoicesBlockedMatchedCountView> PurchaseInvoicesBlockedMatchedCountViews { get; set; }

        public virtual DbSet<PurchaseInvoicesBlockedMatchedView> PurchaseInvoicesBlockedMatchedViews { get; set; }

        public virtual DbSet<PurchaseInvoicesBlockedUnmatchedAssistancePlansView> PurchaseInvoicesBlockedUnmatchedAssistancePlansViews { get; set; }

        public virtual DbSet<PurchaseInvoicesBlockedUnmatchedCountView> PurchaseInvoicesBlockedUnmatchedCountViews { get; set; }

        public virtual DbSet<PurchaseInvoicesBlockedUnmatchedView> PurchaseInvoicesBlockedUnmatchedViews { get; set; }

        public virtual DbSet<PurchaseInvoicesBlockedView> PurchaseInvoicesBlockedViews { get; set; }

        public virtual DbSet<PurchaseInvoicesCreditableView> PurchaseInvoicesCreditableViews { get; set; }

        public virtual DbSet<PurchaseInvoicesCreditedView> PurchaseInvoicesCreditedViews { get; set; }

        public virtual DbSet<PurchaseInvoicesEntryView> PurchaseInvoicesEntryViews { get; set; }

        public virtual DbSet<PurchaseInvoicesPaymentReadyWithCreditTransfersPayRunView> PurchaseInvoicesPaymentReadyWithCreditTransfersPayRunViews { get; set; }

        public virtual DbSet<PurchaseInvoicesPendingAuthorizationCountView> PurchaseInvoicesPendingAuthorizationCountViews { get; set; }

        public virtual DbSet<PurchaseInvoicesPendingAuthorizationView> PurchaseInvoicesPendingAuthorizationViews { get; set; }

        public virtual DbSet<PurchaseInvoicesPendingAuthorizationWithCancelledAssistancePlansView> PurchaseInvoicesPendingAuthorizationWithCancelledAssistancePlansViews { get; set; }

        public virtual DbSet<PurchaseInvoicesPendingJournalEntryView> PurchaseInvoicesPendingJournalEntryViews { get; set; }

        public virtual DbSet<PurchaseInvoicesPendingPaymentView> PurchaseInvoicesPendingPaymentViews { get; set; }

        public virtual DbSet<PurchaseInvoicesPendingPaymentWithCreditTransfersPayReadyView> PurchaseInvoicesPendingPaymentWithCreditTransfersPayReadyViews { get; set; }

        public virtual DbSet<PurchaseInvoicesRejectedCountView> PurchaseInvoicesRejectedCountViews { get; set; }

        public virtual DbSet<PurchaseInvoicesRejectedView> PurchaseInvoicesRejectedViews { get; set; }

        public virtual DbSet<PurchaseInvoicesUrgentView> PurchaseInvoicesUrgentViews { get; set; }

        public virtual DbSet<PurchaseInvoicesView> PurchaseInvoicesViews { get; set; }

        public virtual DbSet<PurchaseJournalEntriesExactExportedView> PurchaseJournalEntriesExactExportedViews { get; set; }

        public virtual DbSet<PurchaseJournalEntriesExactView> PurchaseJournalEntriesExactViews { get; set; }

        public virtual DbSet<PurchaseJournalEntriesView> PurchaseJournalEntriesViews { get; set; }

        public virtual DbSet<PurchaseJournalEntryLine> PurchaseJournalEntryLines { get; set; }

        public virtual DbSet<PurchaseJournalEntryLineSummariesView> PurchaseJournalEntryLineSummariesViews { get; set; }

        public virtual DbSet<PurchaseJournalEntryLinesExactView> PurchaseJournalEntryLinesExactViews { get; set; }

        public virtual DbSet<PurchaseJournalEntryLinesView> PurchaseJournalEntryLinesViews { get; set; }

        public virtual DbSet<PurchaseJournalSettingTypeView> PurchaseJournalSettingTypeViews { get; set; }

        public virtual DbSet<PurchaseLedgerSetting> PurchaseLedgerSettings { get; set; }

        public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }

        public virtual DbSet<PurchaseOrderApproval> PurchaseOrderApprovals { get; set; }

        public virtual DbSet<PurchaseOrderAuthorization> PurchaseOrderAuthorizations { get; set; }

        public virtual DbSet<PurchaseOrderConfirmation> PurchaseOrderConfirmations { get; set; }

        public virtual DbSet<PurchaseOrderFromWorkingOrderView> PurchaseOrderFromWorkingOrderViews { get; set; }

        public virtual DbSet<PurchaseOrderLine> PurchaseOrderLines { get; set; }

        public virtual DbSet<PurchaseOrderLinesOpenView> PurchaseOrderLinesOpenViews { get; set; }

        public virtual DbSet<PurchaseOrderLinesView> PurchaseOrderLinesViews { get; set; }

        public virtual DbSet<PurchaseOrderReceiptMapping> PurchaseOrderReceiptMappings { get; set; }

        public virtual DbSet<PurchaseOrderStatus> PurchaseOrderStatuses { get; set; }

        public virtual DbSet<PurchaseOrderStatusHistory> PurchaseOrderStatusHistories { get; set; }

        public virtual DbSet<PurchaseOrdersApprovedView> PurchaseOrdersApprovedViews { get; set; }

        public virtual DbSet<PurchaseOrdersCreditableView> PurchaseOrdersCreditableViews { get; set; }

        public virtual DbSet<PurchaseOrdersOpenByVatNumberView> PurchaseOrdersOpenByVatNumberViews { get; set; }

        public virtual DbSet<PurchaseOrdersOpenView> PurchaseOrdersOpenViews { get; set; }

        public virtual DbSet<PurchaseOrdersPartiallyCreditedView> PurchaseOrdersPartiallyCreditedViews { get; set; }

        public virtual DbSet<PurchaseOrdersView> PurchaseOrdersViews { get; set; }

        public virtual DbSet<PurchaseOrdersWithAcceptedPurchaseInvoicesView> PurchaseOrdersWithAcceptedPurchaseInvoicesViews { get; set; }

        public virtual DbSet<PurchaseOrdersWithPurchaseInvoicesView> PurchaseOrdersWithPurchaseInvoicesViews { get; set; }

        public virtual DbSet<PurchasePayment> PurchasePayments { get; set; }

        public virtual DbSet<PurchasePaymentBatch> PurchasePaymentBatches { get; set; }

        public virtual DbSet<PurchasePaymentBatchLine> PurchasePaymentBatchLines { get; set; }

        public virtual DbSet<PurchasePaymentJournalEntryLine> PurchasePaymentJournalEntryLines { get; set; }

        public virtual DbSet<PurchasePaymentStatus> PurchasePaymentStatuses { get; set; }

        public virtual DbSet<PurchasePaymentStatusHistory> PurchasePaymentStatusHistories { get; set; }

        public virtual DbSet<PurchasePaymentsPendingJournalEntryView> PurchasePaymentsPendingJournalEntryViews { get; set; }

        public virtual DbSet<PurchasePaymentsView> PurchasePaymentsViews { get; set; }

        public virtual DbSet<PurchaseReceipt> PurchaseReceipts { get; set; }

        public virtual DbSet<PurchaseReceiptLine> PurchaseReceiptLines { get; set; }

        public virtual DbSet<PurchaseTaxCode> PurchaseTaxCodes { get; set; }

        public virtual DbSet<PurchaseTaxRate> PurchaseTaxRates { get; set; }

        public virtual DbSet<Queue> Queues { get; set; }

        public virtual DbSet<Re> Res { get; set; }

        public virtual DbSet<ReceivedPayment> ReceivedPayments { get; set; }

        public virtual DbSet<ReceivedPaymentsHistory> ReceivedPaymentsHistories { get; set; }

        public virtual DbSet<ReconcilliationAction> ReconcilliationActions { get; set; }

        public virtual DbSet<ReconcilliationActionType> ReconcilliationActionTypes { get; set; }

        public virtual DbSet<ReconcilliationBankAccountsView> ReconcilliationBankAccountsViews { get; set; }

        public virtual DbSet<ReconcilliationLedgersView> ReconcilliationLedgersViews { get; set; }

        public virtual DbSet<ReconcilliationRefundAccount> ReconcilliationRefundAccounts { get; set; }

        public virtual DbSet<ReconcilliationRefundType> ReconcilliationRefundTypes { get; set; }

        public virtual DbSet<ReconcilliationSummaryView> ReconcilliationSummaryViews { get; set; }

        public virtual DbSet<RecoveryPayablesView> RecoveryPayablesViews { get; set; }

        public virtual DbSet<RecoveryPayment> RecoveryPayments { get; set; }

        public virtual DbSet<RecoveryPaymentStatus> RecoveryPaymentStatuses { get; set; }

        public virtual DbSet<RecoveryPaymentStatusHistory> RecoveryPaymentStatusHistories { get; set; }

        public virtual DbSet<RecoveryPaymentsView> RecoveryPaymentsViews { get; set; }

        public virtual DbSet<RecoveryReceivablesView> RecoveryReceivablesViews { get; set; }

        public virtual DbSet<RecoveryStatement> RecoveryStatements { get; set; }

        public virtual DbSet<RecoveryStatementChangeHistory> RecoveryStatementChangeHistories { get; set; }

        public virtual DbSet<RecoveryStatementStatus> RecoveryStatementStatuses { get; set; }

        public virtual DbSet<RecoveryStatementStatusHistory> RecoveryStatementStatusHistories { get; set; }

        public virtual DbSet<RecoveryStatementsBookingView> RecoveryStatementsBookingViews { get; set; }

        public virtual DbSet<RecoveryStatementsFinalizedView> RecoveryStatementsFinalizedViews { get; set; }

        public virtual DbSet<RecoveryStatementsView> RecoveryStatementsViews { get; set; }

        public virtual DbSet<RecoveryTransfer> RecoveryTransfers { get; set; }

        public virtual DbSet<Region> Regions { get; set; }

        public virtual DbSet<Regre> Regres { get; set; }

        public virtual DbSet<RegresHistory> RegresHistories { get; set; }

        public virtual DbSet<RepairDossier> RepairDossiers { get; set; }

        public virtual DbSet<RepairDossiersHistory> RepairDossiersHistories { get; set; }

        public virtual DbSet<RepairOrder> RepairOrders { get; set; }

        public virtual DbSet<RepairOrderHistory> RepairOrderHistories { get; set; }

        public virtual DbSet<RepairOrderLine> RepairOrderLines { get; set; }

        public virtual DbSet<RepairOrderLineHistory> RepairOrderLineHistories { get; set; }

        public virtual DbSet<RepairOrderStatus> RepairOrderStatuses { get; set; }

        public virtual DbSet<RepairOrderStatusHistory> RepairOrderStatusHistories { get; set; }

        public virtual DbSet<RepairOrderStatusHistoryHistory> RepairOrderStatusHistoryHistories { get; set; }

        public virtual DbSet<RepairOrderStatusesHistory> RepairOrderStatusesHistories { get; set; }

        public virtual DbSet<Repairer> Repairers { get; set; }

        public virtual DbSet<RepairerSkill> RepairerSkills { get; set; }

        public virtual DbSet<RepairersView> RepairersViews { get; set; }

        public virtual DbSet<ReportersViewWithContactInformation> ReportersViewWithContactInformations { get; set; }

        public virtual DbSet<ReportingForm> ReportingForms { get; set; }

        public virtual DbSet<ReportingFormActivityExecution> ReportingFormActivityExecutions { get; set; }

        public virtual DbSet<Reservation> Reservations { get; set; }

        public virtual DbSet<ReservationsHistory> ReservationsHistories { get; set; }

        public virtual DbSet<Retention> Retentions { get; set; }

        public virtual DbSet<RetentionsHistory> RetentionsHistories { get; set; }

        public virtual DbSet<ReversedTaxRate> ReversedTaxRates { get; set; }

        public virtual DbSet<RoadAuthority> RoadAuthorities { get; set; }

        public virtual DbSet<RoadAuthority1> RoadAuthorities1 { get; set; }

        public virtual DbSet<RoadAuthorityCode> RoadAuthorityCodes { get; set; }

        public virtual DbSet<RoadAuthorityCode1> RoadAuthorityCodes1 { get; set; }

        public virtual DbSet<RoadAuthorityType> RoadAuthorityTypes { get; set; }

        public virtual DbSet<RoadAuthorityType1> RoadAuthorityTypes1 { get; set; }

        public virtual DbSet<RoadDirection> RoadDirections { get; set; }

        public virtual DbSet<RoadLocation> RoadLocations { get; set; }

        public virtual DbSet<RoadLocation1> RoadLocations1 { get; set; }

        public virtual DbSet<RoadSection> RoadSections { get; set; }

        public virtual DbSet<RoadSection1> RoadSections1 { get; set; }

        public virtual DbSet<RoadSide> RoadSides { get; set; }

        public virtual DbSet<RoadType> RoadTypes { get; set; }

        public virtual DbSet<RoleCode> RoleCodes { get; set; }

        public virtual DbSet<RoleCode1> RoleCodes1 { get; set; }

        public virtual DbSet<RoofCovering> RoofCoverings { get; set; }

        public virtual DbSet<SalesAgreement> SalesAgreements { get; set; }

        public virtual DbSet<SalesAgreementType> SalesAgreementTypes { get; set; }

        public virtual DbSet<SalesCollection> SalesCollections { get; set; }

        public virtual DbSet<SalesCollectionAttachment> SalesCollectionAttachments { get; set; }

        public virtual DbSet<SalesCollectionAttachmentsSendableView> SalesCollectionAttachmentsSendableViews { get; set; }

        public virtual DbSet<SalesCollectionAttachmentsView> SalesCollectionAttachmentsViews { get; set; }

        public virtual DbSet<SalesCollectionDebtor> SalesCollectionDebtors { get; set; }

        public virtual DbSet<SalesCollectionLine> SalesCollectionLines { get; set; }

        public virtual DbSet<SalesCollectionLinesView> SalesCollectionLinesViews { get; set; }

        public virtual DbSet<SalesCollectionNote> SalesCollectionNotes { get; set; }

        public virtual DbSet<SalesCollectionSalesInvoiceLinesView> SalesCollectionSalesInvoiceLinesViews { get; set; }

        public virtual DbSet<SalesCollectionStatus> SalesCollectionStatuses { get; set; }

        public virtual DbSet<SalesCollectionStatusHistory> SalesCollectionStatusHistories { get; set; }

        public virtual DbSet<SalesCollectionsView> SalesCollectionsViews { get; set; }

        public virtual DbSet<SalesInvoice> SalesInvoices { get; set; }

        public virtual DbSet<SalesInvoiceAttachment> SalesInvoiceAttachments { get; set; }

        public virtual DbSet<SalesInvoiceAttachmentsView> SalesInvoiceAttachmentsViews { get; set; }

        public virtual DbSet<SalesInvoiceAttribute> SalesInvoiceAttributes { get; set; }

        public virtual DbSet<SalesInvoiceClaimReservesInfo> SalesInvoiceClaimReservesInfos { get; set; }

        public virtual DbSet<SalesInvoiceCorrectionsView> SalesInvoiceCorrectionsViews { get; set; }

        public virtual DbSet<SalesInvoiceDeliveryFailedView> SalesInvoiceDeliveryFailedViews { get; set; }

        public virtual DbSet<SalesInvoiceFailedPdfview> SalesInvoiceFailedPdfviews { get; set; }

        public virtual DbSet<SalesInvoiceInvolvedCoveragesView> SalesInvoiceInvolvedCoveragesViews { get; set; }

        public virtual DbSet<SalesInvoiceLine> SalesInvoiceLines { get; set; }

        public virtual DbSet<SalesInvoiceLineAttribute> SalesInvoiceLineAttributes { get; set; }

        public virtual DbSet<SalesInvoiceLinesReportView> SalesInvoiceLinesReportViews { get; set; }

        public virtual DbSet<SalesInvoiceLinesView> SalesInvoiceLinesViews { get; set; }

        public virtual DbSet<SalesInvoiceLogsView> SalesInvoiceLogsViews { get; set; }

        public virtual DbSet<SalesInvoiceNote> SalesInvoiceNotes { get; set; }

        public virtual DbSet<SalesInvoiceStatus> SalesInvoiceStatuses { get; set; }

        public virtual DbSet<SalesInvoiceStatusHistory> SalesInvoiceStatusHistories { get; set; }

        public virtual DbSet<SalesInvoiceToCreditableSalesOrdersView> SalesInvoiceToCreditableSalesOrdersViews { get; set; }

        public virtual DbSet<SalesInvoiceToOrderMapping> SalesInvoiceToOrderMappings { get; set; }

        public virtual DbSet<SalesInvoiceToPurchaseFeeOnlyMappingView> SalesInvoiceToPurchaseFeeOnlyMappingViews { get; set; }

        public virtual DbSet<SalesInvoiceToPurchaseMapping> SalesInvoiceToPurchaseMappings { get; set; }

        public virtual DbSet<SalesInvoiceToPurchaseMappingView> SalesInvoiceToPurchaseMappingViews { get; set; }

        public virtual DbSet<SalesInvoiceToSalesOrderMappingsView> SalesInvoiceToSalesOrderMappingsViews { get; set; }

        public virtual DbSet<SalesInvoiceToSalesOrdersView> SalesInvoiceToSalesOrdersViews { get; set; }

        public virtual DbSet<SalesInvoicesCollectableView> SalesInvoicesCollectableViews { get; set; }

        public virtual DbSet<SalesInvoicesEntryView> SalesInvoicesEntryViews { get; set; }

        public virtual DbSet<SalesInvoicesExportFailedView> SalesInvoicesExportFailedViews { get; set; }

        public virtual DbSet<SalesInvoicesInvalidView> SalesInvoicesInvalidViews { get; set; }

        public virtual DbSet<SalesInvoicesOpenView> SalesInvoicesOpenViews { get; set; }

        public virtual DbSet<SalesInvoicesPendingExportView> SalesInvoicesPendingExportViews { get; set; }

        public virtual DbSet<SalesInvoicesPendingJournalEntryView> SalesInvoicesPendingJournalEntryViews { get; set; }

        public virtual DbSet<SalesInvoicesReportView> SalesInvoicesReportViews { get; set; }

        public virtual DbSet<SalesInvoicesView> SalesInvoicesViews { get; set; }

        public virtual DbSet<SalesInvoicesWithDossierAuthorizationsView> SalesInvoicesWithDossierAuthorizationsViews { get; set; }

        public virtual DbSet<SalesJournalEntriesExactView> SalesJournalEntriesExactViews { get; set; }

        public virtual DbSet<SalesJournalEntriesView> SalesJournalEntriesViews { get; set; }

        public virtual DbSet<SalesJournalEntryLine> SalesJournalEntryLines { get; set; }

        public virtual DbSet<SalesJournalEntryLineSummariesView> SalesJournalEntryLineSummariesViews { get; set; }

        public virtual DbSet<SalesJournalEntryLinesExactView> SalesJournalEntryLinesExactViews { get; set; }

        public virtual DbSet<SalesLedgerSetting> SalesLedgerSettings { get; set; }

        public virtual DbSet<SalesOrder> SalesOrders { get; set; }

        public virtual DbSet<SalesOrderApproval> SalesOrderApprovals { get; set; }

        public virtual DbSet<SalesOrderApprovalSetting> SalesOrderApprovalSettings { get; set; }

        public virtual DbSet<SalesOrderApprovalSettingsView> SalesOrderApprovalSettingsViews { get; set; }

        public virtual DbSet<SalesOrderApprovalView> SalesOrderApprovalViews { get; set; }

        public virtual DbSet<SalesOrderAttachment> SalesOrderAttachments { get; set; }

        public virtual DbSet<SalesOrderAttachmentsView> SalesOrderAttachmentsViews { get; set; }

        public virtual DbSet<SalesOrderAuthorization> SalesOrderAuthorizations { get; set; }

        public virtual DbSet<SalesOrderClaimReservesInfo> SalesOrderClaimReservesInfos { get; set; }

        public virtual DbSet<SalesOrderClientsPendingSingleSalesInvoiceInfo> SalesOrderClientsPendingSingleSalesInvoiceInfos { get; set; }

        public virtual DbSet<SalesOrderCorrection> SalesOrderCorrections { get; set; }

        public virtual DbSet<SalesOrderCorrectionApproval> SalesOrderCorrectionApprovals { get; set; }

        public virtual DbSet<SalesOrderCorrectionAuthorization> SalesOrderCorrectionAuthorizations { get; set; }

        public virtual DbSet<SalesOrderCorrectionLine> SalesOrderCorrectionLines { get; set; }

        public virtual DbSet<SalesOrderDraftApprovalSetting> SalesOrderDraftApprovalSettings { get; set; }

        public virtual DbSet<SalesOrderLine> SalesOrderLines { get; set; }

        public virtual DbSet<SalesOrderLineAttribute> SalesOrderLineAttributes { get; set; }

        public virtual DbSet<SalesOrderLineChangesView> SalesOrderLineChangesViews { get; set; }

        public virtual DbSet<SalesOrderLineChangesWithInvalidSalesInvoicesView> SalesOrderLineChangesWithInvalidSalesInvoicesViews { get; set; }

        public virtual DbSet<SalesOrderLineCoveragesView> SalesOrderLineCoveragesViews { get; set; }

        public virtual DbSet<SalesOrderLineDossierAssignmentChangesView> SalesOrderLineDossierAssignmentChangesViews { get; set; }

        public virtual DbSet<SalesOrderLineInactiveCoveragesView> SalesOrderLineInactiveCoveragesViews { get; set; }

        public virtual DbSet<SalesOrderLineInsurancePolicyChangesView> SalesOrderLineInsurancePolicyChangesViews { get; set; }

        public virtual DbSet<SalesOrderLinesEntryView> SalesOrderLinesEntryViews { get; set; }

        public virtual DbSet<SalesOrderLinesView> SalesOrderLinesViews { get; set; }

        public virtual DbSet<SalesOrderLinesWithAssistancePlansView> SalesOrderLinesWithAssistancePlansViews { get; set; }

        public virtual DbSet<SalesOrderLineworkingOrderLineChangeView> SalesOrderLineworkingOrderLineChangeViews { get; set; }

        public virtual DbSet<SalesOrderNote> SalesOrderNotes { get; set; }

        public virtual DbSet<SalesOrderStatus> SalesOrderStatuses { get; set; }

        public virtual DbSet<SalesOrderStatusHistory> SalesOrderStatusHistories { get; set; }

        public virtual DbSet<SalesOrderSummariesView> SalesOrderSummariesViews { get; set; }

        public virtual DbSet<SalesOrderToAssistancePlanCoverageMapping> SalesOrderToAssistancePlanCoverageMappings { get; set; }

        public virtual DbSet<SalesOrderToDossierInvolvedCoveragesView> SalesOrderToDossierInvolvedCoveragesViews { get; set; }

        public virtual DbSet<SalesOrderToInvolvedCoveragesView> SalesOrderToInvolvedCoveragesViews { get; set; }

        public virtual DbSet<SalesOrderToPurchaseInvoiceLineMappingsView> SalesOrderToPurchaseInvoiceLineMappingsViews { get; set; }

        public virtual DbSet<SalesOrderToPurchaseInvoicesView> SalesOrderToPurchaseInvoicesViews { get; set; }

        public virtual DbSet<SalesOrderToPurchaseMapping> SalesOrderToPurchaseMappings { get; set; }

        public virtual DbSet<SalesOrderToPurchaseMappingView> SalesOrderToPurchaseMappingViews { get; set; }

        public virtual DbSet<SalesOrderToPurchaseOrdersView> SalesOrderToPurchaseOrdersViews { get; set; }

        public virtual DbSet<SalesOrderToTimeSheetMapping> SalesOrderToTimeSheetMappings { get; set; }

        public virtual DbSet<SalesOrderToWorkingOrderLineCoverageMapping> SalesOrderToWorkingOrderLineCoverageMappings { get; set; }

        public virtual DbSet<SalesOrderType> SalesOrderTypes { get; set; }

        public virtual DbSet<SalesOrdersAcceptedView> SalesOrdersAcceptedViews { get; set; }

        public virtual DbSet<SalesOrdersEntryView> SalesOrdersEntryViews { get; set; }

        public virtual DbSet<SalesOrdersIncompleteView> SalesOrdersIncompleteViews { get; set; }

        public virtual DbSet<SalesOrdersNewView> SalesOrdersNewViews { get; set; }

        public virtual DbSet<SalesOrdersPendingInvestigationView> SalesOrdersPendingInvestigationViews { get; set; }

        public virtual DbSet<SalesOrdersPendingInvoiceView> SalesOrdersPendingInvoiceViews { get; set; }

        public virtual DbSet<SalesOrdersPendingProcessSingleInvoiceView> SalesOrdersPendingProcessSingleInvoiceViews { get; set; }

        public virtual DbSet<SalesOrdersPendingSingleSalesInvoiceInfo> SalesOrdersPendingSingleSalesInvoiceInfos { get; set; }

        public virtual DbSet<SalesOrdersPendingSingleSalesInvoiceView> SalesOrdersPendingSingleSalesInvoiceViews { get; set; }

        public virtual DbSet<SalesOrdersReadyForInvoicingView> SalesOrdersReadyForInvoicingViews { get; set; }

        public virtual DbSet<SalesOrdersRejectedView> SalesOrdersRejectedViews { get; set; }

        public virtual DbSet<SalesOrdersView> SalesOrdersViews { get; set; }

        public virtual DbSet<SalesOrdersWaitingView> SalesOrdersWaitingViews { get; set; }

        public virtual DbSet<SalesPayment> SalesPayments { get; set; }

        public virtual DbSet<SalesPaymentStatus> SalesPaymentStatuses { get; set; }

        public virtual DbSet<SalesPaymentStatusHistory> SalesPaymentStatusHistories { get; set; }

        public virtual DbSet<SalesPaymentsView> SalesPaymentsViews { get; set; }

        public virtual DbSet<SalesSettlement> SalesSettlements { get; set; }

        public virtual DbSet<SalesSettlementLine> SalesSettlementLines { get; set; }

        public virtual DbSet<SalesTaxCode> SalesTaxCodes { get; set; }

        public virtual DbSet<SalesTaxRate> SalesTaxRates { get; set; }

        public virtual DbSet<Salutation> Salutations { get; set; }

        public virtual DbSet<SearchDossierAssignmentsView> SearchDossierAssignmentsViews { get; set; }

        public virtual DbSet<SearchInvolvedCoveragesView> SearchInvolvedCoveragesViews { get; set; }

        public virtual DbSet<SearchInvolvedPartiesView> SearchInvolvedPartiesViews { get; set; }

        public virtual DbSet<SearchVehiclesView> SearchVehiclesViews { get; set; }

        public virtual DbSet<SepaCountriesView> SepaCountriesViews { get; set; }

        public virtual DbSet<SepaCountry> SepaCountries { get; set; }

        public virtual DbSet<Service> Services { get; set; }

        public virtual DbSet<ServiceApplication> ServiceApplications { get; set; }

        public virtual DbSet<ServiceCode> ServiceCodes { get; set; }

        public virtual DbSet<ServiceCodeType> ServiceCodeTypes { get; set; }

        public virtual DbSet<ServiceGroup> ServiceGroups { get; set; }

        public virtual DbSet<ServiceHierarchy> ServiceHierarchies { get; set; }

        public virtual DbSet<ServiceTaxRate> ServiceTaxRates { get; set; }

        public virtual DbSet<ServiceType> ServiceTypes { get; set; }

        public virtual DbSet<ServicesView> ServicesViews { get; set; }

        public virtual DbSet<Setting> Settings { get; set; }

        public virtual DbSet<SingleInvoiceRuleLog> SingleInvoiceRuleLogs { get; set; }

        public virtual DbSet<Skill> Skills { get; set; }

        public virtual DbSet<SkillsServiceGroup> SkillsServiceGroups { get; set; }

        public virtual DbSet<Specification> Specifications { get; set; }

        public virtual DbSet<Status> Statuses { get; set; }

        public virtual DbSet<StatusMapping> StatusMappings { get; set; }

        public virtual DbSet<SubContract> SubContracts { get; set; }

        public virtual DbSet<SubStatusMapping> SubStatusMappings { get; set; }

        public virtual DbSet<SummaryStatementCreationMethod> SummaryStatementCreationMethods { get; set; }

        public virtual DbSet<SummaryStatementPeriod> SummaryStatementPeriods { get; set; }

        public virtual DbSet<Supplier> Suppliers { get; set; }

        public virtual DbSet<SupplierBankAccountsView> SupplierBankAccountsViews { get; set; }

        public virtual DbSet<SupplierBrand> SupplierBrands { get; set; }

        public virtual DbSet<SupplierInvoiceDeliveryMethod> SupplierInvoiceDeliveryMethods { get; set; }

        public virtual DbSet<SupplierPaymentConditionsView> SupplierPaymentConditionsViews { get; set; }

        public virtual DbSet<SupplierService> SupplierServices { get; set; }

        public virtual DbSet<SupplierTaxCodesView> SupplierTaxCodesViews { get; set; }

        public virtual DbSet<SuppliersMissingCreditorsCountView> SuppliersMissingCreditorsCountViews { get; set; }

        public virtual DbSet<SuppliersMissingCreditorsView> SuppliersMissingCreditorsViews { get; set; }

        public virtual DbSet<SuppliersView> SuppliersViews { get; set; }

        public virtual DbSet<CED.Data.Entities.Task> Tasks { get; set; }

        public virtual DbSet<TaskCompletion> TaskCompletions { get; set; }

        public virtual DbSet<TaskCompletionsHistory> TaskCompletionsHistories { get; set; }

        public virtual DbSet<TaskMember> TaskMembers { get; set; }

        public virtual DbSet<TaskMembersHistory> TaskMembersHistories { get; set; }

        public virtual DbSet<TaskNote> TaskNotes { get; set; }

        public virtual DbSet<TaskNotesHistory> TaskNotesHistories { get; set; }

        public virtual DbSet<TasksHistory> TasksHistories { get; set; }

        public virtual DbSet<TaxCategory> TaxCategories { get; set; }

        public virtual DbSet<TaxCode> TaxCodes { get; set; }

        public virtual DbSet<TaxType> TaxTypes { get; set; }

        public virtual DbSet<Team> Teams { get; set; }

        public virtual DbSet<Template> Templates { get; set; }

        public virtual DbSet<TemplateType> TemplateTypes { get; set; }

        public virtual DbSet<Tenant> Tenants { get; set; }

        public virtual DbSet<Tenant1> Tenants1 { get; set; }

        public virtual DbSet<TimeSheet> TimeSheets { get; set; }

        public virtual DbSet<TimeSheetApproval> TimeSheetApprovals { get; set; }

        public virtual DbSet<TimeSheetAuthorization> TimeSheetAuthorizations { get; set; }

        public virtual DbSet<TimeSheetReasonHistory> TimeSheetReasonHistories { get; set; }

        public virtual DbSet<TimeSlot> TimeSlots { get; set; }

        public virtual DbSet<TimeTable> TimeTables { get; set; }

        public virtual DbSet<TimeTableSlot> TimeTableSlots { get; set; }

        public virtual DbSet<TimeWindow> TimeWindows { get; set; }

        public virtual DbSet<TimeWindowList> TimeWindowLists { get; set; }

        public virtual DbSet<TransferCreditor> TransferCreditors { get; set; }

        public virtual DbSet<TransferDebtor> TransferDebtors { get; set; }

        public virtual DbSet<TransferJournalEntry> TransferJournalEntries { get; set; }

        public virtual DbSet<Transmission> Transmissions { get; set; }

        public virtual DbSet<UnitOfMeasure> UnitOfMeasures { get; set; }

        public virtual DbSet<UnitOfMeasureType> UnitOfMeasureTypes { get; set; }

        public virtual DbSet<UnprocessedFailedQueueMessagesView> UnprocessedFailedQueueMessagesViews { get; set; }

        public virtual DbSet<UpdateStatusesRequest> UpdateStatusesRequests { get; set; }

        public virtual DbSet<ValuationPrinciple> ValuationPrinciples { get; set; }

        public virtual DbSet<VatNumberTaxCode> VatNumberTaxCodes { get; set; }

        public virtual DbSet<VatNumberValidation> VatNumberValidations { get; set; }

        public virtual DbSet<VatNumberValidationSource> VatNumberValidationSources { get; set; }

        public virtual DbSet<VatRegistration> VatRegistrations { get; set; }

        public virtual DbSet<Vee> Vees { get; set; }

        public virtual DbSet<Vehicle> Vehicles { get; set; }

        public virtual DbSet<VehiclesHistory> VehiclesHistories { get; set; }

        public virtual DbSet<VehiclesView> VehiclesViews { get; set; }

        public virtual DbSet<VisitInformation> VisitInformations { get; set; }

        public virtual DbSet<VisitInformationLogHistory> VisitInformationLogHistories { get; set; }

        public virtual DbSet<VisitInformationLogHistoryHistory> VisitInformationLogHistoryHistories { get; set; }

        public virtual DbSet<VisitInformationStatus> VisitInformationStatuses { get; set; }

        public virtual DbSet<VisitInformationStatusHistory> VisitInformationStatusHistories { get; set; }

        public virtual DbSet<VisitInformationStatusHistoryHistory> VisitInformationStatusHistoryHistories { get; set; }

        public virtual DbSet<VisitInformationStatusType> VisitInformationStatusTypes { get; set; }

        public virtual DbSet<VisitInformationStatusTypesHistory> VisitInformationStatusTypesHistories { get; set; }

        public virtual DbSet<VisitInformationStatusesHistory> VisitInformationStatusesHistories { get; set; }

        public virtual DbSet<VisitInformationsHistory> VisitInformationsHistories { get; set; }

        public virtual DbSet<VolumeSalesAgreement> VolumeSalesAgreements { get; set; }

        public virtual DbSet<WebApiClient> WebApiClients { get; set; }

        public virtual DbSet<WorkActivitiesHierarchyView> WorkActivitiesHierarchyViews { get; set; }

        public virtual DbSet<WorkActivity> WorkActivities { get; set; }

        public virtual DbSet<WorkActivityExecution> WorkActivityExecutions { get; set; }

        public virtual DbSet<WorkActivityMatrixView> WorkActivityMatrixViews { get; set; }

        public virtual DbSet<WorkActivityMatrixViewV2> WorkActivityMatrixViewV2s { get; set; }

        public virtual DbSet<WorkActivityOption> WorkActivityOptions { get; set; }

        public virtual DbSet<WorkActivityRelation> WorkActivityRelations { get; set; }

        public virtual DbSet<WorkActivitySkill> WorkActivitySkills { get; set; }

        public virtual DbSet<WorkingOrder> WorkingOrders { get; set; }

        public virtual DbSet<WorkingOrderCoveragesView> WorkingOrderCoveragesViews { get; set; }

        public virtual DbSet<WorkingOrderCurrentStatus> WorkingOrderCurrentStatuses { get; set; }

        public virtual DbSet<WorkingOrderInvolvedObject> WorkingOrderInvolvedObjects { get; set; }

        public virtual DbSet<WorkingOrderLine> WorkingOrderLines { get; set; }

        public virtual DbSet<WorkingOrderLineAttachment> WorkingOrderLineAttachments { get; set; }

        public virtual DbSet<WorkingOrderLineAttachmentsView> WorkingOrderLineAttachmentsViews { get; set; }

        public virtual DbSet<WorkingOrderLineCorrectionApproval> WorkingOrderLineCorrectionApprovals { get; set; }

        public virtual DbSet<WorkingOrderLineCorrectionAuthorization> WorkingOrderLineCorrectionAuthorizations { get; set; }

        public virtual DbSet<WorkingOrderLineCorrectionAuthorizationsWithoutApprovalsView> WorkingOrderLineCorrectionAuthorizationsWithoutApprovalsViews { get; set; }

        public virtual DbSet<WorkingOrderLineCost> WorkingOrderLineCosts { get; set; }

        public virtual DbSet<WorkingOrderLineCostNote> WorkingOrderLineCostNotes { get; set; }

        public virtual DbSet<WorkingOrderLineCostType> WorkingOrderLineCostTypes { get; set; }

        public virtual DbSet<WorkingOrderLineCostTypesHistory> WorkingOrderLineCostTypesHistories { get; set; }

        public virtual DbSet<WorkingOrderLineCostsHistory> WorkingOrderLineCostsHistories { get; set; }

        public virtual DbSet<WorkingOrderLineCoverage> WorkingOrderLineCoverages { get; set; }

        public virtual DbSet<WorkingOrderLineCoverageNote> WorkingOrderLineCoverageNotes { get; set; }

        public virtual DbSet<WorkingOrderLineCoveragesHistory> WorkingOrderLineCoveragesHistories { get; set; }

        public virtual DbSet<WorkingOrderLineCurrentStatus> WorkingOrderLineCurrentStatuses { get; set; }

        public virtual DbSet<WorkingOrderLineInvolvedObject> WorkingOrderLineInvolvedObjects { get; set; }

        public virtual DbSet<WorkingOrderLineIsExecuteVatDeductableHistory> WorkingOrderLineIsExecuteVatDeductableHistories { get; set; }

        public virtual DbSet<WorkingOrderLineIsOwnRiskHistory> WorkingOrderLineIsOwnRiskHistories { get; set; }

        public virtual DbSet<WorkingOrderLineLogHistory> WorkingOrderLineLogHistories { get; set; }

        public virtual DbSet<WorkingOrderLineLogHistoryHistory> WorkingOrderLineLogHistoryHistories { get; set; }

        public virtual DbSet<WorkingOrderLineNote> WorkingOrderLineNotes { get; set; }

        public virtual DbSet<WorkingOrderLineOperationalStatus> WorkingOrderLineOperationalStatuses { get; set; }

        public virtual DbSet<WorkingOrderLineOperationalStatusHistory> WorkingOrderLineOperationalStatusHistories { get; set; }

        public virtual DbSet<WorkingOrderLineOperationalStatusType> WorkingOrderLineOperationalStatusTypes { get; set; }

        public virtual DbSet<WorkingOrderLineParty> WorkingOrderLineParties { get; set; }

        public virtual DbSet<WorkingOrderLineStatus> WorkingOrderLineStatuses { get; set; }

        public virtual DbSet<WorkingOrderLineStatusHistory> WorkingOrderLineStatusHistories { get; set; }

        public virtual DbSet<WorkingOrderLineStatusHistoryHistory> WorkingOrderLineStatusHistoryHistories { get; set; }

        public virtual DbSet<WorkingOrderLineStatusType> WorkingOrderLineStatusTypes { get; set; }

        public virtual DbSet<WorkingOrderLineStatusTypesHistory> WorkingOrderLineStatusTypesHistories { get; set; }

        public virtual DbSet<WorkingOrderLineStatusesHistory> WorkingOrderLineStatusesHistories { get; set; }

        public virtual DbSet<WorkingOrderLineTime> WorkingOrderLineTimes { get; set; }

        public virtual DbSet<WorkingOrderLineTimesHistory> WorkingOrderLineTimesHistories { get; set; }

        public virtual DbSet<WorkingOrderLineTrigger> WorkingOrderLineTriggers { get; set; }

        public virtual DbSet<WorkingOrderLineTriggerType> WorkingOrderLineTriggerTypes { get; set; }

        public virtual DbSet<WorkingOrderLinesHistory> WorkingOrderLinesHistories { get; set; }

        public virtual DbSet<WorkingOrderLogHistory> WorkingOrderLogHistories { get; set; }

        public virtual DbSet<WorkingOrderLogHistoryHistory> WorkingOrderLogHistoryHistories { get; set; }

        public virtual DbSet<WorkingOrderNote> WorkingOrderNotes { get; set; }

        public virtual DbSet<WorkingOrderNoteRole> WorkingOrderNoteRoles { get; set; }

        public virtual DbSet<WorkingOrderNotesHistory> WorkingOrderNotesHistories { get; set; }

        public virtual DbSet<WorkingOrderParty> WorkingOrderParties { get; set; }

        public virtual DbSet<WorkingOrderStatus> WorkingOrderStatuses { get; set; }

        public virtual DbSet<WorkingOrderStatusHistory> WorkingOrderStatusHistories { get; set; }

        public virtual DbSet<WorkingOrderStatusHistoryHistory> WorkingOrderStatusHistoryHistories { get; set; }

        public virtual DbSet<WorkingOrderStatusType> WorkingOrderStatusTypes { get; set; }

        public virtual DbSet<WorkingOrderStatusTypesHistory> WorkingOrderStatusTypesHistories { get; set; }

        public virtual DbSet<WorkingOrderStatusesHistory> WorkingOrderStatusesHistories { get; set; }

        public virtual DbSet<WorkingOrderSubType> WorkingOrderSubTypes { get; set; }

        public virtual DbSet<WorkingOrderType> WorkingOrderTypes { get; set; }

        public virtual DbSet<WorkingOrderView> WorkingOrderViews { get; set; }

        public virtual DbSet<WorkingOrderViewHandlingStatus> WorkingOrderViewHandlingStatuses { get; set; }

        public virtual DbSet<WorkingOrderVisitInformation> WorkingOrderVisitInformations { get; set; }

        public virtual DbSet<WorkingOrderVisitInformationsHistory> WorkingOrderVisitInformationsHistories { get; set; }

        public virtual DbSet<WorkingOrdersHistory> WorkingOrdersHistories { get; set; }

        public virtual DbSet<WorkingOrdersSearchView> WorkingOrdersSearchViews { get; set; }

        public virtual DbSet<WorkingOrdersWithoutPurchaseInvoicesView> WorkingOrdersWithoutPurchaseInvoicesViews { get; set; }

        public virtual DbSet<XmlInvoiceTranslation> XmlInvoiceTranslations { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
            => optionsBuilder.UseSqlServer("Server=.\\SQLEXPRESS;Database=CED.Prospect;Trusted_Connection=True;Encrypt=False;Connect Timeout=99999999;");

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.UseCollation("Latin1_General_CI_AI");

           
        modelBuilder.Entity<ActivityExecution>(entity =>
            {
                entity.HasKey(e => e.AeId);

                entity.ToTable("ActivityExecutions", "pdc");

                entity.HasIndex(e => e.AeCode, "UX_pdc_ActivityExecutions_Code__Filtered")
                    .IsUnique()
                    .HasFilter("([AE_Inactive]=(0))");

                entity.Property(e => e.AeId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("AE_Id");
                entity.Property(e => e.AeCode)
                    .HasMaxLength(10)
                    .HasColumnName("AE_Code");
                entity.Property(e => e.AeCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AE_CreatedBy");
                entity.Property(e => e.AeCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("AE_CreatedDate");
                entity.Property(e => e.AeInactive).HasColumnName("AE_Inactive");
                entity.Property(e => e.AeLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AE_LastModifiedBy");
                entity.Property(e => e.AeLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("AE_LastModifiedDate");
                entity.Property(e => e.AeLocalizableEntryId).HasColumnName("AE_LocalizableEntry_Id");
                entity.Property(e => e.AeLongName)
                    .HasMaxLength(250)
                    .HasColumnName("AE_LongName");
                entity.Property(e => e.AeShortName)
                    .HasMaxLength(20)
                    .HasColumnName("AE_ShortName");
                entity.Property(e => e.AeTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("AE_TimeStamp");

                entity.HasOne(d => d.AeLocalizableEntry).WithMany(p => p.ActivityExecutions)
                    .HasForeignKey(d => d.AeLocalizableEntryId)
                    .HasConstraintName("FK_ActivityExecutions_LocalizableEntries");
            });

            modelBuilder.Entity<ActivityMapping>(entity =>
            {
                entity.HasKey(e => e.AmId).HasName("PK__Activity__55181B42A3660640");

                entity.ToTable("ActivityMapping", "pros");

                entity.Property(e => e.AmId)
                    .ValueGeneratedNever()
                    .HasColumnName("AM_Id");
                entity.Property(e => e.AmActivityExecutionId).HasColumnName("AM_ActivityExecutionId");
                entity.Property(e => e.AmActivityId).HasColumnName("AM_ActivityId");
                entity.Property(e => e.AmCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AM_CreatedBy");
                entity.Property(e => e.AmCreatedDate).HasColumnName("AM_CreatedDate");
                entity.Property(e => e.AmDefaultEis).HasColumnName("AM_DefaultEIS");
                entity.Property(e => e.AmDefaultProspect).HasColumnName("AM_DefaultProspect");
                entity.Property(e => e.AmEisActivity).HasColumnName("AM_EisActivity");
                entity.Property(e => e.AmLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AM_LastModifiedBy");
                entity.Property(e => e.AmLastModifiedDate).HasColumnName("AM_LastModifiedDate");
                entity.Property(e => e.AmReportingFormId).HasColumnName("AM_ReportingFormId");
                entity.Property(e => e.AmTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("AM_TimeStamp");
            });

            modelBuilder.Entity<ActivityOption>(entity =>
            {
                entity.HasKey(e => e.AoId);

                entity.ToTable("ActivityOptions", "pdc");

                entity.HasIndex(e => e.AoCode, "UX_pdc_ActivityOptions_Code__Filtered")
                    .IsUnique()
                    .HasFilter("([AO_Inactive]=(0))");

                entity.Property(e => e.AoId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("AO_Id");
                entity.Property(e => e.AoActivityOptionTypeId).HasColumnName("AO_ActivityOptionType_Id");
                entity.Property(e => e.AoCode)
                    .HasMaxLength(20)
                    .HasColumnName("AO_Code");
                entity.Property(e => e.AoCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AO_CreatedBy");
                entity.Property(e => e.AoCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("AO_CreatedDate");
                entity.Property(e => e.AoDisplayOrder).HasColumnName("AO_DisplayOrder");
                entity.Property(e => e.AoInactive).HasColumnName("AO_Inactive");
                entity.Property(e => e.AoLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AO_LastModifiedBy");
                entity.Property(e => e.AoLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("AO_LastModifiedDate");
                entity.Property(e => e.AoLocalizableEntryId).HasColumnName("AO_LocalizableEntry_Id");
                entity.Property(e => e.AoLongName)
                    .HasMaxLength(250)
                    .HasColumnName("AO_LongName");
                entity.Property(e => e.AoShortName)
                    .HasMaxLength(20)
                    .HasColumnName("AO_ShortName");
                entity.Property(e => e.AoTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("AO_TimeStamp");

                entity.HasOne(d => d.AoActivityOptionType).WithMany(p => p.ActivityOptions)
                    .HasForeignKey(d => d.AoActivityOptionTypeId)
                    .HasConstraintName("FK_ActivityOptions_ActivityOptionTypes");

                entity.HasOne(d => d.AoLocalizableEntry).WithMany(p => p.ActivityOptions)
                    .HasForeignKey(d => d.AoLocalizableEntryId)
                    .HasConstraintName("FK_ActivityOptions_LocalizableEntries");
            });

            modelBuilder.Entity<ActivityOptionRelation>(entity =>
            {
                entity.HasKey(e => e.AorId).HasName("PK_ReportingFormActivityOptions");

                entity.ToTable("ActivityOptionRelations", "pdc");

                entity.Property(e => e.AorId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("AOR_Id");
                entity.Property(e => e.AorChildActivityExecutionId).HasColumnName("AOR_ChildActivityExecution_Id");
                entity.Property(e => e.AorCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AOR_CreatedBy");
                entity.Property(e => e.AorCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("AOR_CreatedDate");
                entity.Property(e => e.AorLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AOR_LastModifiedBy");
                entity.Property(e => e.AorLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("AOR_LastModifiedDate");
                entity.Property(e => e.AorParentActivityExecutionId).HasColumnName("AOR_ParentActivityExecution_Id");
                entity.Property(e => e.AorTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("AOR_TimeStamp");

                entity.HasOne(d => d.AorChildActivityExecution).WithMany(p => p.ActivityOptionRelationAorChildActivityExecutions)
                    .HasForeignKey(d => d.AorChildActivityExecutionId)
                    .HasConstraintName("FK_ReportingFormActivityOptions_ActivityOptions2");

                entity.HasOne(d => d.AorParentActivityExecution).WithMany(p => p.ActivityOptionRelationAorParentActivityExecutions)
                    .HasForeignKey(d => d.AorParentActivityExecutionId)
                    .HasConstraintName("FK_ReportingFormActivityOptions_ActivityOptions");
            });

            modelBuilder.Entity<ActivityOptionType>(entity =>
            {
                entity.HasKey(e => e.AotId);

                entity.ToTable("ActivityOptionTypes", "pdc");

                entity.Property(e => e.AotId)
                    .ValueGeneratedNever()
                    .HasColumnName("AOT_Id");
                entity.Property(e => e.AotCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AOT_CreatedBy");
                entity.Property(e => e.AotCreatedDate).HasColumnName("AOT_CreatedDate");
                entity.Property(e => e.AotInactive).HasColumnName("AOT_Inactive");
                entity.Property(e => e.AotLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AOT_LastModifiedBy");
                entity.Property(e => e.AotLastModifiedDate).HasColumnName("AOT_LastModifiedDate");
                entity.Property(e => e.AotLongName)
                    .HasMaxLength(250)
                    .HasColumnName("AOT_LongName");
                entity.Property(e => e.AotShortName)
                    .HasMaxLength(20)
                    .HasColumnName("AOT_ShortName");
                entity.Property(e => e.AotTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("AOT_TimeStamp");
            });

            modelBuilder.Entity<Address>(entity =>
            {
                entity.HasKey(e => e.AdrId);

                entity.ToTable("Addresses", "mdm");

                entity.HasIndex(e => new { e.AdrHouseNo, e.AdrPostalCode, e.AdrCountryCode }, "IX_mdm_Addresses_HouseNo_PostalCode_Country_Code");

                entity.Property(e => e.AdrId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("ADR_Id");
                entity.Property(e => e.AdrCity)
                    .HasMaxLength(250)
                    .HasColumnName("ADR_City");
                entity.Property(e => e.AdrCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("ADR_Country_Code");
                entity.Property(e => e.AdrCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ADR_CreatedBy");
                entity.Property(e => e.AdrCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ADR_CreatedDate");
                entity.Property(e => e.AdrFreeField1)
                    .HasMaxLength(250)
                    .HasColumnName("ADR_FreeField1");
                entity.Property(e => e.AdrFreeField2)
                    .HasMaxLength(250)
                    .HasColumnName("ADR_FreeField2");
                entity.Property(e => e.AdrFreeField3)
                    .HasMaxLength(250)
                    .HasColumnName("ADR_FreeField3");
                entity.Property(e => e.AdrHouseNo)
                    .HasMaxLength(10)
                    .HasColumnName("ADR_HouseNo");
                entity.Property(e => e.AdrHouseNoAddition)
                    .HasMaxLength(250)
                    .HasColumnName("ADR_HouseNoAddition");
                entity.Property(e => e.AdrLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ADR_LastModifiedBy");
                entity.Property(e => e.AdrLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ADR_LastModifiedDate");
                entity.Property(e => e.AdrLatitude).HasColumnName("ADR_Latitude");
                entity.Property(e => e.AdrLongitude).HasColumnName("ADR_Longitude");
                entity.Property(e => e.AdrPostalCode)
                    .HasMaxLength(10)
                    .HasColumnName("ADR_PostalCode");
                entity.Property(e => e.AdrProvince)
                    .HasMaxLength(250)
                    .HasColumnName("ADR_Province");
                entity.Property(e => e.AdrStreetName)
                    .HasMaxLength(250)
                    .HasColumnName("ADR_StreetName");
                entity.Property(e => e.AdrTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ADR_TimeStamp");
            });

            modelBuilder.Entity<Address1>(entity =>
            {
                entity.HasKey(e => e.AdrId);

                entity.ToTable("Addresses", "stg");

                entity.Property(e => e.AdrId)
                    .ValueGeneratedNever()
                    .HasColumnName("ADR_Id");
                entity.Property(e => e.AdrCity)
                    .HasMaxLength(250)
                    .HasColumnName("ADR_City");
                entity.Property(e => e.AdrCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("ADR_Country_Code");
                entity.Property(e => e.AdrCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ADR_CreatedBy");
                entity.Property(e => e.AdrCreatedDate).HasColumnName("ADR_CreatedDate");
                entity.Property(e => e.AdrFreeField1)
                    .HasMaxLength(250)
                    .HasColumnName("ADR_FreeField1");
                entity.Property(e => e.AdrFreeField2)
                    .HasMaxLength(250)
                    .HasColumnName("ADR_FreeField2");
                entity.Property(e => e.AdrFreeField3)
                    .HasMaxLength(250)
                    .HasColumnName("ADR_FreeField3");
                entity.Property(e => e.AdrHouseNo)
                    .HasMaxLength(10)
                    .HasColumnName("ADR_HouseNo");
                entity.Property(e => e.AdrHouseNoAddition)
                    .HasMaxLength(250)
                    .HasColumnName("ADR_HouseNoAddition");
                entity.Property(e => e.AdrLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ADR_LastModifiedBy");
                entity.Property(e => e.AdrLastModifiedDate).HasColumnName("ADR_LastModifiedDate");
                entity.Property(e => e.AdrLatitude).HasColumnName("ADR_Latitude");
                entity.Property(e => e.AdrLongitude).HasColumnName("ADR_Longitude");
                entity.Property(e => e.AdrPostalCode)
                    .HasMaxLength(10)
                    .HasColumnName("ADR_PostalCode");
                entity.Property(e => e.AdrProvince)
                    .HasMaxLength(250)
                    .HasColumnName("ADR_Province");
                entity.Property(e => e.AdrStreetName)
                    .HasMaxLength(250)
                    .HasColumnName("ADR_StreetName");
                entity.Property(e => e.AdrTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ADR_TimeStamp");
            });

            modelBuilder.Entity<AddressType>(entity =>
            {
                entity.HasKey(e => e.AdtId);

                entity.ToTable("AddressTypes", "mdm");

                entity.HasIndex(e => e.AdtCode, "UX_mdm_AddressTypes_Code__Filtered")
                    .IsUnique()
                    .HasFilter("([ADT_Inactive]=(0))");

                entity.Property(e => e.AdtId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("ADT_Id");
                entity.Property(e => e.AdtCode)
                    .HasMaxLength(10)
                    .HasColumnName("ADT_Code");
                entity.Property(e => e.AdtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ADT_CreatedBy");
                entity.Property(e => e.AdtCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ADT_CreatedDate");
                entity.Property(e => e.AdtInactive).HasColumnName("ADT_Inactive");
                entity.Property(e => e.AdtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ADT_LastModifiedBy");
                entity.Property(e => e.AdtLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ADT_LastModifiedDate");
                entity.Property(e => e.AdtLocalizableEntryId).HasColumnName("ADT_LocalizableEntry_Id");
                entity.Property(e => e.AdtLongName)
                    .HasMaxLength(250)
                    .HasColumnName("ADT_LongName");
                entity.Property(e => e.AdtShortName)
                    .HasMaxLength(20)
                    .HasColumnName("ADT_ShortName");
                entity.Property(e => e.AdtTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ADT_TimeStamp");

                entity.HasOne(d => d.AdtLocalizableEntry).WithMany(p => p.AddressTypes)
                    .HasForeignKey(d => d.AdtLocalizableEntryId)
                    .HasConstraintName("FK_AddressTypes_LocalizableEntries");
            });

            modelBuilder.Entity<AddressType1>(entity =>
            {
                entity.HasKey(e => e.AdtId);

                entity.ToTable("AddressTypes", "stg");

                entity.Property(e => e.AdtId)
                    .ValueGeneratedNever()
                    .HasColumnName("ADT_Id");
                entity.Property(e => e.AdtCode)
                    .HasMaxLength(10)
                    .HasColumnName("ADT_Code");
                entity.Property(e => e.AdtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ADT_CreatedBy");
                entity.Property(e => e.AdtCreatedDate).HasColumnName("ADT_CreatedDate");
                entity.Property(e => e.AdtInactive).HasColumnName("ADT_Inactive");
                entity.Property(e => e.AdtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ADT_LastModifiedBy");
                entity.Property(e => e.AdtLastModifiedDate).HasColumnName("ADT_LastModifiedDate");
                entity.Property(e => e.AdtLocalizableEntryId).HasColumnName("ADT_LocalizableEntry_Id");
                entity.Property(e => e.AdtLongName)
                    .HasMaxLength(250)
                    .HasColumnName("ADT_LongName");
                entity.Property(e => e.AdtShortName)
                    .HasMaxLength(20)
                    .HasColumnName("ADT_ShortName");
                entity.Property(e => e.AdtTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ADT_TimeStamp");
            });

            modelBuilder.Entity<AdviceDossier>(entity =>
            {
                entity.HasKey(e => e.AvdId);

                entity.ToTable("AdviceDossiers", "dos", tb => tb.HasTrigger("th_dos_AdviceDossiers_TraceHistory"));

                entity.Property(e => e.AvdId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("AVD_Id");
                entity.Property(e => e.AvdAdditionalExplanation).HasColumnName("AVD_AdditionalExplanation");
                entity.Property(e => e.AvdCaseNumber)
                    .HasMaxLength(128)
                    .HasColumnName("AVD_CaseNumber");
                entity.Property(e => e.AvdCause)
                    .HasMaxLength(200)
                    .HasColumnName("AVD_Cause");
                entity.Property(e => e.AvdCoverage)
                    .HasMaxLength(200)
                    .HasColumnName("AVD_Coverage");
                entity.Property(e => e.AvdCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AVD_CreatedBy");
                entity.Property(e => e.AvdCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("AVD_CreatedDate");
                entity.Property(e => e.AvdDamageAmountEstimate)
                    .HasColumnType("money")
                    .HasColumnName("AVD_DamageAmountEstimate");
                entity.Property(e => e.AvdDamageCity)
                    .HasMaxLength(200)
                    .HasColumnName("AVD_DamageCity");
                entity.Property(e => e.AvdDamageDate).HasColumnName("AVD_DamageDate");
                entity.Property(e => e.AvdDamageDateKnown).HasColumnName("AVD_DamageDateKnown");
                entity.Property(e => e.AvdDamageStreet)
                    .HasMaxLength(200)
                    .HasColumnName("AVD_DamageStreet");
                entity.Property(e => e.AvdDamageType)
                    .HasMaxLength(200)
                    .HasColumnName("AVD_DamageType");
                entity.Property(e => e.AvdInsurancePolicyId).HasColumnName("AVD_InsurancePolicy_Id");
                entity.Property(e => e.AvdIntakeDate).HasColumnName("AVD_IntakeDate");
                entity.Property(e => e.AvdIsDamageDateEstimated).HasColumnName("AVD_IsDamageDateEstimated");
                entity.Property(e => e.AvdIsNotUrgent)
                    .IsRequired()
                    .HasDefaultValueSql("((1))")
                    .HasColumnName("AVD_IsNotUrgent");
                entity.Property(e => e.AvdLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AVD_LastModifiedBy");
                entity.Property(e => e.AvdLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("AVD_LastModifiedDate");
                entity.Property(e => e.AvdMainReason).HasColumnName("AVD_MainReason");
                entity.Property(e => e.AvdObjectBuildingInUse)
                    .HasMaxLength(200)
                    .HasColumnName("AVD_ObjectBuildingInUse");
                entity.Property(e => e.AvdObjectCondition)
                    .HasMaxLength(200)
                    .HasColumnName("AVD_ObjectCondition");
                entity.Property(e => e.AvdObjectContructionYear).HasColumnName("AVD_ObjectContructionYear");
                entity.Property(e => e.AvdObjectExternalMaterials)
                    .HasMaxLength(200)
                    .HasColumnName("AVD_ObjectExternalMaterials");
                entity.Property(e => e.AvdObjectRoofCoverging)
                    .HasMaxLength(200)
                    .HasColumnName("AVD_ObjectRoofCoverging");
                entity.Property(e => e.AvdReason).HasColumnName("AVD_Reason");
                entity.Property(e => e.AvdRecoveryPossible).HasColumnName("AVD_RecoveryPossible");
                entity.Property(e => e.AvdSubReason).HasColumnName("AVD_SubReason");
                entity.Property(e => e.AvdTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("AVD_TimeStamp");

                entity.HasOne(d => d.Avd).WithOne(p => p.AdviceDossier)
                    .HasForeignKey<AdviceDossier>(d => d.AvdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AdviceDossiers_Dossiers");

                entity.HasOne(d => d.AvdInsurancePolicy).WithMany(p => p.AdviceDossiers)
                    .HasForeignKey(d => d.AvdInsurancePolicyId)
                    .HasConstraintName("FK_AdviceDossiers_InsurancePolicies");
            });

            modelBuilder.Entity<AdviceDossiersHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_AdviceDossiers_History_ID");

                entity.ToTable("AdviceDossiers_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.AvdAdditionalExplanation).HasColumnName("AVD_AdditionalExplanation");
                entity.Property(e => e.AvdCaseNumber)
                    .HasMaxLength(128)
                    .HasColumnName("AVD_CaseNumber");
                entity.Property(e => e.AvdCause)
                    .HasMaxLength(200)
                    .HasColumnName("AVD_Cause");
                entity.Property(e => e.AvdCoverage)
                    .HasMaxLength(200)
                    .HasColumnName("AVD_Coverage");
                entity.Property(e => e.AvdCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AVD_CreatedBy");
                entity.Property(e => e.AvdCreatedDate).HasColumnName("AVD_CreatedDate");
                entity.Property(e => e.AvdDamageAmountEstimate)
                    .HasColumnType("money")
                    .HasColumnName("AVD_DamageAmountEstimate");
                entity.Property(e => e.AvdDamageCity)
                    .HasMaxLength(200)
                    .HasColumnName("AVD_DamageCity");
                entity.Property(e => e.AvdDamageDate).HasColumnName("AVD_DamageDate");
                entity.Property(e => e.AvdDamageDateKnown).HasColumnName("AVD_DamageDateKnown");
                entity.Property(e => e.AvdDamageStreet)
                    .HasMaxLength(200)
                    .HasColumnName("AVD_DamageStreet");
                entity.Property(e => e.AvdDamageType)
                    .HasMaxLength(200)
                    .HasColumnName("AVD_DamageType");
                entity.Property(e => e.AvdId).HasColumnName("AVD_Id");
                entity.Property(e => e.AvdInsurancePolicyId).HasColumnName("AVD_InsurancePolicy_Id");
                entity.Property(e => e.AvdIsDamageDateEstimated).HasColumnName("AVD_IsDamageDateEstimated");
                entity.Property(e => e.AvdLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AVD_LastModifiedBy");
                entity.Property(e => e.AvdLastModifiedDate).HasColumnName("AVD_LastModifiedDate");
                entity.Property(e => e.AvdMainReason).HasColumnName("AVD_MainReason");
                entity.Property(e => e.AvdObjectBuildingInUse)
                    .HasMaxLength(200)
                    .HasColumnName("AVD_ObjectBuildingInUse");
                entity.Property(e => e.AvdObjectCondition)
                    .HasMaxLength(200)
                    .HasColumnName("AVD_ObjectCondition");
                entity.Property(e => e.AvdObjectContructionYear).HasColumnName("AVD_ObjectContructionYear");
                entity.Property(e => e.AvdObjectExternalMaterials)
                    .HasMaxLength(200)
                    .HasColumnName("AVD_ObjectExternalMaterials");
                entity.Property(e => e.AvdObjectRoofCoverging)
                    .HasMaxLength(200)
                    .HasColumnName("AVD_ObjectRoofCoverging");
                entity.Property(e => e.AvdReason).HasColumnName("AVD_Reason");
                entity.Property(e => e.AvdRecoveryPossible).HasColumnName("AVD_RecoveryPossible");
                entity.Property(e => e.AvdSubReason).HasColumnName("AVD_SubReason");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<Agent>(entity =>
            {
                entity.HasKey(e => e.AgId);

                entity.ToTable("Agents", "mdm");

                entity.Property(e => e.AgId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("AG_Id");
                entity.Property(e => e.AgCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AG_CreatedBy");
                entity.Property(e => e.AgCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("AG_CreatedDate");
                entity.Property(e => e.AgCultureCodePreferredLanguage)
                    .HasMaxLength(10)
                    .HasColumnName("AG_CultureCodePreferredLanguage");
                entity.Property(e => e.AgExternalCode)
                    .HasMaxLength(10)
                    .HasColumnName("AG_ExternalCode");
                entity.Property(e => e.AgInactive).HasColumnName("AG_Inactive");
                entity.Property(e => e.AgLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AG_LastModifiedBy");
                entity.Property(e => e.AgLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("AG_LastModifiedDate");
                entity.Property(e => e.AgTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("AG_TimeStamp");

                entity.HasOne(d => d.Ag).WithOne(p => p.Agent)
                    .HasForeignKey<Agent>(d => d.AgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Agents_OrganizationUnits");
            });

            modelBuilder.Entity<Agent1>(entity =>
            {
                entity.HasKey(e => e.AgId);

                entity.ToTable("Agents", "stg");

                entity.Property(e => e.AgId)
                    .ValueGeneratedNever()
                    .HasColumnName("AG_Id");
                entity.Property(e => e.AgCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AG_CreatedBy");
                entity.Property(e => e.AgCreatedDate).HasColumnName("AG_CreatedDate");
                entity.Property(e => e.AgCultureCodePreferredLanguage)
                    .HasMaxLength(10)
                    .HasColumnName("AG_CultureCodePreferredLanguage");
                entity.Property(e => e.AgExternalCode)
                    .HasMaxLength(10)
                    .HasColumnName("AG_ExternalCode");
                entity.Property(e => e.AgInactive).HasColumnName("AG_Inactive");
                entity.Property(e => e.AgLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AG_LastModifiedBy");
                entity.Property(e => e.AgLastModifiedDate).HasColumnName("AG_LastModifiedDate");
                entity.Property(e => e.AgTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("AG_TimeStamp");
            });

            modelBuilder.Entity<AgentsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AgentsView", "mdm");

                entity.Property(e => e.Actief)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.Adres).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.Einddatum).HasColumnType("date");
                entity.Property(e => e.ExterneCode)
                    .HasMaxLength(10)
                    .HasColumnName("Externe code");
                entity.Property(e => e.Huisnr).HasMaxLength(10);
                entity.Property(e => e.Landcode).HasMaxLength(3);
                entity.Property(e => e.LandcodePostbus)
                    .HasMaxLength(3)
                    .HasColumnName("Landcode postbus");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NaamCpl)
                    .HasMaxLength(756)
                    .HasColumnName("Naam cpl");
                entity.Property(e => e.NaamKort)
                    .HasMaxLength(20)
                    .HasColumnName("Naam kort");
                entity.Property(e => e.NiveauPlekInStructuur)
                    .HasMaxLength(61)
                    .HasColumnName("Niveau (plek in structuur)");
                entity.Property(e => e.OgCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("OG-Code");
                entity.Property(e => e.ParentBovenliggendeType)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("Parent (bovenliggende type)");
                entity.Property(e => e.Porcode).HasMaxLength(10);
                entity.Property(e => e.Postbus).HasMaxLength(10);
                entity.Property(e => e.Postcode).HasMaxLength(10);
                entity.Property(e => e.PostcodePostbus)
                    .HasMaxLength(10)
                    .HasColumnName("Postcode postbus");
                entity.Property(e => e.Provincie).HasMaxLength(250);
                entity.Property(e => e.ProvinciePostbus)
                    .HasMaxLength(250)
                    .HasColumnName("Provincie postbus");
                entity.Property(e => e.Startdatum).HasColumnType("date");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.Toevoeging).HasMaxLength(250);
                entity.Property(e => e.TypeTpVerzOfVolmacht)
                    .HasMaxLength(61)
                    .HasColumnName("Type (tp/verz/of volmacht)");
                entity.Property(e => e.Woonplaats).HasMaxLength(250);
                entity.Property(e => e.WoonplaatsPostbus)
                    .HasMaxLength(250)
                    .HasColumnName("Woonplaats postbus");
            });

            modelBuilder.Entity<AgentsViewWithContactInformation>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AgentsViewWithContactInformation", "mdm");

                entity.Property(e => e.Actief)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.Adres).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.Einddatum).HasColumnType("date");
                entity.Property(e => e.Email).HasMaxLength(250);
                entity.Property(e => e.ExterneCode)
                    .HasMaxLength(10)
                    .HasColumnName("Externe code");
                entity.Property(e => e.Huisnr).HasMaxLength(10);
                entity.Property(e => e.Landcode).HasMaxLength(3);
                entity.Property(e => e.LandcodePostbus)
                    .HasMaxLength(3)
                    .HasColumnName("Landcode postbus");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NaamCpl)
                    .HasMaxLength(756)
                    .HasColumnName("Naam cpl");
                entity.Property(e => e.NaamKort)
                    .HasMaxLength(20)
                    .HasColumnName("Naam kort");
                entity.Property(e => e.NiveauPlekInStructuur)
                    .HasMaxLength(61)
                    .HasColumnName("Niveau (plek in structuur)");
                entity.Property(e => e.OgCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("OG-Code");
                entity.Property(e => e.ParentBovenliggendeType)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("Parent (bovenliggende type)");
                entity.Property(e => e.PhoneNumber).HasMaxLength(250);
                entity.Property(e => e.Porcode).HasMaxLength(10);
                entity.Property(e => e.Postbus).HasMaxLength(10);
                entity.Property(e => e.Postcode).HasMaxLength(10);
                entity.Property(e => e.PostcodePostbus)
                    .HasMaxLength(10)
                    .HasColumnName("Postcode postbus");
                entity.Property(e => e.Provincie).HasMaxLength(250);
                entity.Property(e => e.ProvinciePostbus)
                    .HasMaxLength(250)
                    .HasColumnName("Provincie postbus");
                entity.Property(e => e.Startdatum).HasColumnType("date");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.Toevoeging).HasMaxLength(250);
                entity.Property(e => e.Type)
                    .HasMaxLength(5)
                    .IsUnicode(false);
                entity.Property(e => e.TypeTpVerzOfVolmacht)
                    .HasMaxLength(61)
                    .HasColumnName("Type (tp/verz/of volmacht)");
                entity.Property(e => e.Woonplaats).HasMaxLength(250);
                entity.Property(e => e.WoonplaatsPostbus)
                    .HasMaxLength(250)
                    .HasColumnName("Woonplaats postbus");
            });

            modelBuilder.Entity<AlarmCenter>(entity =>
            {
                entity.HasKey(e => e.AlcId);

                entity.ToTable("AlarmCenters", "mdm");

                entity.Property(e => e.AlcId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("ALC_Id");
                entity.Property(e => e.AlcCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ALC_CreatedBy");
                entity.Property(e => e.AlcCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ALC_CreatedDate");
                entity.Property(e => e.AlcCultureCodePreferredLanguage)
                    .HasMaxLength(10)
                    .HasColumnName("ALC_CultureCodePreferredLanguage");
                entity.Property(e => e.AlcExternalCode)
                    .HasMaxLength(10)
                    .HasColumnName("ALC_ExternalCode");
                entity.Property(e => e.AlcInactive).HasColumnName("ALC_Inactive");
                entity.Property(e => e.AlcLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ALC_LastModifiedBy");
                entity.Property(e => e.AlcLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ALC_LastModifiedDate");
                entity.Property(e => e.AlcTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ALC_TimeStamp");

                entity.HasOne(d => d.Alc).WithOne(p => p.AlarmCenter)
                    .HasForeignKey<AlarmCenter>(d => d.AlcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AlarmCenters_OrganizationUnits");
            });

            modelBuilder.Entity<AlarmCenter1>(entity =>
            {
                entity.HasKey(e => e.AlcId);

                entity.ToTable("AlarmCenters", "stg");

                entity.Property(e => e.AlcId)
                    .ValueGeneratedNever()
                    .HasColumnName("ALC_Id");
                entity.Property(e => e.AlcCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ALC_CreatedBy");
                entity.Property(e => e.AlcCreatedDate).HasColumnName("ALC_CreatedDate");
                entity.Property(e => e.AlcCultureCodePreferredLanguage)
                    .HasMaxLength(10)
                    .HasColumnName("ALC_CultureCodePreferredLanguage");
                entity.Property(e => e.AlcExternalCode)
                    .HasMaxLength(10)
                    .HasColumnName("ALC_ExternalCode");
                entity.Property(e => e.AlcInactive).HasColumnName("ALC_Inactive");
                entity.Property(e => e.AlcLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ALC_LastModifiedBy");
                entity.Property(e => e.AlcLastModifiedDate).HasColumnName("ALC_LastModifiedDate");
                entity.Property(e => e.AlcTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ALC_TimeStamp");
            });

            modelBuilder.Entity<Application>(entity =>
            {
                entity.HasKey(e => e.AppId);

                entity.ToTable("Applications", "mdm");

                entity.Property(e => e.AppId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("APP_Id");
                entity.Property(e => e.AppCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("APP_CreatedBy");
                entity.Property(e => e.AppCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("APP_CreatedDate");
                entity.Property(e => e.AppInactive).HasColumnName("APP_Inactive");
                entity.Property(e => e.AppLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("APP_LastModifiedBy");
                entity.Property(e => e.AppLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("APP_LastModifiedDate");
                entity.Property(e => e.AppLocalizableEntryId).HasColumnName("APP_LocalizableEntry_Id");
                entity.Property(e => e.AppName)
                    .HasMaxLength(255)
                    .HasColumnName("APP_Name");
                entity.Property(e => e.AppNumber)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .HasColumnName("APP_Number");
                entity.Property(e => e.AppTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("APP_TimeStamp");

                entity.HasOne(d => d.AppLocalizableEntry).WithMany(p => p.Applications)
                    .HasForeignKey(d => d.AppLocalizableEntryId)
                    .HasConstraintName("FK_Applications_LocalizableEntries");
            });

            modelBuilder.Entity<Application1>(entity =>
            {
                entity.HasKey(e => e.AppId);

                entity.ToTable("Applications", "stg");

                entity.Property(e => e.AppId)
                    .ValueGeneratedNever()
                    .HasColumnName("APP_Id");
                entity.Property(e => e.AppCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("APP_CreatedBy");
                entity.Property(e => e.AppCreatedDate).HasColumnName("APP_CreatedDate");
                entity.Property(e => e.AppInactive).HasColumnName("APP_Inactive");
                entity.Property(e => e.AppLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("APP_LastModifiedBy");
                entity.Property(e => e.AppLastModifiedDate).HasColumnName("APP_LastModifiedDate");
                entity.Property(e => e.AppLocalizableEntryId).HasColumnName("APP_LocalizableEntry_Id");
                entity.Property(e => e.AppName)
                    .HasMaxLength(255)
                    .HasColumnName("APP_Name");
                entity.Property(e => e.AppNumber)
                    .HasMaxLength(20)
                    .HasColumnName("APP_Number");
                entity.Property(e => e.AppTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("APP_TimeStamp");
            });

            modelBuilder.Entity<ApplicationSetting>(entity =>
            {
                entity.HasKey(e => e.AcsId).HasName("PK_ApplicationSetings");

                entity.ToTable("ApplicationSettings", "mdm");

                entity.Property(e => e.AcsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("ACS_Id");
                entity.Property(e => e.AcsApplicationRuleId)
                    .HasMaxLength(30)
                    .HasColumnName("ACS_ApplicationRule_Id");
                entity.Property(e => e.AcsApplicationRuleValue).HasColumnName("ACS_ApplicationRuleValue");
                entity.Property(e => e.AcsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ACS_CreatedBy");
                entity.Property(e => e.AcsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ACS_CreatedDate");
                entity.Property(e => e.AcsEffectiveDate)
                    .HasDefaultValueSql("(getutcdate())")
                    .HasColumnType("date")
                    .HasColumnName("ACS_EffectiveDate");
                entity.Property(e => e.AcsEntrySystem)
                    .HasMaxLength(10)
                    .HasColumnName("ACS_EntrySystem");
                entity.Property(e => e.AcsLastModifiedBy)
                    .HasMaxLength(200)
                    .HasColumnName("ACS_LastModifiedBy");
                entity.Property(e => e.AcsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ACS_LastModifiedDate");
                entity.Property(e => e.AcsLegalEntityId).HasColumnName("ACS_LegalEntity_Id");
                entity.Property(e => e.AcsTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("ACS_TerminationDate");
                entity.Property(e => e.AcsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ACS_TimeStamp");

                entity.HasOne(d => d.AcsLegalEntity).WithMany(p => p.ApplicationSettings)
                    .HasForeignKey(d => d.AcsLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApplicationSettings_LegalEntities");
            });

            modelBuilder.Entity<ApplicationsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ApplicationsView", "mdm");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.Name).HasMaxLength(255);
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<AppointmentTimeSlot>(entity =>
            {
                entity.HasKey(e => e.PtsId);

                entity.ToTable("AppointmentTimeSlots", "pdc");

                entity.Property(e => e.PtsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PTS_Id");
                entity.Property(e => e.PtsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PTS_CreatedBy");
                entity.Property(e => e.PtsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PTS_CreatedDate");
                entity.Property(e => e.PtsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PTS_LastModifiedBy");
                entity.Property(e => e.PtsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PTS_LastModifiedDate");
                entity.Property(e => e.PtsProductId).HasColumnName("PTS_Product_Id");
                entity.Property(e => e.PtsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PTS_TimeStamp");
                entity.Property(e => e.PtsTimeTableId).HasColumnName("PTS_TimeTable_Id");

                entity.HasOne(d => d.PtsProduct).WithMany(p => p.AppointmentTimeSlots)
                    .HasForeignKey(d => d.PtsProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AppointmentTimeSlots_Products");

                entity.HasOne(d => d.PtsTimeTable).WithMany(p => p.AppointmentTimeSlots)
                    .HasForeignKey(d => d.PtsTimeTableId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AppointmentTimeSlots_TimeTables");
            });

            modelBuilder.Entity<AssignmentViewHandlingStatus>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("Assignment_View_Handling_Status", "pros");

                entity.Property(e => e.EmployeeEmail).HasMaxLength(250);
                entity.Property(e => e.Feature).HasMaxLength(10);
                entity.Property(e => e.QualityCheckStatus).HasMaxLength(10);
                entity.Property(e => e.Status).HasMaxLength(10);
            });

            modelBuilder.Entity<AssistanceDossier>(entity =>
            {
                entity.HasKey(e => e.AsdId);

                entity.ToTable("AssistanceDossiers", "dos", tb => tb.HasTrigger("th_dos_AssistanceDossiers_TraceHistory"));

                entity.Property(e => e.AsdId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("ASD_Id");
                entity.Property(e => e.AsdAssistanceBeforeConfirmation).HasColumnName("ASD_AssistanceBeforeConfirmation");
                entity.Property(e => e.AsdCaseNumberAlarmCenter)
                    .HasMaxLength(20)
                    .HasColumnName("ASD_CaseNumberAlarmCenter");
                entity.Property(e => e.AsdCause)
                    .HasMaxLength(200)
                    .HasColumnName("ASD_Cause");
                entity.Property(e => e.AsdCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ASD_CreatedBy");
                entity.Property(e => e.AsdCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ASD_CreatedDate");
                entity.Property(e => e.AsdExternalComments)
                    .HasMaxLength(500)
                    .HasColumnName("ASD_ExternalComments");
                entity.Property(e => e.AsdIncidentCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("ASD_IncidentCountryCode");
                entity.Property(e => e.AsdIncidentDate).HasColumnName("ASD_IncidentDate");
                entity.Property(e => e.AsdIncidentLocationId).HasColumnName("ASD_IncidentLocation_Id");
                entity.Property(e => e.AsdIncidentNumber)
                    .HasMaxLength(20)
                    .HasColumnName("ASD_IncidentNumber");
                entity.Property(e => e.AsdIntakeDate).HasColumnName("ASD_IntakeDate");
                entity.Property(e => e.AsdInternalComments)
                    .HasMaxLength(500)
                    .HasColumnName("ASD_InternalComments");
                entity.Property(e => e.AsdIsDuplicate).HasColumnName("ASD_IsDuplicate");
                entity.Property(e => e.AsdIsOem).HasColumnName("ASD_IsOEM");
                entity.Property(e => e.AsdLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ASD_LastModifiedBy");
                entity.Property(e => e.AsdLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ASD_LastModifiedDate");
                entity.Property(e => e.AsdLcm).HasColumnName("ASD_LCM");
                entity.Property(e => e.AsdNumberOfPassengers).HasColumnName("ASD_NumberOfPassengers");
                entity.Property(e => e.AsdOriginalAssistanceDossierId).HasColumnName("ASD_OriginalAssistanceDossier_Id");
                entity.Property(e => e.AsdPetsInvolved).HasColumnName("ASD_PetsInvolved");
                entity.Property(e => e.AsdReason)
                    .HasMaxLength(200)
                    .HasColumnName("ASD_Reason");
                entity.Property(e => e.AsdReportedAfterwards).HasColumnName("ASD_ReportedAfterwards");
                entity.Property(e => e.AsdRoadAuthorityId).HasColumnName("ASD_RoadAuthority_Id");
                entity.Property(e => e.AsdSecurityVehicleRequested).HasColumnName("ASD_SecurityVehicleRequested");
                entity.Property(e => e.AsdTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ASD_TimeStamp");
                entity.Property(e => e.AsdTravellingToAbroad).HasColumnName("ASD_TravellingToAbroad");

                entity.HasOne(d => d.Asd).WithOne(p => p.AssistanceDossier)
                    .HasForeignKey<AssistanceDossier>(d => d.AsdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AssistanceDossiers_Dossiers");

                entity.HasOne(d => d.AsdIncidentLocation).WithMany(p => p.AssistanceDossiers)
                    .HasForeignKey(d => d.AsdIncidentLocationId)
                    .HasConstraintName("FK_AssistanceDossiers_AssistancePlanLocations");

                entity.HasOne(d => d.AsdRoadAuthority).WithMany(p => p.AssistanceDossiers)
                    .HasForeignKey(d => d.AsdRoadAuthorityId)
                    .HasConstraintName("FK_AssistanceDossiers_RoadAuthorities");
            });

            modelBuilder.Entity<AssistanceDossiersHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_AssistanceDossiers_History_ID");

                entity.ToTable("AssistanceDossiers_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.AsdAssistanceBeforeConfirmation).HasColumnName("ASD_AssistanceBeforeConfirmation");
                entity.Property(e => e.AsdCaseNumberAlarmCenter)
                    .HasMaxLength(20)
                    .HasColumnName("ASD_CaseNumberAlarmCenter");
                entity.Property(e => e.AsdCause)
                    .HasMaxLength(200)
                    .HasColumnName("ASD_Cause");
                entity.Property(e => e.AsdCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ASD_CreatedBy");
                entity.Property(e => e.AsdCreatedDate).HasColumnName("ASD_CreatedDate");
                entity.Property(e => e.AsdExternalComments)
                    .HasMaxLength(500)
                    .HasColumnName("ASD_ExternalComments");
                entity.Property(e => e.AsdId).HasColumnName("ASD_Id");
                entity.Property(e => e.AsdIncidentCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("ASD_IncidentCountryCode");
                entity.Property(e => e.AsdIncidentDate).HasColumnName("ASD_IncidentDate");
                entity.Property(e => e.AsdIncidentLocationId).HasColumnName("ASD_IncidentLocation_Id");
                entity.Property(e => e.AsdIncidentNumber)
                    .HasMaxLength(20)
                    .HasColumnName("ASD_IncidentNumber");
                entity.Property(e => e.AsdIntakeDate).HasColumnName("ASD_IntakeDate");
                entity.Property(e => e.AsdInternalComments)
                    .HasMaxLength(500)
                    .HasColumnName("ASD_InternalComments");
                entity.Property(e => e.AsdIsDuplicate).HasColumnName("ASD_IsDuplicate");
                entity.Property(e => e.AsdIsOem).HasColumnName("ASD_IsOEM");
                entity.Property(e => e.AsdLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ASD_LastModifiedBy");
                entity.Property(e => e.AsdLastModifiedDate).HasColumnName("ASD_LastModifiedDate");
                entity.Property(e => e.AsdLcm).HasColumnName("ASD_LCM");
                entity.Property(e => e.AsdNumberOfPassengers).HasColumnName("ASD_NumberOfPassengers");
                entity.Property(e => e.AsdOriginalAssistanceDossierId).HasColumnName("ASD_OriginalAssistanceDossier_Id");
                entity.Property(e => e.AsdPetsInvolved).HasColumnName("ASD_PetsInvolved");
                entity.Property(e => e.AsdReason)
                    .HasMaxLength(200)
                    .HasColumnName("ASD_Reason");
                entity.Property(e => e.AsdReportedAfterwards).HasColumnName("ASD_ReportedAfterwards");
                entity.Property(e => e.AsdRoadAuthorityId).HasColumnName("ASD_RoadAuthority_Id");
                entity.Property(e => e.AsdSecurityVehicleRequested).HasColumnName("ASD_SecurityVehicleRequested");
                entity.Property(e => e.AsdTravellingToAbroad).HasColumnName("ASD_TravellingToAbroad");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<AssistanceDossiersOpenView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AssistanceDossiersOpenView", "dos");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierStatusCode).HasMaxLength(10);
                entity.Property(e => e.DossierStatusName).HasMaxLength(250);
                entity.Property(e => e.DossierStatusType).HasMaxLength(20);
                entity.Property(e => e.DossierTypeName).HasMaxLength(250);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<AssistanceDossiersView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AssistanceDossiersView", "dos");

                entity.Property(e => e.AgentCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.AgentName).HasMaxLength(756);
                entity.Property(e => e.ApplicationName).HasMaxLength(255);
                entity.Property(e => e.CaseNumberAlarmCenter).HasMaxLength(20);
                entity.Property(e => e.Cause).HasMaxLength(200);
                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.ContactPersonEmail).HasMaxLength(250);
                entity.Property(e => e.ContactPersonFullName).HasMaxLength(250);
                entity.Property(e => e.ContactPersonMobile).HasMaxLength(20);
                entity.Property(e => e.ContactPersonPhone).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.DepartmentName).HasMaxLength(756);
                entity.Property(e => e.Direction).HasMaxLength(50);
                entity.Property(e => e.DossierHandlerName).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierStatusCode).HasMaxLength(10);
                entity.Property(e => e.DossierStatusName).HasMaxLength(250);
                entity.Property(e => e.DossierTypeCode).HasMaxLength(10);
                entity.Property(e => e.DossierTypeName).HasMaxLength(250);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.ExternalComments).HasMaxLength(500);
                entity.Property(e => e.HectometerPostAddition).HasMaxLength(1);
                entity.Property(e => e.IncidentCity).HasMaxLength(250);
                entity.Property(e => e.IncidentCountryCode).HasMaxLength(3);
                entity.Property(e => e.IncidentHouseNo).HasMaxLength(10);
                entity.Property(e => e.IncidentHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.IncidentLocationRoadNumber).HasMaxLength(10);
                entity.Property(e => e.IncidentLocationRoadTypeId).HasMaxLength(10);
                entity.Property(e => e.IncidentLocationTypeName).HasMaxLength(250);
                entity.Property(e => e.IncidentNumber).HasMaxLength(20);
                entity.Property(e => e.IncidentPostalCode).HasMaxLength(10);
                entity.Property(e => e.IncidentProvince).HasMaxLength(250);
                entity.Property(e => e.IncidentRoadLane).HasMaxLength(1);
                entity.Property(e => e.IncidentStreetName).HasMaxLength(250);
                entity.Property(e => e.InternalComments).HasMaxLength(500);
                entity.Property(e => e.IsOem).HasColumnName("IsOEM");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.MandateCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.MandateName).HasMaxLength(756);
                entity.Property(e => e.ProductCode).HasMaxLength(20);
                entity.Property(e => e.ProductName).HasMaxLength(250);
                entity.Property(e => e.Reason).HasMaxLength(200);
                entity.Property(e => e.RoadAuthorityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.RoadAuthorityName).HasMaxLength(756);
                entity.Property(e => e.RoadName).HasMaxLength(200);
                entity.Property(e => e.RoadSectionId).HasMaxLength(10);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<AssistanceLocationType>(entity =>
            {
                entity.HasKey(e => e.AltId);

                entity.ToTable("AssistanceLocationTypes", "mdm");

                entity.Property(e => e.AltId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("ALT_Id");
                entity.Property(e => e.AltCode)
                    .HasMaxLength(10)
                    .HasColumnName("ALT_Code");
                entity.Property(e => e.AltCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ALT_CreatedBy");
                entity.Property(e => e.AltCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ALT_CreatedDate");
                entity.Property(e => e.AltInactive).HasColumnName("ALT_Inactive");
                entity.Property(e => e.AltIsApplicableObject).HasColumnName("ALT_IsApplicableObject");
                entity.Property(e => e.AltIsApplicablePerson).HasColumnName("ALT_IsApplicablePerson");
                entity.Property(e => e.AltIsFromLocation).HasColumnName("ALT_IsFromLocation");
                entity.Property(e => e.AltIsToLocation).HasColumnName("ALT_IsToLocation");
                entity.Property(e => e.AltLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ALT_LastModifiedBy");
                entity.Property(e => e.AltLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ALT_LastModifiedDate");
                entity.Property(e => e.AltLocalizableEntryId).HasColumnName("ALT_LocalizableEntry_Id");
                entity.Property(e => e.AltLongName)
                    .HasMaxLength(250)
                    .HasColumnName("ALT_LongName");
                entity.Property(e => e.AltShortName)
                    .HasMaxLength(20)
                    .HasColumnName("ALT_ShortName");
                entity.Property(e => e.AltTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ALT_TimeStamp");

                entity.HasOne(d => d.AltLocalizableEntry).WithMany(p => p.AssistanceLocationTypes)
                    .HasForeignKey(d => d.AltLocalizableEntryId)
                    .HasConstraintName("FK_AssistanceLocationTypes_LocalizableEntries");
            });

            modelBuilder.Entity<AssistancePlan>(entity =>
            {
                entity.HasKey(e => e.AspId);

                entity.ToTable("AssistancePlans", "dos", tb => tb.HasTrigger("th_dos_AssistancePlans_TraceHistory"));

                entity.HasIndex(e => e.AspAssistancePlanNumber, "IX_AssistancePlans_ASP_AssistancePlanNumber");

                entity.HasIndex(e => e.AspDossierId, "IX_AssistancePlans_ASP_Dossier_Id");

                entity.HasIndex(e => e.AspAssistancePlanNumber, "IX_AssistancePlans_AssistancePlanNumber").IsUnique();

                entity.HasIndex(e => e.AspInvolvedObjectId, "IX_dos_AssistancePlans_InvolvedObject");

                entity.Property(e => e.AspId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("ASP_Id");
                entity.Property(e => e.AspActivationDate).HasColumnName("ASP_ActivationDate");
                entity.Property(e => e.AspAddtionalComment1)
                    .HasMaxLength(500)
                    .HasColumnName("ASP_AddtionalComment1");
                entity.Property(e => e.AspAddtionalComment2)
                    .HasMaxLength(500)
                    .HasColumnName("ASP_AddtionalComment2");
                entity.Property(e => e.AspAddtionalComment3)
                    .HasMaxLength(500)
                    .HasColumnName("ASP_AddtionalComment3");
                entity.Property(e => e.AspAddtionalComment4)
                    .HasMaxLength(500)
                    .HasColumnName("ASP_AddtionalComment4");
                entity.Property(e => e.AspAssistanceExecutorOrganizationUnitId).HasColumnName("ASP_AssistanceExecutorOrganizationUnit_Id");
                entity.Property(e => e.AspAssistancePlanNumber)
                    .HasMaxLength(20)
                    .HasColumnName("ASP_AssistancePlanNumber");
                entity.Property(e => e.AspAssistancePlanTypeId).HasColumnName("ASP_AssistancePlanType_Id");
                entity.Property(e => e.AspCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ASP_CreatedBy");
                entity.Property(e => e.AspCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ASP_CreatedDate");
                entity.Property(e => e.AspCurrentStatusCode)
                    .HasMaxLength(10)
                    .HasColumnName("ASP_CurrentStatusCode");
                entity.Property(e => e.AspCurrentStatusHistoryId).HasColumnName("ASP_CurrentStatusHistory_Id");
                entity.Property(e => e.AspCurrentStatusHistoryStartDate).HasColumnName("ASP_CurrentStatusHistoryStartDate");
                entity.Property(e => e.AspDistanceComments)
                    .HasMaxLength(500)
                    .HasColumnName("ASP_DistanceComments");
                entity.Property(e => e.AspDossierId).HasColumnName("ASP_Dossier_Id");
                entity.Property(e => e.AspDossierPartyId).HasColumnName("ASP_DossierParty_Id");
                entity.Property(e => e.AspDropoffComments)
                    .HasMaxLength(500)
                    .HasColumnName("ASP_DropoffComments");
                entity.Property(e => e.AspDropoffLocationId).HasColumnName("ASP_DropoffLocation_Id");
                entity.Property(e => e.AspExecutionArrivalDate).HasColumnName("ASP_ExecutionArrivalDate");
                entity.Property(e => e.AspExecutionEndDate).HasColumnName("ASP_ExecutionEndDate");
                entity.Property(e => e.AspExecutionStartDate).HasColumnName("ASP_ExecutionStartDate");
                entity.Property(e => e.AspExpectRepairOnSpot).HasColumnName("ASP_ExpectRepairOnSpot");
                entity.Property(e => e.AspForeignCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("ASP_ForeignCurrencyCode");
                entity.Property(e => e.AspGeneralComments)
                    .HasMaxLength(500)
                    .HasColumnName("ASP_GeneralComments");
                entity.Property(e => e.AspInvoiceRecipientId).HasColumnName("ASP_InvoiceRecipient_Id");
                entity.Property(e => e.AspInvoiceRecipientIsLegalEntity).HasColumnName("ASP_InvoiceRecipientIsLegalEntity");
                entity.Property(e => e.AspInvolvedObjectId).HasColumnName("ASP_InvolvedObject_Id");
                entity.Property(e => e.AspLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ASP_LastModifiedBy");
                entity.Property(e => e.AspLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ASP_LastModifiedDate");
                entity.Property(e => e.AspLateCancellation).HasColumnName("ASP_LateCancellation");
                entity.Property(e => e.AspLeadCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("ASP_LeadCurrencyCode");
                entity.Property(e => e.AspPickupComments)
                    .HasMaxLength(500)
                    .HasColumnName("ASP_PickupComments");
                entity.Property(e => e.AspPickupLocationId).HasColumnName("ASP_PickupLocation_Id");
                entity.Property(e => e.AspRequireDirectTransport).HasColumnName("ASP_RequireDirectTransport");
                entity.Property(e => e.AspStartDate).HasColumnName("ASP_StartDate");
                entity.Property(e => e.AspSupplierComments)
                    .HasMaxLength(500)
                    .HasColumnName("ASP_SupplierComments");
                entity.Property(e => e.AspSupplierId).HasColumnName("ASP_Supplier_Id");
                entity.Property(e => e.AspTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ASP_TimeStamp");

                entity.HasOne(d => d.AspAssistanceExecutorOrganizationUnit).WithMany(p => p.AssistancePlanAspAssistanceExecutorOrganizationUnits)
                    .HasForeignKey(d => d.AspAssistanceExecutorOrganizationUnitId)
                    .HasConstraintName("FK_AssistancePlans_OrganizationUnits");

                entity.HasOne(d => d.AspAssistancePlanType).WithMany(p => p.AssistancePlans)
                    .HasForeignKey(d => d.AspAssistancePlanTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AssistancePlans_AssistancePlanTypes");

                entity.HasOne(d => d.AspDossier).WithMany(p => p.AssistancePlans)
                    .HasForeignKey(d => d.AspDossierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AssistancePlans_Dossiers");

                entity.HasOne(d => d.AspDossierParty).WithMany(p => p.AssistancePlans)
                    .HasForeignKey(d => d.AspDossierPartyId)
                    .HasConstraintName("FK_AssistancePlans_DossierParties");

                entity.HasOne(d => d.AspDropoffLocation).WithMany(p => p.AssistancePlanAspDropoffLocations)
                    .HasForeignKey(d => d.AspDropoffLocationId)
                    .HasConstraintName("FK_AssistancePlans_AssistancePlanDropoffLocations");

                entity.HasOne(d => d.AspInvoiceRecipient).WithMany(p => p.AssistancePlanAspInvoiceRecipients)
                    .HasForeignKey(d => d.AspInvoiceRecipientId)
                    .HasConstraintName("FK_AssistancePlans_InvoiceRecipients");

                entity.HasOne(d => d.AspInvolvedObject).WithMany(p => p.AssistancePlans)
                    .HasForeignKey(d => d.AspInvolvedObjectId)
                    .HasConstraintName("FK_AssistancePlans_InvolvedObjects");

                entity.HasOne(d => d.AspPickupLocation).WithMany(p => p.AssistancePlanAspPickupLocations)
                    .HasForeignKey(d => d.AspPickupLocationId)
                    .HasConstraintName("FK_AssistancePlans_AssistancePlanPickupLocations");

                entity.HasOne(d => d.AspSupplier).WithMany(p => p.AssistancePlans)
                    .HasForeignKey(d => d.AspSupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AssistancePlans_Suppliers");
            });

            modelBuilder.Entity<AssistancePlanAllPurchaseInvoicesWaitingForApprovalView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AssistancePlanAllPurchaseInvoicesWaitingForApprovalView", "dos");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<AssistancePlanClientsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AssistancePlanClientsView", "dos");

                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(20);
                entity.Property(e => e.ChargedExpensesInvoiceRecipientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ChargedExpensesInvoiceRecipientName).HasMaxLength(756);
                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.CoverageFreeField1).HasMaxLength(500);
                entity.Property(e => e.CoverageFreeField2).HasMaxLength(500);
                entity.Property(e => e.CoverageFreeField3).HasMaxLength(500);
                entity.Property(e => e.CoverageFreeField4).HasMaxLength(500);
                entity.Property(e => e.CoverageProductName).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.FeeInvoiceRecipientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.FeeInvoiceRecipientName).HasMaxLength(756);
                entity.Property(e => e.InsurancePolicyNumber).HasMaxLength(50);
                entity.Property(e => e.InsuranceProductType).HasMaxLength(200);
                entity.Property(e => e.InsurerCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.InsurerName).HasMaxLength(756);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.MandateCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.MandateName).HasMaxLength(756);
                entity.Property(e => e.PolicyHolder).HasMaxLength(200);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<AssistancePlanCoverage>(entity =>
            {
                entity.HasKey(e => e.ApcId);

                entity.ToTable("AssistancePlanCoverages", "dos", tb => tb.HasTrigger("th_dos_AssistancePlanCoverages_TraceHistory"));

                entity.HasIndex(e => e.ApcInvolvedCoverageId, "IX_AssistancePlanCoverages_APC_InvolvedCoverage_Id/");

                entity.HasIndex(e => e.ApcAssistancePlanLineId, "IX_AssistancePlanCoverages_AssistancePlanLine_Id");

                entity.HasIndex(e => e.ApcInactive, "IX_dos_AssistancePlanCoverages_Inactive__INCL");

                entity.Property(e => e.ApcId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("APC_Id");
                entity.Property(e => e.ApcAssistancePlanLineId).HasColumnName("APC_AssistancePlanLine_Id");
                entity.Property(e => e.ApcCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("APC_CreatedBy");
                entity.Property(e => e.ApcCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("APC_CreatedDate");
                entity.Property(e => e.ApcCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("APC_CurrencyCode");
                entity.Property(e => e.ApcExchangeRate).HasColumnName("APC_ExchangeRate");
                entity.Property(e => e.ApcExchangeRateId).HasColumnName("APC_ExchangeRate_Id");
                entity.Property(e => e.ApcFixedRate).HasColumnName("APC_FixedRate");
                entity.Property(e => e.ApcGrossAmount)
                    .HasColumnType("money")
                    .HasColumnName("APC_GrossAmount");
                entity.Property(e => e.ApcInactive).HasColumnName("APC_Inactive");
                entity.Property(e => e.ApcInvolvedCoverageId).HasColumnName("APC_InvolvedCoverage_Id");
                entity.Property(e => e.ApcLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("APC_LastModifiedBy");
                entity.Property(e => e.ApcLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("APC_LastModifiedDate");
                entity.Property(e => e.ApcLeadCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("APC_LeadCurrencyCode");
                entity.Property(e => e.ApcMaxGrossAmount)
                    .HasColumnType("money")
                    .HasColumnName("APC_MaxGrossAmount");
                entity.Property(e => e.ApcMaxNetAmount)
                    .HasColumnType("money")
                    .HasColumnName("APC_MaxNetAmount");
                entity.Property(e => e.ApcMaxTaxAmount)
                    .HasColumnType("money")
                    .HasColumnName("APC_MaxTaxAmount");
                entity.Property(e => e.ApcNetAmount)
                    .HasColumnType("money")
                    .HasColumnName("APC_NetAmount");
                entity.Property(e => e.ApcNotes)
                    .HasMaxLength(500)
                    .HasColumnName("APC_Notes");
                entity.Property(e => e.ApcPriority).HasColumnName("APC_Priority");
                entity.Property(e => e.ApcTaxAmount)
                    .HasColumnType("money")
                    .HasColumnName("APC_TaxAmount");
                entity.Property(e => e.ApcTaxBase)
                    .HasColumnType("money")
                    .HasColumnName("APC_TaxBase");
                entity.Property(e => e.ApcTaxCode)
                    .HasMaxLength(20)
                    .HasColumnName("APC_TaxCode");
                entity.Property(e => e.ApcTaxCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("APC_TaxCountryCode");
                entity.Property(e => e.ApcTaxExempted).HasColumnName("APC_TaxExempted");
                entity.Property(e => e.ApcTaxImport).HasColumnName("APC_TaxImport");
                entity.Property(e => e.ApcTaxRate).HasColumnName("APC_TaxRate");
                entity.Property(e => e.ApcTaxReversedCharge).HasColumnName("APC_TaxReversedCharge");
                entity.Property(e => e.ApcTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("APC_TimeStamp");

                entity.HasOne(d => d.ApcAssistancePlanLine).WithMany(p => p.AssistancePlanCoverages)
                    .HasForeignKey(d => d.ApcAssistancePlanLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AssistancePlanCoverages_AssistancePlanLines");

                entity.HasOne(d => d.ApcExchangeRateNavigation).WithMany(p => p.AssistancePlanCoverages)
                    .HasForeignKey(d => d.ApcExchangeRateId)
                    .HasConstraintName("FK_AssistancePlanCoverages_ExchangeRates");

                entity.HasOne(d => d.ApcInvolvedCoverage).WithMany(p => p.AssistancePlanCoverages)
                    .HasForeignKey(d => d.ApcInvolvedCoverageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AssistancePlanCoverages_InvolvedCoverages");
            });

            modelBuilder.Entity<AssistancePlanCoveragesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_AssistancePlanCoverages_History_ID");

                entity.ToTable("AssistancePlanCoverages_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.ApcAssistancePlanLineId).HasColumnName("APC_AssistancePlanLine_Id");
                entity.Property(e => e.ApcCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("APC_CreatedBy");
                entity.Property(e => e.ApcCreatedDate).HasColumnName("APC_CreatedDate");
                entity.Property(e => e.ApcCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("APC_CurrencyCode");
                entity.Property(e => e.ApcExchangeRate).HasColumnName("APC_ExchangeRate");
                entity.Property(e => e.ApcExchangeRateId).HasColumnName("APC_ExchangeRate_Id");
                entity.Property(e => e.ApcFixedRate).HasColumnName("APC_FixedRate");
                entity.Property(e => e.ApcGrossAmount)
                    .HasColumnType("money")
                    .HasColumnName("APC_GrossAmount");
                entity.Property(e => e.ApcId).HasColumnName("APC_Id");
                entity.Property(e => e.ApcInactive).HasColumnName("APC_Inactive");
                entity.Property(e => e.ApcInvolvedCoverageId).HasColumnName("APC_InvolvedCoverage_Id");
                entity.Property(e => e.ApcLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("APC_LastModifiedBy");
                entity.Property(e => e.ApcLastModifiedDate).HasColumnName("APC_LastModifiedDate");
                entity.Property(e => e.ApcLeadCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("APC_LeadCurrencyCode");
                entity.Property(e => e.ApcMaxGrossAmount)
                    .HasColumnType("money")
                    .HasColumnName("APC_MaxGrossAmount");
                entity.Property(e => e.ApcMaxNetAmount)
                    .HasColumnType("money")
                    .HasColumnName("APC_MaxNetAmount");
                entity.Property(e => e.ApcMaxTaxAmount)
                    .HasColumnType("money")
                    .HasColumnName("APC_MaxTaxAmount");
                entity.Property(e => e.ApcNetAmount)
                    .HasColumnType("money")
                    .HasColumnName("APC_NetAmount");
                entity.Property(e => e.ApcNotes)
                    .HasMaxLength(500)
                    .HasColumnName("APC_Notes");
                entity.Property(e => e.ApcPriority).HasColumnName("APC_Priority");
                entity.Property(e => e.ApcTaxAmount)
                    .HasColumnType("money")
                    .HasColumnName("APC_TaxAmount");
                entity.Property(e => e.ApcTaxBase)
                    .HasColumnType("money")
                    .HasColumnName("APC_TaxBase");
                entity.Property(e => e.ApcTaxCode)
                    .HasMaxLength(20)
                    .HasColumnName("APC_TaxCode");
                entity.Property(e => e.ApcTaxCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("APC_TaxCountryCode");
                entity.Property(e => e.ApcTaxExempted).HasColumnName("APC_TaxExempted");
                entity.Property(e => e.ApcTaxImport).HasColumnName("APC_TaxImport");
                entity.Property(e => e.ApcTaxRate).HasColumnName("APC_TaxRate");
                entity.Property(e => e.ApcTaxReversedCharge).HasColumnName("APC_TaxReversedCharge");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<AssistancePlanCoveragesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AssistancePlanCoveragesView", "dos");

                entity.Property(e => e.AssistancePlanGrossAmount).HasColumnType("money");
                entity.Property(e => e.AssistancePlanLineMaxNetAmount).HasColumnType("money");
                entity.Property(e => e.AssistancePlanNetAmount).HasColumnType("money");
                entity.Property(e => e.AssistancePlanTaxAmount).HasColumnType("money");
                entity.Property(e => e.AssistancePlanTypeName).HasMaxLength(250);
                entity.Property(e => e.ChargedExpensesInvoiceRecipientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ChargedExpensesInvoiceRecipientName).HasMaxLength(250);
                entity.Property(e => e.ClaimReserveClassificationId).HasMaxLength(20);
                entity.Property(e => e.ClaimReserveNumber).HasMaxLength(10);
                entity.Property(e => e.ClaimReserveTypeName).HasMaxLength(250);
                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.CoverageFreeField1).HasMaxLength(500);
                entity.Property(e => e.CoverageFreeField2).HasMaxLength(500);
                entity.Property(e => e.CoverageFreeField3).HasMaxLength(500);
                entity.Property(e => e.CoverageFreeField4).HasMaxLength(500);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.ExchangeRateAccountingDate).HasColumnType("date");
                entity.Property(e => e.FeeInvoiceRecipientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.FeeInvoiceRecipientName).HasMaxLength(250);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InsurancePolicyNumber).HasMaxLength(50);
                entity.Property(e => e.InsuranceProductType).HasMaxLength(200);
                entity.Property(e => e.InsurerCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.InsurerName).HasMaxLength(756);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.MandateCode).HasMaxLength(20);
                entity.Property(e => e.MandateName).HasMaxLength(250);
                entity.Property(e => e.MaxGrossAmount).HasColumnType("money");
                entity.Property(e => e.MaxNetAmount).HasColumnType("money");
                entity.Property(e => e.MaxTaxAmount).HasColumnType("money");
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Notes).HasMaxLength(500);
                entity.Property(e => e.PolicyHolder).HasMaxLength(200);
                entity.Property(e => e.ServiceCode).HasMaxLength(10);
                entity.Property(e => e.ServiceName).HasMaxLength(250);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxCountryCode).HasMaxLength(3);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<AssistancePlanCreditableSalesOrdersView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AssistancePlanCreditableSalesOrdersView", "dos");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<AssistancePlanLine>(entity =>
            {
                entity.HasKey(e => e.AplId);

                entity.ToTable("AssistancePlanLines", "dos", tb => tb.HasTrigger("th_dos_AssistancePlanLines_TraceHistory"));

                entity.HasIndex(e => e.AplAssistancePlanId, "IX_AssistancePlanLines_AssistancePlan_Id");

                entity.HasIndex(e => e.AplInactive, "IX_dos_AssistancePlanLines_Inactive__INCL");

                entity.Property(e => e.AplId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("APL_Id");
                entity.Property(e => e.AplAssistancePlanId).HasColumnName("APL_AssistancePlan_Id");
                entity.Property(e => e.AplCostOfSalesComments)
                    .HasMaxLength(500)
                    .HasColumnName("APL_CostOfSalesComments");
                entity.Property(e => e.AplCostRateAgreementApplicable).HasColumnName("APL_CostRateAgreementApplicable");
                entity.Property(e => e.AplCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("APL_CreatedBy");
                entity.Property(e => e.AplCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("APL_CreatedDate");
                entity.Property(e => e.AplDiscount)
                    .HasColumnType("money")
                    .HasColumnName("APL_Discount");
                entity.Property(e => e.AplExchangeRate).HasColumnName("APL_ExchangeRate");
                entity.Property(e => e.AplExchangeRateId).HasColumnName("APL_ExchangeRate_Id");
                entity.Property(e => e.AplGrossAmount)
                    .HasColumnType("money")
                    .HasColumnName("APL_GrossAmount");
                entity.Property(e => e.AplInactive)
                    .HasDefaultValueSql("((0))")
                    .HasColumnName("APL_Inactive");
                entity.Property(e => e.AplIsCostOfSales).HasColumnName("APL_IsCostOfSales");
                entity.Property(e => e.AplIsTaxBeforeDiscount).HasColumnName("APL_IsTaxBeforeDiscount");
                entity.Property(e => e.AplLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("APL_LastModifiedBy");
                entity.Property(e => e.AplLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("APL_LastModifiedDate");
                entity.Property(e => e.AplLineNumber).HasColumnName("APL_LineNumber");
                entity.Property(e => e.AplMaxGrossAmount)
                    .HasColumnType("money")
                    .HasColumnName("APL_MaxGrossAmount");
                entity.Property(e => e.AplMaxNetAmount)
                    .HasColumnType("money")
                    .HasColumnName("APL_MaxNetAmount");
                entity.Property(e => e.AplMaxTaxAmount)
                    .HasColumnType("money")
                    .HasColumnName("APL_MaxTaxAmount");
                entity.Property(e => e.AplNetAmount)
                    .HasColumnType("money")
                    .HasColumnName("APL_NetAmount");
                entity.Property(e => e.AplNotes)
                    .HasMaxLength(500)
                    .HasColumnName("APL_Notes");
                entity.Property(e => e.AplQuantity).HasColumnName("APL_Quantity");
                entity.Property(e => e.AplServiceId).HasColumnName("APL_Service_Id");
                entity.Property(e => e.AplTaxAmount)
                    .HasColumnType("money")
                    .HasColumnName("APL_TaxAmount");
                entity.Property(e => e.AplTaxBase)
                    .HasColumnType("money")
                    .HasColumnName("APL_TaxBase");
                entity.Property(e => e.AplTaxCode)
                    .HasMaxLength(20)
                    .HasColumnName("APL_TaxCode");
                entity.Property(e => e.AplTaxCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("APL_TaxCountryCode");
                entity.Property(e => e.AplTaxExempted).HasColumnName("APL_TaxExempted");
                entity.Property(e => e.AplTaxImport).HasColumnName("APL_TaxImport");
                entity.Property(e => e.AplTaxRate).HasColumnName("APL_TaxRate");
                entity.Property(e => e.AplTaxReversedCharge).HasColumnName("APL_TaxReversedCharge");
                entity.Property(e => e.AplTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("APL_TimeStamp");
                entity.Property(e => e.AplUnitOfMeasureId)
                    .HasMaxLength(20)
                    .HasColumnName("APL_UnitOfMeasure_Id");
                entity.Property(e => e.AplUnitPrice)
                    .HasColumnType("money")
                    .HasColumnName("APL_UnitPrice");

                entity.HasOne(d => d.AplAssistancePlan).WithMany(p => p.AssistancePlanLines)
                    .HasForeignKey(d => d.AplAssistancePlanId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AssistancePlanLines_AssistancePlans");

                entity.HasOne(d => d.AplExchangeRateNavigation).WithMany(p => p.AssistancePlanLines)
                    .HasForeignKey(d => d.AplExchangeRateId)
                    .HasConstraintName("FK_AssistancePlanLines_ExchangeRates");

                entity.HasOne(d => d.AplService).WithMany(p => p.AssistancePlanLines)
                    .HasForeignKey(d => d.AplServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AssistancePlanLines_Services");

                entity.HasOne(d => d.AplUnitOfMeasure).WithMany(p => p.AssistancePlanLines)
                    .HasForeignKey(d => d.AplUnitOfMeasureId)
                    .HasConstraintName("FK_AssistancePlanLines_UnitOfMeasures");
            });

            modelBuilder.Entity<AssistancePlanLinesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_AssistancePlanLines_History_ID");

                entity.ToTable("AssistancePlanLines_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.AplAssistancePlanId).HasColumnName("APL_AssistancePlan_Id");
                entity.Property(e => e.AplCostOfSalesComments)
                    .HasMaxLength(500)
                    .HasColumnName("APL_CostOfSalesComments");
                entity.Property(e => e.AplCostRateAgreementApplicable).HasColumnName("APL_CostRateAgreementApplicable");
                entity.Property(e => e.AplCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("APL_CreatedBy");
                entity.Property(e => e.AplCreatedDate).HasColumnName("APL_CreatedDate");
                entity.Property(e => e.AplDiscount)
                    .HasColumnType("money")
                    .HasColumnName("APL_Discount");
                entity.Property(e => e.AplExchangeRate).HasColumnName("APL_ExchangeRate");
                entity.Property(e => e.AplExchangeRateId).HasColumnName("APL_ExchangeRate_Id");
                entity.Property(e => e.AplGrossAmount)
                    .HasColumnType("money")
                    .HasColumnName("APL_GrossAmount");
                entity.Property(e => e.AplId).HasColumnName("APL_Id");
                entity.Property(e => e.AplInactive).HasColumnName("APL_Inactive");
                entity.Property(e => e.AplIsCostOfSales).HasColumnName("APL_IsCostOfSales");
                entity.Property(e => e.AplIsTaxBeforeDiscount).HasColumnName("APL_IsTaxBeforeDiscount");
                entity.Property(e => e.AplLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("APL_LastModifiedBy");
                entity.Property(e => e.AplLastModifiedDate).HasColumnName("APL_LastModifiedDate");
                entity.Property(e => e.AplLineNumber).HasColumnName("APL_LineNumber");
                entity.Property(e => e.AplMaxGrossAmount)
                    .HasColumnType("money")
                    .HasColumnName("APL_MaxGrossAmount");
                entity.Property(e => e.AplMaxNetAmount)
                    .HasColumnType("money")
                    .HasColumnName("APL_MaxNetAmount");
                entity.Property(e => e.AplMaxTaxAmount)
                    .HasColumnType("money")
                    .HasColumnName("APL_MaxTaxAmount");
                entity.Property(e => e.AplNetAmount)
                    .HasColumnType("money")
                    .HasColumnName("APL_NetAmount");
                entity.Property(e => e.AplNotes)
                    .HasMaxLength(500)
                    .HasColumnName("APL_Notes");
                entity.Property(e => e.AplQuantity).HasColumnName("APL_Quantity");
                entity.Property(e => e.AplServiceId).HasColumnName("APL_Service_Id");
                entity.Property(e => e.AplTaxAmount)
                    .HasColumnType("money")
                    .HasColumnName("APL_TaxAmount");
                entity.Property(e => e.AplTaxBase)
                    .HasColumnType("money")
                    .HasColumnName("APL_TaxBase");
                entity.Property(e => e.AplTaxCode)
                    .HasMaxLength(20)
                    .HasColumnName("APL_TaxCode");
                entity.Property(e => e.AplTaxCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("APL_TaxCountryCode");
                entity.Property(e => e.AplTaxExempted).HasColumnName("APL_TaxExempted");
                entity.Property(e => e.AplTaxImport).HasColumnName("APL_TaxImport");
                entity.Property(e => e.AplTaxRate).HasColumnName("APL_TaxRate");
                entity.Property(e => e.AplTaxReversedCharge).HasColumnName("APL_TaxReversedCharge");
                entity.Property(e => e.AplUnitOfMeasureId)
                    .HasMaxLength(20)
                    .HasColumnName("APL_UnitOfMeasure_Id");
                entity.Property(e => e.AplUnitPrice)
                    .HasColumnType("money")
                    .HasColumnName("APL_UnitPrice");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<AssistancePlanLinesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AssistancePlanLinesView", "dos");

                entity.Property(e => e.CostOfSalesComments).HasMaxLength(500);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.Discount).HasColumnType("money");
                entity.Property(e => e.ForeignCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LeadCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.MaxGrossAmount).HasColumnType("money");
                entity.Property(e => e.MaxNetAmount).HasColumnType("money");
                entity.Property(e => e.MaxTaxAmount).HasColumnType("money");
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Notes).HasMaxLength(500);
                entity.Property(e => e.ServiceCode).HasMaxLength(10);
                entity.Property(e => e.ServiceName).HasMaxLength(250);
                entity.Property(e => e.SupplierExternalCode).HasMaxLength(10);
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxBase).HasColumnType("money");
                entity.Property(e => e.TaxCode).HasMaxLength(20);
                entity.Property(e => e.TaxCountryCode).HasMaxLength(3);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.UnitOfMeasureId).HasMaxLength(20);
                entity.Property(e => e.UnitPrice).HasColumnType("money");
            });

            modelBuilder.Entity<AssistancePlanLocation>(entity =>
            {
                entity.HasKey(e => e.AloId);

                entity.ToTable("AssistancePlanLocations", "dos", tb => tb.HasTrigger("th_dos_AssistancePlanLocations_TraceHistory"));

                entity.Property(e => e.AloId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("ALO_Id");
                entity.Property(e => e.AloAddressId).HasColumnName("ALO_Address_Id");
                entity.Property(e => e.AloCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ALO_CreatedBy");
                entity.Property(e => e.AloCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ALO_CreatedDate");
                entity.Property(e => e.AloDirection)
                    .HasMaxLength(50)
                    .HasColumnName("ALO_Direction");
                entity.Property(e => e.AloHectometerPost).HasColumnName("ALO_HectometerPost");
                entity.Property(e => e.AloHectometerPostAddition)
                    .HasMaxLength(1)
                    .HasColumnName("ALO_HectometerPostAddition");
                entity.Property(e => e.AloIsMainRoad).HasColumnName("ALO_IsMainRoad");
                entity.Property(e => e.AloLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ALO_LastModifiedBy");
                entity.Property(e => e.AloLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ALO_LastModifiedDate");
                entity.Property(e => e.AloLocationTypeId).HasColumnName("ALO_LocationType_Id");
                entity.Property(e => e.AloNotes)
                    .HasMaxLength(500)
                    .HasColumnName("ALO_Notes");
                entity.Property(e => e.AloRoadLane)
                    .HasMaxLength(1)
                    .HasColumnName("ALO_RoadLane");
                entity.Property(e => e.AloRoadLocationId).HasColumnName("ALO_RoadLocation_Id");
                entity.Property(e => e.AloRoadName)
                    .HasMaxLength(200)
                    .HasColumnName("ALO_RoadName");
                entity.Property(e => e.AloRoadNumber)
                    .HasMaxLength(10)
                    .HasColumnName("ALO_RoadNumber");
                entity.Property(e => e.AloRoadSectionId)
                    .HasMaxLength(10)
                    .HasColumnName("ALO_RoadSection_Id");
                entity.Property(e => e.AloRoadTypeId)
                    .HasMaxLength(10)
                    .HasColumnName("ALO_RoadType_Id");
                entity.Property(e => e.AloTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ALO_TimeStamp");

                entity.HasOne(d => d.AloAddress).WithMany(p => p.AssistancePlanLocations)
                    .HasForeignKey(d => d.AloAddressId)
                    .HasConstraintName("FK_AssistancePlanLocations_Addresses");

                entity.HasOne(d => d.AloLocationType).WithMany(p => p.AssistancePlanLocations)
                    .HasForeignKey(d => d.AloLocationTypeId)
                    .HasConstraintName("FK_AssistancePlanLocations_LocationTypes");

                entity.HasOne(d => d.AloRoadLocation).WithMany(p => p.AssistancePlanLocations)
                    .HasForeignKey(d => d.AloRoadLocationId)
                    .HasConstraintName("FK_AssistancePlanLocations_RoadLocations");

                entity.HasOne(d => d.AloRoadSection).WithMany(p => p.AssistancePlanLocations)
                    .HasForeignKey(d => d.AloRoadSectionId)
                    .HasConstraintName("FK_AssistancePlanLocations_RoadSections");

                entity.HasOne(d => d.AloRoadType).WithMany(p => p.AssistancePlanLocations)
                    .HasForeignKey(d => d.AloRoadTypeId)
                    .HasConstraintName("FK_AssistancePlanLocations_RoadTypes");
            });

            modelBuilder.Entity<AssistancePlanLocationsHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_AssistancePlanLocations_History_ID");

                entity.ToTable("AssistancePlanLocations_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.AloAddressId).HasColumnName("ALO_Address_Id");
                entity.Property(e => e.AloCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ALO_CreatedBy");
                entity.Property(e => e.AloCreatedDate).HasColumnName("ALO_CreatedDate");
                entity.Property(e => e.AloDirection)
                    .HasMaxLength(50)
                    .HasColumnName("ALO_Direction");
                entity.Property(e => e.AloHectometerPost).HasColumnName("ALO_HectometerPost");
                entity.Property(e => e.AloHectometerPostAddition)
                    .HasMaxLength(1)
                    .HasColumnName("ALO_HectometerPostAddition");
                entity.Property(e => e.AloId).HasColumnName("ALO_Id");
                entity.Property(e => e.AloIsMainRoad).HasColumnName("ALO_IsMainRoad");
                entity.Property(e => e.AloLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ALO_LastModifiedBy");
                entity.Property(e => e.AloLastModifiedDate).HasColumnName("ALO_LastModifiedDate");
                entity.Property(e => e.AloLocationTypeId).HasColumnName("ALO_LocationType_Id");
                entity.Property(e => e.AloNotes)
                    .HasMaxLength(500)
                    .HasColumnName("ALO_Notes");
                entity.Property(e => e.AloRoadLane)
                    .HasMaxLength(1)
                    .HasColumnName("ALO_RoadLane");
                entity.Property(e => e.AloRoadLocationId).HasColumnName("ALO_RoadLocation_Id");
                entity.Property(e => e.AloRoadName)
                    .HasMaxLength(200)
                    .HasColumnName("ALO_RoadName");
                entity.Property(e => e.AloRoadNumber)
                    .HasMaxLength(10)
                    .HasColumnName("ALO_RoadNumber");
                entity.Property(e => e.AloRoadSectionId)
                    .HasMaxLength(10)
                    .HasColumnName("ALO_RoadSection_Id");
                entity.Property(e => e.AloRoadTypeId)
                    .HasMaxLength(10)
                    .HasColumnName("ALO_RoadType_Id");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<AssistancePlanPendingMatchPurchaseInvoicesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AssistancePlanPendingMatchPurchaseInvoicesView", "dos");

                entity.Property(e => e.AssistancePlanDropOffLocationCity).HasMaxLength(250);
                entity.Property(e => e.AssistancePlanDropOffLocationCountryCode).HasMaxLength(3);
                entity.Property(e => e.AssistancePlanLineAmount).HasColumnType("money");
                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(20);
                entity.Property(e => e.AssistancePlanPickUpLocationCity).HasMaxLength(250);
                entity.Property(e => e.AssistancePlanPickUpLocationCountryCode).HasMaxLength(3);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DossieNumber).HasMaxLength(20);
                entity.Property(e => e.DossierEntrySystem).HasMaxLength(10);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.PurchaseOrderNumber).HasMaxLength(10);
                entity.Property(e => e.ServiceCode).HasMaxLength(10);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VehicleLicensePlate).HasMaxLength(15);
                entity.Property(e => e.VehicleLicensePlateUnformatted).HasMaxLength(15);
            });

            modelBuilder.Entity<AssistancePlanStatus>(entity =>
            {
                entity.HasKey(e => e.ApsId);

                entity.ToTable("AssistancePlanStatuses", "dos", tb => tb.HasTrigger("th_dos_AssistancePlanStatuses_TraceHistory"));

                entity.Property(e => e.ApsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("APS_Id");
                entity.Property(e => e.ApsCode)
                    .HasMaxLength(10)
                    .HasColumnName("APS_Code");
                entity.Property(e => e.ApsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("APS_CreatedBy");
                entity.Property(e => e.ApsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("APS_CreatedDate");
                entity.Property(e => e.ApsInactive).HasColumnName("APS_Inactive");
                entity.Property(e => e.ApsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("APS_LastModifiedBy");
                entity.Property(e => e.ApsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("APS_LastModifiedDate");
                entity.Property(e => e.ApsLocalizableEntryId).HasColumnName("APS_LocalizableEntry_Id");
                entity.Property(e => e.ApsLongName)
                    .HasMaxLength(250)
                    .HasColumnName("APS_LongName");
                entity.Property(e => e.ApsShortName)
                    .HasMaxLength(50)
                    .HasColumnName("APS_ShortName");
                entity.Property(e => e.ApsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("APS_TimeStamp");

                entity.HasOne(d => d.ApsLocalizableEntry).WithMany(p => p.AssistancePlanStatuses)
                    .HasForeignKey(d => d.ApsLocalizableEntryId)
                    .HasConstraintName("FK_AssistancePlanStatuses_LocalizableEntries");
            });

            modelBuilder.Entity<AssistancePlanStatusHistory>(entity =>
            {
                entity.HasKey(e => e.AphId);

                entity.ToTable("AssistancePlanStatusHistory", "dos", tb =>
                {
                    tb.HasTrigger("td_AssistancePlanStatusHistory");
                    tb.HasTrigger("th_dos_AssistancePlanStatusHistory_TraceHistory");
                    tb.HasTrigger("tr_AssistancePlanStatusHistory");
                });

                entity.HasIndex(e => new { e.AphAssistancePlanId, e.AphStartDate }, "IX_AssistancePlanStatusHistory_AssistancePlan_StartDate_INCL");

                entity.Property(e => e.AphId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("APH_Id");
                entity.Property(e => e.AphAssistancePlanId).HasColumnName("APH_AssistancePlan_Id");
                entity.Property(e => e.AphAssistancePlanStatusId).HasColumnName("APH_AssistancePlanStatus_Id");
                entity.Property(e => e.AphCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("APH_CreatedBy");
                entity.Property(e => e.AphCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("APH_CreatedDate");
                entity.Property(e => e.AphEmployeeId).HasColumnName("APH_Employee_Id");
                entity.Property(e => e.AphLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("APH_LastModifiedBy");
                entity.Property(e => e.AphLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("APH_LastModifiedDate");
                entity.Property(e => e.AphStartDate).HasColumnName("APH_StartDate");
                entity.Property(e => e.AphStatusChangeReason)
                    .HasMaxLength(250)
                    .HasColumnName("APH_StatusChangeReason");
                entity.Property(e => e.AphTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("APH_TimeStamp");

                entity.HasOne(d => d.AphAssistancePlan).WithMany(p => p.AssistancePlanStatusHistories)
                    .HasForeignKey(d => d.AphAssistancePlanId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AssistancePlanStatusHistory_AssistancePlans");

                entity.HasOne(d => d.AphAssistancePlanStatus).WithMany(p => p.AssistancePlanStatusHistories)
                    .HasForeignKey(d => d.AphAssistancePlanStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AssistancePlanStatusHistory_AssistancePlanStatuses");

                entity.HasOne(d => d.AphEmployee).WithMany(p => p.AssistancePlanStatusHistories)
                    .HasForeignKey(d => d.AphEmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AssistancePlanStatusHistory_Employees");
            });

            modelBuilder.Entity<AssistancePlanStatusHistoryHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_AssistancePlanStatusHistory_History_ID");

                entity.ToTable("AssistancePlanStatusHistory_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.AphAssistancePlanId).HasColumnName("APH_AssistancePlan_Id");
                entity.Property(e => e.AphAssistancePlanStatusId).HasColumnName("APH_AssistancePlanStatus_Id");
                entity.Property(e => e.AphCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("APH_CreatedBy");
                entity.Property(e => e.AphCreatedDate).HasColumnName("APH_CreatedDate");
                entity.Property(e => e.AphEmployeeId).HasColumnName("APH_Employee_Id");
                entity.Property(e => e.AphId).HasColumnName("APH_Id");
                entity.Property(e => e.AphLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("APH_LastModifiedBy");
                entity.Property(e => e.AphLastModifiedDate).HasColumnName("APH_LastModifiedDate");
                entity.Property(e => e.AphStartDate).HasColumnName("APH_StartDate");
                entity.Property(e => e.AphStatusChangeReason)
                    .HasMaxLength(250)
                    .HasColumnName("APH_StatusChangeReason");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<AssistancePlanStatusesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_AssistancePlanStatuses_History_ID");

                entity.ToTable("AssistancePlanStatuses_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.ApsCode)
                    .HasMaxLength(10)
                    .HasColumnName("APS_Code");
                entity.Property(e => e.ApsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("APS_CreatedBy");
                entity.Property(e => e.ApsCreatedDate).HasColumnName("APS_CreatedDate");
                entity.Property(e => e.ApsId).HasColumnName("APS_Id");
                entity.Property(e => e.ApsInactive).HasColumnName("APS_Inactive");
                entity.Property(e => e.ApsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("APS_LastModifiedBy");
                entity.Property(e => e.ApsLastModifiedDate).HasColumnName("APS_LastModifiedDate");
                entity.Property(e => e.ApsLocalizableEntryId).HasColumnName("APS_LocalizableEntry_Id");
                entity.Property(e => e.ApsLongName)
                    .HasMaxLength(250)
                    .HasColumnName("APS_LongName");
                entity.Property(e => e.ApsShortName)
                    .HasMaxLength(50)
                    .HasColumnName("APS_ShortName");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<AssistancePlanType>(entity =>
            {
                entity.HasKey(e => e.AptId);

                entity.ToTable("AssistancePlanTypes", "mdm");

                entity.Property(e => e.AptId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("APT_Id");
                entity.Property(e => e.AptAllowCostSharing).HasColumnName("APT_AllowCostSharing");
                entity.Property(e => e.AptCode)
                    .HasMaxLength(10)
                    .HasColumnName("APT_Code");
                entity.Property(e => e.AptCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("APT_CreatedBy");
                entity.Property(e => e.AptCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("APT_CreatedDate");
                entity.Property(e => e.AptInactive).HasColumnName("APT_Inactive");
                entity.Property(e => e.AptIsApplicableObject).HasColumnName("APT_IsApplicableObject");
                entity.Property(e => e.AptIsApplicablePerson).HasColumnName("APT_IsApplicablePerson");
                entity.Property(e => e.AptLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("APT_LastModifiedBy");
                entity.Property(e => e.AptLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("APT_LastModifiedDate");
                entity.Property(e => e.AptLocalizableEntryId).HasColumnName("APT_LocalizableEntry_Id");
                entity.Property(e => e.AptLongName)
                    .HasMaxLength(250)
                    .HasColumnName("APT_LongName");
                entity.Property(e => e.AptOnlyAbroad).HasColumnName("APT_OnlyAbroad");
                entity.Property(e => e.AptPriority).HasColumnName("APT_Priority");
                entity.Property(e => e.AptShortName)
                    .HasMaxLength(20)
                    .HasColumnName("APT_ShortName");
                entity.Property(e => e.AptTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("APT_TimeStamp");

                entity.HasOne(d => d.AptLocalizableEntry).WithMany(p => p.AssistancePlanTypes)
                    .HasForeignKey(d => d.AptLocalizableEntryId)
                    .HasConstraintName("FK_AssistancePlanTypes_LocalizableEntries");
            });

            modelBuilder.Entity<AssistancePlansHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_AssistancePlans_History_ID");

                entity.ToTable("AssistancePlans_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.AspActivationDate).HasColumnName("ASP_ActivationDate");
                entity.Property(e => e.AspAddtionalComment1)
                    .HasMaxLength(500)
                    .HasColumnName("ASP_AddtionalComment1");
                entity.Property(e => e.AspAddtionalComment2)
                    .HasMaxLength(500)
                    .HasColumnName("ASP_AddtionalComment2");
                entity.Property(e => e.AspAddtionalComment3)
                    .HasMaxLength(500)
                    .HasColumnName("ASP_AddtionalComment3");
                entity.Property(e => e.AspAddtionalComment4)
                    .HasMaxLength(500)
                    .HasColumnName("ASP_AddtionalComment4");
                entity.Property(e => e.AspAssistanceExecutorOrganizationUnitId).HasColumnName("ASP_AssistanceExecutorOrganizationUnit_Id");
                entity.Property(e => e.AspAssistancePlanNumber)
                    .HasMaxLength(20)
                    .HasColumnName("ASP_AssistancePlanNumber");
                entity.Property(e => e.AspAssistancePlanTypeId).HasColumnName("ASP_AssistancePlanType_Id");
                entity.Property(e => e.AspCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ASP_CreatedBy");
                entity.Property(e => e.AspCreatedDate).HasColumnName("ASP_CreatedDate");
                entity.Property(e => e.AspCurrentStatusCode)
                    .HasMaxLength(10)
                    .HasColumnName("ASP_CurrentStatusCode");
                entity.Property(e => e.AspCurrentStatusHistoryId).HasColumnName("ASP_CurrentStatusHistory_Id");
                entity.Property(e => e.AspCurrentStatusHistoryStartDate).HasColumnName("ASP_CurrentStatusHistoryStartDate");
                entity.Property(e => e.AspDistanceComments)
                    .HasMaxLength(500)
                    .HasColumnName("ASP_DistanceComments");
                entity.Property(e => e.AspDossierId).HasColumnName("ASP_Dossier_Id");
                entity.Property(e => e.AspDossierPartyId).HasColumnName("ASP_DossierParty_Id");
                entity.Property(e => e.AspDropoffComments)
                    .HasMaxLength(500)
                    .HasColumnName("ASP_DropoffComments");
                entity.Property(e => e.AspDropoffLocationId).HasColumnName("ASP_DropoffLocation_Id");
                entity.Property(e => e.AspExecutionArrivalDate).HasColumnName("ASP_ExecutionArrivalDate");
                entity.Property(e => e.AspExecutionEndDate).HasColumnName("ASP_ExecutionEndDate");
                entity.Property(e => e.AspExecutionStartDate).HasColumnName("ASP_ExecutionStartDate");
                entity.Property(e => e.AspExpectRepairOnSpot).HasColumnName("ASP_ExpectRepairOnSpot");
                entity.Property(e => e.AspForeignCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("ASP_ForeignCurrencyCode");
                entity.Property(e => e.AspGeneralComments)
                    .HasMaxLength(500)
                    .HasColumnName("ASP_GeneralComments");
                entity.Property(e => e.AspId).HasColumnName("ASP_Id");
                entity.Property(e => e.AspInvoiceRecipientId).HasColumnName("ASP_InvoiceRecipient_Id");
                entity.Property(e => e.AspInvoiceRecipientIsLegalEntity).HasColumnName("ASP_InvoiceRecipientIsLegalEntity");
                entity.Property(e => e.AspInvolvedObjectId).HasColumnName("ASP_InvolvedObject_Id");
                entity.Property(e => e.AspLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ASP_LastModifiedBy");
                entity.Property(e => e.AspLastModifiedDate).HasColumnName("ASP_LastModifiedDate");
                entity.Property(e => e.AspLateCancellation).HasColumnName("ASP_LateCancellation");
                entity.Property(e => e.AspLeadCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("ASP_LeadCurrencyCode");
                entity.Property(e => e.AspPickupComments)
                    .HasMaxLength(500)
                    .HasColumnName("ASP_PickupComments");
                entity.Property(e => e.AspPickupLocationId).HasColumnName("ASP_PickupLocation_Id");
                entity.Property(e => e.AspRequireDirectTransport).HasColumnName("ASP_RequireDirectTransport");
                entity.Property(e => e.AspStartDate).HasColumnName("ASP_StartDate");
                entity.Property(e => e.AspSupplierComments)
                    .HasMaxLength(500)
                    .HasColumnName("ASP_SupplierComments");
                entity.Property(e => e.AspSupplierId).HasColumnName("ASP_Supplier_Id");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<AssistancePlansView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AssistancePlansView", "dos");

                entity.Property(e => e.AddtionalComment1).HasMaxLength(500);
                entity.Property(e => e.AddtionalComment2).HasMaxLength(500);
                entity.Property(e => e.AddtionalComment3).HasMaxLength(500);
                entity.Property(e => e.AddtionalComment4).HasMaxLength(500);
                entity.Property(e => e.AssistancPlanTypeCode).HasMaxLength(10);
                entity.Property(e => e.AssistancPlanTypeName).HasMaxLength(250);
                entity.Property(e => e.AssistanceExecutorCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.AssistanceExecutorName).HasMaxLength(756);
                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(20);
                entity.Property(e => e.AssistancePlanStatusChangeReason).HasMaxLength(250);
                entity.Property(e => e.AssistancePlanStatusCode).HasMaxLength(10);
                entity.Property(e => e.AssistancePlanStatusName).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DistanceComments).HasMaxLength(500);
                entity.Property(e => e.DossierEntrySystem).HasMaxLength(10);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierPartyRoleCode).HasMaxLength(10);
                entity.Property(e => e.DossierPartyRoleName).HasMaxLength(250);
                entity.Property(e => e.DropoffCity).HasMaxLength(250);
                entity.Property(e => e.DropoffComments).HasMaxLength(500);
                entity.Property(e => e.DropoffCountryCode).HasMaxLength(3);
                entity.Property(e => e.DropoffDirection).HasMaxLength(50);
                entity.Property(e => e.DropoffHectometerPostAddition).HasMaxLength(1);
                entity.Property(e => e.DropoffHouseNo).HasMaxLength(10);
                entity.Property(e => e.DropoffHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.DropoffPostalCode).HasMaxLength(10);
                entity.Property(e => e.DropoffProvince).HasMaxLength(250);
                entity.Property(e => e.DropoffRoadName).HasMaxLength(200);
                entity.Property(e => e.DropoffStreetName).HasMaxLength(250);
                entity.Property(e => e.ForeignCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.GeneralComments).HasMaxLength(500);
                entity.Property(e => e.InvoiceRecipientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.InvoiceRecipientName).HasMaxLength(772);
                entity.Property(e => e.InvolvedPartyCity).HasMaxLength(200);
                entity.Property(e => e.InvolvedPartyCountryCode).HasMaxLength(3);
                entity.Property(e => e.InvolvedPartyDateOfBirth).HasColumnType("date");
                entity.Property(e => e.InvolvedPartyFullName).HasMaxLength(200);
                entity.Property(e => e.InvolvedPartyHouseNumber).HasMaxLength(50);
                entity.Property(e => e.InvolvedPartyHouseNumberAddition).HasMaxLength(200);
                entity.Property(e => e.InvolvedPartyPostalCode).HasMaxLength(10);
                entity.Property(e => e.InvolvedPartyStreetName).HasMaxLength(200);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LeadCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.LicensePlate).HasMaxLength(15);
                entity.Property(e => e.LicensePlateCountryCode).HasMaxLength(3);
                entity.Property(e => e.PickupCity).HasMaxLength(250);
                entity.Property(e => e.PickupComments).HasMaxLength(500);
                entity.Property(e => e.PickupCountryCode).HasMaxLength(3);
                entity.Property(e => e.PickupDirection).HasMaxLength(50);
                entity.Property(e => e.PickupHectometerPostAddition).HasMaxLength(1);
                entity.Property(e => e.PickupHouseNo).HasMaxLength(10);
                entity.Property(e => e.PickupHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.PickupPostalCode).HasMaxLength(10);
                entity.Property(e => e.PickupProvince).HasMaxLength(250);
                entity.Property(e => e.PickupRoadName).HasMaxLength(200);
                entity.Property(e => e.PickupStreetName).HasMaxLength(250);
                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SupplierComments).HasMaxLength(500);
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<AssistancePlansWithoutPurchaseInvoicesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AssistancePlansWithoutPurchaseInvoicesView", "dos");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<AuthorizationGroupRole>(entity =>
            {
                entity.HasKey(e => e.AgrId);

                entity.ToTable("AuthorizationGroupRoles", "mdm");

                entity.Property(e => e.AgrId)
                    .HasMaxLength(50)
                    .HasColumnName("AGR_Id");
                entity.Property(e => e.AgrCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AGR_CreatedBy");
                entity.Property(e => e.AgrCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("AGR_CreatedDate");
                entity.Property(e => e.AgrLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AGR_LastModifiedBy");
                entity.Property(e => e.AgrLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("AGR_LastModifiedDate");
                entity.Property(e => e.AgrTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("AGR_TimeStamp");

                entity.HasOne(d => d.Agr).WithOne(p => p.AuthorizationGroupRole)
                    .HasForeignKey<AuthorizationGroupRole>(d => d.AgrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AuthorizationGroupRoles_AuthorizationRoles");
            });

            modelBuilder.Entity<AuthorizationRole>(entity =>
            {
                entity.HasKey(e => e.AurId);

                entity.ToTable("AuthorizationRoles", "mdm");

                entity.Property(e => e.AurId)
                    .HasMaxLength(50)
                    .HasColumnName("AUR_Id");
                entity.Property(e => e.AurAuthorizationRoleTypeId)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('CRUD')")
                    .HasColumnName("AUR_AuthorizationRoleType_Id");
                entity.Property(e => e.AurCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AUR_CreatedBy");
                entity.Property(e => e.AurCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("AUR_CreatedDate");
                entity.Property(e => e.AurIsMiddleOfficeRole).HasColumnName("AUR_IsMiddleOfficeRole");
                entity.Property(e => e.AurLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AUR_LastModifiedBy");
                entity.Property(e => e.AurLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("AUR_LastModifiedDate");
                entity.Property(e => e.AurTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("AUR_TimeStamp");

                entity.HasOne(d => d.AurAuthorizationRoleType).WithMany(p => p.AuthorizationRoles)
                    .HasForeignKey(d => d.AurAuthorizationRoleTypeId)
                    .HasConstraintName("FK_AuthorizationRoles_AuthorizationRoleTypes");
            });

            modelBuilder.Entity<AuthorizationRoleInheritance>(entity =>
            {
                entity.HasKey(e => e.AriId);

                entity.ToTable("AuthorizationRoleInheritance", "mdm");

                entity.HasIndex(e => new { e.AriAuthorizationGroupRoleId, e.AriAuthorizationInheritsRoleId, e.AriEffectiveDate, e.AriTerminationDate }, "IX_AuthorizationRoleInheritance_AuthorizationGroupRole_AuthorizationInheritsRole_EffectiveDate_TerminationDate_INCL");

                entity.Property(e => e.AriId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("ARI_Id");
                entity.Property(e => e.AriAuthorizationGroupRoleId)
                    .HasMaxLength(50)
                    .HasColumnName("ARI_AuthorizationGroupRole_Id");
                entity.Property(e => e.AriAuthorizationInheritsRoleId)
                    .HasMaxLength(50)
                    .HasColumnName("ARI_AuthorizationInheritsRole_Id");
                entity.Property(e => e.AriCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ARI_CreatedBy");
                entity.Property(e => e.AriCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ARI_CreatedDate");
                entity.Property(e => e.AriEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("ARI_EffectiveDate");
                entity.Property(e => e.AriLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ARI_LastModifiedBy");
                entity.Property(e => e.AriLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ARI_LastModifiedDate");
                entity.Property(e => e.AriOperationCreate).HasColumnName("ARI_OperationCreate");
                entity.Property(e => e.AriOperationDelete).HasColumnName("ARI_OperationDelete");
                entity.Property(e => e.AriOperationExecute)
                    .IsRequired()
                    .HasDefaultValueSql("((1))")
                    .HasColumnName("ARI_OperationExecute");
                entity.Property(e => e.AriOperationRead).HasColumnName("ARI_OperationRead");
                entity.Property(e => e.AriOperationUpdate).HasColumnName("ARI_OperationUpdate");
                entity.Property(e => e.AriTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("ARI_TerminationDate");
                entity.Property(e => e.AriTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ARI_TimeStamp");

                entity.HasOne(d => d.AriAuthorizationGroupRole).WithMany(p => p.AuthorizationRoleInheritances)
                    .HasForeignKey(d => d.AriAuthorizationGroupRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AuthorizationRoleInheritance_AuthorizationGroupRoles");

                entity.HasOne(d => d.AriAuthorizationInheritsRole).WithMany(p => p.AuthorizationRoleInheritances)
                    .HasForeignKey(d => d.AriAuthorizationInheritsRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AuthorizationRoleInheritance_AuthorizationInheritedRoles");
            });

            modelBuilder.Entity<AuthorizationRoleInheritanceView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AuthorizationRoleInheritanceView", "mdm");

                entity.Property(e => e.AuthorizationGroupRoleId).HasMaxLength(50);
                entity.Property(e => e.AuthorizationInheritsRoleId).HasMaxLength(50);
                entity.Property(e => e.AuthorizationRoleTypeId).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.EffectiveDate).HasColumnType("date");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TerminationDate).HasColumnType("date");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<AuthorizationRoleType>(entity =>
            {
                entity.HasKey(e => e.ArtId);

                entity.ToTable("AuthorizationRoleTypes", "mdm");

                entity.Property(e => e.ArtId)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("ART_Id");
                entity.Property(e => e.ArtAbbreviation)
                    .HasMaxLength(20)
                    .HasColumnName("ART_Abbreviation");
                entity.Property(e => e.ArtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ART_CreatedBy");
                entity.Property(e => e.ArtCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ART_CreatedDate");
                entity.Property(e => e.ArtDescription)
                    .HasMaxLength(250)
                    .HasColumnName("ART_Description");
                entity.Property(e => e.ArtInactive).HasColumnName("ART_Inactive");
                entity.Property(e => e.ArtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ART_LastModifiedBy");
                entity.Property(e => e.ArtLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ART_LastModifiedDate");
                entity.Property(e => e.ArtLocalizableEntryId).HasColumnName("ART_LocalizableEntry_Id");
                entity.Property(e => e.ArtTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ART_TimeStamp");

                entity.HasOne(d => d.ArtLocalizableEntry).WithMany(p => p.AuthorizationRoleTypes)
                    .HasForeignKey(d => d.ArtLocalizableEntryId)
                    .HasConstraintName("FK_AuthorizationRoleTypes_LocalizableEntries");
            });

            modelBuilder.Entity<AuthorizationRolesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AuthorizationRolesView", "mdm");

                entity.Property(e => e.AuthorizationRoleTypeId).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.Id).HasMaxLength(50);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<AuthorizedSupplierBankAccountsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AuthorizedSupplierBankAccountsView", "fin");

                entity.Property(e => e.AccountAbbreviation).HasMaxLength(20);
                entity.Property(e => e.AccountAddressLine1).HasMaxLength(250);
                entity.Property(e => e.AccountAddressLine2).HasMaxLength(250);
                entity.Property(e => e.AccountIdentifier).HasMaxLength(20);
                entity.Property(e => e.AccountName).HasMaxLength(250);
                entity.Property(e => e.AccountNumber).HasMaxLength(34);
                entity.Property(e => e.BankName).HasMaxLength(250);
                entity.Property(e => e.Bic)
                    .HasMaxLength(11)
                    .HasColumnName("BIC");
                entity.Property(e => e.CountryCode).HasMaxLength(3);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Iban)
                    .HasMaxLength(34)
                    .HasColumnName("IBAN");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.OrganizationAccountCode).HasMaxLength(10);
                entity.Property(e => e.OrganizationAccountName).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<AutomaticMessageLog>(entity =>
            {
                entity.HasKey(e => e.AmlId);

                entity.ToTable("AutomaticMessageLog", "pros");

                entity.Property(e => e.AmlId)
                    .ValueGeneratedNever()
                    .HasColumnName("AML_Id");
                entity.Property(e => e.AmlCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AML_CreatedBy");
                entity.Property(e => e.AmlCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("AML_CreatedDate");
                entity.Property(e => e.AmlDossierId).HasColumnName("AML_Dossier_Id");
                entity.Property(e => e.AmlExternalId)
                    .HasMaxLength(50)
                    .HasColumnName("AML_External_Id");
                entity.Property(e => e.AmlLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AML_LastModifiedBy");
                entity.Property(e => e.AmlLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("AML_LastModifiedDate");
                entity.Property(e => e.AmlLogMessage).HasColumnName("AML_LogMessage");
                entity.Property(e => e.AmlNewsfeedId).HasColumnName("AML_Newsfeed_Id");
                entity.Property(e => e.AmlTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("AML_TimeStamp");

                entity.HasOne(d => d.AmlDossier).WithMany(p => p.AutomaticMessageLogs)
                    .HasForeignKey(d => d.AmlDossierId)
                    .HasConstraintName("DF_AutomaticMessageLog_DossierId");
            });

            modelBuilder.Entity<Bank>(entity =>
            {
                entity.HasKey(e => e.BnId);

                entity.ToTable("Banks", "mdm");

                entity.Property(e => e.BnId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("BN_Id");
                entity.Property(e => e.BnCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BN_CreatedBy");
                entity.Property(e => e.BnCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BN_CreatedDate");
                entity.Property(e => e.BnCultureCodePreferredLanguage)
                    .HasMaxLength(10)
                    .HasColumnName("BN_CultureCodePreferredLanguage");
                entity.Property(e => e.BnInactive).HasColumnName("BN_Inactive");
                entity.Property(e => e.BnIsIbanConsistent).HasColumnName("BN_IsIbanConsistent");
                entity.Property(e => e.BnLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BN_LastModifiedBy");
                entity.Property(e => e.BnLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BN_LastModifiedDate");
                entity.Property(e => e.BnSettlingNumber)
                    .HasMaxLength(12)
                    .HasColumnName("BN_SettlingNumber");
                entity.Property(e => e.BnSwift)
                    .HasMaxLength(60)
                    .HasColumnName("BN_Swift");
                entity.Property(e => e.BnTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("BN_TimeStamp");

                entity.HasOne(d => d.Bn).WithOne(p => p.Bank)
                    .HasForeignKey<Bank>(d => d.BnId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Banks_OrganizationUnits");
            });

            modelBuilder.Entity<Bank1>(entity =>
            {
                entity.HasKey(e => e.BnId);

                entity.ToTable("Banks", "stg");

                entity.Property(e => e.BnId)
                    .ValueGeneratedNever()
                    .HasColumnName("BN_Id");
                entity.Property(e => e.BnCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BN_CreatedBy");
                entity.Property(e => e.BnCreatedDate).HasColumnName("BN_CreatedDate");
                entity.Property(e => e.BnCultureCodePreferredLanguage)
                    .HasMaxLength(10)
                    .HasColumnName("BN_CultureCodePreferredLanguage");
                entity.Property(e => e.BnInactive).HasColumnName("BN_Inactive");
                entity.Property(e => e.BnIsIbanConsistent).HasColumnName("BN_IsIbanConsistent");
                entity.Property(e => e.BnLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BN_LastModifiedBy");
                entity.Property(e => e.BnLastModifiedDate).HasColumnName("BN_LastModifiedDate");
                entity.Property(e => e.BnSettlingNumber)
                    .HasMaxLength(12)
                    .HasColumnName("BN_SettlingNumber");
                entity.Property(e => e.BnSwift)
                    .HasMaxLength(60)
                    .HasColumnName("BN_Swift");
                entity.Property(e => e.BnTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("BN_TimeStamp");
            });

            modelBuilder.Entity<BankAccount>(entity =>
            {
                entity.HasKey(e => e.BacId);

                entity.ToTable("BankAccounts", "mdm");

                entity.HasIndex(e => e.BacAccountNumber, "IX_BankAccounts_AccountNumber");

                entity.HasIndex(e => e.BacIban, "IX_mdm_BankAccounts_IBAN__INCL");

                entity.Property(e => e.BacId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("BAC_Id");
                entity.Property(e => e.BacAccountAbbreviation)
                    .HasMaxLength(20)
                    .HasColumnName("BAC_AccountAbbreviation");
                entity.Property(e => e.BacAccountAddressLine1)
                    .HasMaxLength(250)
                    .HasColumnName("BAC_AccountAddressLine1");
                entity.Property(e => e.BacAccountAddressLine2)
                    .HasMaxLength(250)
                    .HasColumnName("BAC_AccountAddressLine2");
                entity.Property(e => e.BacAccountIdentifier)
                    .HasMaxLength(20)
                    .HasColumnName("BAC_AccountIdentifier");
                entity.Property(e => e.BacAccountName)
                    .HasMaxLength(250)
                    .HasColumnName("BAC_AccountName");
                entity.Property(e => e.BacAccountNumber)
                    .HasMaxLength(34)
                    .HasColumnName("BAC_AccountNumber");
                entity.Property(e => e.BacBankId).HasColumnName("BAC_Bank_Id");
                entity.Property(e => e.BacBankName)
                    .HasMaxLength(250)
                    .HasColumnName("BAC_BankName");
                entity.Property(e => e.BacBic)
                    .HasMaxLength(11)
                    .HasColumnName("BAC_BIC");
                entity.Property(e => e.BacCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("BAC_CountryCode");
                entity.Property(e => e.BacCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BAC_CreatedBy");
                entity.Property(e => e.BacCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BAC_CreatedDate");
                entity.Property(e => e.BacCurrencyCode)
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('EUR')")
                    .HasColumnName("BAC_CurrencyCode");
                entity.Property(e => e.BacIban)
                    .HasMaxLength(34)
                    .HasColumnName("BAC_IBAN");
                entity.Property(e => e.BacInactive).HasColumnName("BAC_Inactive");
                entity.Property(e => e.BacIsBlockedAccount).HasColumnName("BAC_IsBlockedAccount");
                entity.Property(e => e.BacIsSepaAccount).HasColumnName("BAC_IsSepaAccount");
                entity.Property(e => e.BacIsValidated).HasColumnName("BAC_IsValidated");
                entity.Property(e => e.BacLaborCostPercentage).HasColumnName("BAC_LaborCostPercentage");
                entity.Property(e => e.BacLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BAC_LastModifiedBy");
                entity.Property(e => e.BacLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BAC_LastModifiedDate");
                entity.Property(e => e.BacTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("BAC_TimeStamp");

                entity.HasOne(d => d.BacBank).WithMany(p => p.BankAccounts)
                    .HasForeignKey(d => d.BacBankId)
                    .HasConstraintName("FK_BankAccounts_Banks");
            });

            modelBuilder.Entity<BankAccount1>(entity =>
            {
                entity.HasKey(e => e.BacId);

                entity.ToTable("BankAccounts", "stg");

                entity.Property(e => e.BacId)
                    .ValueGeneratedNever()
                    .HasColumnName("BAC_Id");
                entity.Property(e => e.BacAccountAbbreviation)
                    .HasMaxLength(20)
                    .HasColumnName("BAC_AccountAbbreviation");
                entity.Property(e => e.BacAccountAddressLine1)
                    .HasMaxLength(250)
                    .HasColumnName("BAC_AccountAddressLine1");
                entity.Property(e => e.BacAccountAddressLine2)
                    .HasMaxLength(250)
                    .HasColumnName("BAC_AccountAddressLine2");
                entity.Property(e => e.BacAccountIdentifier)
                    .HasMaxLength(20)
                    .HasColumnName("BAC_AccountIdentifier");
                entity.Property(e => e.BacAccountName)
                    .HasMaxLength(250)
                    .HasColumnName("BAC_AccountName");
                entity.Property(e => e.BacAccountNumber)
                    .HasMaxLength(34)
                    .HasColumnName("BAC_AccountNumber");
                entity.Property(e => e.BacBankName)
                    .HasMaxLength(250)
                    .HasColumnName("BAC_BankName");
                entity.Property(e => e.BacBic)
                    .HasMaxLength(11)
                    .HasColumnName("BAC_BIC");
                entity.Property(e => e.BacCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("BAC_CountryCode");
                entity.Property(e => e.BacCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BAC_CreatedBy");
                entity.Property(e => e.BacCreatedDate).HasColumnName("BAC_CreatedDate");
                entity.Property(e => e.BacCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("BAC_CurrencyCode");
                entity.Property(e => e.BacIban)
                    .HasMaxLength(34)
                    .HasColumnName("BAC_IBAN");
                entity.Property(e => e.BacInactive).HasColumnName("BAC_Inactive");
                entity.Property(e => e.BacIsBlockedAccount).HasColumnName("BAC_IsBlockedAccount");
                entity.Property(e => e.BacIsSepaAccount).HasColumnName("BAC_IsSepaAccount");
                entity.Property(e => e.BacIsValidated).HasColumnName("BAC_IsValidated");
                entity.Property(e => e.BacLaborCostPercentage).HasColumnName("BAC_LaborCostPercentage");
                entity.Property(e => e.BacLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BAC_LastModifiedBy");
                entity.Property(e => e.BacLastModifiedDate).HasColumnName("BAC_LastModifiedDate");
                entity.Property(e => e.BacTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("BAC_TimeStamp");
            });

            modelBuilder.Entity<BankAccountAttachment>(entity =>
            {
                entity.HasKey(e => e.BaaId);

                entity.ToTable("BankAccountAttachments", "mdm");

                entity.Property(e => e.BaaId)
                    .ValueGeneratedNever()
                    .HasColumnName("BAA_Id");
                entity.Property(e => e.BaaBankAccountId).HasColumnName("BAA_BankAccount_Id");
                entity.Property(e => e.BaaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BAA_CreatedBy");
                entity.Property(e => e.BaaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BAA_CreatedDate");
                entity.Property(e => e.BaaDocumentId).HasColumnName("BAA_Document_Id");
                entity.Property(e => e.BaaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BAA_LastModifiedBy");
                entity.Property(e => e.BaaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BAA_LastModifiedDate");
                entity.Property(e => e.BaaSequenceNumber).HasColumnName("BAA_SequenceNumber");
                entity.Property(e => e.BaaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("BAA_TimeStamp");

                entity.HasOne(d => d.BaaBankAccount).WithMany(p => p.BankAccountAttachments)
                    .HasForeignKey(d => d.BaaBankAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankAccountAttachments_BankAccounts");

                entity.HasOne(d => d.BaaDocument).WithMany(p => p.BankAccountAttachments)
                    .HasForeignKey(d => d.BaaDocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankAccountAttachments_Documents");
            });

            modelBuilder.Entity<BankAccountValidation>(entity =>
            {
                entity.HasKey(e => e.BavId);

                entity.ToTable("BankAccountValidations", "mdm");

                entity.Property(e => e.BavId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("BAV_Id");
                entity.Property(e => e.BavBankAccountAttachmentId).HasColumnName("BAV_BankAccountAttachment_Id");
                entity.Property(e => e.BavBankAccountId).HasColumnName("BAV_BankAccount_Id");
                entity.Property(e => e.BavCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BAV_CreatedBy");
                entity.Property(e => e.BavCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BAV_CreatedDate");
                entity.Property(e => e.BavEmployeeId).HasColumnName("BAV_Employee_Id");
                entity.Property(e => e.BavIsValidated).HasColumnName("BAV_IsValidated");
                entity.Property(e => e.BavLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BAV_LastModifiedBy");
                entity.Property(e => e.BavLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BAV_LastModifiedDate");
                entity.Property(e => e.BavStartDate).HasColumnName("BAV_StartDate");
                entity.Property(e => e.BavTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("BAV_TimeStamp");

                entity.HasOne(d => d.BavBankAccountAttachment).WithMany(p => p.BankAccountValidations)
                    .HasForeignKey(d => d.BavBankAccountAttachmentId)
                    .HasConstraintName("FK_BankAccountValidations_BankAccountAttachments");

                entity.HasOne(d => d.BavBankAccount).WithMany(p => p.BankAccountValidations)
                    .HasForeignKey(d => d.BavBankAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankAccountValidations_BankAccounts");

                entity.HasOne(d => d.BavEmployee).WithMany(p => p.BankAccountValidations)
                    .HasForeignKey(d => d.BavEmployeeId)
                    .HasConstraintName("FK_BankAccountValidations_Employees");
            });

            modelBuilder.Entity<BankAccountsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("BankAccountsView", "fin");

                entity.Property(e => e.AccountAbbreviation).HasMaxLength(20);
                entity.Property(e => e.AccountAddressLine1).HasMaxLength(250);
                entity.Property(e => e.AccountAddressLine2).HasMaxLength(250);
                entity.Property(e => e.AccountIdentifier).HasMaxLength(20);
                entity.Property(e => e.AccountName).HasMaxLength(250);
                entity.Property(e => e.AccountNumber).HasMaxLength(34);
                entity.Property(e => e.BankName).HasMaxLength(250);
                entity.Property(e => e.Bic)
                    .HasMaxLength(11)
                    .HasColumnName("BIC");
                entity.Property(e => e.CountryCode).HasMaxLength(3);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Iban)
                    .HasMaxLength(34)
                    .HasColumnName("IBAN");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<BankIdentifierCode>(entity =>
            {
                entity.HasKey(e => e.BicId);

                entity.ToTable("BankIdentifierCodes", "mdm");

                entity.Property(e => e.BicId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("BIC_Id");
                entity.Property(e => e.BicBankCode)
                    .HasMaxLength(20)
                    .HasColumnName("BIC_BankCode");
                entity.Property(e => e.BicBankName)
                    .HasMaxLength(250)
                    .HasColumnName("BIC_BankName");
                entity.Property(e => e.BicBic)
                    .HasMaxLength(11)
                    .HasColumnName("BIC_BIC");
                entity.Property(e => e.BicCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("BIC_Country_Code");
                entity.Property(e => e.BicCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BIC_CreatedBy");
                entity.Property(e => e.BicCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BIC_CreatedDate");
                entity.Property(e => e.BicInactive).HasColumnName("BIC_Inactive");
                entity.Property(e => e.BicLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BIC_LastModifiedBy");
                entity.Property(e => e.BicLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BIC_LastModifiedDate");
                entity.Property(e => e.BicRemark)
                    .HasMaxLength(250)
                    .HasColumnName("BIC_Remark");
                entity.Property(e => e.BicTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("BIC_TimeStamp");
            });

            modelBuilder.Entity<BankJournalEntry>(entity =>
            {
                entity.HasKey(e => e.BjeId);

                entity.ToTable("BankJournalEntries", "fin");

                entity.HasIndex(e => e.BjeBankStatementId, "IX_fin_BankJournalEntries_BankStatement_Id__INCL");

                entity.HasIndex(e => e.BjeJournalEntryId, "IX_fin_BankJournalEntries_JournalEntry__INCL");

                entity.Property(e => e.BjeId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("BJE_Id");
                entity.Property(e => e.BjeBankStatementId).HasColumnName("BJE_BankStatement_Id");
                entity.Property(e => e.BjeCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BJE_CreatedBy");
                entity.Property(e => e.BjeCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BJE_CreatedDate");
                entity.Property(e => e.BjeJournalEntryId).HasColumnName("BJE_JournalEntry_Id");
                entity.Property(e => e.BjeLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BJE_LastModifiedBy");
                entity.Property(e => e.BjeLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BJE_LastModifiedDate");
                entity.Property(e => e.BjeTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("BJE_TimeStamp");

                entity.HasOne(d => d.BjeBankStatement).WithMany(p => p.BankJournalEntries)
                    .HasForeignKey(d => d.BjeBankStatementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankJournalEntries_BankStatements");

                entity.HasOne(d => d.BjeJournalEntry).WithMany(p => p.BankJournalEntries)
                    .HasForeignKey(d => d.BjeJournalEntryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankJournalEntries_JournalEntries");
            });

            modelBuilder.Entity<BankJournalEntryLine>(entity =>
            {
                entity.HasKey(e => e.BjlId);

                entity.ToTable("BankJournalEntryLines", "fin", tb => tb.HasTrigger("BankJournalEntryLines_Insert"));

                entity.HasIndex(e => e.BjlBankStatementReconcilliationId, "IX_fin_BankJournalEntryLines_BankStatementReconcilliation_INCL");

                entity.HasIndex(e => e.BjlJournalEntryLineId, "IX_fin_BankJournalEntryLines_JournalEntryLine__INCL");

                entity.Property(e => e.BjlId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("BJL_Id");
                entity.Property(e => e.BjlBankJournalEntryId).HasColumnName("BJL_BankJournalEntry_Id");
                entity.Property(e => e.BjlBankStatementReconcilliationId).HasColumnName("BJL_BankStatementReconcilliation_Id");
                entity.Property(e => e.BjlCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BJL_CreatedBy");
                entity.Property(e => e.BjlCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BJL_CreatedDate");
                entity.Property(e => e.BjlJournalEntryLineId).HasColumnName("BJL_JournalEntryLine_Id");
                entity.Property(e => e.BjlLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BJL_LastModifiedBy");
                entity.Property(e => e.BjlLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BJL_LastModifiedDate");
                entity.Property(e => e.BjlTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("BJL_TimeStamp");

                entity.HasOne(d => d.BjlBankJournalEntry).WithMany(p => p.BankJournalEntryLines)
                    .HasForeignKey(d => d.BjlBankJournalEntryId)
                    .HasConstraintName("FK_BankJournalEntryLines_BankJournalEntries");

                entity.HasOne(d => d.BjlBankStatementReconcilliation).WithMany(p => p.BankJournalEntryLines)
                    .HasForeignKey(d => d.BjlBankStatementReconcilliationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankJournalEntryLines_BankStatementReconcilliations");

                entity.HasOne(d => d.BjlJournalEntryLine).WithMany(p => p.BankJournalEntryLines)
                    .HasForeignKey(d => d.BjlJournalEntryLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankJournalEntryLines_JournalEntryLines");
            });

            modelBuilder.Entity<BankStatement>(entity =>
            {
                entity.HasKey(e => e.BsnId);

                entity.ToTable("BankStatements", "fin");

                entity.HasIndex(e => e.BsnBankAccountId, "IX_fin_BankStatements_BankAccount__INCL");

                entity.Property(e => e.BsnId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("BSN_Id");
                entity.Property(e => e.BsnBankAccountId).HasColumnName("BSN_BankAccount_Id");
                entity.Property(e => e.BsnClosingBalanceDate)
                    .HasColumnType("date")
                    .HasColumnName("BSN_ClosingBalanceDate");
                entity.Property(e => e.BsnClosingBalanceValue)
                    .HasColumnType("money")
                    .HasColumnName("BSN_ClosingBalanceValue");
                entity.Property(e => e.BsnCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BSN_CreatedBy");
                entity.Property(e => e.BsnCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BSN_CreatedDate");
                entity.Property(e => e.BsnCurrencyCode)
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('EUR')")
                    .HasColumnName("BSN_CurrencyCode");
                entity.Property(e => e.BsnCurrentStatusCode)
                    .HasMaxLength(20)
                    .HasColumnName("BSN_CurrentStatusCode");
                entity.Property(e => e.BsnCurrentStatusHistoryId).HasColumnName("BSN_CurrentStatusHistory_Id");
                entity.Property(e => e.BsnCurrentStatusHistoryStartDate).HasColumnName("BSN_CurrentStatusHistoryStartDate");
                entity.Property(e => e.BsnLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BSN_LastModifiedBy");
                entity.Property(e => e.BsnLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BSN_LastModifiedDate");
                entity.Property(e => e.BsnMessageDescription)
                    .HasMaxLength(500)
                    .HasColumnName("BSN_MessageDescription");
                entity.Property(e => e.BsnMt940)
                    .HasColumnType("ntext")
                    .HasColumnName("BSN_MT940");
                entity.Property(e => e.BsnOpeningBalanceDate)
                    .HasColumnType("date")
                    .HasColumnName("BSN_OpeningBalanceDate");
                entity.Property(e => e.BsnOpeningBalanceValue)
                    .HasColumnType("money")
                    .HasColumnName("BSN_OpeningBalanceValue");
                entity.Property(e => e.BsnReferenceToRelatedTransaction)
                    .HasMaxLength(50)
                    .HasColumnName("BSN_ReferenceToRelatedTransaction");
                entity.Property(e => e.BsnSequenceNumber).HasColumnName("BSN_SequenceNumber");
                entity.Property(e => e.BsnStatementNumber).HasColumnName("BSN_StatementNumber");
                entity.Property(e => e.BsnStatementYear).HasColumnName("BSN_StatementYear");
                entity.Property(e => e.BsnTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("BSN_TimeStamp");
                entity.Property(e => e.BsnTransactionReferenceNumber)
                    .HasMaxLength(20)
                    .HasColumnName("BSN_TransactionReferenceNumber");

                entity.HasOne(d => d.BsnBankAccount).WithMany(p => p.BankStatements)
                    .HasForeignKey(d => d.BsnBankAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankStatements_BankAccounts");
            });

            modelBuilder.Entity<BankStatementAttachment>(entity =>
            {
                entity.HasKey(e => e.BsaId);

                entity.ToTable("BankStatementAttachments", "fin");

                entity.Property(e => e.BsaId)
                    .ValueGeneratedNever()
                    .HasColumnName("BSA_Id");
                entity.Property(e => e.BsaBankStatementId).HasColumnName("BSA_BankStatement_Id");
                entity.Property(e => e.BsaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BSA_CreatedBy");
                entity.Property(e => e.BsaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BSA_CreatedDate");
                entity.Property(e => e.BsaDocumentId).HasColumnName("BSA_Document_Id");
                entity.Property(e => e.BsaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BSA_LastModifiedBy");
                entity.Property(e => e.BsaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BSA_LastModifiedDate");
                entity.Property(e => e.BsaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("BSA_TimeStamp");

                entity.HasOne(d => d.BsaBankStatement).WithMany(p => p.BankStatementAttachments)
                    .HasForeignKey(d => d.BsaBankStatementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankStatementAttachments_BankStatements");

                entity.HasOne(d => d.BsaDocument).WithMany(p => p.BankStatementAttachments)
                    .HasForeignKey(d => d.BsaDocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankStatementAttachments_Documents");
            });

            modelBuilder.Entity<BankStatementAttachmentsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("BankStatementAttachmentsView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.Description).HasMaxLength(500);
                entity.Property(e => e.DocumentDate).HasColumnType("date");
                entity.Property(e => e.DocumentNumber).HasMaxLength(20);
                entity.Property(e => e.DocumentTypeCode).HasMaxLength(10);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.SignatureDate).HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<BankStatementCorrection>(entity =>
            {
                entity.HasKey(e => e.BscId);

                entity.ToTable("BankStatementCorrections", "fin");

                entity.Property(e => e.BscId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("BSC_Id");
                entity.Property(e => e.BscCorrectionReason)
                    .HasMaxLength(250)
                    .HasColumnName("BSC_CorrectionReason");
                entity.Property(e => e.BscCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BSC_CreatedBy");
                entity.Property(e => e.BscCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BSC_CreatedDate");
                entity.Property(e => e.BscIsFinalized).HasColumnName("BSC_IsFinalized");
                entity.Property(e => e.BscLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BSC_LastModifiedBy");
                entity.Property(e => e.BscLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BSC_LastModifiedDate");
                entity.Property(e => e.BscTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("BSC_TimeStamp");

                entity.HasOne(d => d.Bsc).WithOne(p => p.BankStatementCorrection)
                    .HasForeignKey<BankStatementCorrection>(d => d.BscId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankStatementCorrections_BankStatementReconcilliations");
            });

            modelBuilder.Entity<BankStatementCorrectionLine>(entity =>
            {
                entity.HasKey(e => e.BclId);

                entity.ToTable("BankStatementCorrectionLines", "fin");

                entity.HasIndex(e => e.BclBankStatementCorrectionId, "IX_fin_BankStatementCorrectionLines_BankStatementCorrection__INCL");

                entity.HasIndex(e => e.BclBankStatementReconciliationId, "IX_fin_BankStatementCorrectionLines_BankStatementReconciliation");

                entity.Property(e => e.BclId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("BCL_Id");
                entity.Property(e => e.BclBankStatementCorrectionId).HasColumnName("BCL_BankStatementCorrection_Id");
                entity.Property(e => e.BclBankStatementReconciliationId).HasColumnName("BCL_BankStatementReconciliation_Id");
                entity.Property(e => e.BclCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BCL_CreatedBy");
                entity.Property(e => e.BclCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BCL_CreatedDate");
                entity.Property(e => e.BclIsCredit).HasColumnName("BCL_IsCredit");
                entity.Property(e => e.BclLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BCL_LastModifiedBy");
                entity.Property(e => e.BclLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BCL_LastModifiedDate");
                entity.Property(e => e.BclLineNumber).HasColumnName("BCL_LineNumber");
                entity.Property(e => e.BclTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("BCL_TimeStamp");

                entity.HasOne(d => d.BclBankStatementCorrection).WithMany(p => p.BankStatementCorrectionLines)
                    .HasForeignKey(d => d.BclBankStatementCorrectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankStatementCorrectionLines_BankStatementCorrections");

                entity.HasOne(d => d.BclBankStatementReconciliation).WithMany(p => p.BankStatementCorrectionLines)
                    .HasForeignKey(d => d.BclBankStatementReconciliationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankStatementCorrectionLines_BankStatementReconcilliations");
            });

            modelBuilder.Entity<BankStatementJournalEntryLinesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("BankStatementJournalEntryLinesView", "fin");

                entity.Property(e => e.BankStatementId).HasColumnName("BankStatement_Id");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditValue).HasColumnType("money");
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Date).HasColumnType("date");
                entity.Property(e => e.DebitValue).HasColumnType("money");
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.GeneralLedgerDescription).HasMaxLength(250);
                entity.Property(e => e.InvoiceNumber).HasMaxLength(10);
                entity.Property(e => e.JournalEntryId).HasColumnName("JournalEntry_Id");
                entity.Property(e => e.JournalNumber).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LedgerAccount).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<BankStatementLine>(entity =>
            {
                entity.HasKey(e => e.BslId);

                entity.ToTable("BankStatementLines", "fin", tb => tb.HasTrigger("BankStatementLines_MapPaymentBatch"));

                entity.HasIndex(e => new { e.BslBankStatementId, e.BslTransactionValue }, "IX_fin_BankStatementLines_BankStatement_TransactionValue");

                entity.HasIndex(e => e.BslPaymentBatchId, "IX_fin_BankStatementLines_PaymentBatch__INCL");

                entity.Property(e => e.BslId)
                    .ValueGeneratedNever()
                    .HasColumnName("BSL_Id");
                entity.Property(e => e.BslAccountAddressLine1)
                    .HasMaxLength(250)
                    .HasColumnName("BSL_AccountAddressLine1");
                entity.Property(e => e.BslAccountAddressLine2)
                    .HasMaxLength(250)
                    .HasColumnName("BSL_AccountAddressLine2");
                entity.Property(e => e.BslAccountHolderName)
                    .HasMaxLength(250)
                    .HasColumnName("BSL_AccountHolderName");
                entity.Property(e => e.BslAccountNumber)
                    .HasMaxLength(34)
                    .HasColumnName("BSL_AccountNumber");
                entity.Property(e => e.BslBankName)
                    .HasMaxLength(250)
                    .HasColumnName("BSL_BankName");
                entity.Property(e => e.BslBankStatementId).HasColumnName("BSL_BankStatement_Id");
                entity.Property(e => e.BslBic)
                    .HasMaxLength(11)
                    .HasColumnName("BSL_BIC");
                entity.Property(e => e.BslBookDate)
                    .HasColumnType("date")
                    .HasColumnName("BSL_BookDate");
                entity.Property(e => e.BslCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BSL_CreatedBy");
                entity.Property(e => e.BslCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BSL_CreatedDate");
                entity.Property(e => e.BslCurrencyCode)
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('EUR')")
                    .HasColumnName("BSL_CurrencyCode");
                entity.Property(e => e.BslFurtherReferenceInfo)
                    .HasMaxLength(500)
                    .HasColumnName("BSL_FurtherReferenceInfo");
                entity.Property(e => e.BslIban)
                    .HasMaxLength(34)
                    .HasColumnName("BSL_IBAN");
                entity.Property(e => e.BslLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BSL_LastModifiedBy");
                entity.Property(e => e.BslLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BSL_LastModifiedDate");
                entity.Property(e => e.BslPaymentBatchId).HasColumnName("BSL_PaymentBatch_Id");
                entity.Property(e => e.BslReferenceAccountOwner)
                    .HasMaxLength(500)
                    .HasColumnName("BSL_ReferenceAccountOwner");
                entity.Property(e => e.BslRemittanceInformation)
                    .HasMaxLength(500)
                    .HasColumnName("BSL_RemittanceInformation");
                entity.Property(e => e.BslSequenceNumber).HasColumnName("BSL_SequenceNumber");
                entity.Property(e => e.BslTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("BSL_TimeStamp");
                entity.Property(e => e.BslTransactionCode)
                    .HasMaxLength(10)
                    .HasColumnName("BSL_TransactionCode");
                entity.Property(e => e.BslTransactionDate)
                    .HasColumnType("date")
                    .HasColumnName("BSL_TransactionDate");
                entity.Property(e => e.BslTransactionDescription)
                    .HasMaxLength(500)
                    .HasColumnName("BSL_TransactionDescription");
                entity.Property(e => e.BslTransactionValue)
                    .HasColumnType("money")
                    .HasColumnName("BSL_TransactionValue");
                entity.Property(e => e.BslUrgentTransfer).HasColumnName("BSL_UrgentTransfer");

                entity.HasOne(d => d.BslBankStatement).WithMany(p => p.BankStatementLines)
                    .HasForeignKey(d => d.BslBankStatementId)
                    .HasConstraintName("FK_BankStatementLines_BankStatements");

                entity.HasOne(d => d.BslPaymentBatch).WithMany(p => p.BankStatementLines)
                    .HasForeignKey(d => d.BslPaymentBatchId)
                    .HasConstraintName("FK_BankStatementLines_PaymentBatches");
            });

            modelBuilder.Entity<BankStatementLineAttachment>(entity =>
            {
                entity.HasKey(e => e.BlaId);

                entity.ToTable("BankStatementLineAttachments", "fin");

                entity.Property(e => e.BlaId)
                    .ValueGeneratedNever()
                    .HasColumnName("BLA_Id");
                entity.Property(e => e.BlaBankStatementLineId).HasColumnName("BLA_BankStatementLine_Id");
                entity.Property(e => e.BlaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BLA_CreatedBy");
                entity.Property(e => e.BlaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BLA_CreatedDate");
                entity.Property(e => e.BlaDocumentId).HasColumnName("BLA_Document_Id");
                entity.Property(e => e.BlaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BLA_LastModifiedBy");
                entity.Property(e => e.BlaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BLA_LastModifiedDate");
                entity.Property(e => e.BlaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("BLA_TimeStamp");

                entity.HasOne(d => d.BlaBankStatementLine).WithMany(p => p.BankStatementLineAttachments)
                    .HasForeignKey(d => d.BlaBankStatementLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankStatementLineAttachments_BankStatementLines");

                entity.HasOne(d => d.BlaDocument).WithMany(p => p.BankStatementLineAttachments)
                    .HasForeignKey(d => d.BlaDocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankStatementLineAttachments_Documents");
            });

            modelBuilder.Entity<BankStatementLineAttachmentsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("BankStatementLineAttachmentsView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.Description).HasMaxLength(500);
                entity.Property(e => e.DocumentDate).HasColumnType("date");
                entity.Property(e => e.DocumentNumber).HasMaxLength(20);
                entity.Property(e => e.DocumentTypeCode).HasMaxLength(10);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.SignatureDate).HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<BankStatementLinesReconciliationView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("BankStatementLinesReconciliationView", "fin");

                entity.Property(e => e.AccountAddressLine1).HasMaxLength(250);
                entity.Property(e => e.AccountAddressLine2).HasMaxLength(250);
                entity.Property(e => e.AccountHolderName).HasMaxLength(250);
                entity.Property(e => e.AccountNumber).HasMaxLength(34);
                entity.Property(e => e.BankName).HasMaxLength(250);
                entity.Property(e => e.Bic)
                    .HasMaxLength(11)
                    .HasColumnName("BIC");
                entity.Property(e => e.BookDate).HasColumnType("date");
                entity.Property(e => e.CorrectionReason).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.FurtherReferenceInfo).HasMaxLength(500);
                entity.Property(e => e.Iban)
                    .HasMaxLength(34)
                    .HasColumnName("IBAN");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.PaymentBatchNumber).HasMaxLength(20);
                entity.Property(e => e.ReconciledValue).HasColumnType("money");
                entity.Property(e => e.ReferenceAccountOwner).HasMaxLength(500);
                entity.Property(e => e.RemittanceInformation).HasMaxLength(500);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.TransactionCode).HasMaxLength(10);
                entity.Property(e => e.TransactionDate).HasColumnType("date");
                entity.Property(e => e.TransactionDescription).HasMaxLength(500);
                entity.Property(e => e.TransactionValue).HasColumnType("money");
            });

            modelBuilder.Entity<BankStatementLinesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("BankStatementLinesView", "fin");

                entity.Property(e => e.AccountAddressLine1).HasMaxLength(250);
                entity.Property(e => e.AccountAddressLine2).HasMaxLength(250);
                entity.Property(e => e.AccountHolderName).HasMaxLength(250);
                entity.Property(e => e.AccountNumber).HasMaxLength(34);
                entity.Property(e => e.BankAccountAbbreviation).HasMaxLength(20);
                entity.Property(e => e.BankAccountIban)
                    .HasMaxLength(34)
                    .HasColumnName("BankAccountIBAN");
                entity.Property(e => e.BankAccountName).HasMaxLength(250);
                entity.Property(e => e.BankName).HasMaxLength(250);
                entity.Property(e => e.Bic)
                    .HasMaxLength(11)
                    .HasColumnName("BIC");
                entity.Property(e => e.BookDate).HasColumnType("date");
                entity.Property(e => e.CorrectionReason).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.FurtherReferenceInfo).HasMaxLength(500);
                entity.Property(e => e.Iban)
                    .HasMaxLength(34)
                    .HasColumnName("IBAN");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.PurchaseNumber).IsUnicode(false);
                entity.Property(e => e.ReconciledValue).HasColumnType("money");
                entity.Property(e => e.ReferenceAccountOwner).HasMaxLength(500);
                entity.Property(e => e.RemittanceInformation).HasMaxLength(500);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.TransactionCode).HasMaxLength(10);
                entity.Property(e => e.TransactionDate).HasColumnType("date");
                entity.Property(e => e.TransactionDescription).HasMaxLength(500);
                entity.Property(e => e.TransactionValue).HasColumnType("money");
            });

            modelBuilder.Entity<BankStatementReconcilliation>(entity =>
            {
                entity.HasKey(e => e.BsrId);

                entity.ToTable("BankStatementReconcilliations", "fin");

                entity.HasIndex(e => e.BsrLedgerAccount, "IX_BankStatementReconcilliations_LedgerAccount");

                entity.HasIndex(e => new { e.BsrBankStatementLineId, e.BsrRecoveryStatementId }, "IX_fin_BankStatementReconcilliations_BankStatementLine_RecoveryStatement");

                entity.HasIndex(e => new { e.BsrPurchaseInvoiceId, e.BsrLedgerAccount }, "IX_fin_BankStatementReconcilliations_PurchaseInvoice_LedgerAccount_INCL");

                entity.HasIndex(e => e.BsrRecoveryStatementId, "IX_fin_BankStatementReconcilliations_RecoveryStatement_Id__INCL");

                entity.HasIndex(e => new { e.BsrSalesInvoiceId, e.BsrLedgerAccount }, "IX_fin_BankStatementReconcilliations_SalesInvoice_LedgerAccount");

                entity.Property(e => e.BsrId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("BSR_Id");
                entity.Property(e => e.BsrAccountAddressLine1)
                    .HasMaxLength(250)
                    .HasColumnName("BSR_AccountAddressLine1");
                entity.Property(e => e.BsrAccountAddressLine2)
                    .HasMaxLength(250)
                    .HasColumnName("BSR_AccountAddressLine2");
                entity.Property(e => e.BsrAccountHolderName)
                    .HasMaxLength(250)
                    .HasColumnName("BSR_AccountHolderName");
                entity.Property(e => e.BsrAccountNumber)
                    .HasMaxLength(20)
                    .HasColumnName("BSR_AccountNumber");
                entity.Property(e => e.BsrBankName)
                    .HasMaxLength(250)
                    .HasColumnName("BSR_BankName");
                entity.Property(e => e.BsrBankStatementLineId).HasColumnName("BSR_BankStatementLine_Id");
                entity.Property(e => e.BsrBic)
                    .HasMaxLength(11)
                    .HasColumnName("BSR_BIC");
                entity.Property(e => e.BsrClientId).HasColumnName("BSR_Client_Id");
                entity.Property(e => e.BsrCostCenterCode)
                    .HasMaxLength(20)
                    .HasColumnName("BSR_CostCenterCode");
                entity.Property(e => e.BsrCostUnitCode)
                    .HasMaxLength(20)
                    .HasColumnName("BSR_CostUnitCode");
                entity.Property(e => e.BsrCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BSR_CreatedBy");
                entity.Property(e => e.BsrCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BSR_CreatedDate");
                entity.Property(e => e.BsrCreditTransferId).HasColumnName("BSR_CreditTransfer_Id");
                entity.Property(e => e.BsrCreditorNumber)
                    .HasMaxLength(10)
                    .HasColumnName("BSR_CreditorNumber");
                entity.Property(e => e.BsrDebtorNumber)
                    .HasMaxLength(10)
                    .HasColumnName("BSR_DebtorNumber");
                entity.Property(e => e.BsrDescription)
                    .HasMaxLength(250)
                    .HasColumnName("BSR_Description");
                entity.Property(e => e.BsrDossierId).HasColumnName("BSR_Dossier_Id");
                entity.Property(e => e.BsrDossierNumber)
                    .HasMaxLength(20)
                    .HasColumnName("BSR_DossierNumber");
                entity.Property(e => e.BsrIban)
                    .HasMaxLength(34)
                    .HasColumnName("BSR_IBAN");
                entity.Property(e => e.BsrInvoiceNumber)
                    .HasMaxLength(10)
                    .HasColumnName("BSR_InvoiceNumber");
                entity.Property(e => e.BsrLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BSR_LastModifiedBy");
                entity.Property(e => e.BsrLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BSR_LastModifiedDate");
                entity.Property(e => e.BsrLedgerAccount)
                    .HasMaxLength(20)
                    .HasColumnName("BSR_LedgerAccount");
                entity.Property(e => e.BsrMatchDate).HasColumnName("BSR_MatchDate");
                entity.Property(e => e.BsrMatchValue)
                    .HasColumnType("money")
                    .HasColumnName("BSR_MatchValue");
                entity.Property(e => e.BsrNotes)
                    .HasMaxLength(500)
                    .HasColumnName("BSR_Notes");
                entity.Property(e => e.BsrOurReference)
                    .HasMaxLength(50)
                    .HasColumnName("BSR_OurReference");
                entity.Property(e => e.BsrPurchaseInvoiceId).HasColumnName("BSR_PurchaseInvoice_Id");
                entity.Property(e => e.BsrReconcilliationActionTypeId).HasColumnName("BSR_ReconcilliationActionType_Id");
                entity.Property(e => e.BsrRecoveryStatementId).HasColumnName("BSR_RecoveryStatement_Id");
                entity.Property(e => e.BsrSalesInvoiceId).HasColumnName("BSR_SalesInvoice_Id");
                entity.Property(e => e.BsrTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("BSR_TimeStamp");
                entity.Property(e => e.BsrYourReference)
                    .HasMaxLength(50)
                    .HasColumnName("BSR_YourReference");

                entity.HasOne(d => d.BsrBankStatementLine).WithMany(p => p.BankStatementReconcilliations)
                    .HasForeignKey(d => d.BsrBankStatementLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankStatementReconcilliations_BankStatementLines");

                entity.HasOne(d => d.BsrClient).WithMany(p => p.BankStatementReconcilliations)
                    .HasForeignKey(d => d.BsrClientId)
                    .HasConstraintName("FK_BankStatementReconcilliations_Clients");

                entity.HasOne(d => d.BsrDossier).WithMany(p => p.BankStatementReconcilliations)
                    .HasForeignKey(d => d.BsrDossierId)
                    .HasConstraintName("FK_BankStatementReconcilliations_Dossiers");

                entity.HasOne(d => d.BsrPurchaseInvoice).WithMany(p => p.BankStatementReconcilliations)
                    .HasForeignKey(d => d.BsrPurchaseInvoiceId)
                    .HasConstraintName("FK_BankStatementReconcilliations_PurchaseInvoices");

                entity.HasOne(d => d.BsrReconcilliationActionType).WithMany(p => p.BankStatementReconcilliations)
                    .HasForeignKey(d => d.BsrReconcilliationActionTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankStatementReconcilliations_ReconcilliationActionTypes");

                entity.HasOne(d => d.BsrRecoveryStatement).WithMany(p => p.BankStatementReconcilliations)
                    .HasForeignKey(d => d.BsrRecoveryStatementId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_BankStatementReconcilliations_RecoveryStatements");

                entity.HasOne(d => d.BsrSalesInvoice).WithMany(p => p.BankStatementReconcilliations)
                    .HasForeignKey(d => d.BsrSalesInvoiceId)
                    .HasConstraintName("FK_BankStatementReconcilliations_SalesInvoices");
            });

            modelBuilder.Entity<BankStatementReconcilliationsReport>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("BankStatementReconcilliationsReport", "fin");

                entity.Property(e => e.ClosingAmount).HasColumnType("money");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditValue).HasColumnType("money");
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.Currency).HasMaxLength(3);
                entity.Property(e => e.DebitValue).HasColumnType("money");
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.EntryNumber).HasMaxLength(20);
                entity.Property(e => e.Iban)
                    .HasMaxLength(34)
                    .HasColumnName("IBAN");
                entity.Property(e => e.InvoiceNumber).HasMaxLength(10);
                entity.Property(e => e.Journal).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LedgerAccount).HasMaxLength(20);
                entity.Property(e => e.MatchValue).HasColumnType("money");
                entity.Property(e => e.OpeningAmount).HasColumnType("money");
                entity.Property(e => e.OurRef).HasMaxLength(50);
                entity.Property(e => e.PurchaseInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.RecoveryNumber).HasMaxLength(10);
                entity.Property(e => e.SalesInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.StatementDate).HasColumnType("date");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.TransactionValue).HasColumnType("money");
                entity.Property(e => e.YourRef).HasMaxLength(50);
            });

            modelBuilder.Entity<BankStatementReconcilliationsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("BankStatementReconcilliationsView", "fin");

                entity.Property(e => e.AccountAddressLine1).HasMaxLength(250);
                entity.Property(e => e.AccountAddressLine2).HasMaxLength(250);
                entity.Property(e => e.AccountHolderName).HasMaxLength(250);
                entity.Property(e => e.AccountNumber).HasMaxLength(20);
                entity.Property(e => e.ActionTypeAbbreviation).HasMaxLength(20);
                entity.Property(e => e.ActionTypeCategory).HasMaxLength(20);
                entity.Property(e => e.ActionTypeDescription).HasMaxLength(250);
                entity.Property(e => e.BankName).HasMaxLength(250);
                entity.Property(e => e.Bic)
                    .HasMaxLength(11)
                    .HasColumnName("BIC");
                entity.Property(e => e.CorrectionReason).HasMaxLength(250);
                entity.Property(e => e.CostCenterCode).HasMaxLength(20);
                entity.Property(e => e.CostUnitCode).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditorName).HasMaxLength(250);
                entity.Property(e => e.CreditorNumber).HasMaxLength(10);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DebtorName).HasMaxLength(250);
                entity.Property(e => e.DebtorNumber).HasMaxLength(10);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.ExactAdministration).HasMaxLength(10);
                entity.Property(e => e.FurtherReferenceInfo).HasMaxLength(500);
                entity.Property(e => e.GeneralLedgerDescription).HasMaxLength(250);
                entity.Property(e => e.Iban)
                    .HasMaxLength(34)
                    .HasColumnName("IBAN");
                entity.Property(e => e.InsuredPartyIncidentNumber).HasMaxLength(50);
                entity.Property(e => e.InsuredPartyLicensePlate).HasMaxLength(20);
                entity.Property(e => e.InvoiceNumber).HasMaxLength(10);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LedgerAccount).HasMaxLength(20);
                entity.Property(e => e.MatchValue).HasColumnType("money");
                entity.Property(e => e.Notes).HasMaxLength(500);
                entity.Property(e => e.OurReference).HasMaxLength(50);
                entity.Property(e => e.RecoveryJournalId).HasMaxLength(20);
                entity.Property(e => e.RecoveryLedgerAccount)
                    .HasMaxLength(6)
                    .IsUnicode(false);
                entity.Property(e => e.ReferenceAccountOwner).HasMaxLength(500);
                entity.Property(e => e.RelationName).HasMaxLength(250);
                entity.Property(e => e.RelationNumber).HasMaxLength(10);
                entity.Property(e => e.RemittanceInformation).HasMaxLength(500);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.TransactionCode).HasMaxLength(10);
                entity.Property(e => e.TransactionDescription).HasMaxLength(500);
                entity.Property(e => e.TransactionValue).HasColumnType("money");
                entity.Property(e => e.YourReference).HasMaxLength(50);
            });

            modelBuilder.Entity<BankStatementStatus>(entity =>
            {
                entity.HasKey(e => e.BssId);

                entity.ToTable("BankStatementStatuses", "fin");

                entity.Property(e => e.BssId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("BSS_Id");
                entity.Property(e => e.BssCode)
                    .HasMaxLength(10)
                    .HasColumnName("BSS_Code");
                entity.Property(e => e.BssCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BSS_CreatedBy");
                entity.Property(e => e.BssCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BSS_CreatedDate");
                entity.Property(e => e.BssInactive).HasColumnName("BSS_Inactive");
                entity.Property(e => e.BssLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BSS_LastModifiedBy");
                entity.Property(e => e.BssLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BSS_LastModifiedDate");
                entity.Property(e => e.BssLocalizableEntryId).HasColumnName("BSS_LocalizableEntry_Id");
                entity.Property(e => e.BssLongName)
                    .HasMaxLength(250)
                    .HasColumnName("BSS_LongName");
                entity.Property(e => e.BssShortName)
                    .HasMaxLength(20)
                    .HasColumnName("BSS_ShortName");
                entity.Property(e => e.BssTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("BSS_TimeStamp");

                entity.HasOne(d => d.BssLocalizableEntry).WithMany(p => p.BankStatementStatuses)
                    .HasForeignKey(d => d.BssLocalizableEntryId)
                    .HasConstraintName("FK_BankStatementStatuses_LocalizableEntries");
            });

            modelBuilder.Entity<BankStatementStatusHistory>(entity =>
            {
                entity.HasKey(e => e.BshId);

                entity.ToTable("BankStatementStatusHistory", "fin", tb =>
                {
                    tb.HasTrigger("td_BankStatementStatusHistory");
                    tb.HasTrigger("ti_BankStatementStatusHistory");
                    tb.HasTrigger("tu_BankStatementStatusHistory");
                });

                entity.HasIndex(e => e.BshBankStatementId, "IX_fin_BankStatementStatusHistory_BankStatement");

                entity.Property(e => e.BshId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("BSH_Id");
                entity.Property(e => e.BshBankStatementId).HasColumnName("BSH_BankStatement_Id");
                entity.Property(e => e.BshBankStatementStatusId).HasColumnName("BSH_BankStatementStatus_Id");
                entity.Property(e => e.BshCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BSH_CreatedBy");
                entity.Property(e => e.BshCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BSH_CreatedDate");
                entity.Property(e => e.BshLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BSH_LastModifiedBy");
                entity.Property(e => e.BshLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BSH_LastModifiedDate");
                entity.Property(e => e.BshStartDate).HasColumnName("BSH_StartDate");
                entity.Property(e => e.BshStatusChangeReason)
                    .HasMaxLength(250)
                    .HasColumnName("BSH_StatusChangeReason");
                entity.Property(e => e.BshTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("BSH_TimeStamp");

                entity.HasOne(d => d.BshBankStatement).WithMany(p => p.BankStatementStatusHistories)
                    .HasForeignKey(d => d.BshBankStatementId)
                    .HasConstraintName("FK_BankStatementStatusHistory_BankStatements");

                entity.HasOne(d => d.BshBankStatementStatus).WithMany(p => p.BankStatementStatusHistories)
                    .HasForeignKey(d => d.BshBankStatementStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankStatementStatusHistory_BankStatementStatuses");
            });

            modelBuilder.Entity<BankStatementsFinalizedView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("BankStatementsFinalizedView", "fin");

                entity.Property(e => e.AccountAbbreviation).HasMaxLength(20);
                entity.Property(e => e.AccountName).HasMaxLength(250);
                entity.Property(e => e.ClosingBalanceDate).HasColumnType("date");
                entity.Property(e => e.ClosingBalanceValue).HasColumnType("money");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Iban)
                    .HasMaxLength(34)
                    .HasColumnName("IBAN");
                entity.Property(e => e.JournalCode).HasMaxLength(20);
                entity.Property(e => e.JournalEntryNumber).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.MessageDescription).HasMaxLength(500);
                entity.Property(e => e.OpeningBalanceDate).HasColumnType("date");
                entity.Property(e => e.OpeningBalanceValue).HasColumnType("money");
                entity.Property(e => e.ReconciledBy).HasMaxLength(250);
                entity.Property(e => e.ReferenceToRelatedTransaction).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.TransactionReferenceNumber).HasMaxLength(20);
            });

            modelBuilder.Entity<BankStatementsNextToReconcileView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("BankStatementsNextToReconcileView", "fin");

                entity.Property(e => e.AccountAbbreviation).HasMaxLength(20);
                entity.Property(e => e.AccountName).HasMaxLength(250);
                entity.Property(e => e.ClosingBalanceDate).HasColumnType("date");
                entity.Property(e => e.ClosingBalanceValue).HasColumnType("money");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Iban)
                    .HasMaxLength(34)
                    .HasColumnName("IBAN");
                entity.Property(e => e.JournalCode).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.MessageDescription).HasMaxLength(500);
                entity.Property(e => e.OpeningBalanceDate).HasColumnType("date");
                entity.Property(e => e.OpeningBalanceValue).HasColumnType("money");
                entity.Property(e => e.ReferenceToRelatedTransaction).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.TransactionReferenceNumber).HasMaxLength(20);
            });

            modelBuilder.Entity<BankStatementsPendingJournalEntryView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("BankStatementsPendingJournalEntryView", "fin");

                entity.Property(e => e.ClosingBalanceDate).HasColumnType("date");
                entity.Property(e => e.ClosingBalanceValue).HasColumnType("money");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.MessageDescription).HasMaxLength(500);
                entity.Property(e => e.Mt940)
                    .HasColumnType("ntext")
                    .HasColumnName("MT940");
                entity.Property(e => e.OpeningBalanceDate).HasColumnType("date");
                entity.Property(e => e.OpeningBalanceValue).HasColumnType("money");
                entity.Property(e => e.ReferenceToRelatedTransaction).HasMaxLength(50);
                entity.Property(e => e.TransactionReferenceNumber).HasMaxLength(20);
            });

            modelBuilder.Entity<BankStatementsReconcilableView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("BankStatementsReconcilableView", "fin");

                entity.Property(e => e.AccountAbbreviation).HasMaxLength(20);
                entity.Property(e => e.AccountName).HasMaxLength(250);
                entity.Property(e => e.ClosingBalanceDate).HasColumnType("date");
                entity.Property(e => e.ClosingBalanceValue).HasColumnType("money");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Iban)
                    .HasMaxLength(34)
                    .HasColumnName("IBAN");
                entity.Property(e => e.JournalCode).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.MessageDescription).HasMaxLength(500);
                entity.Property(e => e.OpeningBalanceDate).HasColumnType("date");
                entity.Property(e => e.OpeningBalanceValue).HasColumnType("money");
                entity.Property(e => e.ReferenceToRelatedTransaction).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.TransactionReferenceNumber).HasMaxLength(20);
            });

            modelBuilder.Entity<BankStatementsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("BankStatementsView", "fin");

                entity.Property(e => e.AccountAbbreviation).HasMaxLength(20);
                entity.Property(e => e.AccountName).HasMaxLength(250);
                entity.Property(e => e.ClosingBalanceDate).HasColumnType("date");
                entity.Property(e => e.ClosingBalanceValue).HasColumnType("money");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Iban)
                    .HasMaxLength(34)
                    .HasColumnName("IBAN");
                entity.Property(e => e.JournalCode).HasMaxLength(20);
                entity.Property(e => e.JournalEntryNumber).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.MessageDescription).HasMaxLength(500);
                entity.Property(e => e.OpeningBalanceDate).HasColumnType("date");
                entity.Property(e => e.OpeningBalanceValue).HasColumnType("money");
                entity.Property(e => e.ReconciledBy).HasMaxLength(250);
                entity.Property(e => e.ReferenceToRelatedTransaction).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.TransactionReferenceNumber).HasMaxLength(20);
            });

            modelBuilder.Entity<BlacklistCheckResult>(entity =>
            {
                entity.HasKey(e => e.BcrId);

                entity.ToTable("BlacklistCheckResults", "fin");

                entity.Property(e => e.BcrId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("BCR_Id");
                entity.Property(e => e.BcrBlacklistSourceId).HasColumnName("BCR_BlacklistSource_Id");
                entity.Property(e => e.BcrCheckedDate).HasColumnName("BCR_CheckedDate");
                entity.Property(e => e.BcrCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BCR_CreatedBy");
                entity.Property(e => e.BcrCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BCR_CreatedDate");
                entity.Property(e => e.BcrLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BCR_LastModifiedBy");
                entity.Property(e => e.BcrLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BCR_LastModifiedDate");
                entity.Property(e => e.BcrLookupAddress)
                    .HasMaxLength(500)
                    .HasColumnName("BCR_LookupAddress");
                entity.Property(e => e.BcrLookupId)
                    .HasMaxLength(20)
                    .HasColumnName("BCR_LookupId");
                entity.Property(e => e.BcrLookupName)
                    .HasMaxLength(250)
                    .HasColumnName("BCR_LookupName");
                entity.Property(e => e.BcrTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("BCR_TimeStamp");

                entity.HasOne(d => d.BcrBlacklistSource).WithMany(p => p.BlacklistCheckResults)
                    .HasForeignKey(d => d.BcrBlacklistSourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BlacklistCheckResults_BlacklistSources");
            });

            modelBuilder.Entity<BlacklistSource>(entity =>
            {
                entity.HasKey(e => e.BlsId);

                entity.ToTable("BlacklistSources", "fin");

                entity.HasIndex(e => e.BlsCode, "IX_BlacklistSources_Code").IsUnique();

                entity.Property(e => e.BlsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("BLS_Id");
                entity.Property(e => e.BlsCode).HasColumnName("BLS_Code");
                entity.Property(e => e.BlsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BLS_CreatedBy");
                entity.Property(e => e.BlsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BLS_CreatedDate");
                entity.Property(e => e.BlsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BLS_LastModifiedBy");
                entity.Property(e => e.BlsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BLS_LastModifiedDate");
                entity.Property(e => e.BlsName)
                    .HasMaxLength(50)
                    .HasColumnName("BLS_Name");
                entity.Property(e => e.BlsResource)
                    .HasMaxLength(2000)
                    .HasColumnName("BLS_Resource");
                entity.Property(e => e.BlsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("BLS_TimeStamp");
            });

            modelBuilder.Entity<BookingDimension>(entity =>
            {
                entity.HasKey(e => e.BkdId);

                entity.ToTable("BookingDimensions", "fin");

                entity.Property(e => e.BkdId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("BKD_Id");
                entity.Property(e => e.BkdCostCenterId).HasColumnName("BKD_CostCenter_Id");
                entity.Property(e => e.BkdCostUnitId).HasColumnName("BKD_CostUnit_Id");
                entity.Property(e => e.BkdCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BKD_CreatedBy");
                entity.Property(e => e.BkdCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BKD_CreatedDate");
                entity.Property(e => e.BkdDepartmentId).HasColumnName("BKD_Department_Id");
                entity.Property(e => e.BkdEffectiveDate)
                    .HasDefaultValueSql("('2010-01-01')")
                    .HasColumnType("date")
                    .HasColumnName("BKD_EffectiveDate");
                entity.Property(e => e.BkdEntrySystem)
                    .HasMaxLength(10)
                    .HasColumnName("BKD_EntrySystem");
                entity.Property(e => e.BkdLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BKD_LastModifiedBy");
                entity.Property(e => e.BkdLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BKD_LastModifiedDate");
                entity.Property(e => e.BkdLegalEntityId).HasColumnName("BKD_LegalEntity_Id");
                entity.Property(e => e.BkdProductId).HasColumnName("BKD_Product_Id");
                entity.Property(e => e.BkdTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("BKD_TerminationDate");
                entity.Property(e => e.BkdTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("BKD_TimeStamp");

                entity.HasOne(d => d.BkdCostCenter).WithMany(p => p.BookingDimensions)
                    .HasForeignKey(d => d.BkdCostCenterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BookingDimensions_CostCenters");

                entity.HasOne(d => d.BkdCostUnit).WithMany(p => p.BookingDimensions)
                    .HasForeignKey(d => d.BkdCostUnitId)
                    .HasConstraintName("FK_BookingDimensions_CostUnits");

                entity.HasOne(d => d.BkdDepartment).WithMany(p => p.BookingDimensions)
                    .HasForeignKey(d => d.BkdDepartmentId)
                    .HasConstraintName("FK_BookingDimensions_Departments");

                entity.HasOne(d => d.BkdLegalEntity).WithMany(p => p.BookingDimensions)
                    .HasForeignKey(d => d.BkdLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BookingDimensions_LegalEntities");

                entity.HasOne(d => d.BkdProduct).WithMany(p => p.BookingDimensions)
                    .HasForeignKey(d => d.BkdProductId)
                    .HasConstraintName("FK_BookingDimensions_Products");
            });

            modelBuilder.Entity<BookingDimensionsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("BookingDimensionsView", "fin");

                entity.Property(e => e.CostCenterCode).HasMaxLength(10);
                entity.Property(e => e.CostCenterName).HasMaxLength(250);
                entity.Property(e => e.CostUnitCode).HasMaxLength(10);
                entity.Property(e => e.CostUnitName).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.EffectiveDate).HasColumnType("date");
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.ProductCode).HasMaxLength(20);
                entity.Property(e => e.ProductName).HasMaxLength(250);
                entity.Property(e => e.TerminationDate).HasColumnType("date");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Brand>(entity =>
            {
                entity.HasKey(e => e.BrnId);

                entity.ToTable("Brands", "pdc");

                entity.HasIndex(e => e.BrnCode, "UX_pdc_Brands_Code__Filtered")
                    .IsUnique()
                    .HasFilter("([BRN_Inactive]=(0))");

                entity.Property(e => e.BrnId)
                    .ValueGeneratedNever()
                    .HasColumnName("BRN_Id");
                entity.Property(e => e.BrnCode)
                    .HasMaxLength(10)
                    .HasColumnName("BRN_Code");
                entity.Property(e => e.BrnCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BRN_CreatedBy");
                entity.Property(e => e.BrnCreatedDate)
                    .HasDefaultValueSql("(getutcdate())")
                    .HasColumnName("BRN_CreatedDate");
                entity.Property(e => e.BrnInactive).HasColumnName("BRN_Inactive");
                entity.Property(e => e.BrnLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BRN_LastModifiedBy");
                entity.Property(e => e.BrnLastModifiedDate)
                    .HasDefaultValueSql("(getutcdate())")
                    .HasColumnName("BRN_LastModifiedDate");
                entity.Property(e => e.BrnLocalizableEntryId).HasColumnName("BRN_LocalizableEntry_Id");
                entity.Property(e => e.BrnLongName)
                    .HasMaxLength(250)
                    .HasColumnName("BRN_LongName");
                entity.Property(e => e.BrnShortName)
                    .HasMaxLength(20)
                    .HasColumnName("BRN_ShortName");
                entity.Property(e => e.BrnTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("BRN_TimeStamp");

                entity.HasOne(d => d.BrnLocalizableEntry).WithMany(p => p.Brands)
                    .HasForeignKey(d => d.BrnLocalizableEntryId)
                    .HasConstraintName("FK_Brands_LocalizableEntries");
            });

            modelBuilder.Entity<BusinessHour>(entity =>
            {
                entity.ToTable("BusinessHours", "mdm");

                entity.HasIndex(e => e.OrganizationUnitId, "IX_BusinessHours_OrganizationUnitId");

                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.WeekDay).HasMaxLength(250);

                entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.BusinessHours)
                    .HasForeignKey(d => d.OrganizationUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusinessHours_OrganizationUnits");
            });

            modelBuilder.Entity<BusinessUnit>(entity =>
            {
                entity.HasKey(e => e.BuId);

                entity.ToTable("BusinessUnits", "ced");

                entity.Property(e => e.BuId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("BU_Id");
                entity.Property(e => e.BuCostCenterId).HasColumnName("BU_CostCenter_Id");
                entity.Property(e => e.BuCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BU_CreatedBy");
                entity.Property(e => e.BuCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BU_CreatedDate");
                entity.Property(e => e.BuLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BU_LastModifiedBy");
                entity.Property(e => e.BuLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("BU_LastModifiedDate");
                entity.Property(e => e.BuLegalEntityId).HasColumnName("BU_LegalEntity_Id");
                entity.Property(e => e.BuTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("BU_TimeStamp");

                entity.HasOne(d => d.BuCostCenter).WithMany(p => p.BusinessUnits)
                    .HasForeignKey(d => d.BuCostCenterId)
                    .HasConstraintName("FK_BusinessUnits_CostCenters");

                entity.HasOne(d => d.Bu).WithOne(p => p.BusinessUnit)
                    .HasForeignKey<BusinessUnit>(d => d.BuId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusinessUnits_OrganizationUnits");

                entity.HasOne(d => d.BuLegalEntity).WithMany(p => p.BusinessUnits)
                    .HasForeignKey(d => d.BuLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusinessUnits_LegalEntities");
            });

            modelBuilder.Entity<BusinessUnit1>(entity =>
            {
                entity.HasKey(e => e.BuId);

                entity.ToTable("BusinessUnits", "stg");

                entity.Property(e => e.BuId)
                    .ValueGeneratedNever()
                    .HasColumnName("BU_Id");
                entity.Property(e => e.BuCostCenterId).HasColumnName("BU_CostCenter_Id");
                entity.Property(e => e.BuCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BU_CreatedBy");
                entity.Property(e => e.BuCreatedDate).HasColumnName("BU_CreatedDate");
                entity.Property(e => e.BuLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("BU_LastModifiedBy");
                entity.Property(e => e.BuLastModifiedDate).HasColumnName("BU_LastModifiedDate");
                entity.Property(e => e.BuLegalEntityId).HasColumnName("BU_LegalEntity_Id");
                entity.Property(e => e.BuTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("BU_TimeStamp");
            });

            modelBuilder.Entity<BusinessUnitsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("BusinessUnitsView", "ced");

                entity.Property(e => e.BusinessUnitAbbreviation).HasMaxLength(20);
                entity.Property(e => e.BusinessUnitCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.BusinessUnitName).HasMaxLength(756);
                entity.Property(e => e.CostCenterCode).HasMaxLength(10);
                entity.Property(e => e.CostCenterName).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<CalculationGroup>(entity =>
            {
                entity.HasKey(e => e.CagId);

                entity.ToTable("CalculationGroup", "dos", tb => tb.HasTrigger("th_dos_CalculationGroup_TraceHistory"));

                entity.Property(e => e.CagId)
                    .ValueGeneratedNever()
                    .HasColumnName("CAG_Id");
                entity.Property(e => e.CagCalculationStatus)
                    .HasMaxLength(200)
                    .HasColumnName("CAG_CalculationStatus");
                entity.Property(e => e.CagCalculationType)
                    .HasMaxLength(200)
                    .HasColumnName("CAG_CalculationType");
                entity.Property(e => e.CagCommitDate).HasColumnName("CAG_CommitDate");
                entity.Property(e => e.CagCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CAG_CreatedBy");
                entity.Property(e => e.CagCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CAG_CreatedDate");
                entity.Property(e => e.CagEndWork).HasColumnName("CAG_EndWork");
                entity.Property(e => e.CagEvaluatedByEmployeeId).HasColumnName("CAG_EvaluatedByEmployee_Id");
                entity.Property(e => e.CagEvaluationDate).HasColumnName("CAG_EvaluationDate");
                entity.Property(e => e.CagLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CAG_LastModifiedBy");
                entity.Property(e => e.CagLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CAG_LastModifiedDate");
                entity.Property(e => e.CagNumber)
                    .HasMaxLength(10)
                    .HasColumnName("CAG_Number");
                entity.Property(e => e.CagRepairOrderId).HasColumnName("CAG_RepairOrder_Id");
                entity.Property(e => e.CagStartWork).HasColumnName("CAG_StartWork");
                entity.Property(e => e.CagTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CAG_TimeStamp");
                entity.Property(e => e.CagTitle)
                    .HasMaxLength(200)
                    .HasColumnName("CAG_Title");
                entity.Property(e => e.CagTotalPurchasePrice)
                    .HasColumnType("money")
                    .HasColumnName("CAG_TotalPurchasePrice");
                entity.Property(e => e.CagTotalPurchsePriceWithoutSurchare)
                    .HasColumnType("money")
                    .HasColumnName("CAG_TotalPurchsePriceWithoutSurchare");
                entity.Property(e => e.CagTotalSalesPrice)
                    .HasColumnType("money")
                    .HasColumnName("CAG_TotalSalesPrice");
                entity.Property(e => e.CagTotalSalesPriceWithoutSurcharge)
                    .HasColumnType("money")
                    .HasColumnName("CAG_TotalSalesPriceWIthoutSurcharge");

                entity.HasOne(d => d.CagRepairOrder).WithMany(p => p.CalculationGroups)
                    .HasForeignKey(d => d.CagRepairOrderId)
                    .HasConstraintName("FK_CalculationGroup_RepairOrder");
            });

            modelBuilder.Entity<CalculationGroupHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_CalculationGroup_History_ID");

                entity.ToTable("CalculationGroup_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.CagCalculationStatus)
                    .HasMaxLength(200)
                    .HasColumnName("CAG_CalculationStatus");
                entity.Property(e => e.CagCalculationType)
                    .HasMaxLength(200)
                    .HasColumnName("CAG_CalculationType");
                entity.Property(e => e.CagCommitDate).HasColumnName("CAG_CommitDate");
                entity.Property(e => e.CagCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CAG_CreatedBy");
                entity.Property(e => e.CagCreatedDate).HasColumnName("CAG_CreatedDate");
                entity.Property(e => e.CagEndWork).HasColumnName("CAG_EndWork");
                entity.Property(e => e.CagEvaluatedByEmployeeId).HasColumnName("CAG_EvaluatedByEmployee_Id");
                entity.Property(e => e.CagEvaluationDate).HasColumnName("CAG_EvaluationDate");
                entity.Property(e => e.CagId).HasColumnName("CAG_Id");
                entity.Property(e => e.CagLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CAG_LastModifiedBy");
                entity.Property(e => e.CagLastModifiedDate).HasColumnName("CAG_LastModifiedDate");
                entity.Property(e => e.CagNumber)
                    .HasMaxLength(10)
                    .HasColumnName("CAG_Number");
                entity.Property(e => e.CagRepairOrderId).HasColumnName("CAG_RepairOrder_Id");
                entity.Property(e => e.CagStartWork).HasColumnName("CAG_StartWork");
                entity.Property(e => e.CagTitle)
                    .HasMaxLength(200)
                    .HasColumnName("CAG_Title");
                entity.Property(e => e.CagTotalPurchasePrice)
                    .HasColumnType("money")
                    .HasColumnName("CAG_TotalPurchasePrice");
                entity.Property(e => e.CagTotalPurchsePriceWithoutSurchare)
                    .HasColumnType("money")
                    .HasColumnName("CAG_TotalPurchsePriceWithoutSurchare");
                entity.Property(e => e.CagTotalSalesPrice)
                    .HasColumnType("money")
                    .HasColumnName("CAG_TotalSalesPrice");
                entity.Property(e => e.CagTotalSalesPriceWithoutSurcharge)
                    .HasColumnType("money")
                    .HasColumnName("CAG_TotalSalesPriceWIthoutSurcharge");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<CancelledPurchaseBacklogsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CancelledPurchaseBacklogsView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.StatusCode).HasMaxLength(20);
                entity.Property(e => e.StatusName).HasMaxLength(250);
                entity.Property(e => e.SupplierInvoiceDate).HasColumnType("date");
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Chain>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__Chains__3214EC07B4531A43");

                entity.ToTable("Chains", "mdm");

                entity.HasIndex(e => e.Code, "UX_mdm_Chains_Code__Filtered")
                    .IsUnique()
                    .HasFilter("([Inactive]=(0))");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LongName).HasMaxLength(250);
                entity.Property(e => e.ShortName).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.LocalizableEntry).WithMany(p => p.Chains)
                    .HasForeignKey(d => d.LocalizableEntryId)
                    .HasConstraintName("FK_Chains_LocalizableEntries");
            });

            modelBuilder.Entity<Claim>(entity =>
            {
                entity.HasKey(e => e.ClmId);

                entity.ToTable("Claims", "dos", tb => tb.HasTrigger("th_dos_Claims_TraceHistory"));

                entity.Property(e => e.ClmId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CLM_Id");
                entity.Property(e => e.ClmClaimAmount)
                    .HasColumnType("money")
                    .HasColumnName("CLM_ClaimAmount");
                entity.Property(e => e.ClmCostTypeId).HasColumnName("CLM_CostType_Id");
                entity.Property(e => e.ClmCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CLM_CreatedBy");
                entity.Property(e => e.ClmCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CLM_CreatedDate");
                entity.Property(e => e.ClmLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CLM_LastModifiedBy");
                entity.Property(e => e.ClmLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CLM_LastModifiedDate");
                entity.Property(e => e.ClmPaymentId).HasColumnName("CLM_Payment_Id");
                entity.Property(e => e.ClmTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CLM_TimeStamp");

                entity.HasOne(d => d.ClmCostType).WithMany(p => p.Claims)
                    .HasForeignKey(d => d.ClmCostTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Claims_CostTypes");

                entity.HasOne(d => d.ClmPayment).WithMany(p => p.Claims)
                    .HasForeignKey(d => d.ClmPaymentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Claims_Payments");
            });

            modelBuilder.Entity<ClaimDossier>(entity =>
            {
                entity.HasKey(e => e.CldId);

                entity.ToTable("ClaimDossiers", "dos", tb => tb.HasTrigger("th_dos_ClaimDossiers_TraceHistory"));

                entity.Property(e => e.CldId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CLD_Id");
                entity.Property(e => e.CldActionInsured)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_ActionInsured");
                entity.Property(e => e.CldActionOtherParty)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_ActionOtherParty");
                entity.Property(e => e.CldCause)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_Cause");
                entity.Property(e => e.CldCollisionWith)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_CollisionWith");
                entity.Property(e => e.CldCoverage)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_Coverage");
                entity.Property(e => e.CldCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CLD_CreatedBy");
                entity.Property(e => e.CldCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CLD_CreatedDate");
                entity.Property(e => e.CldDamageAmountEstimate)
                    .HasColumnType("money")
                    .HasColumnName("CLD_DamageAmountEstimate");
                entity.Property(e => e.CldDamageAmountFinal)
                    .HasColumnType("money")
                    .HasColumnName("CLD_DamageAmountFinal");
                entity.Property(e => e.CldDamageType)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_DamageType");
                entity.Property(e => e.CldDirectionInsured)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_DirectionInsured");
                entity.Property(e => e.CldDirectionOtherParty)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_DirectionOtherParty");
                entity.Property(e => e.CldDistanceInsured).HasColumnName("CLD_DistanceInsured");
                entity.Property(e => e.CldDistanceOtherParty).HasColumnName("CLD_DistanceOtherParty");
                entity.Property(e => e.CldHasInjuries).HasColumnName("CLD_HasInjuries");
                entity.Property(e => e.CldIncidentCity)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_IncidentCity");
                entity.Property(e => e.CldIncidentDate).HasColumnName("CLD_IncidentDate");
                entity.Property(e => e.CldIncidentNumberCounterParty)
                    .HasMaxLength(20)
                    .HasColumnName("CLD_IncidentNumberCounterParty");
                entity.Property(e => e.CldIncidentNumberInsurer)
                    .HasMaxLength(20)
                    .HasColumnName("CLD_IncidentNumberInsurer");
                entity.Property(e => e.CldIncidentStreet)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_IncidentStreet");
                entity.Property(e => e.CldIndicatorInsured)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_IndicatorInsured");
                entity.Property(e => e.CldIndicatorOtherParty)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_IndicatorOtherParty");
                entity.Property(e => e.CldInsurancePolicyId).HasColumnName("CLD_InsurancePolicy_Id");
                entity.Property(e => e.CldIntersectionInsured)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_IntersectionInsured");
                entity.Property(e => e.CldIntersectionOtherParty)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_IntersectionOtherParty");
                entity.Property(e => e.CldIsOvsDossier).HasColumnName("CLD_IsOvsDossier");
                entity.Property(e => e.CldIsOvsXmlInterface).HasColumnName("CLD_IsOvsXmlInterface");
                entity.Property(e => e.CldIsWaarborgfonds).HasColumnName("CLD_IsWaarborgfonds");
                entity.Property(e => e.CldLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CLD_LastModifiedBy");
                entity.Property(e => e.CldLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CLD_LastModifiedDate");
                entity.Property(e => e.CldLiablePartyId).HasColumnName("CLD_LiableParty_Id");
                entity.Property(e => e.CldLiablePartyProbability).HasColumnName("CLD_LiablePartyProbability");
                entity.Property(e => e.CldObjectStolen)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_ObjectStolen");
                entity.Property(e => e.CldOppositeDirectionInsured)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_OppositeDirectionInsured");
                entity.Property(e => e.CldOppositeDirectionOtherParty)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_OppositeDirectionOtherParty");
                entity.Property(e => e.CldReportingParty)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_ReportingParty");
                entity.Property(e => e.CldStationaryInsured).HasColumnName("CLD_StationaryInsured");
                entity.Property(e => e.CldStationaryOtherParty).HasColumnName("CLD_StationaryOtherParty");
                entity.Property(e => e.CldTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CLD_TimeStamp");
                entity.Property(e => e.CldTypeOfRoadInsured)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_TypeOfRoadInsured");
                entity.Property(e => e.CldTypeOfRoadOtherParty)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_TypeOfRoadOtherParty");

                entity.HasOne(d => d.Cld).WithOne(p => p.ClaimDossier)
                    .HasForeignKey<ClaimDossier>(d => d.CldId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClaimDossiers_Dossiers");

                entity.HasOne(d => d.CldInsurancePolicy).WithMany(p => p.ClaimDossiers)
                    .HasForeignKey(d => d.CldInsurancePolicyId)
                    .HasConstraintName("FK_ClaimDossiers_InsurancePolicies");

                entity.HasOne(d => d.CldLiableParty).WithMany(p => p.ClaimDossiers)
                    .HasForeignKey(d => d.CldLiablePartyId)
                    .HasConstraintName("FK_ClaimDossiers_LiableParties");
            });

            modelBuilder.Entity<ClaimDossiersHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_ClaimDossiers_History_ID");

                entity.ToTable("ClaimDossiers_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.CldActionInsured)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_ActionInsured");
                entity.Property(e => e.CldActionOtherParty)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_ActionOtherParty");
                entity.Property(e => e.CldCause)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_Cause");
                entity.Property(e => e.CldCollisionWith)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_CollisionWith");
                entity.Property(e => e.CldCoverage)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_Coverage");
                entity.Property(e => e.CldCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CLD_CreatedBy");
                entity.Property(e => e.CldCreatedDate).HasColumnName("CLD_CreatedDate");
                entity.Property(e => e.CldDamageAmountEstimate)
                    .HasColumnType("money")
                    .HasColumnName("CLD_DamageAmountEstimate");
                entity.Property(e => e.CldDamageAmountFinal)
                    .HasColumnType("money")
                    .HasColumnName("CLD_DamageAmountFinal");
                entity.Property(e => e.CldDamageType)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_DamageType");
                entity.Property(e => e.CldDirectionInsured)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_DirectionInsured");
                entity.Property(e => e.CldDirectionOtherParty)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_DirectionOtherParty");
                entity.Property(e => e.CldDistanceInsured).HasColumnName("CLD_DistanceInsured");
                entity.Property(e => e.CldDistanceOtherParty).HasColumnName("CLD_DistanceOtherParty");
                entity.Property(e => e.CldHasInjuries).HasColumnName("CLD_HasInjuries");
                entity.Property(e => e.CldId).HasColumnName("CLD_Id");
                entity.Property(e => e.CldIncidentCity)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_IncidentCity");
                entity.Property(e => e.CldIncidentDate).HasColumnName("CLD_IncidentDate");
                entity.Property(e => e.CldIncidentNumberCounterParty)
                    .HasMaxLength(20)
                    .HasColumnName("CLD_IncidentNumberCounterParty");
                entity.Property(e => e.CldIncidentNumberInsurer)
                    .HasMaxLength(20)
                    .HasColumnName("CLD_IncidentNumberInsurer");
                entity.Property(e => e.CldIncidentStreet)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_IncidentStreet");
                entity.Property(e => e.CldIndicatorInsured)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_IndicatorInsured");
                entity.Property(e => e.CldIndicatorOtherParty)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_IndicatorOtherParty");
                entity.Property(e => e.CldInsurancePolicyId).HasColumnName("CLD_InsurancePolicy_Id");
                entity.Property(e => e.CldIntersectionInsured)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_IntersectionInsured");
                entity.Property(e => e.CldIntersectionOtherParty)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_IntersectionOtherParty");
                entity.Property(e => e.CldIsOvsDossier).HasColumnName("CLD_IsOvsDossier");
                entity.Property(e => e.CldIsOvsXmlInterface).HasColumnName("CLD_IsOvsXmlInterface");
                entity.Property(e => e.CldIsWaarborgfonds).HasColumnName("CLD_IsWaarborgfonds");
                entity.Property(e => e.CldLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CLD_LastModifiedBy");
                entity.Property(e => e.CldLastModifiedDate).HasColumnName("CLD_LastModifiedDate");
                entity.Property(e => e.CldLiablePartyId).HasColumnName("CLD_LiableParty_Id");
                entity.Property(e => e.CldLiablePartyProbability).HasColumnName("CLD_LiablePartyProbability");
                entity.Property(e => e.CldObjectStolen)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_ObjectStolen");
                entity.Property(e => e.CldOppositeDirectionInsured)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_OppositeDirectionInsured");
                entity.Property(e => e.CldOppositeDirectionOtherParty)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_OppositeDirectionOtherParty");
                entity.Property(e => e.CldReportingParty)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_ReportingParty");
                entity.Property(e => e.CldStationaryInsured).HasColumnName("CLD_StationaryInsured");
                entity.Property(e => e.CldStationaryOtherParty).HasColumnName("CLD_StationaryOtherParty");
                entity.Property(e => e.CldTypeOfRoadInsured)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_TypeOfRoadInsured");
                entity.Property(e => e.CldTypeOfRoadOtherParty)
                    .HasMaxLength(200)
                    .HasColumnName("CLD_TypeOfRoadOtherParty");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<ClaimReserf>(entity =>
            {
                entity.HasKey(e => e.CrvId);

                entity.ToTable("ClaimReserves", "fin");

                entity.HasIndex(e => new { e.CrvClaimReserveTypeId, e.CrvClaimReserveClassificationId, e.CrvInvolvedCoverageId, e.CrvClientId }, "IX_fin_ClaimReserves_ClaimReserveType_ClaimReserveClassification_InvolvedCoverage_Client_INCL");

                entity.HasIndex(e => new { e.CrvClaimReserveTypeId, e.CrvClaimReserveClassificationId, e.CrvInvolvedCoverageId, e.CrvDossierId, e.CrvClientId }, "IX_fin_ClaimReserves_ClaimReserveType_ClaimReserveClassification_InvolvedCoverage_Dossier");

                entity.HasIndex(e => e.CrvDossierId, "IX_fin_ClaimReserves_Dossier");

                entity.Property(e => e.CrvId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CRV_Id");
                entity.Property(e => e.CrvClaimReserveClassificationId)
                    .HasMaxLength(20)
                    .HasColumnName("CRV_ClaimReserveClassification_Id");
                entity.Property(e => e.CrvClaimReserveDate).HasColumnName("CRV_ClaimReserveDate");
                entity.Property(e => e.CrvClaimReserveNumber)
                    .HasMaxLength(10)
                    .HasColumnName("CRV_ClaimReserveNumber");
                entity.Property(e => e.CrvClaimReserveTypeId).HasColumnName("CRV_ClaimReserveType_Id");
                entity.Property(e => e.CrvClientCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("CRV_ClientCurrencyCode");
                entity.Property(e => e.CrvClientId).HasColumnName("CRV_Client_Id");
                entity.Property(e => e.CrvClientProductCode)
                    .HasMaxLength(20)
                    .HasColumnName("CRV_ClientProductCode");
                entity.Property(e => e.CrvCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CRV_CreatedBy");
                entity.Property(e => e.CrvCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CRV_CreatedDate");
                entity.Property(e => e.CrvCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("CRV_CurrencyCode");
                entity.Property(e => e.CrvCurrentStatusCode)
                    .HasMaxLength(20)
                    .HasColumnName("CRV_CurrentStatusCode");
                entity.Property(e => e.CrvCurrentStatusHistoryId).HasColumnName("CRV_CurrentStatusHistory_Id");
                entity.Property(e => e.CrvCurrentStatusHistoryStartDate).HasColumnName("CRV_CurrentStatusHistoryStartDate");
                entity.Property(e => e.CrvDepartmentId).HasColumnName("CRV_Department_Id");
                entity.Property(e => e.CrvDossierAssignmentId).HasColumnName("CRV_DossierAssignment_Id");
                entity.Property(e => e.CrvDossierId).HasColumnName("CRV_Dossier_Id");
                entity.Property(e => e.CrvDossierPartyId).HasColumnName("CRV_DossierParty_Id");
                entity.Property(e => e.CrvEntryBatch)
                    .HasMaxLength(36)
                    .HasColumnName("CRV_EntryBatch");
                entity.Property(e => e.CrvEntryNumber)
                    .HasMaxLength(36)
                    .HasColumnName("CRV_EntryNumber");
                entity.Property(e => e.CrvEntrySystem)
                    .HasMaxLength(10)
                    .HasColumnName("CRV_EntrySystem");
                entity.Property(e => e.CrvInvolvedCoverageId).HasColumnName("CRV_InvolvedCoverage_Id");
                entity.Property(e => e.CrvLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CRV_LastModifiedBy");
                entity.Property(e => e.CrvLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CRV_LastModifiedDate");
                entity.Property(e => e.CrvLeadCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("CRV_LeadCurrencyCode");
                entity.Property(e => e.CrvLegalEntityId).HasColumnName("CRV_LegalEntity_Id");
                entity.Property(e => e.CrvTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CRV_TimeStamp");
                entity.Property(e => e.CrvTotalClaimValue)
                    .HasColumnType("money")
                    .HasColumnName("CRV_TotalClaimValue");
                entity.Property(e => e.CrvTotalClientClaimValue)
                    .HasColumnType("money")
                    .HasColumnName("CRV_TotalClientClaimValue");
                entity.Property(e => e.CrvTotalClientReservedValue)
                    .HasColumnType("money")
                    .HasColumnName("CRV_TotalClientReservedValue");
                entity.Property(e => e.CrvTotalLeadClaimValue)
                    .HasColumnType("money")
                    .HasColumnName("CRV_TotalLeadClaimValue");
                entity.Property(e => e.CrvTotalLeadReservedValue)
                    .HasColumnType("money")
                    .HasColumnName("CRV_TotalLeadReservedValue");
                entity.Property(e => e.CrvTotalReservedValue)
                    .HasColumnType("money")
                    .HasColumnName("CRV_TotalReservedValue");

                entity.HasOne(d => d.CrvClaimReserveClassification).WithMany(p => p.ClaimReserves)
                    .HasForeignKey(d => d.CrvClaimReserveClassificationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClaimReserves_ClaimReserveClassifications");

                entity.HasOne(d => d.CrvClaimReserveType).WithMany(p => p.ClaimReserves)
                    .HasForeignKey(d => d.CrvClaimReserveTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClaimReserves_ClaimReserveTypes");

                entity.HasOne(d => d.CrvClient).WithMany(p => p.ClaimReserves)
                    .HasForeignKey(d => d.CrvClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClaimReserves_Clients");

                entity.HasOne(d => d.CrvDepartment).WithMany(p => p.ClaimReserves)
                    .HasForeignKey(d => d.CrvDepartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClaimReserves_Departments");

                entity.HasOne(d => d.CrvDossierAssignment).WithMany(p => p.ClaimReserves)
                    .HasForeignKey(d => d.CrvDossierAssignmentId)
                    .HasConstraintName("FK_ClaimReserves_DossierAssignments");

                entity.HasOne(d => d.CrvDossier).WithMany(p => p.ClaimReserves)
                    .HasForeignKey(d => d.CrvDossierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClaimReserves_Dossiers");

                entity.HasOne(d => d.CrvDossierParty).WithMany(p => p.ClaimReserves)
                    .HasForeignKey(d => d.CrvDossierPartyId)
                    .HasConstraintName("FK_ClaimReserves_DossierParties");

                entity.HasOne(d => d.CrvInvolvedCoverage).WithMany(p => p.ClaimReserves)
                    .HasForeignKey(d => d.CrvInvolvedCoverageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClaimReserves_InvolvedCoverages");

                entity.HasOne(d => d.CrvLegalEntity).WithMany(p => p.ClaimReserves)
                    .HasForeignKey(d => d.CrvLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClaimReserves_LegalEntities");
            });

            modelBuilder.Entity<ClaimReserveAssistancePlan>(entity =>
            {
                entity.HasKey(e => e.CapId);

                entity.ToTable("ClaimReserveAssistancePlans", "fin");

                entity.HasIndex(e => new { e.CapAssistancePlanLineId, e.CapInactive }, "IX_fin_ClaimReserveAssistancePlans_AssistancePlanLine_Inactive__INCL");

                entity.HasIndex(e => e.CapClaimReserveId, "IX_fin_ClaimReserveAssistancePlans_ClaimReserve__INCL");

                entity.HasIndex(e => e.CapInactive, "IX_fin_ClaimReserveAssistancePlans_Inactive__INCL");

                entity.Property(e => e.CapId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CAP_Id");
                entity.Property(e => e.CapAssistancePlanLineId).HasColumnName("CAP_AssistancePlanLine_Id");
                entity.Property(e => e.CapClaimReserveId).HasColumnName("CAP_ClaimReserve_Id");
                entity.Property(e => e.CapCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CAP_CreatedBy");
                entity.Property(e => e.CapCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CAP_CreatedDate");
                entity.Property(e => e.CapInactive).HasColumnName("CAP_Inactive");
                entity.Property(e => e.CapInactiveDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CAP_InactiveDate");
                entity.Property(e => e.CapLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CAP_LastModifiedBy");
                entity.Property(e => e.CapLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CAP_LastModifiedDate");
                entity.Property(e => e.CapTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CAP_TimeStamp");

                entity.HasOne(d => d.CapAssistancePlanLine).WithMany(p => p.ClaimReserveAssistancePlans)
                    .HasForeignKey(d => d.CapAssistancePlanLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClaimReserveAssistancePlans_AssistancePlanLines");

                entity.HasOne(d => d.CapClaimReserve).WithMany(p => p.ClaimReserveAssistancePlans)
                    .HasForeignKey(d => d.CapClaimReserveId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClaimReserveAssistancePlans_ClaimReserves");
            });

            modelBuilder.Entity<ClaimReserveAssistancePlanType>(entity =>
            {
                entity.HasKey(e => e.RapId);

                entity.ToTable("ClaimReserveAssistancePlanTypes", "fin");

                entity.HasIndex(e => e.RapAssistancePlanTypeId, "IX_ClaimReserveAssistancePlanTypes_AssistancePlanType_Unique").IsUnique();

                entity.Property(e => e.RapId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("RAP_Id");
                entity.Property(e => e.RapAssistancePlanTypeId).HasColumnName("RAP_AssistancePlanType_Id");
                entity.Property(e => e.RapClaimReserveTypeId).HasColumnName("RAP_ClaimReserveType_Id");
                entity.Property(e => e.RapCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RAP_CreatedBy");
                entity.Property(e => e.RapCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RAP_CreatedDate");
                entity.Property(e => e.RapInactive).HasColumnName("RAP_Inactive");
                entity.Property(e => e.RapLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RAP_LastModifiedBy");
                entity.Property(e => e.RapLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RAP_LastModifiedDate");
                entity.Property(e => e.RapTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RAP_TimeStamp");

                entity.HasOne(d => d.RapAssistancePlanType).WithOne(p => p.ClaimReserveAssistancePlanType)
                    .HasForeignKey<ClaimReserveAssistancePlanType>(d => d.RapAssistancePlanTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClaimReserveAssistancePlanTypes_AssistancePlanTypes");

                entity.HasOne(d => d.RapClaimReserveType).WithMany(p => p.ClaimReserveAssistancePlanTypes)
                    .HasForeignKey(d => d.RapClaimReserveTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClaimReserveAssistancePlanTypes_ClaimReserveTypes");
            });

            modelBuilder.Entity<ClaimReserveClassification>(entity =>
            {
                entity.HasKey(e => e.CrcId);

                entity.ToTable("ClaimReserveClassifications", "fin");

                entity.Property(e => e.CrcId)
                    .HasMaxLength(20)
                    .HasColumnName("CRC_Id");
                entity.Property(e => e.CrcCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CRC_CreatedBy");
                entity.Property(e => e.CrcCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CRC_CreatedDate");
                entity.Property(e => e.CrcInactive).HasColumnName("CRC_Inactive");
                entity.Property(e => e.CrcLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CRC_LastModifiedBy");
                entity.Property(e => e.CrcLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CRC_LastModifiedDate");
                entity.Property(e => e.CrcLocalizableEntryId).HasColumnName("CRC_LocalizableEntry_Id");
                entity.Property(e => e.CrcName)
                    .HasMaxLength(250)
                    .HasColumnName("CRC_Name");
                entity.Property(e => e.CrcTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CRC_TimeStamp");

                entity.HasOne(d => d.CrcLocalizableEntry).WithMany(p => p.ClaimReserveClassifications)
                    .HasForeignKey(d => d.CrcLocalizableEntryId)
                    .HasConstraintName("FK_ClaimReserveClassifications_LocalizableEntries");
            });

            modelBuilder.Entity<ClaimReserveLine>(entity =>
            {
                entity.HasKey(e => e.CrlId);

                entity.ToTable("ClaimReserveLines", "fin");

                entity.Property(e => e.CrlId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CRL_Id");
                entity.Property(e => e.CrlAssistancePlanLineId).HasColumnName("CRL_AssistancePlanLine_Id");
                entity.Property(e => e.CrlClaimReserveId).HasColumnName("CRL_ClaimReserve_Id");
                entity.Property(e => e.CrlClientExchangeRate)
                    .HasDefaultValueSql("((1))")
                    .HasColumnName("CRL_ClientExchangeRate");
                entity.Property(e => e.CrlClientReservedValue)
                    .HasColumnType("money")
                    .HasColumnName("CRL_ClientReservedValue");
                entity.Property(e => e.CrlCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CRL_CreatedBy");
                entity.Property(e => e.CrlCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CRL_CreatedDate");
                entity.Property(e => e.CrlCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("CRL_CurrencyCode");
                entity.Property(e => e.CrlDossierAssignmentId).HasColumnName("CRL_DossierAssignment_Id");
                entity.Property(e => e.CrlIsManualTransaction).HasColumnName("CRL_IsManualTransaction");
                entity.Property(e => e.CrlLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CRL_LastModifiedBy");
                entity.Property(e => e.CrlLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CRL_LastModifiedDate");
                entity.Property(e => e.CrlLeadExchangeRate)
                    .HasDefaultValueSql("((1))")
                    .HasColumnName("CRL_LeadExchangeRate");
                entity.Property(e => e.CrlLeadReservedValue)
                    .HasColumnType("money")
                    .HasColumnName("CRL_LeadReservedValue");
                entity.Property(e => e.CrlPurchaseInvoiceId).HasColumnName("CRL_PurchaseInvoice_Id");
                entity.Property(e => e.CrlReservedValue)
                    .HasColumnType("money")
                    .HasColumnName("CRL_ReservedValue");
                entity.Property(e => e.CrlTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CRL_TimeStamp");
                entity.Property(e => e.CrlTransactionDate).HasColumnName("CRL_TransactionDate");
                entity.Property(e => e.CrlTransactionReason)
                    .HasMaxLength(200)
                    .HasColumnName("CRL_TransactionReason");
                entity.Property(e => e.CrlWorkingOrderLineCostId).HasColumnName("CRL_WorkingOrderLineCost_Id");
                entity.Property(e => e.CrlWorkingOrderLineCoverageId).HasColumnName("CRL_WorkingOrderLineCoverage_Id");
                entity.Property(e => e.CrlWorkingOrderLineId).HasColumnName("CRL_WorkingOrderLine_Id");
                entity.Property(e => e.CvrClientExchangeRateId).HasColumnName("CVR_ClientExchangeRate_Id");
                entity.Property(e => e.CvrLeadExchangeRateId).HasColumnName("CVR_LeadExchangeRate_Id");

                entity.HasOne(d => d.CrlAssistancePlanLine).WithMany(p => p.ClaimReserveLines)
                    .HasForeignKey(d => d.CrlAssistancePlanLineId)
                    .HasConstraintName("FK_ClaimReserveLines_AssistancePlanLines");

                entity.HasOne(d => d.CrlClaimReserve).WithMany(p => p.ClaimReserveLines)
                    .HasForeignKey(d => d.CrlClaimReserveId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClaimReserveLines_ClaimReserves");

                entity.HasOne(d => d.CrlDossierAssignment).WithMany(p => p.ClaimReserveLines)
                    .HasForeignKey(d => d.CrlDossierAssignmentId)
                    .HasConstraintName("FK_ClaimReserveLines_DossierAssignments");

                entity.HasOne(d => d.CrlPurchaseInvoice).WithMany(p => p.ClaimReserveLines)
                    .HasForeignKey(d => d.CrlPurchaseInvoiceId)
                    .HasConstraintName("FK_ClaimReserveLines_PurchaseInvoices");

                entity.HasOne(d => d.CrlWorkingOrderLineCost).WithMany(p => p.ClaimReserveLines)
                    .HasForeignKey(d => d.CrlWorkingOrderLineCostId)
                    .HasConstraintName("FK_ClaimReserveLines_WorkingOrderLineCosts");

                entity.HasOne(d => d.CrlWorkingOrderLineCoverage).WithMany(p => p.ClaimReserveLines)
                    .HasForeignKey(d => d.CrlWorkingOrderLineCoverageId)
                    .HasConstraintName("FK_ClaimReserveLines_WorkingOrderLineCoverages");

                entity.HasOne(d => d.CrlWorkingOrderLine).WithMany(p => p.ClaimReserveLines)
                    .HasForeignKey(d => d.CrlWorkingOrderLineId)
                    .HasConstraintName("FK_ClaimReserveLines_WorkingOrderLines");
            });

            modelBuilder.Entity<ClaimReserveLinesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ClaimReserveLinesView", "fin");

                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(20);
                entity.Property(e => e.ClientCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.ClientReservedValue).HasColumnType("money");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DossierAssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LeadCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.LeadReservedValue).HasColumnType("money");
                entity.Property(e => e.PurchaseInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.ReservedValue).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.TransactionReason).HasMaxLength(200);
                entity.Property(e => e.WorkingOrderLineNumber).HasMaxLength(60);
                entity.Property(e => e.WorkingOrderNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<ClaimReservePayment>(entity =>
            {
                entity.HasKey(e => e.CrpId);

                entity.ToTable("ClaimReservePayments", "fin");

                entity.HasIndex(e => e.CrpPurchaseInvoiceLineId, "IX_fin_ClaimReservePayments_PurchaseInvoiceLine__INCL");

                entity.Property(e => e.CrpId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CRP_Id");
                entity.Property(e => e.CrpClaimReserveId).HasColumnName("CRP_ClaimReserve_Id");
                entity.Property(e => e.CrpClaimValue)
                    .HasColumnType("money")
                    .HasColumnName("CRP_ClaimValue");
                entity.Property(e => e.CrpClientClaimValue)
                    .HasColumnType("money")
                    .HasColumnName("CRP_ClientClaimValue");
                entity.Property(e => e.CrpClientExchangeRate)
                    .HasDefaultValueSql("((1))")
                    .HasColumnName("CRP_ClientExchangeRate");
                entity.Property(e => e.CrpCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CRP_CreatedBy");
                entity.Property(e => e.CrpCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CRP_CreatedDate");
                entity.Property(e => e.CrpIsCredit).HasColumnName("CRP_IsCredit");
                entity.Property(e => e.CrpIsManualTransaction).HasColumnName("CRP_IsManualTransaction");
                entity.Property(e => e.CrpLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CRP_LastModifiedBy");
                entity.Property(e => e.CrpLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CRP_LastModifiedDate");
                entity.Property(e => e.CrpLeadClaimValue)
                    .HasColumnType("money")
                    .HasColumnName("CRP_LeadClaimValue");
                entity.Property(e => e.CrpLeadExchangeRate)
                    .HasDefaultValueSql("((1))")
                    .HasColumnName("CRP_LeadExchangeRate");
                entity.Property(e => e.CrpPaymentCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("CRP_PaymentCurrencyCode");
                entity.Property(e => e.CrpPurchaseInvoiceLineId).HasColumnName("CRP_PurchaseInvoiceLine_Id");
                entity.Property(e => e.CrpTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CRP_TimeStamp");
                entity.Property(e => e.CrpTransactionDate).HasColumnName("CRP_TransactionDate");
                entity.Property(e => e.CrpTransactionReason)
                    .HasMaxLength(200)
                    .HasColumnName("CRP_TransactionReason");
                entity.Property(e => e.CvrClientExchangeRateId).HasColumnName("CVR_ClientExchangeRate_Id");
                entity.Property(e => e.CvrLeadExchangeRateId).HasColumnName("CVR_LeadExchangeRate_Id");

                entity.HasOne(d => d.CrpClaimReserve).WithMany(p => p.ClaimReservePayments)
                    .HasForeignKey(d => d.CrpClaimReserveId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClaimReservePayments_ClaimReserves");

                entity.HasOne(d => d.CrpPurchaseInvoiceLine).WithMany(p => p.ClaimReservePayments)
                    .HasForeignKey(d => d.CrpPurchaseInvoiceLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClaimReservePayments_PurchaseInvoiceLines");
            });

            modelBuilder.Entity<ClaimReservePaymentsCreditableView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ClaimReservePaymentsCreditableView", "fin");

                entity.Property(e => e.ClaimValue).HasColumnType("money");
                entity.Property(e => e.ClientClaimValue).HasColumnType("money");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LeadClaimValue).HasColumnType("money");
                entity.Property(e => e.PaymentCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.TransactionReason).HasMaxLength(200);
            });

            modelBuilder.Entity<ClaimReservePaymentsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ClaimReservePaymentsView", "fin");

                entity.Property(e => e.ClaimValue).HasColumnType("money");
                entity.Property(e => e.ClientClaimValue).HasColumnType("money");
                entity.Property(e => e.ClientCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LeadClaimValue).HasColumnType("money");
                entity.Property(e => e.LeadCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.PaymentCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.PurchaseInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.PurchaseInvoiceStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseLineDescription).HasMaxLength(250);
                entity.Property(e => e.PurchaseLineGrossAmount).HasColumnType("money");
                entity.Property(e => e.PurchaseLineNetAmount).HasColumnType("money");
                entity.Property(e => e.PurchaseLineServiceName).HasMaxLength(250);
                entity.Property(e => e.PurchaseLineTaxAmount).HasColumnType("money");
                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SupplierInvoiceDate).HasColumnType("date");
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SupplierName).HasMaxLength(752);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.TransactionReason).HasMaxLength(200);
            });

            modelBuilder.Entity<ClaimReserveService>(entity =>
            {
                entity.HasKey(e => e.CrsId);

                entity.ToTable("ClaimReserveServices", "fin");

                entity.Property(e => e.CrsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CRS_Id");
                entity.Property(e => e.CrsClaimReserveClassificationId)
                    .HasMaxLength(20)
                    .HasColumnName("CRS_ClaimReserveClassification_Id");
                entity.Property(e => e.CrsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CRS_CreatedBy");
                entity.Property(e => e.CrsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CRS_CreatedDate");
                entity.Property(e => e.CrsInactive).HasColumnName("CRS_Inactive");
                entity.Property(e => e.CrsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CRS_LastModifiedBy");
                entity.Property(e => e.CrsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CRS_LastModifiedDate");
                entity.Property(e => e.CrsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CRS_TimeStamp");

                entity.HasOne(d => d.CrsClaimReserveClassification).WithMany(p => p.ClaimReserveServices)
                    .HasForeignKey(d => d.CrsClaimReserveClassificationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClaimReserveServices_ClaimReserveClassifications");

                entity.HasOne(d => d.Crs).WithOne(p => p.ClaimReserveService)
                    .HasForeignKey<ClaimReserveService>(d => d.CrsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClaimReserveServices_Services");
            });

            modelBuilder.Entity<ClaimReserveStatus>(entity =>
            {
                entity.HasKey(e => e.RvsId);

                entity.ToTable("ClaimReserveStatuses", "fin");

                entity.HasIndex(e => e.RvsCode, "UX_ClaimReserveStatuses_Code_INCL").IsUnique();

                entity.Property(e => e.RvsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("RVS_Id");
                entity.Property(e => e.RvsCode)
                    .HasMaxLength(20)
                    .HasColumnName("RVS_Code");
                entity.Property(e => e.RvsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RVS_CreatedBy");
                entity.Property(e => e.RvsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RVS_CreatedDate");
                entity.Property(e => e.RvsInactive).HasColumnName("RVS_Inactive");
                entity.Property(e => e.RvsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RVS_LastModifiedBy");
                entity.Property(e => e.RvsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RVS_LastModifiedDate");
                entity.Property(e => e.RvsLocalizableEntryId).HasColumnName("RVS_LocalizableEntry_Id");
                entity.Property(e => e.RvsLongName)
                    .HasMaxLength(250)
                    .HasColumnName("RVS_LongName");
                entity.Property(e => e.RvsShortName)
                    .HasMaxLength(30)
                    .HasColumnName("RVS_ShortName");
                entity.Property(e => e.RvsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RVS_TimeStamp");

                entity.HasOne(d => d.RvsLocalizableEntry).WithMany(p => p.ClaimReserveStatuses)
                    .HasForeignKey(d => d.RvsLocalizableEntryId)
                    .HasConstraintName("FK_ClaimReserveStatuses_LocalizableEntries");
            });

            modelBuilder.Entity<ClaimReserveStatusHistory>(entity =>
            {
                entity.HasKey(e => e.RvshId);

                entity.ToTable("ClaimReserveStatusHistory", "fin", tb =>
                {
                    tb.HasTrigger("td_ClaimReserveStatusHistory");
                    tb.HasTrigger("ti_ClaimReserveStatusHistory");
                    tb.HasTrigger("tu_ClaimReserveStatusHistory");
                });

                entity.HasIndex(e => e.RvshClaimReserveId, "IX_fin_ClaimReserveStatusHistory_ClaimReserve__INCL");

                entity.Property(e => e.RvshId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("RVSH_Id");
                entity.Property(e => e.RvshClaimReserveId).HasColumnName("RVSH_ClaimReserve_Id");
                entity.Property(e => e.RvshClaimReserveStatusId).HasColumnName("RVSH_ClaimReserveStatus_Id");
                entity.Property(e => e.RvshCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RVSH_CreatedBy");
                entity.Property(e => e.RvshCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RVSH_CreatedDate");
                entity.Property(e => e.RvshEmployeeId).HasColumnName("RVSH_Employee_Id");
                entity.Property(e => e.RvshLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RVSH_LastModifiedBy");
                entity.Property(e => e.RvshLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RVSH_LastModifiedDate");
                entity.Property(e => e.RvshStartDate).HasColumnName("RVSH_StartDate");
                entity.Property(e => e.RvshStatusChangeReason).HasColumnName("RVSH_StatusChangeReason");
                entity.Property(e => e.RvshStatusSource).HasColumnName("RVSH_StatusSource");
                entity.Property(e => e.RvshTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RVSH_TimeStamp");

                entity.HasOne(d => d.RvshClaimReserve).WithMany(p => p.ClaimReserveStatusHistories)
                    .HasForeignKey(d => d.RvshClaimReserveId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClaimReserveStatusHistory_ClaimReserves");

                entity.HasOne(d => d.RvshClaimReserveStatus).WithMany(p => p.ClaimReserveStatusHistories)
                    .HasForeignKey(d => d.RvshClaimReserveStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClaimReserveStatusHistory_ClaimReserveStatuses");

                entity.HasOne(d => d.RvshEmployee).WithMany(p => p.ClaimReserveStatusHistories)
                    .HasForeignKey(d => d.RvshEmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClaimReserveStatusHistory_Employees");
            });

            modelBuilder.Entity<ClaimReserveType>(entity =>
            {
                entity.HasKey(e => e.RvtId);

                entity.ToTable("ClaimReserveTypes", "fin");

                entity.HasIndex(e => e.RvtCode, "IX_ClaimReserveTypes_Code").IsUnique();

                entity.Property(e => e.RvtId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("RVT_Id");
                entity.Property(e => e.RvtCode)
                    .HasMaxLength(10)
                    .HasColumnName("RVT_Code");
                entity.Property(e => e.RvtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RVT_CreatedBy");
                entity.Property(e => e.RvtCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RVT_CreatedDate");
                entity.Property(e => e.RvtInactive).HasColumnName("RVT_Inactive");
                entity.Property(e => e.RvtIsApplicableBodilyInjury).HasColumnName("RVT_IsApplicableBodilyInjury");
                entity.Property(e => e.RvtIsApplicableCostsOfClaims).HasColumnName("RVT_IsApplicableCostsOfClaims");
                entity.Property(e => e.RvtIsApplicableMaterialDamage).HasColumnName("RVT_IsApplicableMaterialDamage");
                entity.Property(e => e.RvtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RVT_LastModifiedBy");
                entity.Property(e => e.RvtLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RVT_LastModifiedDate");
                entity.Property(e => e.RvtLocalizableEntryId).HasColumnName("RVT_LocalizableEntry_Id");
                entity.Property(e => e.RvtLongName)
                    .HasMaxLength(250)
                    .HasColumnName("RVT_LongName");
                entity.Property(e => e.RvtShortName)
                    .HasMaxLength(20)
                    .HasColumnName("RVT_ShortName");
                entity.Property(e => e.RvtTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RVT_TimeStamp");

                entity.HasOne(d => d.RvtLocalizableEntry).WithMany(p => p.ClaimReserveTypes)
                    .HasForeignKey(d => d.RvtLocalizableEntryId)
                    .HasConstraintName("FK_ClaimReserveTypes_LocalizableEntries");
            });

            modelBuilder.Entity<ClaimReserveWorkingOrder>(entity =>
            {
                entity.HasKey(e => e.CwoId);

                entity.ToTable("ClaimReserveWorkingOrders", "fin");

                entity.HasIndex(e => e.CwoClaimReserveId, "IX_fin_ClaimReserveWorkingOrders_ClaimReserve__INCL");

                entity.HasIndex(e => e.CwoInactive, "IX_fin_ClaimReserveWorkingOrders_Inactive__INCL");

                entity.HasIndex(e => new { e.CwoWorkingOrderLineCostId, e.CwoInactive }, "IX_fin_ClaimReserveWorkingOrders_WorkingOrderLineCost_Inactive__INCL");

                entity.Property(e => e.CwoId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CWO_Id");
                entity.Property(e => e.CwoClaimReserveId).HasColumnName("CWO_ClaimReserve_Id");
                entity.Property(e => e.CwoCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CWO_CreatedBy");
                entity.Property(e => e.CwoCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CWO_CreatedDate");
                entity.Property(e => e.CwoInactive).HasColumnName("CWO_Inactive");
                entity.Property(e => e.CwoInactiveDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CWO_InactiveDate");
                entity.Property(e => e.CwoLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CWO_LastModifiedBy");
                entity.Property(e => e.CwoLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CWO_LastModifiedDate");
                entity.Property(e => e.CwoTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CWO_TimeStamp");
                entity.Property(e => e.CwoWorkingOrderLineCostId).HasColumnName("CWO_WorkingOrderLineCost_Id");

                entity.HasOne(d => d.CwoClaimReserve).WithMany(p => p.ClaimReserveWorkingOrders)
                    .HasForeignKey(d => d.CwoClaimReserveId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClaimReserveWorkingOrders_ClaimReserves");

                entity.HasOne(d => d.CwoWorkingOrderLineCost).WithMany(p => p.ClaimReserveWorkingOrders)
                    .HasForeignKey(d => d.CwoWorkingOrderLineCostId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClaimReserveWorkingOrders_WorkingOrderLineCosts");
            });

            modelBuilder.Entity<ClaimReservesOnWorkingOrderSelectView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ClaimReservesOnWorkingOrderSelectView", "fin");

                entity.Property(e => e.ClaimReserveClassificationId).HasMaxLength(20);
                entity.Property(e => e.ClaimReserveClassificationName).HasMaxLength(250);
                entity.Property(e => e.ClaimReserveNumber).HasMaxLength(10);
                entity.Property(e => e.ClaimReserveTypeName).HasMaxLength(250);
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.ClientProductCode).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrentStatusName).HasMaxLength(250);
                entity.Property(e => e.DossierPartyName).HasMaxLength(200);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.InsurancePolicyNumber).HasMaxLength(50);
                entity.Property(e => e.InsureeCountryCodeIso3)
                    .HasMaxLength(3)
                    .HasColumnName("InsureeCountryCodeISO3");
                entity.Property(e => e.InsureeFormattedName).HasMaxLength(200);
                entity.Property(e => e.InsureePolicyNumber).HasMaxLength(20);
                entity.Property(e => e.InsurerName).HasMaxLength(756);
                entity.Property(e => e.InvolvedPartyFullName).HasMaxLength(200);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.MandateName).HasMaxLength(756);
                entity.Property(e => e.OpenAmount).HasColumnType("money");
            });

            modelBuilder.Entity<ClaimReservesPendingCancellationView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ClaimReservesPendingCancellationView", "fin");

                entity.Property(e => e.ClaimReserveNumber).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrentStatusCode).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<ClaimReservesSelectView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ClaimReservesSelectView", "fin");

                entity.Property(e => e.ClaimReserveClassificationId).HasMaxLength(20);
                entity.Property(e => e.ClaimReserveClassificationName).HasMaxLength(250);
                entity.Property(e => e.ClaimReserveNumber).HasMaxLength(10);
                entity.Property(e => e.ClaimReserveTypeName).HasMaxLength(250);
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.ClientProductCode).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrentStatusName).HasMaxLength(250);
                entity.Property(e => e.DossierPartyName).HasMaxLength(200);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.InsurancePolicyNumber).HasMaxLength(50);
                entity.Property(e => e.InsureeCountryCodeIso3)
                    .HasMaxLength(3)
                    .HasColumnName("InsureeCountryCodeISO3");
                entity.Property(e => e.InsureeFormattedName).HasMaxLength(200);
                entity.Property(e => e.InsureePolicyNumber).HasMaxLength(20);
                entity.Property(e => e.InsurerName).HasMaxLength(756);
                entity.Property(e => e.InvolvedPartyFullName).HasMaxLength(200);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.MandateName).HasMaxLength(756);
                entity.Property(e => e.OpenAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<ClaimReservesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ClaimReservesView", "fin");

                entity.Property(e => e.ClaimReserveClassificationId).HasMaxLength(20);
                entity.Property(e => e.ClaimReserveClassificationName).HasMaxLength(250);
                entity.Property(e => e.ClaimReserveDate).HasColumnType("date");
                entity.Property(e => e.ClaimReserveNumber).HasMaxLength(10);
                entity.Property(e => e.ClaimReserveTypeCode).HasMaxLength(10);
                entity.Property(e => e.ClaimReserveTypeName).HasMaxLength(250);
                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.ClientProductCode).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.CurrentStatusCode).HasMaxLength(20);
                entity.Property(e => e.CurrentStatusName).HasMaxLength(250);
                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.DepartmentName).HasMaxLength(756);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierPartyName).HasMaxLength(200);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.InsurancePolicyFreeField1).HasMaxLength(500);
                entity.Property(e => e.InsurancePolicyFreeField2).HasMaxLength(500);
                entity.Property(e => e.InsurancePolicyFreeField3).HasMaxLength(500);
                entity.Property(e => e.InsurancePolicyFreeField4).HasMaxLength(500);
                entity.Property(e => e.InsurancePolicyNumber).HasMaxLength(50);
                entity.Property(e => e.InsureeCountryCodeIso3)
                    .HasMaxLength(3)
                    .HasColumnName("InsureeCountryCodeISO3");
                entity.Property(e => e.InsureeFormattedName).HasMaxLength(200);
                entity.Property(e => e.InsureePolicyNumber).HasMaxLength(20);
                entity.Property(e => e.InsurerCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.InsurerName).HasMaxLength(756);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LeadCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.MandateCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.MandateName).HasMaxLength(756);
                entity.Property(e => e.OpenAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.TotalClaimValue).HasColumnType("money");
                entity.Property(e => e.TotalClientClaimValue).HasColumnType("money");
                entity.Property(e => e.TotalClientOpenAmount).HasColumnType("money");
                entity.Property(e => e.TotalClientReservedValue).HasColumnType("money");
                entity.Property(e => e.TotalLeadClaimValue).HasColumnType("money");
                entity.Property(e => e.TotalLeadOpenAmount).HasColumnType("money");
                entity.Property(e => e.TotalLeadReservedValue).HasColumnType("money");
                entity.Property(e => e.TotalReservedValue).HasColumnType("money");
            });

            modelBuilder.Entity<ClaimReservesWorkingOrderPendingCancellationView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ClaimReservesWorkingOrderPendingCancellationView", "dos");

                entity.Property(e => e.ClaimReserveNumber).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrentStatusCode).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
            });

            modelBuilder.Entity<ClaimsHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_Claims_History_ID");

                entity.ToTable("Claims_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.ClmClaimAmount)
                    .HasColumnType("money")
                    .HasColumnName("CLM_ClaimAmount");
                entity.Property(e => e.ClmCostTypeId).HasColumnName("CLM_CostType_Id");
                entity.Property(e => e.ClmCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CLM_CreatedBy");
                entity.Property(e => e.ClmCreatedDate).HasColumnName("CLM_CreatedDate");
                entity.Property(e => e.ClmId).HasColumnName("CLM_Id");
                entity.Property(e => e.ClmLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CLM_LastModifiedBy");
                entity.Property(e => e.ClmLastModifiedDate).HasColumnName("CLM_LastModifiedDate");
                entity.Property(e => e.ClmPaymentId).HasColumnName("CLM_Payment_Id");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<Client>(entity =>
            {
                entity.HasKey(e => e.ClId);

                entity.ToTable("Clients", "mdm", tb =>
                {
                    tb.HasTrigger("ti_Clients_SalesTaxCodes");
                    tb.HasTrigger("tu_Clients_SalesTaxCodes");
                });

                entity.HasIndex(e => e.ClCreatedDate, "IX_mdm_Clients_CreatedDate");

                entity.Property(e => e.ClId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CL_Id");
                entity.Property(e => e.ClCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CL_CreatedBy");
                entity.Property(e => e.ClCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CL_CreatedDate");
                entity.Property(e => e.ClCultureCodePreferredLanguage)
                    .HasMaxLength(10)
                    .HasColumnName("CL_CultureCodePreferredLanguage");
                entity.Property(e => e.ClCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("CL_CurrencyCode");
                entity.Property(e => e.ClExternalCode)
                    .HasMaxLength(10)
                    .HasColumnName("CL_ExternalCode");
                entity.Property(e => e.ClInactive).HasColumnName("CL_Inactive");
                entity.Property(e => e.ClLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CL_LastModifiedBy");
                entity.Property(e => e.ClLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CL_LastModifiedDate");
                entity.Property(e => e.ClTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CL_TimeStamp");

                entity.HasOne(d => d.Cl).WithOne(p => p.Client)
                    .HasForeignKey<Client>(d => d.ClId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Clients_OrganizationUnits");
            });

            modelBuilder.Entity<Client1>(entity =>
            {
                entity.HasKey(e => e.ClId);

                entity.ToTable("Clients", "stg");

                entity.Property(e => e.ClId)
                    .ValueGeneratedNever()
                    .HasColumnName("CL_Id");
                entity.Property(e => e.ClCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CL_CreatedBy");
                entity.Property(e => e.ClCreatedDate).HasColumnName("CL_CreatedDate");
                entity.Property(e => e.ClCultureCodePreferredLanguage)
                    .HasMaxLength(10)
                    .HasColumnName("CL_CultureCodePreferredLanguage");
                entity.Property(e => e.ClExternalCode)
                    .HasMaxLength(10)
                    .HasColumnName("CL_ExternalCode");
                entity.Property(e => e.ClInactive).HasColumnName("CL_Inactive");
                entity.Property(e => e.ClLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CL_LastModifiedBy");
                entity.Property(e => e.ClLastModifiedDate).HasColumnName("CL_LastModifiedDate");
                entity.Property(e => e.ClTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CL_TimeStamp");
            });

            modelBuilder.Entity<ClientAgent>(entity =>
            {
                entity.HasKey(e => e.ClaId);

                entity.ToTable("ClientAgents", "mdm");

                entity.Property(e => e.ClaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CLA_Id");
                entity.Property(e => e.ClaAgentCode)
                    .HasMaxLength(20)
                    .HasColumnName("CLA_AgentCode");
                entity.Property(e => e.ClaAgentId).HasColumnName("CLA_Agent_Id");
                entity.Property(e => e.ClaAgentName)
                    .HasMaxLength(250)
                    .HasColumnName("CLA_AgentName");
                entity.Property(e => e.ClaClientId).HasColumnName("CLA_Client_Id");
                entity.Property(e => e.ClaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CLA_CreatedBy");
                entity.Property(e => e.ClaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CLA_CreatedDate");
                entity.Property(e => e.ClaInactive).HasColumnName("CLA_Inactive");
                entity.Property(e => e.ClaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CLA_LastModifiedBy");
                entity.Property(e => e.ClaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CLA_LastModifiedDate");
                entity.Property(e => e.ClaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CLA_TimeStamp");

                entity.HasOne(d => d.ClaAgent).WithMany(p => p.ClientAgents)
                    .HasForeignKey(d => d.ClaAgentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientAgents_Agents");

                entity.HasOne(d => d.ClaClient).WithMany(p => p.ClientAgents)
                    .HasForeignKey(d => d.ClaClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientAgents_Clients");
            });

            modelBuilder.Entity<ClientAgent1>(entity =>
            {
                entity.HasKey(e => e.ClaId);

                entity.ToTable("ClientAgents", "stg");

                entity.Property(e => e.ClaId)
                    .ValueGeneratedNever()
                    .HasColumnName("CLA_Id");
                entity.Property(e => e.ClaAgentCode)
                    .HasMaxLength(20)
                    .HasColumnName("CLA_AgentCode");
                entity.Property(e => e.ClaAgentId).HasColumnName("CLA_Agent_Id");
                entity.Property(e => e.ClaAgentName)
                    .HasMaxLength(250)
                    .HasColumnName("CLA_AgentName");
                entity.Property(e => e.ClaClientId).HasColumnName("CLA_Client_Id");
                entity.Property(e => e.ClaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CLA_CreatedBy");
                entity.Property(e => e.ClaCreatedDate).HasColumnName("CLA_CreatedDate");
                entity.Property(e => e.ClaInactive).HasColumnName("CLA_Inactive");
                entity.Property(e => e.ClaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CLA_LastModifiedBy");
                entity.Property(e => e.ClaLastModifiedDate).HasColumnName("CLA_LastModifiedDate");
                entity.Property(e => e.ClaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CLA_TimeStamp");
            });

            modelBuilder.Entity<ClientInsuranceProduct>(entity =>
            {
                entity.HasKey(e => e.CipId);

                entity.ToTable("ClientInsuranceProducts", "mdm");

                entity.Property(e => e.CipId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CIP_Id");
                entity.Property(e => e.CipClientId).HasColumnName("CIP_Client_Id");
                entity.Property(e => e.CipCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CIP_CreatedBy");
                entity.Property(e => e.CipCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CIP_CreatedDate");
                entity.Property(e => e.CipDebtorClientId).HasColumnName("CIP_DebtorClient_Id");
                entity.Property(e => e.CipEffectiveDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("date")
                    .HasColumnName("CIP_EffectiveDate");
                entity.Property(e => e.CipInsuranceCoverageId).HasColumnName("CIP_InsuranceCoverage_Id");
                entity.Property(e => e.CipInsuranceProductName)
                    .HasMaxLength(250)
                    .HasColumnName("CIP_InsuranceProductName");
                entity.Property(e => e.CipLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CIP_LastModifiedBy");
                entity.Property(e => e.CipLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CIP_LastModifiedDate");
                entity.Property(e => e.CipTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("CIP_TerminationDate");
                entity.Property(e => e.CipTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CIP_TimeStamp");

                entity.HasOne(d => d.CipClient).WithMany(p => p.ClientInsuranceProductCipClients)
                    .HasForeignKey(d => d.CipClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientInsuranceProducts_Clients");

                entity.HasOne(d => d.CipDebtorClient).WithMany(p => p.ClientInsuranceProductCipDebtorClients)
                    .HasForeignKey(d => d.CipDebtorClientId)
                    .HasConstraintName("FK_ClientInsuranceProducts_DebtorClients");

                entity.HasOne(d => d.CipInsuranceCoverage).WithMany(p => p.ClientInsuranceProducts)
                    .HasForeignKey(d => d.CipInsuranceCoverageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientInsuranceProducts_InsuranceCoverages");
            });

            modelBuilder.Entity<ClientInvoiceDeliveryMethod>(entity =>
            {
                entity.HasKey(e => e.CdmId);

                entity.ToTable("ClientInvoiceDeliveryMethods", "fin");

                entity.Property(e => e.CdmId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CDM_Id");
                entity.Property(e => e.CdmBodyEmail)
                    .HasMaxLength(250)
                    .HasColumnName("CDM_BodyEmail");
                entity.Property(e => e.CdmBusinessUnitId).HasColumnName("CDM_BusinessUnit_Id");
                entity.Property(e => e.CdmClientId).HasColumnName("CDM_Client_Id");
                entity.Property(e => e.CdmCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CDM_CreatedBy");
                entity.Property(e => e.CdmCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CDM_CreatedDate");
                entity.Property(e => e.CdmDebtorId).HasColumnName("CDM_Debtor_Id");
                entity.Property(e => e.CdmDepartmentId).HasColumnName("CDM_Department_Id");
                entity.Property(e => e.CdmEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("CDM_EffectiveDate");
                entity.Property(e => e.CdmEmail)
                    .HasMaxLength(250)
                    .HasColumnName("CDM_Email");
                entity.Property(e => e.CdmInvoiceDeliveryMethodId)
                    .HasMaxLength(20)
                    .HasColumnName("CDM_InvoiceDeliveryMethod_Id");
                entity.Property(e => e.CdmLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CDM_LastModifiedBy");
                entity.Property(e => e.CdmLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CDM_LastModifiedDate");
                entity.Property(e => e.CdmLegalEntityId).HasColumnName("CDM_LegalEntity_Id");
                entity.Property(e => e.CdmTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("CDM_TerminationDate");
                entity.Property(e => e.CdmTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CDM_TimeStamp");

                entity.HasOne(d => d.CdmBusinessUnit).WithMany(p => p.ClientInvoiceDeliveryMethods)
                    .HasForeignKey(d => d.CdmBusinessUnitId)
                    .HasConstraintName("FK_ClientInvoiceDeliveryMethods_BusinessUnits");

                entity.HasOne(d => d.CdmClient).WithMany(p => p.ClientInvoiceDeliveryMethods)
                    .HasForeignKey(d => d.CdmClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientInvoiceDeliveryMethods_Clients");

                entity.HasOne(d => d.CdmDebtor).WithMany(p => p.ClientInvoiceDeliveryMethods)
                    .HasForeignKey(d => d.CdmDebtorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientInvoiceDeliveryMethods_Debtors");

                entity.HasOne(d => d.CdmDepartment).WithMany(p => p.ClientInvoiceDeliveryMethods)
                    .HasForeignKey(d => d.CdmDepartmentId)
                    .HasConstraintName("FK_ClientInvoiceDeliveryMethods_Departments");

                entity.HasOne(d => d.CdmInvoiceDeliveryMethod).WithMany(p => p.ClientInvoiceDeliveryMethods)
                    .HasForeignKey(d => d.CdmInvoiceDeliveryMethodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientInvoiceDeliveryMethods_InvoiceDeliveryMethods");

                entity.HasOne(d => d.CdmLegalEntity).WithMany(p => p.ClientInvoiceDeliveryMethods)
                    .HasForeignKey(d => d.CdmLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientInvoiceDeliveryMethods_LegalEntities");
            });

            modelBuilder.Entity<ClientInvoiceRecipient>(entity =>
            {
                entity.HasKey(e => e.CirId);

                entity.ToTable("ClientInvoiceRecipients", "mdm");

                entity.Property(e => e.CirId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CIR_Id");
                entity.Property(e => e.CirClientId).HasColumnName("CIR_Client_Id");
                entity.Property(e => e.CirCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CIR_CreatedBy");
                entity.Property(e => e.CirCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CIR_CreatedDate");
                entity.Property(e => e.CirEffectiveDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("date")
                    .HasColumnName("CIR_EffectiveDate");
                entity.Property(e => e.CirLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CIR_LastModifiedBy");
                entity.Property(e => e.CirLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CIR_LastModifiedDate");
                entity.Property(e => e.CirOrganizationUnitId).HasColumnName("CIR_OrganizationUnit_Id");
                entity.Property(e => e.CirTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("CIR_TerminationDate");
                entity.Property(e => e.CirTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CIR_TimeStamp");

                entity.HasOne(d => d.CirClient).WithMany(p => p.ClientInvoiceRecipients)
                    .HasForeignKey(d => d.CirClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientInvoiceRecipients_Clients");

                entity.HasOne(d => d.CirOrganizationUnit).WithMany(p => p.ClientInvoiceRecipients)
                    .HasForeignKey(d => d.CirOrganizationUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientInvoiceRecipients_OrganizationUnits");
            });

            modelBuilder.Entity<ClientInvoiceRuleMethod>(entity =>
            {
                entity.HasKey(e => e.IrmId);

                entity.ToTable("ClientInvoiceRuleMethods", "fin");

                entity.Property(e => e.IrmId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("IRM_Id");
                entity.Property(e => e.IrmClientId).HasColumnName("IRM_Client_Id");
                entity.Property(e => e.IrmCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IRM_CreatedBy");
                entity.Property(e => e.IrmCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IRM_CreatedDate");
                entity.Property(e => e.IrmEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("IRM_EffectiveDate");
                entity.Property(e => e.IrmInvoiceRuleTypeId)
                    .HasMaxLength(50)
                    .HasColumnName("IRM_InvoiceRuleType_Id");
                entity.Property(e => e.IrmLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IRM_LastModifiedBy");
                entity.Property(e => e.IrmLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IRM_LastModifiedDate");
                entity.Property(e => e.IrmLegalEntityId).HasColumnName("IRM_LegalEntity_Id");
                entity.Property(e => e.IrmTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("IRM_TerminationDate");
                entity.Property(e => e.IrmTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("IRM_TimeStamp");

                entity.HasOne(d => d.IrmClient).WithMany(p => p.ClientInvoiceRuleMethods)
                    .HasForeignKey(d => d.IrmClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientInvoiceRuleMethods_Clients");

                entity.HasOne(d => d.IrmInvoiceRuleType).WithMany(p => p.ClientInvoiceRuleMethods)
                    .HasForeignKey(d => d.IrmInvoiceRuleTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientInvoiceRuleMethods_InvoiceRuleTypes");

                entity.HasOne(d => d.IrmLegalEntity).WithMany(p => p.ClientInvoiceRuleMethods)
                    .HasForeignKey(d => d.IrmLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientInvoiceRuleMethods_LegalEntities");
            });

            modelBuilder.Entity<ClientMandate>(entity =>
            {
                entity.HasKey(e => e.CmId);

                entity.ToTable("ClientMandates", "mdm");

                entity.Property(e => e.CmId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CM_Id");
                entity.Property(e => e.CmClientId).HasColumnName("CM_Client_Id");
                entity.Property(e => e.CmCode)
                    .HasMaxLength(20)
                    .HasColumnName("CM_Code");
                entity.Property(e => e.CmCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CM_CreatedBy");
                entity.Property(e => e.CmCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CM_CreatedDate");
                entity.Property(e => e.CmInactive).HasColumnName("CM_Inactive");
                entity.Property(e => e.CmLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CM_LastModifiedBy");
                entity.Property(e => e.CmLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CM_LastModifiedDate");
                entity.Property(e => e.CmLongName)
                    .HasMaxLength(250)
                    .HasColumnName("CM_LongName");
                entity.Property(e => e.CmMandateId).HasColumnName("CM_Mandate_Id");
                entity.Property(e => e.CmTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CM_TimeStamp");

                entity.HasOne(d => d.CmClient).WithMany(p => p.ClientMandates)
                    .HasForeignKey(d => d.CmClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientMandates_Clients");

                entity.HasOne(d => d.CmMandate).WithMany(p => p.ClientMandates)
                    .HasForeignKey(d => d.CmMandateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientMandates_Mandates");
            });

            modelBuilder.Entity<ClientMandate1>(entity =>
            {
                entity.HasKey(e => e.CmId);

                entity.ToTable("ClientMandates", "stg");

                entity.Property(e => e.CmId)
                    .ValueGeneratedNever()
                    .HasColumnName("CM_Id");
                entity.Property(e => e.CmClientId).HasColumnName("CM_Client_Id");
                entity.Property(e => e.CmCode)
                    .HasMaxLength(20)
                    .HasColumnName("CM_Code");
                entity.Property(e => e.CmCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CM_CreatedBy");
                entity.Property(e => e.CmCreatedDate).HasColumnName("CM_CreatedDate");
                entity.Property(e => e.CmInactive).HasColumnName("CM_Inactive");
                entity.Property(e => e.CmLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CM_LastModifiedBy");
                entity.Property(e => e.CmLastModifiedDate).HasColumnName("CM_LastModifiedDate");
                entity.Property(e => e.CmLongName)
                    .HasMaxLength(250)
                    .HasColumnName("CM_LongName");
                entity.Property(e => e.CmMandateId).HasColumnName("CM_Mandate_Id");
                entity.Property(e => e.CmTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CM_TimeStamp");
            });

            modelBuilder.Entity<ClientMandateContractRelation>(entity =>
            {
                entity.HasKey(e => e.CmcrId);

                entity.ToTable("ClientMandateContractRelations", "fee");

                entity.Property(e => e.CmcrId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CMCR_Id");
                entity.Property(e => e.CmcrClientMandateId).HasColumnName("CMCR_ClientMandateId");
                entity.Property(e => e.CmcrCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CMCR_CreatedBy");
                entity.Property(e => e.CmcrCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CMCR_CreatedDate");
                entity.Property(e => e.CmcrFeeSettlementId).HasColumnName("CMCR_FeeSettlementId");
                entity.Property(e => e.CmcrLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CMCR_LastModifiedBy");
                entity.Property(e => e.CmcrLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CMCR_LastModifiedDate");
                entity.Property(e => e.CmcrTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CMCR_TimeStamp");
                entity.Property(e => e.CmcrUseClientContract).HasColumnName("CMCR_UseClientContract");

                entity.HasOne(d => d.CmcrClientMandate).WithMany(p => p.ClientMandateContractRelations)
                    .HasForeignKey(d => d.CmcrClientMandateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientMandateContractRelations_ClientMandateId");

                entity.HasOne(d => d.CmcrFeeSettlement).WithMany(p => p.ClientMandateContractRelations)
                    .HasForeignKey(d => d.CmcrFeeSettlementId)
                    .HasConstraintName("FK_ClientMandateContractRelations_FeeSettlementId");
            });

            modelBuilder.Entity<ClientMandatesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ClientMandatesView", "mdm");

                entity.Property(e => e.Actief)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.Adres).HasMaxLength(250);
                entity.Property(e => e.Einddatum).HasColumnType("date");
                entity.Property(e => e.Huisnr).HasMaxLength(10);
                entity.Property(e => e.Landcode).HasMaxLength(3);
                entity.Property(e => e.LandcodePostbus)
                    .HasMaxLength(3)
                    .HasColumnName("Landcode postbus");
                entity.Property(e => e.NaamCpl)
                    .HasMaxLength(756)
                    .HasColumnName("Naam cpl");
                entity.Property(e => e.NaamKort)
                    .HasMaxLength(20)
                    .HasColumnName("Naam kort");
                entity.Property(e => e.NiveauPlekInStructuur)
                    .HasMaxLength(61)
                    .HasColumnName("Niveau (plek in structuur)");
                entity.Property(e => e.OgCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("OG-Code");
                entity.Property(e => e.ParentBovenliggendeType)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("Parent (bovenliggende type)");
                entity.Property(e => e.Porcode).HasMaxLength(10);
                entity.Property(e => e.Postbus).HasMaxLength(10);
                entity.Property(e => e.Postcode).HasMaxLength(10);
                entity.Property(e => e.PostcodePostbus)
                    .HasMaxLength(10)
                    .HasColumnName("Postcode postbus");
                entity.Property(e => e.Provincie).HasMaxLength(250);
                entity.Property(e => e.ProvinciePostbus)
                    .HasMaxLength(250)
                    .HasColumnName("Provincie postbus");
                entity.Property(e => e.Startdatum).HasColumnType("date");
                entity.Property(e => e.Toevoeging).HasMaxLength(250);
                entity.Property(e => e.TypeTpVerzOfVolmacht)
                    .HasMaxLength(61)
                    .HasColumnName("Type (tp/verz/of volmacht)");
                entity.Property(e => e.VolmachtNaamCpl)
                    .HasMaxLength(756)
                    .HasColumnName("Volmacht Naam cpl");
                entity.Property(e => e.VolmachtNaamKort)
                    .HasMaxLength(20)
                    .HasColumnName("Volmacht Naam kort");
                entity.Property(e => e.VolmachtOgCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("Volmacht OG-Code");
                entity.Property(e => e.Woonplaats).HasMaxLength(250);
                entity.Property(e => e.WoonplaatsPostbus)
                    .HasMaxLength(250)
                    .HasColumnName("Woonplaats postbus");
            });

            modelBuilder.Entity<ClientMapping>(entity =>
            {
                entity.HasKey(e => e.CmId);

                entity.ToTable("ClientMapping", "pros");

                entity.Property(e => e.CmId)
                    .ValueGeneratedNever()
                    .HasColumnName("CM_Id");
                entity.Property(e => e.CmCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CM_CreatedBy");
                entity.Property(e => e.CmCreatedDate).HasColumnName("CM_CreatedDate");
                entity.Property(e => e.CmEiscode).HasColumnName("CM_EISCode");
                entity.Property(e => e.CmLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CM_LastModifiedBy");
                entity.Property(e => e.CmLastModifiedDate).HasColumnName("CM_LastModifiedDate");
                entity.Property(e => e.CmProspectCode).HasColumnName("CM_ProspectCode");
                entity.Property(e => e.CmTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CM_TimeStamp");
            });

            modelBuilder.Entity<ClientPreferredSupplier>(entity =>
            {
                entity.HasKey(e => e.CpsId);

                entity.ToTable("ClientPreferredSuppliers", "mdm");

                entity.Property(e => e.CpsId)
                    .ValueGeneratedNever()
                    .HasColumnName("CPS_Id");
                entity.Property(e => e.CpsClientId).HasColumnName("CPS_Client_Id");
                entity.Property(e => e.CpsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CPS_CreatedBy");
                entity.Property(e => e.CpsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CPS_CreatedDate");
                entity.Property(e => e.CpsInactive).HasColumnName("CPS_Inactive");
                entity.Property(e => e.CpsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CPS_LastModifiedBy");
                entity.Property(e => e.CpsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CPS_LastModifiedDate");
                entity.Property(e => e.CpsSupplierId).HasColumnName("CPS_Supplier_Id");
                entity.Property(e => e.CpsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CPS_TimeStamp");

                entity.HasOne(d => d.CpsClient).WithMany(p => p.ClientPreferredSuppliers)
                    .HasForeignKey(d => d.CpsClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientPreferredSuppliers_Clients");

                entity.HasOne(d => d.CpsSupplier).WithMany(p => p.ClientPreferredSuppliers)
                    .HasForeignKey(d => d.CpsSupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientPreferredSuppliers_Suppliers");
            });

            modelBuilder.Entity<ClientTemplate>(entity =>
            {
                entity.HasKey(e => e.CtpId);

                entity.ToTable("ClientTemplates", "mdm");

                entity.Property(e => e.CtpId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CTP_Id");
                entity.Property(e => e.CtpBodyEmail)
                    .HasMaxLength(250)
                    .HasColumnName("CTP_BodyEmail");
                entity.Property(e => e.CtpClientId).HasColumnName("CTP_Client_Id");
                entity.Property(e => e.CtpCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CTP_CreatedBy");
                entity.Property(e => e.CtpCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CTP_CreatedDate");
                entity.Property(e => e.CtpEffectiveDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CTP_EffectiveDate");
                entity.Property(e => e.CtpEntrySystem)
                    .HasMaxLength(20)
                    .HasColumnName("CTP_EntrySystem");
                entity.Property(e => e.CtpLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CTP_LastModifiedBy");
                entity.Property(e => e.CtpLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CTP_LastModifiedDate");
                entity.Property(e => e.CtpLegalEntityId).HasColumnName("CTP_LegalEntity_Id");
                entity.Property(e => e.CtpTemplateId).HasColumnName("CTP_Template_Id");
                entity.Property(e => e.CtpTerminationDate).HasColumnName("CTP_TerminationDate");
                entity.Property(e => e.CtpTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CTP_TimeStamp");

                entity.HasOne(d => d.CtpClient).WithMany(p => p.ClientTemplates)
                    .HasForeignKey(d => d.CtpClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientTemplates_Clients");

                entity.HasOne(d => d.CtpLegalEntity).WithMany(p => p.ClientTemplates)
                    .HasForeignKey(d => d.CtpLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientTemplates_LegalEntities");

                entity.HasOne(d => d.CtpTemplate).WithMany(p => p.ClientTemplates)
                    .HasForeignKey(d => d.CtpTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientTemplates_Templates");
            });

            modelBuilder.Entity<ClientsMissingDebtorsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ClientsMissingDebtorsView", "mdm");

                entity.Property(e => e.Code)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LongName).HasMaxLength(756);
                entity.Property(e => e.ShortName).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<ClientsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ClientsView", "fin");

                entity.Property(e => e.City).HasMaxLength(250);
                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientName).HasMaxLength(20);
                entity.Property(e => e.CountryCode).HasMaxLength(3);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.ExternalCode).HasMaxLength(10);
                entity.Property(e => e.HouseNo).HasMaxLength(10);
                entity.Property(e => e.HouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.PostalCode).HasMaxLength(10);
                entity.Property(e => e.Province).HasMaxLength(250);
                entity.Property(e => e.StreetName).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<ClientsView1>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ClientsView", "mdm");

                entity.Property(e => e.Actief)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.Adres).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.Einddatum).HasColumnType("date");
                entity.Property(e => e.ExterneCode)
                    .HasMaxLength(10)
                    .HasColumnName("Externe code");
                entity.Property(e => e.Huisnr).HasMaxLength(10);
                entity.Property(e => e.Landcode).HasMaxLength(3);
                entity.Property(e => e.LandcodePostbus)
                    .HasMaxLength(3)
                    .HasColumnName("Landcode postbus");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NaamCpl)
                    .HasMaxLength(756)
                    .HasColumnName("Naam cpl");
                entity.Property(e => e.NaamKort)
                    .HasMaxLength(20)
                    .HasColumnName("Naam kort");
                entity.Property(e => e.NiveauPlekInStructuur)
                    .HasMaxLength(61)
                    .HasColumnName("Niveau (plek in structuur)");
                entity.Property(e => e.OgCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("OG-Code");
                entity.Property(e => e.ParentBovenliggendeType)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("Parent (bovenliggende type)");
                entity.Property(e => e.Porcode).HasMaxLength(10);
                entity.Property(e => e.Postbus).HasMaxLength(10);
                entity.Property(e => e.Postcode).HasMaxLength(10);
                entity.Property(e => e.PostcodePostbus)
                    .HasMaxLength(10)
                    .HasColumnName("Postcode postbus");
                entity.Property(e => e.Provincie).HasMaxLength(250);
                entity.Property(e => e.ProvinciePostbus)
                    .HasMaxLength(250)
                    .HasColumnName("Provincie postbus");
                entity.Property(e => e.Startdatum).HasColumnType("date");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.Toevoeging).HasMaxLength(250);
                entity.Property(e => e.TypeTpVerzOfVolmacht)
                    .HasMaxLength(61)
                    .HasColumnName("Type (tp/verz/of volmacht)");
                entity.Property(e => e.Woonplaats).HasMaxLength(250);
                entity.Property(e => e.WoonplaatsPostbus)
                    .HasMaxLength(250)
                    .HasColumnName("Woonplaats postbus");
            });

            modelBuilder.Entity<CollectionCode>(entity =>
            {
                entity.HasKey(e => e.CcId);

                entity.ToTable("CollectionCodes", "mdm");

                entity.HasIndex(e => e.CcCode, "UX_mdm_CollectionCodes_Code__Filtered")
                    .IsUnique()
                    .HasFilter("([CC_Inactive]=(0))");

                entity.Property(e => e.CcId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CC_Id");
                entity.Property(e => e.CcCode)
                    .HasMaxLength(10)
                    .HasColumnName("CC_Code");
                entity.Property(e => e.CcCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CC_CreatedBy");
                entity.Property(e => e.CcCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CC_CreatedDate");
                entity.Property(e => e.CcInactive).HasColumnName("CC_Inactive");
                entity.Property(e => e.CcLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CC_LastModifiedBy");
                entity.Property(e => e.CcLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CC_LastModifiedDate");
                entity.Property(e => e.CcLocalizableEntryId).HasColumnName("CC_LocalizableEntry_Id");
                entity.Property(e => e.CcLongName)
                    .HasMaxLength(250)
                    .HasColumnName("CC_LongName");
                entity.Property(e => e.CcShortName)
                    .HasMaxLength(20)
                    .HasColumnName("CC_ShortName");
                entity.Property(e => e.CcTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CC_TimeStamp");

                entity.HasOne(d => d.CcLocalizableEntry).WithMany(p => p.CollectionCodes)
                    .HasForeignKey(d => d.CcLocalizableEntryId)
                    .HasConstraintName("FK_CollectionCodes_LocalizableEntries");
            });

            modelBuilder.Entity<CollectionCode1>(entity =>
            {
                entity.HasKey(e => e.CcId);

                entity.ToTable("CollectionCodes", "stg");

                entity.Property(e => e.CcId)
                    .ValueGeneratedNever()
                    .HasColumnName("CC_Id");
                entity.Property(e => e.CcCode)
                    .HasMaxLength(10)
                    .HasColumnName("CC_Code");
                entity.Property(e => e.CcCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CC_CreatedBy");
                entity.Property(e => e.CcCreatedDate).HasColumnName("CC_CreatedDate");
                entity.Property(e => e.CcInactive).HasColumnName("CC_Inactive");
                entity.Property(e => e.CcLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CC_LastModifiedBy");
                entity.Property(e => e.CcLastModifiedDate).HasColumnName("CC_LastModifiedDate");
                entity.Property(e => e.CcLocalizableEntryId).HasColumnName("CC_LocalizableEntry_Id");
                entity.Property(e => e.CcLongName)
                    .HasMaxLength(250)
                    .HasColumnName("CC_LongName");
                entity.Property(e => e.CcShortName)
                    .HasMaxLength(20)
                    .HasColumnName("CC_ShortName");
                entity.Property(e => e.CcTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CC_TimeStamp");
            });

            modelBuilder.Entity<Color>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__Colors__3214EC0741BB1D22");

                entity.ToTable("Colors", "mdm");

                entity.HasIndex(e => e.Code, "UX_mdm_Colors_Code__Filtered")
                    .IsUnique()
                    .HasFilter("([Inactive]=(0))");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LongName).HasMaxLength(250);
                entity.Property(e => e.ShortName).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.LocalizableEntry).WithMany(p => p.Colors)
                    .HasForeignKey(d => d.LocalizableEntryId)
                    .HasConstraintName("FK_Colors_LocalizableEntries");
            });

            modelBuilder.Entity<CombinedDossierAssignmentStatusHistory>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CombinedDossierAssignmentStatusHistory", "dos");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DossierStatusCode).HasMaxLength(10);
                entity.Property(e => e.DossierStatusLongName).HasMaxLength(250);
                entity.Property(e => e.DossierStatusShortName).HasMaxLength(50);
                entity.Property(e => e.DossierStatusType).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.StatusChangeReason).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<CombinedDossierStatusHistory>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CombinedDossierStatusHistory", "dos");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DossierStatusCode).HasMaxLength(10);
                entity.Property(e => e.DossierStatusLongName).HasMaxLength(250);
                entity.Property(e => e.DossierStatusShortName).HasMaxLength(50);
                entity.Property(e => e.DossierStatusType).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.StatusChangeReason).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<CommunicationType>(entity =>
            {
                entity.HasKey(e => e.CmtId);

                entity.ToTable("CommunicationTypes", "mdm");

                entity.Property(e => e.CmtId)
                    .ValueGeneratedNever()
                    .HasColumnName("CMT_Id");
                entity.Property(e => e.CmtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CMT_CreatedBy");
                entity.Property(e => e.CmtCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CMT_CreatedDate");
                entity.Property(e => e.CmtInactive).HasColumnName("CMT_Inactive");
                entity.Property(e => e.CmtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CMT_LastModifiedBy");
                entity.Property(e => e.CmtLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CMT_LastModifiedDate");
                entity.Property(e => e.CmtLocalizableEntryId).HasColumnName("CMT_LocalizableEntry_Id");
                entity.Property(e => e.CmtName)
                    .HasMaxLength(250)
                    .HasColumnName("CMT_Name");
                entity.Property(e => e.CmtTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CMT_TimeStamp");

                entity.HasOne(d => d.CmtLocalizableEntry).WithMany(p => p.CommunicationTypes)
                    .HasForeignKey(d => d.CmtLocalizableEntryId)
                    .HasConstraintName("FK_CommunicationTypes_LocalizableEntries");
            });

            modelBuilder.Entity<CompletedAssistancePlanPendingSalesOrder>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CompletedAssistancePlanPendingSalesOrder", "tmp");

                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(20);
                entity.Property(e => e.AssistancePlanStatus).HasMaxLength(250);
            });

            modelBuilder.Entity<CompletedDossierPendingSalesOrder>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CompletedDossierPendingSalesOrder", "tmp");

                entity.Property(e => e.AssistancePlanStatus).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.FeeSettlementName).HasMaxLength(50);
                entity.Property(e => e.InvoiceRuleTypeId).HasMaxLength(50);
            });

            modelBuilder.Entity<ContactPerson>(entity =>
            {
                entity.HasKey(e => e.CpId);

                entity.ToTable("ContactPersons", "mdm");

                entity.Property(e => e.CpId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CP_Id");
                entity.Property(e => e.CpContactPersonTypeId).HasColumnName("CP_ContactPersonType_Id");
                entity.Property(e => e.CpCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CP_CreatedBy");
                entity.Property(e => e.CpCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CP_CreatedDate");
                entity.Property(e => e.CpCultureCodePreferredLanguage)
                    .HasMaxLength(10)
                    .HasColumnName("CP_CultureCodePreferredLanguage");
                entity.Property(e => e.CpEmail)
                    .HasMaxLength(250)
                    .HasColumnName("CP_Email");
                entity.Property(e => e.CpFax)
                    .HasMaxLength(20)
                    .HasColumnName("CP_Fax");
                entity.Property(e => e.CpFullName)
                    .HasMaxLength(250)
                    .HasColumnName("CP_FullName");
                entity.Property(e => e.CpGenderId).HasColumnName("CP_Gender_Id");
                entity.Property(e => e.CpInactive).HasColumnName("CP_Inactive");
                entity.Property(e => e.CpIntakeMethod)
                    .HasMaxLength(250)
                    .HasColumnName("CP_IntakeMethod");
                entity.Property(e => e.CpLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CP_LastModifiedBy");
                entity.Property(e => e.CpLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CP_LastModifiedDate");
                entity.Property(e => e.CpMobile)
                    .HasMaxLength(20)
                    .HasColumnName("CP_Mobile");
                entity.Property(e => e.CpOrganizationUnitId).HasColumnName("CP_OrganizationUnit_Id");
                entity.Property(e => e.CpPhone)
                    .HasMaxLength(20)
                    .HasColumnName("CP_Phone");
                entity.Property(e => e.CpSalutationId).HasColumnName("CP_Salutation_Id");
                entity.Property(e => e.CpTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CP_TimeStamp");

                entity.HasOne(d => d.CpContactPersonType).WithMany(p => p.ContactPeople)
                    .HasForeignKey(d => d.CpContactPersonTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContactPersons_ContactPersonTypes");

                entity.HasOne(d => d.CpGender).WithMany(p => p.ContactPeople)
                    .HasForeignKey(d => d.CpGenderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContactPersons_Genders");

                entity.HasOne(d => d.CpOrganizationUnit).WithMany(p => p.ContactPeople)
                    .HasForeignKey(d => d.CpOrganizationUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContactPersons_OrganizationUnits");
            });

            modelBuilder.Entity<ContactPersonType>(entity =>
            {
                entity.HasKey(e => e.CptId);

                entity.ToTable("ContactPersonTypes", "mdm");

                entity.HasIndex(e => e.CptCode, "UX_mdm_ContactPersonTypes_Code__Filtered")
                    .IsUnique()
                    .HasFilter("([CPT_Inactive]=(0))");

                entity.Property(e => e.CptId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CPT_Id");
                entity.Property(e => e.CptCode)
                    .HasMaxLength(10)
                    .HasColumnName("CPT_Code");
                entity.Property(e => e.CptCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CPT_CreatedBy");
                entity.Property(e => e.CptCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CPT_CreatedDate");
                entity.Property(e => e.CptInactive).HasColumnName("CPT_Inactive");
                entity.Property(e => e.CptLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CPT_LastModifiedBy");
                entity.Property(e => e.CptLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CPT_LastModifiedDate");
                entity.Property(e => e.CptLocalizableEntryId).HasColumnName("CPT_LocalizableEntry_Id");
                entity.Property(e => e.CptLongName)
                    .HasMaxLength(250)
                    .HasColumnName("CPT_LongName");
                entity.Property(e => e.CptShortName)
                    .HasMaxLength(20)
                    .HasColumnName("CPT_ShortName");
                entity.Property(e => e.CptTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CPT_TimeStamp");

                entity.HasOne(d => d.CptLocalizableEntry).WithMany(p => p.ContactPersonTypes)
                    .HasForeignKey(d => d.CptLocalizableEntryId)
                    .HasConstraintName("FK_ContactPersonTypes_LocalizableEntries");
            });

            modelBuilder.Entity<ContactType>(entity =>
            {
                entity.HasKey(e => e.CotId);

                entity.ToTable("ContactTypes", "mdm");

                entity.HasIndex(e => e.CotCode, "UX_mdm_ContactTypes_Code__Filtered")
                    .IsUnique()
                    .HasFilter("([COT_Inactive]=(0))");

                entity.Property(e => e.CotId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("COT_Id");
                entity.Property(e => e.CotCode)
                    .HasMaxLength(10)
                    .HasColumnName("COT_Code");
                entity.Property(e => e.CotCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("COT_CreatedBy");
                entity.Property(e => e.CotCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("COT_CreatedDate");
                entity.Property(e => e.CotInactive).HasColumnName("COT_Inactive");
                entity.Property(e => e.CotLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("COT_LastModifiedBy");
                entity.Property(e => e.CotLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("COT_LastModifiedDate");
                entity.Property(e => e.CotLocalizableEntryId).HasColumnName("COT_LocalizableEntry_Id");
                entity.Property(e => e.CotLongName)
                    .HasMaxLength(250)
                    .HasColumnName("COT_LongName");
                entity.Property(e => e.CotShortName)
                    .HasMaxLength(20)
                    .HasColumnName("COT_ShortName");
                entity.Property(e => e.CotTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("COT_TimeStamp");

                entity.HasOne(d => d.CotLocalizableEntry).WithMany(p => p.ContactTypes)
                    .HasForeignKey(d => d.CotLocalizableEntryId)
                    .HasConstraintName("FK_ContactTypes_LocalizableEntries");
            });

            modelBuilder.Entity<ContractActivityExecution>(entity =>
            {
                entity.HasKey(e => e.CaeId);

                entity.ToTable("ContractActivityExecutions", "mdm");

                entity.Property(e => e.CaeId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CAE_Id");
                entity.Property(e => e.CaeActivityExecutionId).HasColumnName("CAE_ActivityExecution_Id");
                entity.Property(e => e.CaeCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CAE_CreatedBy");
                entity.Property(e => e.CaeCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CAE_CreatedDate");
                entity.Property(e => e.CaeLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CAE_LastModifiedBy");
                entity.Property(e => e.CaeLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CAE_LastModifiedDate");
                entity.Property(e => e.CaeSubContractId).HasColumnName("CAE_SubContract_Id");
                entity.Property(e => e.CaeTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CAE_TimeStamp");

                entity.HasOne(d => d.CaeActivityExecution).WithMany(p => p.ContractActivityExecutions)
                    .HasForeignKey(d => d.CaeActivityExecutionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContractActivityExecutions_ActivityExecutions");

                entity.HasOne(d => d.CaeSubContract).WithMany(p => p.ContractActivityExecutions)
                    .HasForeignKey(d => d.CaeSubContractId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContractActivityExecutions_SubContract");
            });

            modelBuilder.Entity<ContractActivityOption>(entity =>
            {
                entity.HasKey(e => e.CaoId);

                entity.ToTable("ContractActivityOptions", "mdm");

                entity.Property(e => e.CaoId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CAO_Id");
                entity.Property(e => e.CaoActivityOptionId).HasColumnName("CAO_ActivityOption_Id");
                entity.Property(e => e.CaoCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CAO_CreatedBy");
                entity.Property(e => e.CaoCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CAO_CreatedDate");
                entity.Property(e => e.CaoLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CAO_LastModifiedBy");
                entity.Property(e => e.CaoLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CAO_LastModifiedDate");
                entity.Property(e => e.CaoSubContractId).HasColumnName("CAO_SubContract_Id");
                entity.Property(e => e.CaoTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CAO_TimeStamp");

                entity.HasOne(d => d.CaoActivityOption).WithMany(p => p.ContractActivityOptions)
                    .HasForeignKey(d => d.CaoActivityOptionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContractActivityOptions_ActivityOptions");

                entity.HasOne(d => d.CaoSubContract).WithMany(p => p.ContractActivityOptions)
                    .HasForeignKey(d => d.CaoSubContractId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContractActivityOptions_SubContract");
            });

            modelBuilder.Entity<ContractInsuranceCoverage>(entity =>
            {
                entity.HasKey(e => e.CcoId);

                entity.ToTable("ContractInsuranceCoverages", "mdm");

                entity.Property(e => e.CcoId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CCO_Id");
                entity.Property(e => e.CcoCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CCO_CreatedBy");
                entity.Property(e => e.CcoCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CCO_CreatedDate");
                entity.Property(e => e.CcoInsuranceCoverageId).HasColumnName("CCO_InsuranceCoverage_Id");
                entity.Property(e => e.CcoLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CCO_LastModifiedBy");
                entity.Property(e => e.CcoLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CCO_LastModifiedDate");
                entity.Property(e => e.CcoSubContractId).HasColumnName("CCO_SubContract_Id");
                entity.Property(e => e.CcoTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CCO_TimeStamp");

                entity.HasOne(d => d.CcoInsuranceCoverage).WithMany(p => p.ContractInsuranceCoverages)
                    .HasForeignKey(d => d.CcoInsuranceCoverageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContractInsuranceCoverages_InsuranceCoverages");

                entity.HasOne(d => d.CcoSubContract).WithMany(p => p.ContractInsuranceCoverages)
                    .HasForeignKey(d => d.CcoSubContractId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContractInsuranceCoverages_SubContract");
            });

            modelBuilder.Entity<ContractInsuranceObject>(entity =>
            {
                entity.HasKey(e => e.CioId);

                entity.ToTable("ContractInsuranceObjects", "mdm");

                entity.Property(e => e.CioId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CIO_Id");
                entity.Property(e => e.CioCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CIO_CreatedBy");
                entity.Property(e => e.CioCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CIO_CreatedDate");
                entity.Property(e => e.CioInsuranceObjectId).HasColumnName("CIO_InsuranceObject_Id");
                entity.Property(e => e.CioLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CIO_LastModifiedBy");
                entity.Property(e => e.CioLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CIO_LastModifiedDate");
                entity.Property(e => e.CioSubContractId).HasColumnName("CIO_SubContract_Id");
                entity.Property(e => e.CioTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CIO_TimeStamp");

                entity.HasOne(d => d.CioInsuranceObject).WithMany(p => p.ContractInsuranceObjects)
                    .HasForeignKey(d => d.CioInsuranceObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContractInsuranceObjects_InsuranceObjects");

                entity.HasOne(d => d.CioSubContract).WithMany(p => p.ContractInsuranceObjects)
                    .HasForeignKey(d => d.CioSubContractId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContractInsuranceObjects_SubContract");
            });

            modelBuilder.Entity<ContractParty>(entity =>
            {
                entity.HasKey(e => e.CopId);

                entity.ToTable("ContractParties", "mdm");

                entity.Property(e => e.CopId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("COP_Id");
                entity.Property(e => e.CopContractNumber)
                    .HasMaxLength(20)
                    .HasColumnName("COP_ContractNumber");
                entity.Property(e => e.CopCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("COP_CreatedBy");
                entity.Property(e => e.CopCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("COP_CreatedDate");
                entity.Property(e => e.CopInactive).HasColumnName("COP_Inactive");
                entity.Property(e => e.CopLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("COP_LastModifiedBy");
                entity.Property(e => e.CopLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("COP_LastModifiedDate");
                entity.Property(e => e.CopTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("COP_TimeStamp");

                entity.HasOne(d => d.Cop).WithOne(p => p.ContractParty)
                    .HasForeignKey<ContractParty>(d => d.CopId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContractParties_OrganizationUnits");
            });

            modelBuilder.Entity<ContractWorkActivity>(entity =>
            {
                entity.HasKey(e => e.CwaId);

                entity.ToTable("ContractWorkActivities", "mdm");

                entity.Property(e => e.CwaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CWA_Id");
                entity.Property(e => e.CwaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CWA_CreatedBy");
                entity.Property(e => e.CwaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CWA_CreatedDate");
                entity.Property(e => e.CwaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CWA_LastModifiedBy");
                entity.Property(e => e.CwaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CWA_LastModifiedDate");
                entity.Property(e => e.CwaSubContractId).HasColumnName("CWA_SubContract_Id");
                entity.Property(e => e.CwaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CWA_TimeStamp");
                entity.Property(e => e.CwaWorkActivityId).HasColumnName("CWA_WorkActivity_Id");

                entity.HasOne(d => d.CwaSubContract).WithMany(p => p.ContractWorkActivities)
                    .HasForeignKey(d => d.CwaSubContractId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContractWorkActivities_SubContract");

                entity.HasOne(d => d.CwaWorkActivity).WithMany(p => p.ContractWorkActivities)
                    .HasForeignKey(d => d.CwaWorkActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContractWorkActivities_WorkActivities");
            });

            modelBuilder.Entity<ContractsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ContractsView", "mdm");

                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.ContractDate).HasColumnType("date");
                entity.Property(e => e.ContractDepartment)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ContractNumber).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.EffectiveDate).HasColumnType("date");
                entity.Property(e => e.HandlingCountryCode).HasMaxLength(3);
                entity.Property(e => e.HandlingCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.HandlingDepartment)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.HandlingTypeName).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.ProductCode).HasMaxLength(20);
                entity.Property(e => e.ProductName).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<ConvenantParty>(entity =>
            {
                entity.HasKey(e => e.CovId);

                entity.ToTable("ConvenantParties", "mdm");

                entity.Property(e => e.CovId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("COV_Id");
                entity.Property(e => e.CovConvenantNumber)
                    .HasMaxLength(20)
                    .HasColumnName("COV_ConvenantNumber");
                entity.Property(e => e.CovCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("COV_CreatedBy");
                entity.Property(e => e.CovCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("COV_CreatedDate");
                entity.Property(e => e.CovInactive).HasColumnName("COV_Inactive");
                entity.Property(e => e.CovLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("COV_LastModifiedBy");
                entity.Property(e => e.CovLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("COV_LastModifiedDate");
                entity.Property(e => e.CovTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("COV_TimeStamp");

                entity.HasOne(d => d.Cov).WithOne(p => p.ConvenantParty)
                    .HasForeignKey<ConvenantParty>(d => d.CovId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ConvenantParties_OrganizationUnits");
            });

            modelBuilder.Entity<CopyOrganizationContact>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToTable("CopyOrganizationContacts", "mdm");

                entity.Property(e => e.OcsContactTypeId).HasColumnName("OCS_ContactType_Id");
                entity.Property(e => e.OcsContactValue)
                    .HasMaxLength(250)
                    .HasColumnName("OCS_ContactValue");
                entity.Property(e => e.OcsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OCS_CreatedBy");
                entity.Property(e => e.OcsCreatedDate).HasColumnName("OCS_CreatedDate");
                entity.Property(e => e.OcsId).HasColumnName("OCS_Id");
                entity.Property(e => e.OcsIsPrimary).HasColumnName("OCS_IsPrimary");
                entity.Property(e => e.OcsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OCS_LastModifiedBy");
                entity.Property(e => e.OcsLastModifiedDate).HasColumnName("OCS_LastModifiedDate");
                entity.Property(e => e.OcsNotes)
                    .HasMaxLength(500)
                    .HasColumnName("OCS_Notes");
                entity.Property(e => e.OcsOrganizationUnitId).HasColumnName("OCS_OrganizationUnit_Id");
                entity.Property(e => e.OcsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OCS_TimeStamp");
            });

            modelBuilder.Entity<CorrespondenceMethod>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__Correspo__3214EC07964C60D1");

                entity.ToTable("CorrespondenceMethods", "mdm");

                entity.HasIndex(e => e.Code, "UX_mdm_CorrespondenceMethods_Code__Filtered")
                    .IsUnique()
                    .HasFilter("([Inactive]=(0))");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LongName).HasMaxLength(250);
                entity.Property(e => e.ShortName).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.LocalizableEntry).WithMany(p => p.CorrespondenceMethods)
                    .HasForeignKey(d => d.LocalizableEntryId)
                    .HasConstraintName("FK_CorrespondenceMethods_LocalizableEntries");
            });

            modelBuilder.Entity<CostAgreement>(entity =>
            {
                entity.HasKey(e => e.CgrId);

                entity.ToTable("CostAgreements", "mdm");

                entity.Property(e => e.CgrId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CGR_Id");
                entity.Property(e => e.CgrAgreementCode)
                    .HasMaxLength(20)
                    .HasColumnName("CGR_AgreementCode");
                entity.Property(e => e.CgrAgreementName)
                    .HasMaxLength(250)
                    .HasColumnName("CGR_AgreementName");
                entity.Property(e => e.CgrCostAgreementTypeId).HasColumnName("CGR_CostAgreementType_Id");
                entity.Property(e => e.CgrCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CGR_CreatedBy");
                entity.Property(e => e.CgrCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CGR_CreatedDate");
                entity.Property(e => e.CgrCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("CGR_CurrencyCode");
                entity.Property(e => e.CgrEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("CGR_EffectiveDate");
                entity.Property(e => e.CgrIncludingTax).HasColumnName("CGR_IncludingTax");
                entity.Property(e => e.CgrLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CGR_LastModifiedBy");
                entity.Property(e => e.CgrLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CGR_LastModifiedDate");
                entity.Property(e => e.CgrTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("CGR_TerminationDate");
                entity.Property(e => e.CgrTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CGR_TimeStamp");

                entity.HasOne(d => d.CgrCostAgreementType).WithMany(p => p.CostAgreements)
                    .HasForeignKey(d => d.CgrCostAgreementTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CostAgreements_CostAgreementTypes");
            });

            modelBuilder.Entity<CostAgreementType>(entity =>
            {
                entity.HasKey(e => e.CgtId);

                entity.ToTable("CostAgreementTypes", "mdm");

                entity.HasIndex(e => e.CgtCode, "UX_mdm_CostAgreementTypes_Code__Filtered")
                    .IsUnique()
                    .HasFilter("([CGT_Inactive]=(0))");

                entity.Property(e => e.CgtId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CGT_Id");
                entity.Property(e => e.CgtCode)
                    .HasMaxLength(10)
                    .HasColumnName("CGT_Code");
                entity.Property(e => e.CgtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CGT_CreatedBy");
                entity.Property(e => e.CgtCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CGT_CreatedDate");
                entity.Property(e => e.CgtInactive).HasColumnName("CGT_Inactive");
                entity.Property(e => e.CgtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CGT_LastModifiedBy");
                entity.Property(e => e.CgtLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CGT_LastModifiedDate");
                entity.Property(e => e.CgtLocalizableEntryId).HasColumnName("CGT_LocalizableEntry_Id");
                entity.Property(e => e.CgtLongName)
                    .HasMaxLength(250)
                    .HasColumnName("CGT_LongName");
                entity.Property(e => e.CgtShortName)
                    .HasMaxLength(20)
                    .HasColumnName("CGT_ShortName");
                entity.Property(e => e.CgtTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CGT_TimeStamp");

                entity.HasOne(d => d.CgtLocalizableEntry).WithMany(p => p.CostAgreementTypes)
                    .HasForeignKey(d => d.CgtLocalizableEntryId)
                    .HasConstraintName("FK_CostAgreementTypes_LocalizableEntries");
            });

            modelBuilder.Entity<CostCenter>(entity =>
            {
                entity.HasKey(e => e.CcnId);

                entity.ToTable("CostCenters", "fin");

                entity.HasIndex(e => new { e.CcnCode, e.CcnLegalEntityId }, "IX_CostCenters_Code_LegalEntity").IsUnique();

                entity.Property(e => e.CcnId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CCN_Id");
                entity.Property(e => e.CcnCode)
                    .HasMaxLength(10)
                    .HasColumnName("CCN_Code");
                entity.Property(e => e.CcnCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CCN_CreatedBy");
                entity.Property(e => e.CcnCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CCN_CreatedDate");
                entity.Property(e => e.CcnInactive).HasColumnName("CCN_Inactive");
                entity.Property(e => e.CcnLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CCN_LastModifiedBy");
                entity.Property(e => e.CcnLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CCN_LastModifiedDate");
                entity.Property(e => e.CcnLegalEntityId).HasColumnName("CCN_LegalEntity_Id");
                entity.Property(e => e.CcnLocalizableEntryId).HasColumnName("CCN_LocalizableEntry_Id");
                entity.Property(e => e.CcnLongName)
                    .HasMaxLength(250)
                    .HasColumnName("CCN_LongName");
                entity.Property(e => e.CcnShortName)
                    .HasMaxLength(20)
                    .HasColumnName("CCN_ShortName");
                entity.Property(e => e.CcnTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CCN_TimeStamp");

                entity.HasOne(d => d.CcnLegalEntity).WithMany(p => p.CostCenters)
                    .HasForeignKey(d => d.CcnLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CostCenters_LegalEntities");

                entity.HasOne(d => d.CcnLocalizableEntry).WithMany(p => p.CostCenters)
                    .HasForeignKey(d => d.CcnLocalizableEntryId)
                    .HasConstraintName("FK_CostCenters_LocalizableEntries");
            });

            modelBuilder.Entity<CostCentersView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CostCentersView", "fin");

                entity.Property(e => e.CostCenterCode).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LongName).HasMaxLength(250);
                entity.Property(e => e.ShortName).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<CostFeeAgreement>(entity =>
            {
                entity.HasKey(e => e.CfaId);

                entity.ToTable("CostFeeAgreements", "fee");

                entity.Property(e => e.CfaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CFA_Id");
                entity.Property(e => e.CfaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CFA_CreatedBy");
                entity.Property(e => e.CfaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CFA_CreatedDate");
                entity.Property(e => e.CfaFeePercentage)
                    .HasColumnType("numeric(8, 4)")
                    .HasColumnName("CFA_FeePercentage");
                entity.Property(e => e.CfaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CFA_LastModifiedBy");
                entity.Property(e => e.CfaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CFA_LastModifiedDate");
                entity.Property(e => e.CfaMaxFeeAmount)
                    .HasColumnType("money")
                    .HasColumnName("CFA_MaxFeeAmount");
                entity.Property(e => e.CfaMinFeeAmount)
                    .HasColumnType("money")
                    .HasColumnName("CFA_MinFeeAmount");
                entity.Property(e => e.CfaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CFA_TimeStamp");

                entity.HasOne(d => d.Cfa).WithOne(p => p.CostFeeAgreement)
                    .HasForeignKey<CostFeeAgreement>(d => d.CfaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CostFeeAgreements_FeeAgreements");
            });

            modelBuilder.Entity<CostFeeSettlement>(entity =>
            {
                entity.HasKey(e => e.CfsId);

                entity.ToTable("CostFeeSettlements", "fee");

                entity.HasIndex(e => new { e.CfsClientId, e.CfsInvoiceRuleTypeId }, "IX_fee_CostFeeSettlements_Client_InvoiceRuleType");

                entity.HasIndex(e => e.CfsInvoiceRuleTypeId, "IX_fee_CostFeeSettlements_InvoiceRuleType__INCL");

                entity.HasIndex(e => new { e.CfsLegalEntityId, e.CfsClientId }, "IX_fee_CostFeeSettlements_LegalEntity_Client");

                entity.Property(e => e.CfsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CFS_Id");
                entity.Property(e => e.CfsClientId).HasColumnName("CFS_Client_Id");
                entity.Property(e => e.CfsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CFS_CreatedBy");
                entity.Property(e => e.CfsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CFS_CreatedDate");
                entity.Property(e => e.CfsEntrySystem)
                    .HasMaxLength(10)
                    .HasColumnName("CFS_EntrySystem");
                entity.Property(e => e.CfsExchangeRateDateRuleId)
                    .HasMaxLength(20)
                    .HasColumnName("CFS_ExchangeRateDateRule_Id");
                entity.Property(e => e.CfsExchangeRateProviderId).HasColumnName("CFS_ExchangeRateProvider_Id");
                entity.Property(e => e.CfsExchangeRateTypeId)
                    .HasMaxLength(3)
                    .HasColumnName("CFS_ExchangeRateType_Id");
                entity.Property(e => e.CfsInvoiceDeliveryMethodId)
                    .HasMaxLength(20)
                    .HasColumnName("CFS_InvoiceDeliveryMethod_Id");
                entity.Property(e => e.CfsInvoiceRuleTypeId)
                    .HasMaxLength(50)
                    .HasColumnName("CFS_InvoiceRuleType_Id");
                entity.Property(e => e.CfsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CFS_LastModifiedBy");
                entity.Property(e => e.CfsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CFS_LastModifiedDate");
                entity.Property(e => e.CfsLegalEntityId).HasColumnName("CFS_LegalEntity_Id");
                entity.Property(e => e.CfsSettlementName)
                    .HasMaxLength(50)
                    .HasColumnName("CFS_SettlementName");
                entity.Property(e => e.CfsTaxDateRuleId)
                    .HasMaxLength(20)
                    .HasColumnName("CFS_TaxDateRule_Id");
                entity.Property(e => e.CfsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CFS_TimeStamp");

                entity.HasOne(d => d.CfsClient).WithMany(p => p.CostFeeSettlements)
                    .HasForeignKey(d => d.CfsClientId)
                    .HasConstraintName("FK_CostFeeSettlements_Clients");

                entity.HasOne(d => d.CfsExchangeRateProvider).WithMany(p => p.CostFeeSettlements)
                    .HasForeignKey(d => d.CfsExchangeRateProviderId)
                    .HasConstraintName("FK_CostFeeSettlements_ExchangeRateProviders");

                entity.HasOne(d => d.CfsExchangeRateType).WithMany(p => p.CostFeeSettlements)
                    .HasForeignKey(d => d.CfsExchangeRateTypeId)
                    .HasConstraintName("FK_CostFeeSettlements_ExchangeRateTypes");

                entity.HasOne(d => d.CfsInvoiceDeliveryMethod).WithMany(p => p.CostFeeSettlements)
                    .HasForeignKey(d => d.CfsInvoiceDeliveryMethodId)
                    .HasConstraintName("FK_CostFeeSettlements_InvoiceDeliveryMethods");

                entity.HasOne(d => d.CfsInvoiceRuleType).WithMany(p => p.CostFeeSettlements)
                    .HasForeignKey(d => d.CfsInvoiceRuleTypeId)
                    .HasConstraintName("FK_CostFeeSettlements_InvoiceRuleTypes");

                entity.HasOne(d => d.CfsLegalEntity).WithMany(p => p.CostFeeSettlements)
                    .HasForeignKey(d => d.CfsLegalEntityId)
                    .HasConstraintName("FK_CostFeeSettlements_LegalEntities");
            });

            modelBuilder.Entity<CostFeeSettlementLine>(entity =>
            {
                entity.HasKey(e => e.CflId);

                entity.ToTable("CostFeeSettlementLines", "fee");

                entity.HasIndex(e => e.CflCostFeeSettlementId, "IX_CostFeeSettlementLines_CFL_CostFeeSettlement_Id");

                entity.Property(e => e.CflId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CFL_Id");
                entity.Property(e => e.CflCostFeeSettlementId).HasColumnName("CFL_CostFeeSettlement_Id");
                entity.Property(e => e.CflCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CFL_CreatedBy");
                entity.Property(e => e.CflCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CFL_CreatedDate");
                entity.Property(e => e.CflEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("CFL_EffectiveDate");
                entity.Property(e => e.CflExchangeRateDateRuleId)
                    .HasMaxLength(20)
                    .HasColumnName("CFL_ExchangeRateDateRule_Id");
                entity.Property(e => e.CflLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CFL_LastModifiedBy");
                entity.Property(e => e.CflLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CFL_LastModifiedDate");
                entity.Property(e => e.CflServiceId).HasColumnName("CFL_Service_Id");
                entity.Property(e => e.CflTaxDateRuleId)
                    .HasMaxLength(20)
                    .HasColumnName("CFL_TaxDateRule_Id");
                entity.Property(e => e.CflTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("CFL_TerminationDate");
                entity.Property(e => e.CflTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CFL_TimeStamp");

                entity.HasOne(d => d.CflCostFeeSettlement).WithMany(p => p.CostFeeSettlementLines)
                    .HasForeignKey(d => d.CflCostFeeSettlementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CostFeeSettlementLines_CostFeeSettlements");

                entity.HasOne(d => d.CflService).WithMany(p => p.CostFeeSettlementLines)
                    .HasForeignKey(d => d.CflServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CostFeeSettlementLines_Services");
            });

            modelBuilder.Entity<CostOfSale>(entity =>
            {
                entity.HasKey(e => e.CosId);

                entity.ToTable("CostOfSales", "fin");

                entity.Property(e => e.CosId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("COS_Id");
                entity.Property(e => e.CosCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("COS_CreatedBy");
                entity.Property(e => e.CosCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("COS_CreatedDate");
                entity.Property(e => e.CosDebitCostOfSaleId).HasColumnName("COS_DebitCostOfSale_Id");
                entity.Property(e => e.CosDebitEntryNumber)
                    .HasMaxLength(36)
                    .HasColumnName("COS_DebitEntryNumber");
                entity.Property(e => e.CosDocumentDate).HasColumnName("COS_DocumentDate");
                entity.Property(e => e.CosEntryBatch)
                    .HasMaxLength(36)
                    .HasColumnName("COS_EntryBatch");
                entity.Property(e => e.CosEntryNumber)
                    .HasMaxLength(36)
                    .HasColumnName("COS_EntryNumber");
                entity.Property(e => e.CosEntrySystem)
                    .HasMaxLength(10)
                    .HasColumnName("COS_EntrySystem");
                entity.Property(e => e.CosFinancialBookingPeriodId).HasColumnName("COS_FinancialBookingPeriod_Id");
                entity.Property(e => e.CosIsCredit).HasColumnName("COS_IsCredit");
                entity.Property(e => e.CosIsImported).HasColumnName("COS_IsImported");
                entity.Property(e => e.CosJournalId)
                    .HasMaxLength(20)
                    .HasColumnName("COS_Journal_Id");
                entity.Property(e => e.CosLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("COS_LastModifiedBy");
                entity.Property(e => e.CosLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("COS_LastModifiedDate");
                entity.Property(e => e.CosLegalEntityId).HasColumnName("COS_LegalEntity_Id");
                entity.Property(e => e.CosNetAmount)
                    .HasColumnType("money")
                    .HasColumnName("COS_NetAmount");
                entity.Property(e => e.CosNumber)
                    .HasMaxLength(20)
                    .HasColumnName("COS_Number");
                entity.Property(e => e.CosTenantId).HasColumnName("COS_Tenant_Id");
                entity.Property(e => e.CosTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("COS_TimeStamp");

                entity.HasOne(d => d.CosDebitCostOfSale).WithMany(p => p.InverseCosDebitCostOfSale)
                    .HasForeignKey(d => d.CosDebitCostOfSaleId)
                    .HasConstraintName("FK_CostOfSales_DebitCostOfSales");

                entity.HasOne(d => d.CosFinancialBookingPeriod).WithMany(p => p.CostOfSales)
                    .HasForeignKey(d => d.CosFinancialBookingPeriodId)
                    .HasConstraintName("FK_CostOfSales_FinancialBookingPeriods");

                entity.HasOne(d => d.CosJournal).WithMany(p => p.CostOfSales)
                    .HasForeignKey(d => d.CosJournalId)
                    .HasConstraintName("FK_CostOfSales_Journals");

                entity.HasOne(d => d.CosLegalEntity).WithMany(p => p.CostOfSales)
                    .HasForeignKey(d => d.CosLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CostOfSales_LegalEntities");

                entity.HasOne(d => d.CosTenant).WithMany(p => p.CostOfSales)
                    .HasForeignKey(d => d.CosTenantId)
                    .HasConstraintName("FK_CostOfSales_Tenants");
            });

            modelBuilder.Entity<CostOfSalesJournalEntryLine>(entity =>
            {
                entity.HasKey(e => e.OjlId);

                entity.ToTable("CostOfSalesJournalEntryLines", "fin");

                entity.HasIndex(e => new { e.OjlCostOfSalesLineId, e.OjlJournalEntryLineId }, "IX_CostOfSalesJournalEntryLines_CostOfSalesLine_JournalEntryLine");

                entity.HasIndex(e => new { e.OjlJournalEntryLineId, e.OjlCostOfSalesLineId }, "IX_CostOfSalesJournalEntryLines_JournalEntryLine_CostOfSalesLine");

                entity.Property(e => e.OjlId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("OJL_Id");
                entity.Property(e => e.OjlCostOfSalesLineId).HasColumnName("OJL_CostOfSalesLine_Id");
                entity.Property(e => e.OjlCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OJL_CreatedBy");
                entity.Property(e => e.OjlCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OJL_CreatedDate");
                entity.Property(e => e.OjlJournalEntryLineId).HasColumnName("OJL_JournalEntryLine_Id");
                entity.Property(e => e.OjlLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OJL_LastModifiedBy");
                entity.Property(e => e.OjlLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OJL_LastModifiedDate");
                entity.Property(e => e.OjlTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OJL_TimeStamp");

                entity.HasOne(d => d.OjlCostOfSalesLine).WithMany(p => p.CostOfSalesJournalEntryLines)
                    .HasForeignKey(d => d.OjlCostOfSalesLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CostOfSalesJournalEntryLines_CostOfSalesLines");

                entity.HasOne(d => d.OjlJournalEntryLine).WithMany(p => p.CostOfSalesJournalEntryLines)
                    .HasForeignKey(d => d.OjlJournalEntryLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CostOfSalesJournalEntryLines_JournalEntryLines");
            });

            modelBuilder.Entity<CostOfSalesLine>(entity =>
            {
                entity.HasKey(e => e.CslId);

                entity.ToTable("CostOfSalesLines", "fin");

                entity.Property(e => e.CslId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CSL_Id");
                entity.Property(e => e.CslCostOfSalesId).HasColumnName("CSL_CostOfSales_Id");
                entity.Property(e => e.CslCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CSL_CreatedBy");
                entity.Property(e => e.CslCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CSL_CreatedDate");
                entity.Property(e => e.CslIsImported).HasColumnName("CSL_IsImported");
                entity.Property(e => e.CslLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CSL_LastModifiedBy");
                entity.Property(e => e.CslLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CSL_LastModifiedDate");
                entity.Property(e => e.CslLineNumber).HasColumnName("CSL_LineNumber");
                entity.Property(e => e.CslNetAmount)
                    .HasColumnType("money")
                    .HasColumnName("CSL_NetAmount");
                entity.Property(e => e.CslPurchaseInvoiceLineId).HasColumnName("CSL_PurchaseInvoiceLine_Id");
                entity.Property(e => e.CslReason)
                    .HasMaxLength(250)
                    .HasColumnName("CSL_Reason");
                entity.Property(e => e.CslTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CSL_TimeStamp");

                entity.HasOne(d => d.CslCostOfSales).WithMany(p => p.CostOfSalesLines)
                    .HasForeignKey(d => d.CslCostOfSalesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CostOfSalesLines_CostOfSales");

                entity.HasOne(d => d.CslPurchaseInvoiceLine).WithMany(p => p.CostOfSalesLines)
                    .HasForeignKey(d => d.CslPurchaseInvoiceLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CostOfSalesLines_PurchaseInvoiceLines");
            });

            modelBuilder.Entity<CostOfSalesPendingJournalEntryView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CostOfSalesPendingJournalEntryView", "fin");

                entity.Property(e => e.DebitEntryNumber).HasMaxLength(36);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.PurchaseInvoiceNumber).HasMaxLength(20);
            });

            modelBuilder.Entity<CostSettlement>(entity =>
            {
                entity.HasKey(e => e.CstId);

                entity.ToTable("CostSettlements", "mdm");

                entity.Property(e => e.CstId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CST_Id");
                entity.Property(e => e.CstContractNumber)
                    .HasMaxLength(50)
                    .HasColumnName("CST_ContractNumber");
                entity.Property(e => e.CstCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CST_CreatedBy");
                entity.Property(e => e.CstCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CST_CreatedDate");
                entity.Property(e => e.CstDiscountCode)
                    .HasMaxLength(50)
                    .HasColumnName("CST_DiscountCode");
                entity.Property(e => e.CstEntrySystem)
                    .HasMaxLength(10)
                    .HasColumnName("CST_EntrySystem");
                entity.Property(e => e.CstLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CST_LastModifiedBy");
                entity.Property(e => e.CstLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CST_LastModifiedDate");
                entity.Property(e => e.CstLegalEntityId).HasColumnName("CST_LegalEntity_Id");
                entity.Property(e => e.CstSettlementName)
                    .HasMaxLength(50)
                    .HasColumnName("CST_SettlementName");
                entity.Property(e => e.CstSupplierId).HasColumnName("CST_Supplier_Id");
                entity.Property(e => e.CstTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CST_TimeStamp");

                entity.HasOne(d => d.CstLegalEntity).WithMany(p => p.CostSettlements)
                    .HasForeignKey(d => d.CstLegalEntityId)
                    .HasConstraintName("FK_CostSettlements_LegalEntities");

                entity.HasOne(d => d.CstSupplier).WithMany(p => p.CostSettlements)
                    .HasForeignKey(d => d.CstSupplierId)
                    .HasConstraintName("FK_CostSettlements_Suppliers");
            });

            modelBuilder.Entity<CostSettlementLine>(entity =>
            {
                entity.HasKey(e => e.CtlId);

                entity.ToTable("CostSettlementLines", "mdm");

                entity.HasIndex(e => new { e.CtlCostSettlementId, e.CtlServiceId }, "IX_CostSettlementLines_CTL_CostSettlement_Id_CTL_Service_Id");

                entity.Property(e => e.CtlId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CTL_Id");
                entity.Property(e => e.CtlCostAgreementId).HasColumnName("CTL_CostAgreement_Id");
                entity.Property(e => e.CtlCostSettlementId).HasColumnName("CTL_CostSettlement_Id");
                entity.Property(e => e.CtlCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CTL_CreatedBy");
                entity.Property(e => e.CtlCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CTL_CreatedDate");
                entity.Property(e => e.CtlLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CTL_LastModifiedBy");
                entity.Property(e => e.CtlLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CTL_LastModifiedDate");
                entity.Property(e => e.CtlLineNumber).HasColumnName("CTL_LineNumber");
                entity.Property(e => e.CtlServiceId).HasColumnName("CTL_Service_Id");
                entity.Property(e => e.CtlTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CTL_TimeStamp");

                entity.HasOne(d => d.CtlCostAgreement).WithMany(p => p.CostSettlementLines)
                    .HasForeignKey(d => d.CtlCostAgreementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CostSettlementLines_CostAgreements");

                entity.HasOne(d => d.CtlCostSettlement).WithMany(p => p.CostSettlementLines)
                    .HasForeignKey(d => d.CtlCostSettlementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CostSettlementLines_CostSettlements");

                entity.HasOne(d => d.CtlService).WithMany(p => p.CostSettlementLines)
                    .HasForeignKey(d => d.CtlServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CostSettlementLines_Services");
            });

            modelBuilder.Entity<CostSettlementLinesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CostSettlementLinesView", "mdm");

                entity.Property(e => e.AgreementCode).HasMaxLength(20);
                entity.Property(e => e.AgreementName).HasMaxLength(250);
                entity.Property(e => e.ContractNumber).HasMaxLength(50);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DiscountCode).HasMaxLength(50);
                entity.Property(e => e.EffectiveDate).HasColumnType("date");
                entity.Property(e => e.FixedCostAmount).HasColumnType("money");
                entity.Property(e => e.FixedCostMarginAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.OrderTotalMarginAmount).HasColumnType("money");
                entity.Property(e => e.SettlementName).HasMaxLength(50);
                entity.Property(e => e.TerminationDate).HasColumnType("date");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<CostType>(entity =>
            {
                entity.HasKey(e => e.CtpId);

                entity.ToTable("CostTypes", "fin");

                entity.HasIndex(e => e.CtpCode, "IX_CostTypes_Code").IsUnique();

                entity.Property(e => e.CtpId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CTP_Id");
                entity.Property(e => e.CtpCode)
                    .HasMaxLength(10)
                    .HasColumnName("CTP_Code");
                entity.Property(e => e.CtpCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CTP_CreatedBy");
                entity.Property(e => e.CtpCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CTP_CreatedDate");
                entity.Property(e => e.CtpInactive).HasColumnName("CTP_Inactive");
                entity.Property(e => e.CtpLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CTP_LastModifiedBy");
                entity.Property(e => e.CtpLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CTP_LastModifiedDate");
                entity.Property(e => e.CtpLocalizableEntryId).HasColumnName("CTP_LocalizableEntry_Id");
                entity.Property(e => e.CtpLongName)
                    .HasMaxLength(250)
                    .HasColumnName("CTP_LongName");
                entity.Property(e => e.CtpShortName)
                    .HasMaxLength(20)
                    .HasColumnName("CTP_ShortName");
                entity.Property(e => e.CtpTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CTP_TimeStamp");

                entity.HasOne(d => d.CtpLocalizableEntry).WithMany(p => p.CostTypes)
                    .HasForeignKey(d => d.CtpLocalizableEntryId)
                    .HasConstraintName("FK_CostTypes_LocalizableEntries");
            });

            modelBuilder.Entity<CostUnit>(entity =>
            {
                entity.HasKey(e => e.CunId);

                entity.ToTable("CostUnits", "fin");

                entity.HasIndex(e => new { e.CunCode, e.CunLegalEntityId }, "IX_CostUnits_Code_LegalEntity").IsUnique();

                entity.Property(e => e.CunId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CUN_Id");
                entity.Property(e => e.CunCode)
                    .HasMaxLength(10)
                    .HasColumnName("CUN_Code");
                entity.Property(e => e.CunCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CUN_CreatedBy");
                entity.Property(e => e.CunCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CUN_CreatedDate");
                entity.Property(e => e.CunInactive).HasColumnName("CUN_Inactive");
                entity.Property(e => e.CunLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CUN_LastModifiedBy");
                entity.Property(e => e.CunLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CUN_LastModifiedDate");
                entity.Property(e => e.CunLegalEntityId).HasColumnName("CUN_LegalEntity_Id");
                entity.Property(e => e.CunLocalizableEntryId).HasColumnName("CUN_LocalizableEntry_Id");
                entity.Property(e => e.CunLongName)
                    .HasMaxLength(250)
                    .HasColumnName("CUN_LongName");
                entity.Property(e => e.CunShortName)
                    .HasMaxLength(20)
                    .HasColumnName("CUN_ShortName");
                entity.Property(e => e.CunTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CUN_TimeStamp");

                entity.HasOne(d => d.CunLegalEntity).WithMany(p => p.CostUnits)
                    .HasForeignKey(d => d.CunLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CostUnits_LegalEntities");

                entity.HasOne(d => d.CunLocalizableEntry).WithMany(p => p.CostUnits)
                    .HasForeignKey(d => d.CunLocalizableEntryId)
                    .HasConstraintName("FK_CostUnits_LocalizableEntries");
            });

            modelBuilder.Entity<CostUnitsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CostUnitsView", "fin");

                entity.Property(e => e.CostUnitCode).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LongName).HasMaxLength(250);
                entity.Property(e => e.ShortName).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<CountriesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CountriesView", "mdm");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CultureCode).HasMaxLength(10);
                entity.Property(e => e.Id).HasMaxLength(2);
                entity.Property(e => e.Iso3Code).HasMaxLength(3);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.HasKey(e => e.CntId);

                entity.ToTable("Countries", "mdm");

                entity.HasIndex(e => e.CntIso3Code, "UX_mdm_Countries_Iso3Code__Filtered")
                    .IsUnique()
                    .HasFilter("([CNT_Inactive]=(0))");

                entity.Property(e => e.CntId)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CNT_Id");
                entity.Property(e => e.CntCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CNT_CreatedBy");
                entity.Property(e => e.CntCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CNT_CreatedDate");
                entity.Property(e => e.CntInactive).HasColumnName("CNT_Inactive");
                entity.Property(e => e.CntIso3Code)
                    .HasMaxLength(3)
                    .HasColumnName("CNT_Iso3Code");
                entity.Property(e => e.CntLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CNT_LastModifiedBy");
                entity.Property(e => e.CntLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CNT_LastModifiedDate");
                entity.Property(e => e.CntLocalizableEntryId).HasColumnName("CNT_LocalizableEntry_Id");
                entity.Property(e => e.CntName)
                    .HasMaxLength(250)
                    .HasColumnName("CNT_Name");
                entity.Property(e => e.CntTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CNT_TimeStamp");

                entity.HasOne(d => d.CntLocalizableEntry).WithMany(p => p.Countries)
                    .HasForeignKey(d => d.CntLocalizableEntryId)
                    .HasConstraintName("FK_Countries_LocalizableEntries");
            });

            modelBuilder.Entity<Country1>(entity =>
            {
                entity.HasKey(e => e.CntId);

                entity.ToTable("Countries", "stg");

                entity.Property(e => e.CntId)
                    .HasMaxLength(2)
                    .HasColumnName("CNT_Id");
                entity.Property(e => e.CntCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CNT_CreatedBy");
                entity.Property(e => e.CntCreatedDate).HasColumnName("CNT_CreatedDate");
                entity.Property(e => e.CntInactive).HasColumnName("CNT_Inactive");
                entity.Property(e => e.CntIso3Code)
                    .HasMaxLength(3)
                    .HasColumnName("CNT_Iso3Code");
                entity.Property(e => e.CntLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CNT_LastModifiedBy");
                entity.Property(e => e.CntLastModifiedDate).HasColumnName("CNT_LastModifiedDate");
                entity.Property(e => e.CntLocalizableEntryId).HasColumnName("CNT_LocalizableEntry_Id");
                entity.Property(e => e.CntName)
                    .HasMaxLength(250)
                    .HasColumnName("CNT_Name");
                entity.Property(e => e.CntTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CNT_TimeStamp");
            });

            modelBuilder.Entity<CoverageMapping>(entity =>
            {
                entity.HasKey(e => e.CmId).HasName("PK__Coverage__101921CA1459CA87");

                entity.ToTable("CoverageMapping", "pros");

                entity.Property(e => e.CmId)
                    .ValueGeneratedNever()
                    .HasColumnName("CM_Id");
                entity.Property(e => e.CmCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CM_CreatedBy");
                entity.Property(e => e.CmCreatedDate).HasColumnName("CM_CreatedDate");
                entity.Property(e => e.CmDefaultEis).HasColumnName("CM_DefaultEIS");
                entity.Property(e => e.CmDefaultProspect).HasColumnName("CM_DefaultProspect");
                entity.Property(e => e.CmEiscode).HasColumnName("CM_EISCode");
                entity.Property(e => e.CmLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CM_LastModifiedBy");
                entity.Property(e => e.CmLastModifiedDate).HasColumnName("CM_LastModifiedDate");
                entity.Property(e => e.CmProspectCode).HasColumnName("CM_ProspectCode");
                entity.Property(e => e.CmTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CM_TimeStamp");
            });

            modelBuilder.Entity<CoverageProduct>(entity =>
            {
                entity.HasKey(e => e.CprdId);

                entity.ToTable("CoverageProducts", "pdc");

                entity.HasIndex(e => new { e.CprdProductCode, e.CprdProductName, e.CprdOrganizationUnitOwnerId }, "IX_CoverageProduct_ProductCode_ProductName_OrganizationUnitOwner").IsUnique();

                entity.Property(e => e.CprdId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CPRD_Id");
                entity.Property(e => e.CprdCoverageProductTypeId).HasColumnName("CPRD_CoverageProductType_Id");
                entity.Property(e => e.CprdCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CPRD_CreatedBy");
                entity.Property(e => e.CprdCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CPRD_CreatedDate");
                entity.Property(e => e.CprdDefaultWa).HasColumnName("CPRD_DefaultWA");
                entity.Property(e => e.CprdEndDate).HasColumnName("CPRD_EndDate");
                entity.Property(e => e.CprdInactive).HasColumnName("CPRD_Inactive");
                entity.Property(e => e.CprdInsuranceCoverageId).HasColumnName("CPRD_InsuranceCoverage_Id");
                entity.Property(e => e.CprdLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CPRD_LastModifiedBy");
                entity.Property(e => e.CprdLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CPRD_LastModifiedDate");
                entity.Property(e => e.CprdLocalizableEntryId).HasColumnName("CPRD_LocalizableEntry_Id");
                entity.Property(e => e.CprdOrganizationUnitOwnerId).HasColumnName("CPRD_OrganizationUnitOwner_Id");
                entity.Property(e => e.CprdProductCode)
                    .HasMaxLength(10)
                    .HasColumnName("CPRD_ProductCode");
                entity.Property(e => e.CprdProductCodeOriginal)
                    .HasMaxLength(10)
                    .HasColumnName("CPRD_ProductCodeOriginal");
                entity.Property(e => e.CprdProductName)
                    .HasMaxLength(250)
                    .HasColumnName("CPRD_ProductName");
                entity.Property(e => e.CprdProductNameCommercial)
                    .HasMaxLength(250)
                    .HasColumnName("CPRD_ProductNameCommercial");
                entity.Property(e => e.CprdRegulationCode)
                    .HasMaxLength(250)
                    .HasColumnName("CPRD_RegulationCode");
                entity.Property(e => e.CprdSpecificInformation).HasColumnName("CPRD_SpecificInformation");
                entity.Property(e => e.CprdStartDate).HasColumnName("CPRD_StartDate");
                entity.Property(e => e.CprdTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CPRD_TimeStamp");

                entity.HasOne(d => d.CprdCoverageProductType).WithMany(p => p.CoverageProducts)
                    .HasForeignKey(d => d.CprdCoverageProductTypeId)
                    .HasConstraintName("FK_CoverageProducts_CoverageProductTypes");

                entity.HasOne(d => d.CprdInsuranceCoverage).WithMany(p => p.CoverageProducts)
                    .HasForeignKey(d => d.CprdInsuranceCoverageId)
                    .HasConstraintName("FK_CoverageProducts_InsuranceCoverages");

                entity.HasOne(d => d.CprdLocalizableEntry).WithMany(p => p.CoverageProducts)
                    .HasForeignKey(d => d.CprdLocalizableEntryId)
                    .HasConstraintName("FK_CoverageProducts_LocalizableEntries");

                entity.HasOne(d => d.CprdOrganizationUnitOwner).WithMany(p => p.CoverageProducts)
                    .HasForeignKey(d => d.CprdOrganizationUnitOwnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CoverageProducts_OrganizationUnits");
            });

            modelBuilder.Entity<CoverageProductType>(entity =>
            {
                entity.HasKey(e => e.CoptId);

                entity.ToTable("CoverageProductTypes", "pdc");

                entity.Property(e => e.CoptId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("COPT_Id");
                entity.Property(e => e.CoptCode)
                    .HasMaxLength(10)
                    .HasColumnName("COPT_Code");
                entity.Property(e => e.CoptCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("COPT_CreatedBy");
                entity.Property(e => e.CoptCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("COPT_CreatedDate");
                entity.Property(e => e.CoptInactive).HasColumnName("COPT_Inactive");
                entity.Property(e => e.CoptLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("COPT_LastModifiedBy");
                entity.Property(e => e.CoptLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("COPT_LastModifiedDate");
                entity.Property(e => e.CoptLocalizableEntryId).HasColumnName("COPT_LocalizableEntry_Id");
                entity.Property(e => e.CoptName)
                    .HasMaxLength(250)
                    .HasColumnName("COPT_Name");
                entity.Property(e => e.CoptTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("COPT_TimeStamp");

                entity.HasOne(d => d.CoptLocalizableEntry).WithMany(p => p.CoverageProductTypes)
                    .HasForeignKey(d => d.CoptLocalizableEntryId)
                    .HasConstraintName("FK_CoverageProductTypes_LocalizableEntries");
            });

            modelBuilder.Entity<CreateVabhondaSalesInvoicesFromDossier>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CreateVABHondaSalesInvoicesFromDossier", "tmp");

                entity.Property(e => e.DossierNumber).HasMaxLength(20);
            });

            modelBuilder.Entity<CreditTransfer>(entity =>
            {
                entity.HasKey(e => e.CrtId);

                entity.ToTable("CreditTransfers", "fin", tb => tb.HasTrigger("CreditTransfers_RemapBNP"));

                entity.HasIndex(e => e.CrtCreditAmount, "IX_CreditTransfers_CreditAmount_INCL");

                entity.HasIndex(e => new { e.CrtBankAccountId, e.CrtCurrencyCode }, "IX_fin_CreditTransfers_BankAccount_Id_CurrencyCode__INCL");

                entity.HasIndex(e => e.CrtCurrencyCode, "IX_fin_CreditTransfers_CurrencyCode__INCL");

                entity.HasIndex(e => new { e.CrtEntrySystem, e.CrtEntryNumber }, "IX_fin_CreditTransfers_EntrySystem_EntryNumber");

                entity.Property(e => e.CrtId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CRT_Id");
                entity.Property(e => e.CrtAccountAddressLine1)
                    .HasMaxLength(250)
                    .HasColumnName("CRT_AccountAddressLine1");
                entity.Property(e => e.CrtAccountAddressLine2)
                    .HasMaxLength(250)
                    .HasColumnName("CRT_AccountAddressLine2");
                entity.Property(e => e.CrtAccountHolderName)
                    .HasMaxLength(250)
                    .HasColumnName("CRT_AccountHolderName");
                entity.Property(e => e.CrtAccountNumber)
                    .HasMaxLength(34)
                    .HasColumnName("CRT_AccountNumber");
                entity.Property(e => e.CrtBankAccountId).HasColumnName("CRT_BankAccount_Id");
                entity.Property(e => e.CrtBankId).HasColumnName("CRT_Bank_Id");
                entity.Property(e => e.CrtBankName)
                    .HasMaxLength(250)
                    .HasColumnName("CRT_BankName");
                entity.Property(e => e.CrtBic)
                    .HasMaxLength(11)
                    .HasColumnName("CRT_BIC");
                entity.Property(e => e.CrtCanceledCreditTransferId).HasColumnName("CRT_CanceledCreditTransfer_Id");
                entity.Property(e => e.CrtCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("CRT_CountryCode");
                entity.Property(e => e.CrtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CRT_CreatedBy");
                entity.Property(e => e.CrtCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CRT_CreatedDate");
                entity.Property(e => e.CrtCreditAmount)
                    .HasColumnType("money")
                    .HasColumnName("CRT_CreditAmount");
                entity.Property(e => e.CrtCurrencyCode)
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('EUR')")
                    .HasColumnName("CRT_CurrencyCode");
                entity.Property(e => e.CrtCurrentStatusCode)
                    .HasMaxLength(20)
                    .HasColumnName("CRT_CurrentStatusCode");
                entity.Property(e => e.CrtCurrentStatusHistoryId).HasColumnName("CRT_CurrentStatusHistory_Id");
                entity.Property(e => e.CrtCurrentStatusHistoryStartDate).HasColumnName("CRT_CurrentStatusHistoryStartDate");
                entity.Property(e => e.CrtEntryBatch)
                    .HasMaxLength(36)
                    .HasColumnName("CRT_EntryBatch");
                entity.Property(e => e.CrtEntryNumber)
                    .HasMaxLength(36)
                    .HasColumnName("CRT_EntryNumber");
                entity.Property(e => e.CrtEntrySystem)
                    .HasMaxLength(10)
                    .HasColumnName("CRT_EntrySystem");
                entity.Property(e => e.CrtExecutionDate)
                    .HasColumnType("date")
                    .HasColumnName("CRT_ExecutionDate");
                entity.Property(e => e.CrtIban)
                    .HasMaxLength(34)
                    .HasColumnName("CRT_IBAN");
                entity.Property(e => e.CrtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CRT_LastModifiedBy");
                entity.Property(e => e.CrtLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CRT_LastModifiedDate");
                entity.Property(e => e.CrtNumber)
                    .HasMaxLength(20)
                    .HasColumnName("CRT_Number");
                entity.Property(e => e.CrtRemittanceInformation)
                    .HasMaxLength(250)
                    .HasColumnName("CRT_RemittanceInformation");
                entity.Property(e => e.CrtTenantId).HasColumnName("CRT_Tenant_Id");
                entity.Property(e => e.CrtTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CRT_TimeStamp");
                entity.Property(e => e.CrtUrgentTransfer).HasColumnName("CRT_UrgentTransfer");

                entity.HasOne(d => d.CrtBankAccount).WithMany(p => p.CreditTransfers)
                    .HasForeignKey(d => d.CrtBankAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CreditTransfers_BankAccounts");

                entity.HasOne(d => d.CrtBank).WithMany(p => p.CreditTransfers)
                    .HasForeignKey(d => d.CrtBankId)
                    .HasConstraintName("FK_CreditTransfers_Banks");

                entity.HasOne(d => d.CrtCanceledCreditTransfer).WithMany(p => p.InverseCrtCanceledCreditTransfer)
                    .HasForeignKey(d => d.CrtCanceledCreditTransferId)
                    .HasConstraintName("FK_CreditTransfers_CanceledCreditTransfers");

                entity.HasOne(d => d.CrtTenant).WithMany(p => p.CreditTransfers)
                    .HasForeignKey(d => d.CrtTenantId)
                    .HasConstraintName("FK_CreditTransfers_Tenants");
            });

            modelBuilder.Entity<CreditTransferDossier>(entity =>
            {
                entity.HasKey(e => e.CtdId);

                entity.ToTable("CreditTransferDossiers", "fin");

                entity.HasIndex(e => new { e.CtdCreditTransferId, e.CtdDossierNumber }, "IX_fin_CreditTransferDossiers_CreditTransfer_DossierNumber__INCL");

                entity.Property(e => e.CtdId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CTD_Id");
                entity.Property(e => e.CtdAuditNotes)
                    .HasMaxLength(250)
                    .HasColumnName("CTD_AuditNotes");
                entity.Property(e => e.CtdClientProductCode)
                    .HasMaxLength(20)
                    .HasColumnName("CTD_ClientProductCode");
                entity.Property(e => e.CtdCounterPartyName)
                    .HasMaxLength(250)
                    .HasColumnName("CTD_CounterPartyName");
                entity.Property(e => e.CtdCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CTD_CreatedBy");
                entity.Property(e => e.CtdCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CTD_CreatedDate");
                entity.Property(e => e.CtdCreditTransferId).HasColumnName("CTD_CreditTransfer_Id");
                entity.Property(e => e.CtdDossierNumber)
                    .HasMaxLength(20)
                    .HasColumnName("CTD_DossierNumber");
                entity.Property(e => e.CtdDossierStatus)
                    .HasMaxLength(250)
                    .HasColumnName("CTD_DossierStatus");
                entity.Property(e => e.CtdIncidentDate).HasColumnName("CTD_IncidentDate");
                entity.Property(e => e.CtdIncidentDescription)
                    .HasMaxLength(250)
                    .HasColumnName("CTD_IncidentDescription");
                entity.Property(e => e.CtdIncidentNumber)
                    .HasMaxLength(128)
                    .HasColumnName("CTD_IncidentNumber");
                entity.Property(e => e.CtdInsuranceCoverageCode)
                    .HasMaxLength(10)
                    .HasColumnName("CTD_InsuranceCoverageCode");
                entity.Property(e => e.CtdInsurancePolicyNumber)
                    .HasMaxLength(20)
                    .HasColumnName("CTD_InsurancePolicyNumber");
                entity.Property(e => e.CtdInsuredDriverAge).HasColumnName("CTD_InsuredDriverAge");
                entity.Property(e => e.CtdInsuredDriverName)
                    .HasMaxLength(250)
                    .HasColumnName("CTD_InsuredDriverName");
                entity.Property(e => e.CtdInsuredPartyLicensePlate)
                    .HasMaxLength(20)
                    .HasColumnName("CTD_InsuredPartyLicensePlate");
                entity.Property(e => e.CtdInsuredPartyName)
                    .HasMaxLength(250)
                    .HasColumnName("CTD_InsuredPartyName");
                entity.Property(e => e.CtdInternalTextLine1)
                    .HasMaxLength(250)
                    .HasDefaultValueSql("((0))")
                    .HasColumnName("CTD_InternalTextLine1");
                entity.Property(e => e.CtdInternalTextLine2)
                    .HasMaxLength(250)
                    .HasColumnName("CTD_InternalTextLine2");
                entity.Property(e => e.CtdInvolvedPartyCity)
                    .HasMaxLength(250)
                    .HasColumnName("CTD_InvolvedPartyCity");
                entity.Property(e => e.CtdInvolvedPartyName)
                    .HasMaxLength(250)
                    .HasColumnName("CTD_InvolvedPartyName");
                entity.Property(e => e.CtdInvolvedPartyNotes)
                    .HasMaxLength(250)
                    .HasColumnName("CTD_InvolvedPartyNotes");
                entity.Property(e => e.CtdInvolvedPartyPostalCode)
                    .HasMaxLength(250)
                    .HasColumnName("CTD_InvolvedPartyPostalCode");
                entity.Property(e => e.CtdInvolvedPartyRoleCode)
                    .HasMaxLength(10)
                    .HasColumnName("CTD_InvolvedPartyRoleCode");
                entity.Property(e => e.CtdInvolvedPartyStreetName)
                    .HasMaxLength(250)
                    .HasColumnName("CTD_InvolvedPartyStreetName");
                entity.Property(e => e.CtdIsClientCheckingAccount)
                    .HasDefaultValueSql("((0))")
                    .HasColumnName("CTD_IsClientCheckingAccount");
                entity.Property(e => e.CtdIsInsuredLiable).HasColumnName("CTD_IsInsuredLiable");
                entity.Property(e => e.CtdLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CTD_LastModifiedBy");
                entity.Property(e => e.CtdLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CTD_LastModifiedDate");
                entity.Property(e => e.CtdPaymentToInvolvedPartyRoleCode)
                    .HasMaxLength(10)
                    .HasColumnName("CTD_PaymentToInvolvedPartyRoleCode");
                entity.Property(e => e.CtdTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CTD_TimeStamp");

                entity.HasOne(d => d.CtdCreditTransfer).WithMany(p => p.CreditTransferDossiers)
                    .HasForeignKey(d => d.CtdCreditTransferId)
                    .HasConstraintName("FK_CreditTransferDossiers_CreditTransfers");
            });

            modelBuilder.Entity<CreditTransferJournalEntryCreationsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CreditTransferJournalEntryCreationsView", "fin");

                entity.Property(e => e.CostCenterCode).HasMaxLength(10);
                entity.Property(e => e.CostUnitCode).HasMaxLength(10);
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Description).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GeneralLedgerId).HasMaxLength(20);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.JournalCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.LeadCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<CreditTransferJournalEntryLine>(entity =>
            {
                entity.HasKey(e => e.CjlId);

                entity.ToTable("CreditTransferJournalEntryLines", "fin");

                entity.HasIndex(e => new { e.CjlCreditTransferId, e.CjlJournalEntryLineId }, "IX_CreditTransferJournalEntryLines_CreditTransfer_JournalEntryLine_INCL");

                entity.HasIndex(e => new { e.CjlJournalEntryLineId, e.CjlCreditTransferId }, "IX_CreditTransferJournalEntryLines_JournalEntryLine_CreditTransfer_INCL");

                entity.HasIndex(e => e.CjlPurchaseInvoiceId, "IX_fin_CreditTransferJournalEntryLines_PurchaseInvoice_Id");

                entity.Property(e => e.CjlId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CJL_Id");
                entity.Property(e => e.CjlCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CJL_CreatedBy");
                entity.Property(e => e.CjlCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CJL_CreatedDate");
                entity.Property(e => e.CjlCreditTransferId).HasColumnName("CJL_CreditTransfer_Id");
                entity.Property(e => e.CjlJournalEntryLineId).HasColumnName("CJL_JournalEntryLine_Id");
                entity.Property(e => e.CjlLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CJL_LastModifiedBy");
                entity.Property(e => e.CjlLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CJL_LastModifiedDate");
                entity.Property(e => e.CjlPurchaseInvoiceId).HasColumnName("CJL_PurchaseInvoice_Id");
                entity.Property(e => e.CjlSalesInvoiceId).HasColumnName("CJL_SalesInvoice_Id");
                entity.Property(e => e.CjlTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CJL_TimeStamp");

                entity.HasOne(d => d.CjlCreditTransfer).WithMany(p => p.CreditTransferJournalEntryLines)
                    .HasForeignKey(d => d.CjlCreditTransferId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CreditTransferJournalEntryLines_CreditTransfers");

                entity.HasOne(d => d.CjlJournalEntryLine).WithMany(p => p.CreditTransferJournalEntryLines)
                    .HasForeignKey(d => d.CjlJournalEntryLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CreditTransferJournalEntryLines_JournalEntryLines");

                entity.HasOne(d => d.CjlPurchaseInvoice).WithMany(p => p.CreditTransferJournalEntryLines)
                    .HasForeignKey(d => d.CjlPurchaseInvoiceId)
                    .HasConstraintName("FK_CreditTransferJournalEntryLines_PurchaseInvoices");

                entity.HasOne(d => d.CjlSalesInvoice).WithMany(p => p.CreditTransferJournalEntryLines)
                    .HasForeignKey(d => d.CjlSalesInvoiceId)
                    .HasConstraintName("FK_CreditTransferJournalEntryLines_SalesInvoices");
            });

            modelBuilder.Entity<CreditTransferPurchaseInvoice>(entity =>
            {
                entity.HasKey(e => e.CtpId);

                entity.ToTable("CreditTransferPurchaseInvoices", "fin");

                entity.HasIndex(e => e.CtpCreditTransferId, "IX_CreditTransferPurchaseInvoices_CreditTransfer");

                entity.HasIndex(e => e.CtpPurchaseInvoiceId, "IX_fin_CreditTransferPurchaseInvoices_PurchaseInvoice__INCL");

                entity.Property(e => e.CtpId)
                    .ValueGeneratedNever()
                    .HasColumnName("CTP_Id");
                entity.Property(e => e.CtpCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CTP_CreatedBy");
                entity.Property(e => e.CtpCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CTP_CreatedDate");
                entity.Property(e => e.CtpCreditTransferId).HasColumnName("CTP_CreditTransfer_Id");
                entity.Property(e => e.CtpLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CTP_LastModifiedBy");
                entity.Property(e => e.CtpLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CTP_LastModifiedDate");
                entity.Property(e => e.CtpPurchaseInvoiceId).HasColumnName("CTP_PurchaseInvoice_Id");
                entity.Property(e => e.CtpTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CTP_TimeStamp");

                entity.HasOne(d => d.CtpCreditTransfer).WithMany(p => p.CreditTransferPurchaseInvoices)
                    .HasForeignKey(d => d.CtpCreditTransferId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CreditTransferPurchaseInvoices_CreditTransfers");

                entity.HasOne(d => d.CtpPurchaseInvoice).WithMany(p => p.CreditTransferPurchaseInvoices)
                    .HasForeignKey(d => d.CtpPurchaseInvoiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CreditTransferPurchaseInvoices_PurchaseInvoices");
            });

            modelBuilder.Entity<CreditTransferPurchaseInvoicesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CreditTransferPurchaseInvoicesView", "fin");

                entity.Property(e => e.BankAccountNumber).HasMaxLength(34);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditAmount).HasColumnType("money");
                entity.Property(e => e.CreditTransferNumber).HasMaxLength(20);
                entity.Property(e => e.CreditTransferStatus).HasMaxLength(20);
                entity.Property(e => e.CreditorName).HasMaxLength(756);
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.ExecutionDate).HasColumnType("date");
                entity.Property(e => e.InvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.PaymentBatchNumber).HasMaxLength(20);
                entity.Property(e => e.RemittanceInformation).HasMaxLength(250);
                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SupplierInvoiceDate).HasColumnType("date");
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.ToAccountHolderName).HasMaxLength(250);
                entity.Property(e => e.ToAccountNumber).HasMaxLength(34);
                entity.Property(e => e.ToBic)
                    .HasMaxLength(11)
                    .HasColumnName("ToBIC");
                entity.Property(e => e.ToIban)
                    .HasMaxLength(34)
                    .HasColumnName("ToIBAN");
            });

            modelBuilder.Entity<CreditTransferReconcilliation>(entity =>
            {
                entity.HasKey(e => e.CtrId);

                entity.ToTable("CreditTransferReconcilliations", "fin");

                entity.HasIndex(e => e.CtrCreditTransferId, "IX_CreditTransferReconcilliations_CreditTransfer");

                entity.Property(e => e.CtrId)
                    .ValueGeneratedNever()
                    .HasColumnName("CTR_Id");
                entity.Property(e => e.CtrBankStatementReconcilliationId).HasColumnName("CTR_BankStatementReconcilliation_Id");
                entity.Property(e => e.CtrCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CTR_CreatedBy");
                entity.Property(e => e.CtrCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CTR_CreatedDate");
                entity.Property(e => e.CtrCreditTransferId).HasColumnName("CTR_CreditTransfer_Id");
                entity.Property(e => e.CtrLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CTR_LastModifiedBy");
                entity.Property(e => e.CtrLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CTR_LastModifiedDate");
                entity.Property(e => e.CtrTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CTR_TimeStamp");

                entity.HasOne(d => d.CtrBankStatementReconcilliation).WithMany(p => p.CreditTransferReconcilliations)
                    .HasForeignKey(d => d.CtrBankStatementReconcilliationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CreditTransferReconcilliations_BankStatementReconcilliations");

                entity.HasOne(d => d.CtrCreditTransfer).WithMany(p => p.CreditTransferReconcilliations)
                    .HasForeignKey(d => d.CtrCreditTransferId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CreditTransferReconcilliations_CreditTransfers");
            });

            modelBuilder.Entity<CreditTransferRecoveryStatement>(entity =>
            {
                entity.HasKey(e => e.CtrId);

                entity.ToTable("CreditTransferRecoveryStatements", "fin");

                entity.Property(e => e.CtrId)
                    .ValueGeneratedNever()
                    .HasColumnName("CTR_Id");
                entity.Property(e => e.CtrCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CTR_CreatedBy");
                entity.Property(e => e.CtrCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CTR_CreatedDate");
                entity.Property(e => e.CtrCreditTransferId).HasColumnName("CTR_CreditTransfer_Id");
                entity.Property(e => e.CtrLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CTR_LastModifiedBy");
                entity.Property(e => e.CtrLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CTR_LastModifiedDate");
                entity.Property(e => e.CtrRecoveryStatementId).HasColumnName("CTR_RecoveryStatement_Id");
                entity.Property(e => e.CtrTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CTR_TimeStamp");

                entity.HasOne(d => d.CtrCreditTransfer).WithMany(p => p.CreditTransferRecoveryStatements)
                    .HasForeignKey(d => d.CtrCreditTransferId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CreditTransferRecoveryStatements_CreditTransfers");

                entity.HasOne(d => d.CtrRecoveryStatement).WithMany(p => p.CreditTransferRecoveryStatements)
                    .HasForeignKey(d => d.CtrRecoveryStatementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CreditTransferRecoveryStatements_RecoveryStatements");
            });

            modelBuilder.Entity<CreditTransferSalesInvoice>(entity =>
            {
                entity.HasKey(e => e.CtsId);

                entity.ToTable("CreditTransferSalesInvoices", "fin");

                entity.Property(e => e.CtsId)
                    .ValueGeneratedNever()
                    .HasColumnName("CTS_Id");
                entity.Property(e => e.CtsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CTS_CreatedBy");
                entity.Property(e => e.CtsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CTS_CreatedDate");
                entity.Property(e => e.CtsCreditTransferId).HasColumnName("CTS_CreditTransfer_Id");
                entity.Property(e => e.CtsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CTS_LastModifiedBy");
                entity.Property(e => e.CtsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CTS_LastModifiedDate");
                entity.Property(e => e.CtsSalesInvoiceId).HasColumnName("CTS_SalesInvoice_Id");
                entity.Property(e => e.CtsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CTS_TimeStamp");

                entity.HasOne(d => d.CtsCreditTransfer).WithMany(p => p.CreditTransferSalesInvoices)
                    .HasForeignKey(d => d.CtsCreditTransferId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CreditTransferSalesInvoices_CreditTransfers");

                entity.HasOne(d => d.CtsSalesInvoice).WithMany(p => p.CreditTransferSalesInvoices)
                    .HasForeignKey(d => d.CtsSalesInvoiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CreditTransferSalesInvoices_SalesInvoices");
            });

            modelBuilder.Entity<CreditTransferStatus>(entity =>
            {
                entity.HasKey(e => e.CtsId);

                entity.ToTable("CreditTransferStatuses", "fin");

                entity.Property(e => e.CtsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CTS_Id");
                entity.Property(e => e.CtsCode)
                    .HasMaxLength(10)
                    .HasColumnName("CTS_Code");
                entity.Property(e => e.CtsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CTS_CreatedBy");
                entity.Property(e => e.CtsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CTS_CreatedDate");
                entity.Property(e => e.CtsInactive).HasColumnName("CTS_Inactive");
                entity.Property(e => e.CtsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CTS_LastModifiedBy");
                entity.Property(e => e.CtsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CTS_LastModifiedDate");
                entity.Property(e => e.CtsLongName)
                    .HasMaxLength(250)
                    .HasColumnName("CTS_LongName");
                entity.Property(e => e.CtsShortName)
                    .HasMaxLength(20)
                    .HasColumnName("CTS_ShortName");
                entity.Property(e => e.CtsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CTS_TimeStamp");
            });

            modelBuilder.Entity<CreditTransferStatusHistory>(entity =>
            {
                entity.HasKey(e => e.CshId);

                entity.ToTable("CreditTransferStatusHistory", "fin", tb =>
                {
                    tb.HasTrigger("td_CreditTransferStatusHistory");
                    tb.HasTrigger("ti_CreditTransferStatusHistory");
                    tb.HasTrigger("tu_CreditTransferStatusHistory");
                });

                entity.HasIndex(e => e.CshCreditTransferId, "IX_fin_CreditTransferStatusHistory_CreditTransfer");

                entity.Property(e => e.CshId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CSH_Id");
                entity.Property(e => e.CshCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CSH_CreatedBy");
                entity.Property(e => e.CshCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CSH_CreatedDate");
                entity.Property(e => e.CshCreditTransferId).HasColumnName("CSH_CreditTransfer_Id");
                entity.Property(e => e.CshCreditTransferStatusId).HasColumnName("CSH_CreditTransferStatus_Id");
                entity.Property(e => e.CshLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CSH_LastModifiedBy");
                entity.Property(e => e.CshLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CSH_LastModifiedDate");
                entity.Property(e => e.CshStartDate).HasColumnName("CSH_StartDate");
                entity.Property(e => e.CshTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CSH_TimeStamp");

                entity.HasOne(d => d.CshCreditTransfer).WithMany(p => p.CreditTransferStatusHistories)
                    .HasForeignKey(d => d.CshCreditTransferId)
                    .HasConstraintName("FK_CreditTransferStatusHistory_CreditTransfers");

                entity.HasOne(d => d.CshCreditTransferStatus).WithMany(p => p.CreditTransferStatusHistories)
                    .HasForeignKey(d => d.CshCreditTransferStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CreditTransferStatusHistory_CreditTransferStatuses");
            });

            modelBuilder.Entity<CreditTransfersPayReadyPurchaseInvoicesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CreditTransfersPayReadyPurchaseInvoicesView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditAmount).HasColumnType("money");
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.ExecutionDate).HasColumnType("date");
                entity.Property(e => e.InvoiceNetAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LeadCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PaymentBatchType)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.PaymentCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.PaymentNumber).HasMaxLength(20);
                entity.Property(e => e.RecipientBic)
                    .HasMaxLength(11)
                    .HasColumnName("RecipientBIC");
                entity.Property(e => e.RecipientIban)
                    .HasMaxLength(34)
                    .HasColumnName("RecipientIBAN");
                entity.Property(e => e.RecipientName).HasMaxLength(250);
                entity.Property(e => e.RemittanceInformation).HasMaxLength(250);
                entity.Property(e => e.SelectedBy).HasMaxLength(4000);
                entity.Property(e => e.SignedAmount).HasColumnType("money");
                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SupplierName).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<CreditTransfersPayReadyView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CreditTransfersPayReadyView", "fin");

                entity.Property(e => e.AccountIban)
                    .HasMaxLength(34)
                    .HasColumnName("AccountIBAN");
                entity.Property(e => e.AccountName).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditAmount).HasColumnType("money");
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.ExecutionDate).HasColumnType("date");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.PaymentNumber).HasMaxLength(20);
                entity.Property(e => e.RecipientBic)
                    .HasMaxLength(11)
                    .HasColumnName("RecipientBIC");
                entity.Property(e => e.RecipientIban)
                    .HasMaxLength(34)
                    .HasColumnName("RecipientIBAN");
                entity.Property(e => e.RecipientName).HasMaxLength(250);
                entity.Property(e => e.RemittanceInformation).HasMaxLength(250);
                entity.Property(e => e.SelectedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<CreditTransfersPendingJournalEntryView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CreditTransfersPendingJournalEntryView", "fin");

                entity.Property(e => e.AccountAddressLine1).HasMaxLength(250);
                entity.Property(e => e.AccountAddressLine2).HasMaxLength(250);
                entity.Property(e => e.AccountHolderName).HasMaxLength(250);
                entity.Property(e => e.AccountNumber).HasMaxLength(34);
                entity.Property(e => e.BankName).HasMaxLength(250);
                entity.Property(e => e.Bic)
                    .HasMaxLength(11)
                    .HasColumnName("BIC");
                entity.Property(e => e.CreditAmount).HasColumnType("money");
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.ExecutionDate).HasColumnType("date");
                entity.Property(e => e.Iban)
                    .HasMaxLength(34)
                    .HasColumnName("IBAN");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.RemittanceInformation).HasMaxLength(250);
            });

            modelBuilder.Entity<CreditVabhondaSalesInvoice>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CreditVABHondaSalesInvoices", "tmp");
            });

            modelBuilder.Entity<Creditor>(entity =>
            {
                entity.HasKey(e => e.CdId);

                entity.ToTable("Creditors", "fin");

                entity.HasIndex(e => e.CdExactExportDate, "IX_fin_Creditors_ExactExportDate");

                entity.HasIndex(e => e.CdName, "IX_fin_Creditors_Name__INCL");

                entity.HasIndex(e => new { e.CdNumber, e.CdLegalEntityId }, "IX_fin_Creditors_Number_LegalEntity_Id__INCL");

                entity.HasIndex(e => new { e.CdNumber, e.CdName }, "IX_fin_Creditors_Number_Name__INCL");

                entity.Property(e => e.CdId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CD_Id");
                entity.Property(e => e.CdAddressId).HasColumnName("CD_Address_Id");
                entity.Property(e => e.CdBankAccountId).HasColumnName("CD_BankAccount_Id");
                entity.Property(e => e.CdBlockedAccountId).HasColumnName("CD_BlockedAccount_Id");
                entity.Property(e => e.CdChamberOfCommerceNumber)
                    .HasMaxLength(50)
                    .HasColumnName("CD_ChamberOfCommerceNumber");
                entity.Property(e => e.CdContactPersonEmail)
                    .HasMaxLength(250)
                    .HasColumnName("CD_ContactPersonEmail");
                entity.Property(e => e.CdContactPersonName)
                    .HasMaxLength(250)
                    .HasColumnName("CD_ContactPersonName");
                entity.Property(e => e.CdContactPersonPhone)
                    .HasMaxLength(50)
                    .HasColumnName("CD_ContactPersonPhone");
                entity.Property(e => e.CdCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CD_CreatedBy");
                entity.Property(e => e.CdCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CD_CreatedDate");
                entity.Property(e => e.CdDefaultSupplierId).HasColumnName("CD_DefaultSupplier_Id");
                entity.Property(e => e.CdEmail)
                    .HasMaxLength(250)
                    .HasColumnName("CD_Email");
                entity.Property(e => e.CdEntryBatch)
                    .HasMaxLength(36)
                    .HasColumnName("CD_EntryBatch");
                entity.Property(e => e.CdEntryNumber)
                    .HasMaxLength(36)
                    .HasColumnName("CD_EntryNumber");
                entity.Property(e => e.CdEntrySystem)
                    .HasMaxLength(10)
                    .HasColumnName("CD_EntrySystem");
                entity.Property(e => e.CdExactAccountCategoryId).HasColumnName("CD_ExactAccountCategory_Id");
                entity.Property(e => e.CdExactExportDate).HasColumnName("CD_ExactExportDate");
                entity.Property(e => e.CdExactPaymentMethod)
                    .HasMaxLength(10)
                    .HasColumnName("CD_ExactPaymentMethod");
                entity.Property(e => e.CdFax)
                    .HasMaxLength(20)
                    .HasColumnName("CD_Fax");
                entity.Property(e => e.CdGenderId).HasColumnName("CD_Gender_Id");
                entity.Property(e => e.CdHomePage)
                    .HasMaxLength(250)
                    .HasColumnName("CD_HomePage");
                entity.Property(e => e.CdInactive).HasColumnName("CD_Inactive");
                entity.Property(e => e.CdIsCompany).HasColumnName("CD_IsCompany");
                entity.Property(e => e.CdLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CD_LastModifiedBy");
                entity.Property(e => e.CdLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CD_LastModifiedDate");
                entity.Property(e => e.CdLedgerAccount)
                    .HasMaxLength(20)
                    .HasColumnName("CD_LedgerAccount");
                entity.Property(e => e.CdLegalEntityId).HasColumnName("CD_LegalEntity_Id");
                entity.Property(e => e.CdName)
                    .HasMaxLength(250)
                    .HasColumnName("CD_Name");
                entity.Property(e => e.CdName2)
                    .HasMaxLength(250)
                    .HasColumnName("CD_Name2");
                entity.Property(e => e.CdName3)
                    .HasMaxLength(250)
                    .HasColumnName("CD_Name3");
                entity.Property(e => e.CdNoVatNumber).HasColumnName("CD_NoVatNumber");
                entity.Property(e => e.CdNumber)
                    .HasMaxLength(20)
                    .HasColumnName("CD_Number");
                entity.Property(e => e.CdPhone)
                    .HasMaxLength(20)
                    .HasColumnName("CD_Phone");
                entity.Property(e => e.CdPhoneExt)
                    .HasMaxLength(10)
                    .HasColumnName("CD_PhoneExt");
                entity.Property(e => e.CdPostOfficeBoxId).HasColumnName("CD_PostOfficeBox_Id");
                entity.Property(e => e.CdPurchaseTaxCodeId)
                    .HasMaxLength(20)
                    .HasColumnName("CD_PurchaseTaxCode_Id");
                entity.Property(e => e.CdSearchText)
                    .HasMaxLength(20)
                    .HasColumnName("CD_SearchText");
                entity.Property(e => e.CdTenantId).HasColumnName("CD_Tenant_Id");
                entity.Property(e => e.CdTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CD_TimeStamp");
                entity.Property(e => e.CdVatNumber)
                    .HasMaxLength(50)
                    .HasColumnName("CD_VatNumber");

                entity.HasOne(d => d.CdAddress).WithMany(p => p.Creditors)
                    .HasForeignKey(d => d.CdAddressId)
                    .HasConstraintName("FK_Creditors_Addresses");

                entity.HasOne(d => d.CdBankAccount).WithMany(p => p.CreditorCdBankAccounts)
                    .HasForeignKey(d => d.CdBankAccountId)
                    .HasConstraintName("FK_Creditors_BankAccounts");

                entity.HasOne(d => d.CdBlockedAccount).WithMany(p => p.CreditorCdBlockedAccounts)
                    .HasForeignKey(d => d.CdBlockedAccountId)
                    .HasConstraintName("FK_Creditors_BlockedAccounts");

                entity.HasOne(d => d.CdDefaultSupplier).WithMany(p => p.Creditors)
                    .HasForeignKey(d => d.CdDefaultSupplierId)
                    .HasConstraintName("FK_Creditors_Suppliers");

                entity.HasOne(d => d.CdExactAccountCategory).WithMany(p => p.Creditors)
                    .HasForeignKey(d => d.CdExactAccountCategoryId)
                    .HasConstraintName("FK_Creditors_ExactAccountCategories");

                entity.HasOne(d => d.CdGender).WithMany(p => p.Creditors)
                    .HasForeignKey(d => d.CdGenderId)
                    .HasConstraintName("FK_Creditors_Genders");

                entity.HasOne(d => d.CdLegalEntity).WithMany(p => p.Creditors)
                    .HasForeignKey(d => d.CdLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Creditors_LegalEntities");

                entity.HasOne(d => d.CdPostOfficeBox).WithMany(p => p.Creditors)
                    .HasForeignKey(d => d.CdPostOfficeBoxId)
                    .HasConstraintName("FK_Creditors_PostOfficeBox");

                entity.HasOne(d => d.CdTenant).WithMany(p => p.Creditors)
                    .HasForeignKey(d => d.CdTenantId)
                    .HasConstraintName("FK_Creditors_Tenants");
            });

            modelBuilder.Entity<CreditorAccount>(entity =>
            {
                entity.HasKey(e => e.CraId);

                entity.ToTable("CreditorAccounts", "fin");

                entity.Property(e => e.CraId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CRA_Id");
                entity.Property(e => e.CraBankAccountId).HasColumnName("CRA_BankAccount_Id");
                entity.Property(e => e.CraCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CRA_CreatedBy");
                entity.Property(e => e.CraCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CRA_CreatedDate");
                entity.Property(e => e.CraCreditorId).HasColumnName("CRA_Creditor_Id");
                entity.Property(e => e.CraEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("CRA_EffectiveDate");
                entity.Property(e => e.CraLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CRA_LastModifiedBy");
                entity.Property(e => e.CraLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CRA_LastModifiedDate");
                entity.Property(e => e.CraTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("CRA_TerminationDate");
                entity.Property(e => e.CraTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CRA_TimeStamp");

                entity.HasOne(d => d.CraBankAccount).WithMany(p => p.CreditorAccounts)
                    .HasForeignKey(d => d.CraBankAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CreditorAccounts_BankAccounts");

                entity.HasOne(d => d.CraCreditor).WithMany(p => p.CreditorAccounts)
                    .HasForeignKey(d => d.CraCreditorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CreditorAccounts_Creditors");
            });

            modelBuilder.Entity<CreditorAttribute>(entity =>
            {
                entity.HasKey(e => e.CdaId);

                entity.ToTable("CreditorAttributes", "fin");

                entity.Property(e => e.CdaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CDA_Id");
                entity.Property(e => e.CdaAttributeContent)
                    .HasMaxLength(250)
                    .HasColumnName("CDA_AttributeContent");
                entity.Property(e => e.CdaAttributeName)
                    .HasMaxLength(50)
                    .HasColumnName("CDA_AttributeName");
                entity.Property(e => e.CdaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CDA_CreatedBy");
                entity.Property(e => e.CdaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CDA_CreatedDate");
                entity.Property(e => e.CdaCreditorId).HasColumnName("CDA_Creditor_Id");
                entity.Property(e => e.CdaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CDA_LastModifiedBy");
                entity.Property(e => e.CdaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CDA_LastModifiedDate");
                entity.Property(e => e.CdaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CDA_TimeStamp");

                entity.HasOne(d => d.CdaCreditor).WithMany(p => p.CreditorAttributes)
                    .HasForeignKey(d => d.CdaCreditorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CreditorAttributes_Creditors");
            });

            modelBuilder.Entity<CreditorOrganizationRelation>(entity =>
            {
                entity.HasKey(e => e.CorId);

                entity.ToTable("CreditorOrganizationRelations", "fin");

                entity.HasIndex(e => e.CorCreditorId, "IX_fin_CreditorOrganizationRelations_Creditor");

                entity.HasIndex(e => e.CorOrganizationUnitId, "IX_fin_CreditorOrganizationRelations_OrganizationUnit_Id");

                entity.Property(e => e.CorId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("COR_Id");
                entity.Property(e => e.CorCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("COR_CreatedBy");
                entity.Property(e => e.CorCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("COR_CreatedDate");
                entity.Property(e => e.CorCreditorId).HasColumnName("COR_Creditor_Id");
                entity.Property(e => e.CorEffectiveDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("COR_EffectiveDate");
                entity.Property(e => e.CorLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("COR_LastModifiedBy");
                entity.Property(e => e.CorLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("COR_LastModifiedDate");
                entity.Property(e => e.CorOrganizationUnitId).HasColumnName("COR_OrganizationUnit_Id");
                entity.Property(e => e.CorTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("COR_TerminationDate");
                entity.Property(e => e.CorTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("COR_TimeStamp");

                entity.HasOne(d => d.CorCreditor).WithMany(p => p.CreditorOrganizationRelations)
                    .HasForeignKey(d => d.CorCreditorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CreditorOrganizationRelations_Creditors");

                entity.HasOne(d => d.CorOrganizationUnit).WithMany(p => p.CreditorOrganizationRelations)
                    .HasForeignKey(d => d.CorOrganizationUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CreditorOrganizationRelations_OrganizationUnits");
            });

            modelBuilder.Entity<CreditorStatus>(entity =>
            {
                entity.HasKey(e => e.CdsId);

                entity.ToTable("CreditorStatuses", "fin");

                entity.Property(e => e.CdsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CDS_Id");
                entity.Property(e => e.CdsCode)
                    .HasMaxLength(20)
                    .HasColumnName("CDS_Code");
                entity.Property(e => e.CdsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CDS_CreatedBy");
                entity.Property(e => e.CdsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CDS_CreatedDate");
                entity.Property(e => e.CdsInactive).HasColumnName("CDS_Inactive");
                entity.Property(e => e.CdsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CDS_LastModifiedBy");
                entity.Property(e => e.CdsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CDS_LastModifiedDate");
                entity.Property(e => e.CdsLocalizableEntryId).HasColumnName("CDS_LocalizableEntry_Id");
                entity.Property(e => e.CdsLongName)
                    .HasMaxLength(250)
                    .HasColumnName("CDS_LongName");
                entity.Property(e => e.CdsShortName)
                    .HasMaxLength(30)
                    .HasColumnName("CDS_ShortName");
                entity.Property(e => e.CdsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CDS_TimeStamp");

                entity.HasOne(d => d.CdsLocalizableEntry).WithMany(p => p.CreditorStatuses)
                    .HasForeignKey(d => d.CdsLocalizableEntryId)
                    .HasConstraintName("FK_CreditorStatuses_LocalizableEntries");
            });

            modelBuilder.Entity<CreditorStatusHistory>(entity =>
            {
                entity.HasKey(e => e.CdshId);

                entity.ToTable("CreditorStatusHistory", "fin");

                entity.HasIndex(e => new { e.CdshCreditorId, e.CdshCreditorStatusId }, "IX_fin_CreditorStatusHistory_Creditor_CreditorStatus__INCL");

                entity.Property(e => e.CdshId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CDSH_Id");
                entity.Property(e => e.CdshCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CDSH_CreatedBy");
                entity.Property(e => e.CdshCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CDSH_CreatedDate");
                entity.Property(e => e.CdshCreditorId).HasColumnName("CDSH_Creditor_Id");
                entity.Property(e => e.CdshCreditorStatusId).HasColumnName("CDSH_CreditorStatus_Id");
                entity.Property(e => e.CdshEmployeeId).HasColumnName("CDSH_Employee_Id");
                entity.Property(e => e.CdshLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CDSH_LastModifiedBy");
                entity.Property(e => e.CdshLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CDSH_LastModifiedDate");
                entity.Property(e => e.CdshStartDate).HasColumnName("CDSH_StartDate");
                entity.Property(e => e.CdshStatusChangeReason).HasColumnName("CDSH_StatusChangeReason");
                entity.Property(e => e.CdshStatusSource).HasColumnName("CDSH_StatusSource");
                entity.Property(e => e.CdshTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CDSH_TimeStamp");

                entity.HasOne(d => d.CdshCreditor).WithMany(p => p.CreditorStatusHistories)
                    .HasForeignKey(d => d.CdshCreditorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CreditorStatusHistory_Creditors");

                entity.HasOne(d => d.CdshCreditorStatus).WithMany(p => p.CreditorStatusHistories)
                    .HasForeignKey(d => d.CdshCreditorStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CreditorStatusHistory_CreditorStatuses");

                entity.HasOne(d => d.CdshEmployee).WithMany(p => p.CreditorStatusHistories)
                    .HasForeignKey(d => d.CdshEmployeeId)
                    .HasConstraintName("FK_CreditorStatusHistory_Employees");
            });

            modelBuilder.Entity<CreditorTemplate>(entity =>
            {
                entity.HasKey(e => e.CdtId);

                entity.ToTable("CreditorTemplates", "fin");

                entity.HasIndex(e => e.CdtBusinessUnitId, "IX_CreditorTemplates_BusinessUnits");

                entity.HasIndex(e => new { e.CdtCreditorId, e.CdtBusinessUnitId, e.CdtDepartmentId, e.CdtTemplateId, e.CdtEffectiveDate }, "IX_CreditorTemplates_Creditors").IsUnique();

                entity.HasIndex(e => e.CdtDepartmentId, "IX_CreditorTemplates_Departments");

                entity.HasIndex(e => e.CdtTemplateId, "IX_CreditorTemplates_Templates");

                entity.Property(e => e.CdtId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CDT_Id");
                entity.Property(e => e.CdtBusinessUnitId).HasColumnName("CDT_BusinessUnit_Id");
                entity.Property(e => e.CdtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CDT_CreatedBy");
                entity.Property(e => e.CdtCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CDT_CreatedDate");
                entity.Property(e => e.CdtCreditorId).HasColumnName("CDT_Creditor_Id");
                entity.Property(e => e.CdtDepartmentId).HasColumnName("CDT_Department_Id");
                entity.Property(e => e.CdtEffectiveDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CDT_EffectiveDate");
                entity.Property(e => e.CdtEntrySystem)
                    .HasMaxLength(20)
                    .HasColumnName("CDT_EntrySystem");
                entity.Property(e => e.CdtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CDT_LastModifiedBy");
                entity.Property(e => e.CdtLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CDT_LastModifiedDate");
                entity.Property(e => e.CdtSupplierId).HasColumnName("CDT_Supplier_Id");
                entity.Property(e => e.CdtTemplateId).HasColumnName("CDT_Template_Id");
                entity.Property(e => e.CdtTerminationDate).HasColumnName("CDT_TerminationDate");
                entity.Property(e => e.CdtTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CDT_TimeStamp");

                entity.HasOne(d => d.CdtBusinessUnit).WithMany(p => p.CreditorTemplates)
                    .HasForeignKey(d => d.CdtBusinessUnitId)
                    .HasConstraintName("FK_CreditorTemplates_BusinessUnits");

                entity.HasOne(d => d.CdtCreditor).WithMany(p => p.CreditorTemplates)
                    .HasForeignKey(d => d.CdtCreditorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CreditorTemplates_Creditors");

                entity.HasOne(d => d.CdtDepartment).WithMany(p => p.CreditorTemplates)
                    .HasForeignKey(d => d.CdtDepartmentId)
                    .HasConstraintName("FK_CreditorTemplates_Departments");

                entity.HasOne(d => d.CdtSupplier).WithMany(p => p.CreditorTemplates)
                    .HasForeignKey(d => d.CdtSupplierId)
                    .HasConstraintName("FK_CreditorTemplates_Suppliers");

                entity.HasOne(d => d.CdtTemplate).WithMany(p => p.CreditorTemplates)
                    .HasForeignKey(d => d.CdtTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CreditorTemplates_Templates");
            });

            modelBuilder.Entity<CreditorsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CreditorsView", "fin");

                entity.Property(e => e.AccountNumber).HasMaxLength(34);
                entity.Property(e => e.AddressId).HasColumnName("Address_Id");
                entity.Property(e => e.BankAccountId).HasColumnName("BankAccount_Id");
                entity.Property(e => e.BankCountryCode).HasMaxLength(3);
                entity.Property(e => e.BankName).HasMaxLength(250);
                entity.Property(e => e.Bic).HasMaxLength(11);
                entity.Property(e => e.ChamberOfCommerceNumber).HasMaxLength(50);
                entity.Property(e => e.City).HasMaxLength(250);
                entity.Property(e => e.CountryCode).HasMaxLength(3);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Email).HasMaxLength(250);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.ExactAccountCategory).HasMaxLength(10);
                entity.Property(e => e.ExactAdministration).HasMaxLength(10);
                entity.Property(e => e.ExactPaymentMethod).HasMaxLength(10);
                entity.Property(e => e.Fax).HasMaxLength(20);
                entity.Property(e => e.HomePage).HasMaxLength(250);
                entity.Property(e => e.HouseNo).HasMaxLength(10);
                entity.Property(e => e.HouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.Iban).HasMaxLength(34);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LedgerAccount).HasMaxLength(20);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(20);
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.Phone).HasMaxLength(20);
                entity.Property(e => e.PhoneExt).HasMaxLength(10);
                entity.Property(e => e.PostalCode).HasMaxLength(10);
                entity.Property(e => e.Province).HasMaxLength(250);
                entity.Property(e => e.StreetName).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VatNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<CrossBorderClaimDossier>(entity =>
            {
                entity.HasKey(e => e.CbcId);

                entity.ToTable("CrossBorderClaimDossiers", "dos", tb => tb.HasTrigger("th_dos_CrossBorderClaimDossiers_TraceHistory"));

                entity.Property(e => e.CbcId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CBC_Id");
                entity.Property(e => e.CbcClientIncidentNumber)
                    .HasMaxLength(35)
                    .HasColumnName("CBC_ClientIncidentNumber");
                entity.Property(e => e.CbcClientInvoiceEmail)
                    .HasMaxLength(250)
                    .HasColumnName("CBC_ClientInvoiceEmail");
                entity.Property(e => e.CbcCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CBC_CreatedBy");
                entity.Property(e => e.CbcCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CBC_CreatedDate");
                entity.Property(e => e.CbcGreenCardNumber)
                    .HasMaxLength(20)
                    .HasColumnName("CBC_GreenCardNumber");
                entity.Property(e => e.CbcIncidentCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("CBC_IncidentCountryCode");
                entity.Property(e => e.CbcIncidentDate).HasColumnName("CBC_IncidentDate");
                entity.Property(e => e.CbcIsDomesticClaim).HasColumnName("CBC_IsDomesticClaim");
                entity.Property(e => e.CbcLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CBC_LastModifiedBy");
                entity.Property(e => e.CbcLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CBC_LastModifiedDate");
                entity.Property(e => e.CbcTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CBC_TimeStamp");

                entity.HasOne(d => d.Cbc).WithOne(p => p.CrossBorderClaimDossier)
                    .HasForeignKey<CrossBorderClaimDossier>(d => d.CbcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrossBorderClaimDossiers_Dossiers");
            });

            modelBuilder.Entity<CrossBorderClaimDossiersHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_CrossBorderClaimDossiers_History_ID");

                entity.ToTable("CrossBorderClaimDossiers_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.CbcClientIncidentNumber)
                    .HasMaxLength(35)
                    .HasColumnName("CBC_ClientIncidentNumber");
                entity.Property(e => e.CbcClientInvoiceEmail)
                    .HasMaxLength(250)
                    .HasColumnName("CBC_ClientInvoiceEmail");
                entity.Property(e => e.CbcCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CBC_CreatedBy");
                entity.Property(e => e.CbcCreatedDate).HasColumnName("CBC_CreatedDate");
                entity.Property(e => e.CbcGreenCardNumber)
                    .HasMaxLength(20)
                    .HasColumnName("CBC_GreenCardNumber");
                entity.Property(e => e.CbcId).HasColumnName("CBC_Id");
                entity.Property(e => e.CbcIncidentCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("CBC_IncidentCountryCode");
                entity.Property(e => e.CbcIncidentDate).HasColumnName("CBC_IncidentDate");
                entity.Property(e => e.CbcIsDomesticClaim).HasColumnName("CBC_IsDomesticClaim");
                entity.Property(e => e.CbcLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CBC_LastModifiedBy");
                entity.Property(e => e.CbcLastModifiedDate).HasColumnName("CBC_LastModifiedDate");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<CrossBorderClaimDossiersView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CrossBorderClaimDossiersView", "dos");

                entity.Property(e => e.AgentCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.AgentName).HasMaxLength(756);
                entity.Property(e => e.ApplicationName).HasMaxLength(255);
                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientIncidentNumber).HasMaxLength(35);
                entity.Property(e => e.ClientInvoiceEmail).HasMaxLength(250);
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.ContactPersonEmail).HasMaxLength(250);
                entity.Property(e => e.ContactPersonFullName).HasMaxLength(250);
                entity.Property(e => e.ContactPersonMobile).HasMaxLength(20);
                entity.Property(e => e.ContactPersonPhone).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.DepartmentName).HasMaxLength(756);
                entity.Property(e => e.DossierHandlerName).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierStatusCode).HasMaxLength(10);
                entity.Property(e => e.DossierStatusName).HasMaxLength(250);
                entity.Property(e => e.DossierTypeCode).HasMaxLength(10);
                entity.Property(e => e.DossierTypeName).HasMaxLength(250);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GreencardNumber).HasMaxLength(20);
                entity.Property(e => e.IncidentCountryCode).HasMaxLength(3);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(20);
                entity.Property(e => e.MandateCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.MandateName).HasMaxLength(756);
                entity.Property(e => e.ProductCode).HasMaxLength(20);
                entity.Property(e => e.ProductName).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Currency>(entity =>
            {
                entity.HasKey(e => e.CrrId);

                entity.ToTable("Currencies", "fin");

                entity.Property(e => e.CrrId)
                    .HasMaxLength(3)
                    .HasColumnName("CRR_Id");
                entity.Property(e => e.CrrCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CRR_CreatedBy");
                entity.Property(e => e.CrrCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CRR_CreatedDate");
                entity.Property(e => e.CrrExchangeAmount)
                    .HasDefaultValueSql("((1))")
                    .HasColumnType("money")
                    .HasColumnName("CRR_ExchangeAmount");
                entity.Property(e => e.CrrInactive).HasColumnName("CRR_Inactive");
                entity.Property(e => e.CrrLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CRR_LastModifiedBy");
                entity.Property(e => e.CrrLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CRR_LastModifiedDate");
                entity.Property(e => e.CrrLocalizableEntryId).HasColumnName("CRR_LocalizableEntry_Id");
                entity.Property(e => e.CrrName)
                    .HasMaxLength(250)
                    .HasColumnName("CRR_Name");
                entity.Property(e => e.CrrTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CRR_TimeStamp");

                entity.HasOne(d => d.CrrLocalizableEntry).WithMany(p => p.Currencies)
                    .HasForeignKey(d => d.CrrLocalizableEntryId)
                    .HasConstraintName("FK_Currencies_LocalizableEntries");
            });

            modelBuilder.Entity<CurrencyCountry>(entity =>
            {
                entity.HasKey(e => e.CucId);

                entity.ToTable("CurrencyCountries", "fin");

                entity.Property(e => e.CucId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("CUC_Id");
                entity.Property(e => e.CucCountryId)
                    .HasMaxLength(2)
                    .HasColumnName("CUC_Country_Id");
                entity.Property(e => e.CucCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CUC_CreatedBy");
                entity.Property(e => e.CucCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CUC_CreatedDate");
                entity.Property(e => e.CucCurrencyId)
                    .HasMaxLength(3)
                    .HasColumnName("CUC_Currency_Id");
                entity.Property(e => e.CucExchangeAmount)
                    .HasDefaultValueSql("((1))")
                    .HasColumnType("money")
                    .HasColumnName("CUC_ExchangeAmount");
                entity.Property(e => e.CucInactive).HasColumnName("CUC_Inactive");
                entity.Property(e => e.CucLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("CUC_LastModifiedBy");
                entity.Property(e => e.CucLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("CUC_LastModifiedDate");
                entity.Property(e => e.CucTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CUC_TimeStamp");

                entity.HasOne(d => d.CucCountry).WithMany(p => p.CurrencyCountries)
                    .HasForeignKey(d => d.CucCountryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CurrencyCountries_Countries");

                entity.HasOne(d => d.CucCurrency).WithMany(p => p.CurrencyCountries)
                    .HasForeignKey(d => d.CucCurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CurrencyCountries_Currencies");
            });

            modelBuilder.Entity<DamageLocation>(entity =>
            {
                entity.HasKey(e => e.DlId);

                entity.ToTable("DamageLocations", "pdc");

                entity.HasIndex(e => e.DlCode, "UX_pdc_DamageLocations_Code__Filtered")
                    .IsUnique()
                    .HasFilter("([DL_Inactive]=(0))");

                entity.Property(e => e.DlId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DL_Id");
                entity.Property(e => e.DlCode)
                    .HasMaxLength(10)
                    .HasColumnName("DL_Code");
                entity.Property(e => e.DlCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DL_CreatedBy");
                entity.Property(e => e.DlCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DL_CreatedDate");
                entity.Property(e => e.DlInactive).HasColumnName("DL_Inactive");
                entity.Property(e => e.DlLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DL_LastModifiedBy");
                entity.Property(e => e.DlLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DL_LastModifiedDate");
                entity.Property(e => e.DlLocalizableEntryId).HasColumnName("DL_LocalizableEntry_Id");
                entity.Property(e => e.DlLongName)
                    .HasMaxLength(250)
                    .HasColumnName("DL_LongName");
                entity.Property(e => e.DlShortName)
                    .HasMaxLength(20)
                    .HasColumnName("DL_ShortName");
                entity.Property(e => e.DlTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DL_TimeStamp");

                entity.HasOne(d => d.DlLocalizableEntry).WithMany(p => p.DamageLocations)
                    .HasForeignKey(d => d.DlLocalizableEntryId)
                    .HasConstraintName("FK_DamageLocations_LocalizableEntries");
            });

            modelBuilder.Entity<DamageReason>(entity =>
            {
                entity.HasKey(e => e.DrId);

                entity.ToTable("DamageReasons", "pdc");

                entity.Property(e => e.DrId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DR_Id");
                entity.Property(e => e.DrCode)
                    .HasMaxLength(10)
                    .HasColumnName("DR_Code");
                entity.Property(e => e.DrCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DR_CreatedBy");
                entity.Property(e => e.DrCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DR_CreatedDate");
                entity.Property(e => e.DrInactive).HasColumnName("DR_Inactive");
                entity.Property(e => e.DrIsMain).HasColumnName("DR_IsMain");
                entity.Property(e => e.DrLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DR_LastModifiedBy");
                entity.Property(e => e.DrLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DR_LastModifiedDate");
                entity.Property(e => e.DrLocalizableEntryId).HasColumnName("DR_LocalizableEntry_Id");
                entity.Property(e => e.DrLongName)
                    .HasMaxLength(250)
                    .HasColumnName("DR_LongName");
                entity.Property(e => e.DrShortName)
                    .HasMaxLength(20)
                    .HasColumnName("DR_ShortName");
                entity.Property(e => e.DrTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DR_TimeStamp");

                entity.HasOne(d => d.DrLocalizableEntry).WithMany(p => p.DamageReasons)
                    .HasForeignKey(d => d.DrLocalizableEntryId)
                    .HasConstraintName("FK_DamageReasons_LocalizableEntries");
            });

            modelBuilder.Entity<DamageReasonCause>(entity =>
            {
                entity.HasKey(e => e.DrcId);

                entity.ToTable("DamageReasonCauses", "pdc");

                entity.Property(e => e.DrcId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DRC_Id");
                entity.Property(e => e.DrcCauseId).HasColumnName("DRC_Cause_Id");
                entity.Property(e => e.DrcCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DRC_CreatedBy");
                entity.Property(e => e.DrcCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DRC_CreatedDate");
                entity.Property(e => e.DrcLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DRC_LastModifiedBy");
                entity.Property(e => e.DrcLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DRC_LastModifiedDate");
                entity.Property(e => e.DrcMainReasonId).HasColumnName("DRC_MainReason_Id");
                entity.Property(e => e.DrcSecondaryReasonId).HasColumnName("DRC_SecondaryReason_Id");
                entity.Property(e => e.DrcTertiaryReasonId).HasColumnName("DRC_TertiaryReason_Id");
                entity.Property(e => e.DrcTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DRC_TimeStamp");

                entity.HasOne(d => d.DrcCause).WithMany(p => p.DamageReasonCauseDrcCauses)
                    .HasForeignKey(d => d.DrcCauseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DamageReasonCauses_DamageReasons1");

                entity.HasOne(d => d.DrcMainReason).WithMany(p => p.DamageReasonCauseDrcMainReasons)
                    .HasForeignKey(d => d.DrcMainReasonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DamageReasonCauses_DamageReasons2");

                entity.HasOne(d => d.DrcSecondaryReason).WithMany(p => p.DamageReasonCauseDrcSecondaryReasons)
                    .HasForeignKey(d => d.DrcSecondaryReasonId)
                    .HasConstraintName("FK_DamageReasonCauses_DamageReasons3");

                entity.HasOne(d => d.DrcTertiaryReason).WithMany(p => p.DamageReasonCauseDrcTertiaryReasons)
                    .HasForeignKey(d => d.DrcTertiaryReasonId)
                    .HasConstraintName("FK_DamageReasonCauses_DamageReasons4");
            });

            modelBuilder.Entity<DamageReasonMapping>(entity =>
            {
                entity.HasKey(e => e.DrmId).HasName("PK__DamageRe__416948AD26C6C80A");

                entity.ToTable("DamageReasonMapping", "pros");

                entity.Property(e => e.DrmId)
                    .ValueGeneratedNever()
                    .HasColumnName("DRM_Id");
                entity.Property(e => e.DrmCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DRM_CreatedBy");
                entity.Property(e => e.DrmCreatedDate).HasColumnName("DRM_CreatedDate");
                entity.Property(e => e.DrmDefaultEis).HasColumnName("DRM_DefaultEIS");
                entity.Property(e => e.DrmDefaultProspect).HasColumnName("DRM_DefaultProspect");
                entity.Property(e => e.DrmEiscode).HasColumnName("DRM_EISCode");
                entity.Property(e => e.DrmLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DRM_LastModifiedBy");
                entity.Property(e => e.DrmLastModifiedDate).HasColumnName("DRM_LastModifiedDate");
                entity.Property(e => e.DrmProspectCode).HasColumnName("DRM_ProspectCode");
                entity.Property(e => e.DrmTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DRM_TimeStamp");
            });

            modelBuilder.Entity<DamageReasonRelation>(entity =>
            {
                entity.HasKey(e => e.DrhId);

                entity.ToTable("DamageReasonRelations", "pdc");

                entity.Property(e => e.DrhId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DRH_Id");
                entity.Property(e => e.DrhChildDamageReasonId).HasColumnName("DRH_ChildDamageReason_Id");
                entity.Property(e => e.DrhCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DRH_CreatedBy");
                entity.Property(e => e.DrhCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DRH_CreatedDate");
                entity.Property(e => e.DrhEndDate)
                    .HasColumnType("date")
                    .HasColumnName("DRH_EndDate");
                entity.Property(e => e.DrhLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DRH_LastModifiedBy");
                entity.Property(e => e.DrhLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DRH_LastModifiedDate");
                entity.Property(e => e.DrhParentDamageReasonId).HasColumnName("DRH_ParentDamageReason_Id");
                entity.Property(e => e.DrhStartDate)
                    .HasColumnType("date")
                    .HasColumnName("DRH_StartDate");
                entity.Property(e => e.DrhTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DRH_TimeStamp");

                entity.HasOne(d => d.DrhChildDamageReason).WithMany(p => p.DamageReasonRelationDrhChildDamageReasons)
                    .HasForeignKey(d => d.DrhChildDamageReasonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DamageReasonRelations_ChildDamageReasons");

                entity.HasOne(d => d.DrhParentDamageReason).WithMany(p => p.DamageReasonRelationDrhParentDamageReasons)
                    .HasForeignKey(d => d.DrhParentDamageReasonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DamageReasonHierarchy_ParentDamageReasons");
            });

            modelBuilder.Entity<DamageReasonType>(entity =>
            {
                entity.HasKey(e => e.DrtId);

                entity.ToTable("DamageReasonTypes", "pdc");

                entity.Property(e => e.DrtId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DRT_Id");
                entity.Property(e => e.DrtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DRT_CreatedBy");
                entity.Property(e => e.DrtCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DRT_CreatedDate");
                entity.Property(e => e.DrtGroup).HasColumnName("DRT_Group");
                entity.Property(e => e.DrtInactive).HasColumnName("DRT_Inactive");
                entity.Property(e => e.DrtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DRT_LastModifiedBy");
                entity.Property(e => e.DrtLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DRT_LastModifiedDate");
                entity.Property(e => e.DrtLocalizableEntryId).HasColumnName("DRT_LocalizableEntry_Id");
                entity.Property(e => e.DrtName)
                    .HasMaxLength(250)
                    .HasColumnName("DRT_Name");
                entity.Property(e => e.DrtTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DRT_TimeStamp");

                entity.HasOne(d => d.DrtLocalizableEntry).WithMany(p => p.DamageReasonTypes)
                    .HasForeignKey(d => d.DrtLocalizableEntryId)
                    .HasConstraintName("FK_DamageReasonTypes_LocalizableEntries");
            });

            modelBuilder.Entity<Dbaudit>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToTable("DBAudit", "dba");

                entity.Property(e => e.ApplicationName).HasMaxLength(250);
                entity.Property(e => e.DatabaseName).HasMaxLength(250);
                entity.Property(e => e.EventType).HasMaxLength(250);
                entity.Property(e => e.HostName).HasMaxLength(250);
                entity.Property(e => e.LoginName).HasMaxLength(250);
                entity.Property(e => e.ObjectType).HasMaxLength(250);
                entity.Property(e => e.PostTime).HasMaxLength(100);
                entity.Property(e => e.SchemaName).HasMaxLength(100);
                entity.Property(e => e.ServerName).HasMaxLength(250);
                entity.Property(e => e.Spid)
                    .HasMaxLength(100)
                    .HasColumnName("SPID");
                entity.Property(e => e.UserName).HasMaxLength(250);
            });

            modelBuilder.Entity<DebitSalesOrderToPurchaseMappingView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DebitSalesOrderToPurchaseMappingView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
            });

            modelBuilder.Entity<Debtor>(entity =>
            {
                entity.HasKey(e => e.DbId);

                entity.ToTable("Debtors", "fin");

                entity.HasIndex(e => new { e.DbNumber, e.DbLegalEntityId }, "IX_Debtors_UniqueNumberPerLegalEntity").IsUnique();

                entity.HasIndex(e => e.DbExactExportDate, "IX_fin_Debtors_ExactExportDate");

                entity.HasIndex(e => e.DbName, "IX_fin_Debtors_Name");

                entity.Property(e => e.DbId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DB_Id");
                entity.Property(e => e.DbAddressId).HasColumnName("DB_Address_Id");
                entity.Property(e => e.DbAutoAuthorizeChargedExpensesOrders).HasColumnName("DB_AutoAuthorizeChargedExpensesOrders");
                entity.Property(e => e.DbAutoAuthorizeFeeOrders).HasColumnName("DB_AutoAuthorizeFeeOrders");
                entity.Property(e => e.DbBankAccountId).HasColumnName("DB_BankAccount_Id");
                entity.Property(e => e.DbChamberOfCommerceNumber)
                    .HasMaxLength(50)
                    .HasColumnName("DB_ChamberOfCommerceNumber");
                entity.Property(e => e.DbContactPersonEmail)
                    .HasMaxLength(250)
                    .HasColumnName("DB_ContactPersonEmail");
                entity.Property(e => e.DbContactPersonName)
                    .HasMaxLength(250)
                    .HasColumnName("DB_ContactPersonName");
                entity.Property(e => e.DbContactPersonPhone)
                    .HasMaxLength(50)
                    .HasColumnName("DB_ContactPersonPhone");
                entity.Property(e => e.DbCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DB_CreatedBy");
                entity.Property(e => e.DbCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DB_CreatedDate");
                entity.Property(e => e.DbDefaultClientId).HasColumnName("DB_DefaultClient_Id");
                entity.Property(e => e.DbEmail)
                    .HasMaxLength(250)
                    .HasColumnName("DB_Email");
                entity.Property(e => e.DbEntryBatch)
                    .HasMaxLength(36)
                    .HasColumnName("DB_EntryBatch");
                entity.Property(e => e.DbEntryNumber)
                    .HasMaxLength(36)
                    .HasColumnName("DB_EntryNumber");
                entity.Property(e => e.DbEntrySystem)
                    .HasMaxLength(10)
                    .HasColumnName("DB_EntrySystem");
                entity.Property(e => e.DbExactAccountCategoryId).HasColumnName("DB_ExactAccountCategory_Id");
                entity.Property(e => e.DbExactExportDate).HasColumnName("DB_ExactExportDate");
                entity.Property(e => e.DbFax)
                    .HasMaxLength(20)
                    .HasColumnName("DB_Fax");
                entity.Property(e => e.DbGenderId).HasColumnName("DB_Gender_Id");
                entity.Property(e => e.DbHomePage)
                    .HasMaxLength(250)
                    .HasColumnName("DB_HomePage");
                entity.Property(e => e.DbInactive).HasColumnName("DB_Inactive");
                entity.Property(e => e.DbInvoiceDeliveryMethodId)
                    .HasMaxLength(20)
                    .HasColumnName("DB_InvoiceDeliveryMethod_Id");
                entity.Property(e => e.DbIsCompany).HasColumnName("DB_IsCompany");
                entity.Property(e => e.DbIsContracted)
                    .IsRequired()
                    .HasDefaultValueSql("((1))")
                    .HasColumnName("DB_IsContracted");
                entity.Property(e => e.DbLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DB_LastModifiedBy");
                entity.Property(e => e.DbLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DB_LastModifiedDate");
                entity.Property(e => e.DbLedgerAccount)
                    .HasMaxLength(20)
                    .HasColumnName("DB_LedgerAccount");
                entity.Property(e => e.DbLegalEntityId).HasColumnName("DB_LegalEntity_Id");
                entity.Property(e => e.DbName)
                    .HasMaxLength(250)
                    .HasColumnName("DB_Name");
                entity.Property(e => e.DbName2)
                    .HasMaxLength(250)
                    .HasColumnName("DB_Name2");
                entity.Property(e => e.DbName3)
                    .HasMaxLength(250)
                    .HasColumnName("DB_Name3");
                entity.Property(e => e.DbNoVatNumber).HasColumnName("DB_NoVatNumber");
                entity.Property(e => e.DbNumber)
                    .HasMaxLength(20)
                    .HasColumnName("DB_Number");
                entity.Property(e => e.DbPeriodId).HasColumnName("DB_Period_Id");
                entity.Property(e => e.DbPhone)
                    .HasMaxLength(20)
                    .HasColumnName("DB_Phone");
                entity.Property(e => e.DbPhoneExt)
                    .HasMaxLength(10)
                    .HasColumnName("DB_PhoneExt");
                entity.Property(e => e.DbPostOfficeBoxId).HasColumnName("DB_PostOfficeBox_Id");
                entity.Property(e => e.DbSalesCollectionEmail)
                    .HasMaxLength(250)
                    .HasColumnName("DB_SalesCollectionEmail");
                entity.Property(e => e.DbSalesCollectionEnabled).HasColumnName("DB_SalesCollectionEnabled");
                entity.Property(e => e.DbSalesTaxCodeId)
                    .HasMaxLength(20)
                    .HasColumnName("DB_SalesTaxCode_Id");
                entity.Property(e => e.DbSearchText)
                    .HasMaxLength(20)
                    .HasColumnName("DB_SearchText");
                entity.Property(e => e.DbSummaryStatementAutoCreated)
                    .HasDefaultValueSql("((0))")
                    .HasColumnName("DB_SummaryStatementAutoCreated");
                entity.Property(e => e.DbSummaryStatementCreationMethodId)
                    .HasMaxLength(250)
                    .HasColumnName("DB_SummaryStatementCreationMethod_Id");
                entity.Property(e => e.DbSummaryStatementEmailAddresses)
                    .HasMaxLength(250)
                    .HasColumnName("DB_SummaryStatementEmailAddresses");
                entity.Property(e => e.DbTenantId).HasColumnName("DB_Tenant_Id");
                entity.Property(e => e.DbTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DB_TimeStamp");
                entity.Property(e => e.DbVatNumber)
                    .HasMaxLength(50)
                    .HasColumnName("DB_VatNumber");

                entity.HasOne(d => d.DbAddress).WithMany(p => p.Debtors)
                    .HasForeignKey(d => d.DbAddressId)
                    .HasConstraintName("FK_Debtors_Addresses");

                entity.HasOne(d => d.DbBankAccount).WithMany(p => p.Debtors)
                    .HasForeignKey(d => d.DbBankAccountId)
                    .HasConstraintName("FK_Debtors_BankAccounts");

                entity.HasOne(d => d.DbDefaultClient).WithMany(p => p.Debtors)
                    .HasForeignKey(d => d.DbDefaultClientId)
                    .HasConstraintName("FK_Debtors_Clients");

                entity.HasOne(d => d.DbExactAccountCategory).WithMany(p => p.Debtors)
                    .HasForeignKey(d => d.DbExactAccountCategoryId)
                    .HasConstraintName("FK_Debtors_ExactAccountCategories");

                entity.HasOne(d => d.DbGender).WithMany(p => p.Debtors)
                    .HasForeignKey(d => d.DbGenderId)
                    .HasConstraintName("FK_Debtors_Genders");

                entity.HasOne(d => d.DbInvoiceDeliveryMethod).WithMany(p => p.Debtors)
                    .HasForeignKey(d => d.DbInvoiceDeliveryMethodId)
                    .HasConstraintName("FK_Debtors_InvoiceDeliveryMethods");

                entity.HasOne(d => d.DbLegalEntity).WithMany(p => p.Debtors)
                    .HasForeignKey(d => d.DbLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Debtors_LegalEntities");

                entity.HasOne(d => d.DbPeriod).WithMany(p => p.Debtors)
                    .HasForeignKey(d => d.DbPeriodId)
                    .HasConstraintName("FK_Debtors_SummaryStatementPeriods");

                entity.HasOne(d => d.DbPostOfficeBox).WithMany(p => p.Debtors)
                    .HasForeignKey(d => d.DbPostOfficeBoxId)
                    .HasConstraintName("FK_Debtors_PostOfficeBox");

                entity.HasOne(d => d.DbSummaryStatementCreationMethod).WithMany(p => p.Debtors)
                    .HasForeignKey(d => d.DbSummaryStatementCreationMethodId)
                    .HasConstraintName("FK_Debtors_SummaryStatementCreationMethod");

                entity.HasOne(d => d.DbTenant).WithMany(p => p.Debtors)
                    .HasForeignKey(d => d.DbTenantId)
                    .HasConstraintName("FK_Debtors_Tenants");
            });

            modelBuilder.Entity<DebtorAccount>(entity =>
            {
                entity.HasKey(e => e.DeaId);

                entity.ToTable("DebtorAccounts", "fin");

                entity.Property(e => e.DeaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DEA_Id");
                entity.Property(e => e.DeaBankAccountId).HasColumnName("DEA_BankAccount_Id");
                entity.Property(e => e.DeaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DEA_CreatedBy");
                entity.Property(e => e.DeaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DEA_CreatedDate");
                entity.Property(e => e.DeaDebtorId).HasColumnName("DEA_Debtor_Id");
                entity.Property(e => e.DeaEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("DEA_EffectiveDate");
                entity.Property(e => e.DeaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DEA_LastModifiedBy");
                entity.Property(e => e.DeaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DEA_LastModifiedDate");
                entity.Property(e => e.DeaTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("DEA_TerminationDate");
                entity.Property(e => e.DeaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DEA_TimeStamp");

                entity.HasOne(d => d.DeaBankAccount).WithMany(p => p.DebtorAccounts)
                    .HasForeignKey(d => d.DeaBankAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DebtorAccounts_BankAccounts");

                entity.HasOne(d => d.DeaDebtor).WithMany(p => p.DebtorAccounts)
                    .HasForeignKey(d => d.DeaDebtorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DebtorAccounts_Debtors");
            });

            modelBuilder.Entity<DebtorAttribute>(entity =>
            {
                entity.HasKey(e => e.DbaId);

                entity.ToTable("DebtorAttributes", "fin");

                entity.Property(e => e.DbaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DBA_Id");
                entity.Property(e => e.DbaAttributeContent)
                    .HasMaxLength(250)
                    .HasColumnName("DBA_AttributeContent");
                entity.Property(e => e.DbaAttributeName)
                    .HasMaxLength(50)
                    .HasColumnName("DBA_AttributeName");
                entity.Property(e => e.DbaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DBA_CreatedBy");
                entity.Property(e => e.DbaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DBA_CreatedDate");
                entity.Property(e => e.DbaDebtorId).HasColumnName("DBA_Debtor_Id");
                entity.Property(e => e.DbaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DBA_LastModifiedBy");
                entity.Property(e => e.DbaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DBA_LastModifiedDate");
                entity.Property(e => e.DbaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DBA_TimeStamp");

                entity.HasOne(d => d.DbaDebtor).WithMany(p => p.DebtorAttributes)
                    .HasForeignKey(d => d.DbaDebtorId)
                    .HasConstraintName("FK_DebtorAttributes_Debtors");
            });

            modelBuilder.Entity<DebtorOrganizationRelation>(entity =>
            {
                entity.HasKey(e => e.DorId);

                entity.ToTable("DebtorOrganizationRelations", "fin");

                entity.HasIndex(e => new { e.DorOrganizationUnitId, e.DorClientMandateId, e.DorProductId }, "IX_DebtorOrganizationRelations_OU_Product");

                entity.Property(e => e.DorId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DOR_Id");
                entity.Property(e => e.DorClientMandateId).HasColumnName("DOR_ClientMandate_Id");
                entity.Property(e => e.DorCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOR_CreatedBy");
                entity.Property(e => e.DorCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DOR_CreatedDate");
                entity.Property(e => e.DorDebtorId).HasColumnName("DOR_Debtor_Id");
                entity.Property(e => e.DorEffectiveDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DOR_EffectiveDate");
                entity.Property(e => e.DorInactive).HasColumnName("DOR_Inactive");
                entity.Property(e => e.DorLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOR_LastModifiedBy");
                entity.Property(e => e.DorLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DOR_LastModifiedDate");
                entity.Property(e => e.DorOrganizationUnitId).HasColumnName("DOR_OrganizationUnit_Id");
                entity.Property(e => e.DorProductId).HasColumnName("DOR_Product_Id");
                entity.Property(e => e.DorSummaryEmail)
                    .HasMaxLength(50)
                    .HasColumnName("DOR_SummaryEmail");
                entity.Property(e => e.DorTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DOR_TimeStamp");

                entity.HasOne(d => d.DorClientMandate).WithMany(p => p.DebtorOrganizationRelations)
                    .HasForeignKey(d => d.DorClientMandateId)
                    .HasConstraintName("FK_DebtorOrganizationRelations_ClientMandates");

                entity.HasOne(d => d.DorDebtor).WithMany(p => p.DebtorOrganizationRelations)
                    .HasForeignKey(d => d.DorDebtorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DebtorOrganizationRelations_Debtors");

                entity.HasOne(d => d.DorOrganizationUnit).WithMany(p => p.DebtorOrganizationRelations)
                    .HasForeignKey(d => d.DorOrganizationUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DebtorOrganizationRelations_OrganizationUnits");

                entity.HasOne(d => d.DorProduct).WithMany(p => p.DebtorOrganizationRelations)
                    .HasForeignKey(d => d.DorProductId)
                    .HasConstraintName("FK_DebtorOrganizationRelations_Products");
            });

            modelBuilder.Entity<DebtorOrganizationRelationsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DebtorOrganizationRelationsView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DebtorChamberOfCommerceNumber).HasMaxLength(50);
                entity.Property(e => e.DebtorName).HasMaxLength(756);
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.DebtorPhone).HasMaxLength(20);
                entity.Property(e => e.DebtorVatNumber).HasMaxLength(50);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.ProductCode).HasMaxLength(20);
                entity.Property(e => e.ProductName).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<DebtorOrganizationSummaryStatement>(entity =>
            {
                entity.HasKey(e => e.DorssId).HasName("PK__DebtorOr__63D56EE38EAB4A0C");

                entity.ToTable("DebtorOrganizationSummaryStatements", "fin");

                entity.Property(e => e.DorssId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DORSS_Id");
                entity.Property(e => e.DorssCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DORSS_CreatedBy");
                entity.Property(e => e.DorssCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DORSS_CreatedDate");
                entity.Property(e => e.DorssDebtorOrganizationRelationId).HasColumnName("DORSS_DebtorOrganizationRelation_Id");
                entity.Property(e => e.DorssInactive).HasColumnName("DORSS_Inactive");
                entity.Property(e => e.DorssLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DORSS_LastModifiedBy");
                entity.Property(e => e.DorssLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DORSS_LastModifiedDate");
                entity.Property(e => e.DorssProductId).HasColumnName("DORSS_Product_Id");
                entity.Property(e => e.DorssTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DORSS_TimeStamp");

                entity.HasOne(d => d.DorssDebtorOrganizationRelation).WithMany(p => p.DebtorOrganizationSummaryStatements)
                    .HasForeignKey(d => d.DorssDebtorOrganizationRelationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__DebtorOrg__DORSS__7015537F");

                entity.HasOne(d => d.DorssProduct).WithMany(p => p.DebtorOrganizationSummaryStatements)
                    .HasForeignKey(d => d.DorssProductId)
                    .HasConstraintName("FK__DebtorOrg__DORSS__710977B8");
            });

            modelBuilder.Entity<DebtorPaymentConditionsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DebtorPaymentConditionsView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<DebtorStatus>(entity =>
            {
                entity.HasKey(e => e.DbsId);

                entity.ToTable("DebtorStatuses", "fin");

                entity.Property(e => e.DbsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DBS_Id");
                entity.Property(e => e.DbsCode)
                    .HasMaxLength(20)
                    .HasColumnName("DBS_Code");
                entity.Property(e => e.DbsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DBS_CreatedBy");
                entity.Property(e => e.DbsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DBS_CreatedDate");
                entity.Property(e => e.DbsInactive).HasColumnName("DBS_Inactive");
                entity.Property(e => e.DbsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DBS_LastModifiedBy");
                entity.Property(e => e.DbsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DBS_LastModifiedDate");
                entity.Property(e => e.DbsLocalizableEntryId).HasColumnName("DBS_LocalizableEntry_Id");
                entity.Property(e => e.DbsLongName)
                    .HasMaxLength(250)
                    .HasColumnName("DBS_LongName");
                entity.Property(e => e.DbsShortName)
                    .HasMaxLength(30)
                    .HasColumnName("DBS_ShortName");
                entity.Property(e => e.DbsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DBS_TimeStamp");

                entity.HasOne(d => d.DbsLocalizableEntry).WithMany(p => p.DebtorStatuses)
                    .HasForeignKey(d => d.DbsLocalizableEntryId)
                    .HasConstraintName("FK_DebtorStatuses_LocalizableEntries");
            });

            modelBuilder.Entity<DebtorStatusHistory>(entity =>
            {
                entity.HasKey(e => e.DbshId);

                entity.ToTable("DebtorStatusHistory", "fin");

                entity.Property(e => e.DbshId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DBSH_Id");
                entity.Property(e => e.DbshCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DBSH_CreatedBy");
                entity.Property(e => e.DbshCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DBSH_CreatedDate");
                entity.Property(e => e.DbshDebtorId).HasColumnName("DBSH_Debtor_Id");
                entity.Property(e => e.DbshDebtorStatusId).HasColumnName("DBSH_DebtorStatus_Id");
                entity.Property(e => e.DbshEmployeeId).HasColumnName("DBSH_Employee_Id");
                entity.Property(e => e.DbshLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DBSH_LastModifiedBy");
                entity.Property(e => e.DbshLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DBSH_LastModifiedDate");
                entity.Property(e => e.DbshStartDate).HasColumnName("DBSH_StartDate");
                entity.Property(e => e.DbshStatusChangeReason).HasColumnName("DBSH_StatusChangeReason");
                entity.Property(e => e.DbshStatusSource).HasColumnName("DBSH_StatusSource");
                entity.Property(e => e.DbshTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DBSH_TimeStamp");

                entity.HasOne(d => d.DbshDebtor).WithMany(p => p.DebtorStatusHistories)
                    .HasForeignKey(d => d.DbshDebtorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DebtorStatusHistory_Debtors");

                entity.HasOne(d => d.DbshDebtorStatus).WithMany(p => p.DebtorStatusHistories)
                    .HasForeignKey(d => d.DbshDebtorStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DebtorStatusHistory_DebtorStatuses");

                entity.HasOne(d => d.DbshEmployee).WithMany(p => p.DebtorStatusHistories)
                    .HasForeignKey(d => d.DbshEmployeeId)
                    .HasConstraintName("FK_DebtorStatusHistory_Employees");
            });

            modelBuilder.Entity<DebtorSummaryLayout>(entity =>
            {
                entity.HasKey(e => e.DbslId);

                entity.ToTable("DebtorSummaryLayout", "fin");

                entity.Property(e => e.DbslId)
                    .ValueGeneratedNever()
                    .HasColumnName("DBSL_Id");
                entity.Property(e => e.DbslCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DBSL_CreatedBy");
                entity.Property(e => e.DbslCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DBSL_CreatedDate");
                entity.Property(e => e.DbslDebtorId).HasColumnName("DBSL_Debtor_Id");
                entity.Property(e => e.DbslEmailBody).HasColumnName("DBSL_EmailBody");
                entity.Property(e => e.DbslEndDate).HasColumnName("DBSL_EndDate");
                entity.Property(e => e.DbslFrontPageFormat).HasColumnName("DBSL_FrontPageFormat");
                entity.Property(e => e.DbslFrontPageLayout).HasColumnName("DBSL_FrontPageLayout");
                entity.Property(e => e.DbslLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DBSL_LastModifiedBy");
                entity.Property(e => e.DbslLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DBSL_LastModifiedDate");
                entity.Property(e => e.DbslSentMethod)
                    .HasMaxLength(20)
                    .HasColumnName("DBSL_SentMethod");
                entity.Property(e => e.DbslSpecificationFormat).HasColumnName("DBSL_SpecificationFormat");
                entity.Property(e => e.DbslSpecificationLayout).HasColumnName("DBSL_SpecificationLayout");
                entity.Property(e => e.DbslStartDate).HasColumnName("DBSL_StartDate");
                entity.Property(e => e.DbslTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DBSL_TimeStamp");

                entity.HasOne(d => d.DbslDebtor).WithMany(p => p.DebtorSummaryLayouts)
                    .HasForeignKey(d => d.DbslDebtorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DebSummLayoutDebtors");
            });

            modelBuilder.Entity<DebtorTemplate>(entity =>
            {
                entity.HasKey(e => e.DbtId);

                entity.ToTable("DebtorTemplates", "fin");

                entity.HasIndex(e => e.DbtBusinessUnitId, "IX_DebtorTemplates_BusinessUnits");

                entity.HasIndex(e => new { e.DbtDebtorId, e.DbtBusinessUnitId, e.DbtDepartmentId, e.DbtTemplateId, e.DbtEffectiveDate }, "IX_DebtorTemplates_Debtors").IsUnique();

                entity.HasIndex(e => e.DbtDepartmentId, "IX_DebtorTemplates_Departments");

                entity.HasIndex(e => e.DbtTemplateId, "IX_DebtorTemplates_Templates");

                entity.Property(e => e.DbtId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DBT_Id");
                entity.Property(e => e.DbtBusinessUnitId).HasColumnName("DBT_BusinessUnit_Id");
                entity.Property(e => e.DbtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DBT_CreatedBy");
                entity.Property(e => e.DbtCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DBT_CreatedDate");
                entity.Property(e => e.DbtDebtorId).HasColumnName("DBT_Debtor_Id");
                entity.Property(e => e.DbtDepartmentId).HasColumnName("DBT_Department_Id");
                entity.Property(e => e.DbtEffectiveDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DBT_EffectiveDate");
                entity.Property(e => e.DbtEntrySystem)
                    .HasMaxLength(20)
                    .HasColumnName("DBT_EntrySystem");
                entity.Property(e => e.DbtFormat)
                    .HasMaxLength(50)
                    .HasColumnName("DBT_Format");
                entity.Property(e => e.DbtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DBT_LastModifiedBy");
                entity.Property(e => e.DbtLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DBT_LastModifiedDate");
                entity.Property(e => e.DbtTemplateId).HasColumnName("DBT_Template_Id");
                entity.Property(e => e.DbtTerminationDate).HasColumnName("DBT_TerminationDate");
                entity.Property(e => e.DbtTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DBT_TimeStamp");

                entity.HasOne(d => d.DbtBusinessUnit).WithMany(p => p.DebtorTemplates)
                    .HasForeignKey(d => d.DbtBusinessUnitId)
                    .HasConstraintName("FK_DebtorTemplates_BusinessUnits");

                entity.HasOne(d => d.DbtDebtor).WithMany(p => p.DebtorTemplates)
                    .HasForeignKey(d => d.DbtDebtorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DebtorTemplates_Debtors");

                entity.HasOne(d => d.DbtDepartment).WithMany(p => p.DebtorTemplates)
                    .HasForeignKey(d => d.DbtDepartmentId)
                    .HasConstraintName("FK_DebtorTemplates_Departments");

                entity.HasOne(d => d.DbtTemplate).WithMany(p => p.DebtorTemplates)
                    .HasForeignKey(d => d.DbtTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DebtorTemplates_Templates");
            });

            modelBuilder.Entity<DebtorsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DebtorsView", "fin");

                entity.Property(e => e.AddressId).HasColumnName("Address_Id");
                entity.Property(e => e.BankAccountId).HasColumnName("BankAccount_Id");
                entity.Property(e => e.ChamberOfCommerceNumber).HasMaxLength(50);
                entity.Property(e => e.City).HasMaxLength(250);
                entity.Property(e => e.CountryCode).HasMaxLength(3);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.Email).HasMaxLength(250);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.ExactAdministration).HasMaxLength(10);
                entity.Property(e => e.Fax).HasMaxLength(20);
                entity.Property(e => e.HomePage).HasMaxLength(250);
                entity.Property(e => e.HouseNo).HasMaxLength(10);
                entity.Property(e => e.HouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LedgerAccount).HasMaxLength(20);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(20);
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.Phone).HasMaxLength(20);
                entity.Property(e => e.PhoneExt).HasMaxLength(10);
                entity.Property(e => e.PostalCode).HasMaxLength(10);
                entity.Property(e => e.Province).HasMaxLength(250);
                entity.Property(e => e.StreetName).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VatNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<DeedOfAssignmentMapping>(entity =>
            {
                entity.HasKey(e => e.DofmId).HasName("PK__DeedOfAs__ED80FD323B5B5A9A");

                entity.ToTable("DeedOfAssignmentMapping", "pros");

                entity.Property(e => e.DofmId)
                    .ValueGeneratedNever()
                    .HasColumnName("DOFM_Id");
                entity.Property(e => e.DofmCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOFM_CreatedBy");
                entity.Property(e => e.DofmCreatedDate).HasColumnName("DOFM_CreatedDate");
                entity.Property(e => e.DofmEiscode).HasColumnName("DOFM_EISCode");
                entity.Property(e => e.DofmLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOFM_LastModifiedBy");
                entity.Property(e => e.DofmLastModifiedDate).HasColumnName("DOFM_LastModifiedDate");
                entity.Property(e => e.DofmProspectCode).HasColumnName("DOFM_ProspectCode");
                entity.Property(e => e.DofmTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DOFM_TimeStamp");
            });

            modelBuilder.Entity<DefaultTemplate>(entity =>
            {
                entity.HasKey(e => e.DtpId);

                entity.ToTable("DefaultTemplates", "mdm");

                entity.Property(e => e.DtpId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DTP_Id");
                entity.Property(e => e.DtpBodyEmail)
                    .HasMaxLength(250)
                    .HasColumnName("DTP_BodyEmail");
                entity.Property(e => e.DtpCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DTP_CreatedBy");
                entity.Property(e => e.DtpCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DTP_CreatedDate");
                entity.Property(e => e.DtpDepartmentId).HasColumnName("DTP_Department_Id");
                entity.Property(e => e.DtpEffectiveDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DTP_EffectiveDate");
                entity.Property(e => e.DtpEntrySystem)
                    .HasMaxLength(20)
                    .HasColumnName("DTP_EntrySystem");
                entity.Property(e => e.DtpLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DTP_LastModifiedBy");
                entity.Property(e => e.DtpLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DTP_LastModifiedDate");
                entity.Property(e => e.DtpTemplateId).HasColumnName("DTP_Template_Id");
                entity.Property(e => e.DtpTerminationDate).HasColumnName("DTP_TerminationDate");
                entity.Property(e => e.DtpTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DTP_TimeStamp");

                entity.HasOne(d => d.DtpDepartment).WithMany(p => p.DefaultTemplates)
                    .HasForeignKey(d => d.DtpDepartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DefaultTemplates_Departments");

                entity.HasOne(d => d.DtpTemplate).WithMany(p => p.DefaultTemplates)
                    .HasForeignKey(d => d.DtpTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DefaultTemplates_Templates");
            });

            modelBuilder.Entity<DeliveryMethod>(entity =>
            {
                entity.HasKey(e => e.DvmId);

                entity.ToTable("DeliveryMethods", "pdc");

                entity.Property(e => e.DvmId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DVM_Id");
                entity.Property(e => e.DvmCode)
                    .HasMaxLength(10)
                    .HasColumnName("DVM_Code");
                entity.Property(e => e.DvmCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DVM_CreatedBy");
                entity.Property(e => e.DvmCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DVM_CreatedDate");
                entity.Property(e => e.DvmInactive).HasColumnName("DVM_Inactive");
                entity.Property(e => e.DvmLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DVM_LastModifiedBy");
                entity.Property(e => e.DvmLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DVM_LastModifiedDate");
                entity.Property(e => e.DvmLocalizableEntryId).HasColumnName("DVM_LocalizableEntry_Id");
                entity.Property(e => e.DvmLongName)
                    .HasMaxLength(250)
                    .HasColumnName("DVM_LongName");
                entity.Property(e => e.DvmShortName)
                    .HasMaxLength(20)
                    .HasColumnName("DVM_ShortName");
                entity.Property(e => e.DvmTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DVM_TimeStamp");

                entity.HasOne(d => d.DvmLocalizableEntry).WithMany(p => p.DeliveryMethods)
                    .HasForeignKey(d => d.DvmLocalizableEntryId)
                    .HasConstraintName("FK_DeliveryMethods_LocalizableEntries");
            });

            modelBuilder.Entity<Department>(entity =>
            {
                entity.HasKey(e => e.DepId);

                entity.ToTable("Departments", "ced");

                entity.Property(e => e.DepId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DEP_Id");
                entity.Property(e => e.DepBusinessUnitId).HasColumnName("DEP_BusinessUnit_Id");
                entity.Property(e => e.DepCostUnitId).HasColumnName("DEP_CostUnit_Id");
                entity.Property(e => e.DepCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DEP_CreatedBy");
                entity.Property(e => e.DepCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DEP_CreatedDate");
                entity.Property(e => e.DepLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DEP_LastModifiedBy");
                entity.Property(e => e.DepLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DEP_LastModifiedDate");
                entity.Property(e => e.DepProductLineId).HasColumnName("DEP_ProductLine_Id");
                entity.Property(e => e.DepRegionId).HasColumnName("DEP_Region_Id");
                entity.Property(e => e.DepTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DEP_TimeStamp");

                entity.HasOne(d => d.DepBusinessUnit).WithMany(p => p.Departments)
                    .HasForeignKey(d => d.DepBusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Departments_BusinessUnits");

                entity.HasOne(d => d.DepCostUnit).WithMany(p => p.Departments)
                    .HasForeignKey(d => d.DepCostUnitId)
                    .HasConstraintName("FK_Departments_CostUnits");

                entity.HasOne(d => d.Dep).WithOne(p => p.Department)
                    .HasForeignKey<Department>(d => d.DepId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Departments_OrganizationUnits");

                entity.HasOne(d => d.DepProductLine).WithMany(p => p.Departments)
                    .HasForeignKey(d => d.DepProductLineId)
                    .HasConstraintName("FK_Departments_ProductLines");

                entity.HasOne(d => d.DepRegion).WithMany(p => p.Departments)
                    .HasForeignKey(d => d.DepRegionId)
                    .HasConstraintName("FK_Departments_Regions");
            });

            modelBuilder.Entity<Department1>(entity =>
            {
                entity.HasKey(e => e.DepId);

                entity.ToTable("Departments", "stg");

                entity.Property(e => e.DepId)
                    .ValueGeneratedNever()
                    .HasColumnName("DEP_Id");
                entity.Property(e => e.DepBusinessUnitId).HasColumnName("DEP_BusinessUnit_Id");
                entity.Property(e => e.DepCostUnitId).HasColumnName("DEP_CostUnit_Id");
                entity.Property(e => e.DepCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DEP_CreatedBy");
                entity.Property(e => e.DepCreatedDate).HasColumnName("DEP_CreatedDate");
                entity.Property(e => e.DepLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DEP_LastModifiedBy");
                entity.Property(e => e.DepLastModifiedDate).HasColumnName("DEP_LastModifiedDate");
                entity.Property(e => e.DepProductLineId).HasColumnName("DEP_ProductLine_Id");
                entity.Property(e => e.DepRegionId).HasColumnName("DEP_Region_Id");
                entity.Property(e => e.DepTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DEP_TimeStamp");
            });

            modelBuilder.Entity<DepartmentMapping>(entity =>
            {
                entity.HasKey(e => e.DmId).HasName("PK__Departme__22B36CD20AE79950");

                entity.ToTable("DepartmentMapping", "pros");

                entity.Property(e => e.DmId)
                    .ValueGeneratedNever()
                    .HasColumnName("DM_Id");
                entity.Property(e => e.DmCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DM_CreatedBy");
                entity.Property(e => e.DmCreatedDate).HasColumnName("DM_CreatedDate");
                entity.Property(e => e.DmEiscode).HasColumnName("DM_EISCode");
                entity.Property(e => e.DmLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DM_LastModifiedBy");
                entity.Property(e => e.DmLastModifiedDate).HasColumnName("DM_LastModifiedDate");
                entity.Property(e => e.DmProspectCode).HasColumnName("DM_ProspectCode");
                entity.Property(e => e.DmTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DM_TimeStamp");
            });

            modelBuilder.Entity<DepartmentOffice>(entity =>
            {
                entity.HasKey(e => e.DofId);

                entity.ToTable("DepartmentOffices", "ced");

                entity.Property(e => e.DofId)
                    .ValueGeneratedNever()
                    .HasColumnName("DOF_Id");
                entity.Property(e => e.DofCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOF_CreatedBy");
                entity.Property(e => e.DofCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DOF_CreatedDate");
                entity.Property(e => e.DofDeparmentId).HasColumnName("DOF_Deparment_Id");
                entity.Property(e => e.DofLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOF_LastModifiedBy");
                entity.Property(e => e.DofLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DOF_LastModifiedDate");
                entity.Property(e => e.DofOfficeId).HasColumnName("DOF_Office_Id");
                entity.Property(e => e.DofTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DOF_TimeStamp");

                entity.HasOne(d => d.DofDeparment).WithMany(p => p.DepartmentOffices)
                    .HasForeignKey(d => d.DofDeparmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DepartmentOffices_Departments");

                entity.HasOne(d => d.DofOffice).WithMany(p => p.DepartmentOffices)
                    .HasForeignKey(d => d.DofOfficeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DepartmentOffices_Offices");
            });

            modelBuilder.Entity<DepartmentsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DepartmentsView", "ced");

                entity.Property(e => e.BusinessUnitCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.BusinessUnitName).HasMaxLength(250);
                entity.Property(e => e.CostUnitCode).HasMaxLength(10);
                entity.Property(e => e.CostUnitName).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DepartmentAbbreviation).HasMaxLength(20);
                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.DepartmentName).HasMaxLength(756);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<DitzoPaymentsJournalFooterView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DitzoPaymentsJournalFooterView", "dos");

                entity.Property(e => e.Accountsum).HasColumnName("ACCOUNTSUM");
                entity.Property(e => e.Company)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("COMPANY");
                entity.Property(e => e.Date)
                    .HasColumnType("date")
                    .HasColumnName("DATE");
                entity.Property(e => e.Linecount).HasColumnName("LINECOUNT");
                entity.Property(e => e.Part)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("PART");
                entity.Property(e => e.Totalcred)
                    .HasColumnType("money")
                    .HasColumnName("TOTALCRED");
                entity.Property(e => e.Totaldeb)
                    .HasColumnType("money")
                    .HasColumnName("TOTALDEB");
            });

            modelBuilder.Entity<DitzoPaymentsJournalLinesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DitzoPaymentsJournalLinesView", "dos");

                entity.Property(e => e.Account).HasColumnName("ACCOUNT");
                entity.Property(e => e.Adbvldat)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ADBVLDAT");
                entity.Property(e => e.Center)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CENTER");
                entity.Property(e => e.Channel)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("CHANNEL");
                entity.Property(e => e.Curdat)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CURDAT");
                entity.Property(e => e.Curtyp)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CURTYP");
                entity.Property(e => e.Descriptn)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTN");
                entity.Property(e => e.Effdate)
                    .HasColumnType("date")
                    .HasColumnName("EFFDATE");
                entity.Property(e => e.Flow)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FLOW");
                entity.Property(e => e.Jnlfld1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("JNLFLD1");
                entity.Property(e => e.Jnlfld2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("JNLFLD2");
                entity.Property(e => e.Jnlfld3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("JNLFLD3");
                entity.Property(e => e.Jrnlid)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("JRNLID");
                entity.Property(e => e.Jrnllnbr).HasColumnName("JRNLLNBR");
                entity.Property(e => e.Jrnlsnbr).HasColumnName("JRNLSNBR");
                entity.Property(e => e.Ldrid)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("LDRID");
                entity.Property(e => e.Lientid)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("LIENTID");
                entity.Property(e => e.Partner)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PARTNER");
                entity.Property(e => e.Primamt)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PRIMAMT");
                entity.Property(e => e.Primcd)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PRIMCD");
                entity.Property(e => e.Product)
                    .HasMaxLength(20)
                    .HasColumnName("PRODUCT");
                entity.Property(e => e.Project).HasColumnName("PROJECT");
                entity.Property(e => e.Srckey)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SRCKEY");
                entity.Property(e => e.Transamt)
                    .HasColumnType("money")
                    .HasColumnName("TRANSAMT");
                entity.Property(e => e.Transcd)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TRANSCD");
                entity.Property(e => e.Userid)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USERID");
            });

            modelBuilder.Entity<Document>(entity =>
            {
                entity.HasKey(e => e.DocId);

                entity.ToTable("Documents", "dms");

                entity.Property(e => e.DocId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DOC_Id");
                entity.Property(e => e.DocCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOC_CreatedBy");
                entity.Property(e => e.DocCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DOC_CreatedDate");
                entity.Property(e => e.DocDescription)
                    .HasMaxLength(500)
                    .HasColumnName("DOC_Description");
                entity.Property(e => e.DocDocumentDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("date")
                    .HasColumnName("DOC_DocumentDate");
                entity.Property(e => e.DocDocumentNumber)
                    .HasMaxLength(20)
                    .HasColumnName("DOC_DocumentNumber");
                entity.Property(e => e.DocDocumentTypeId).HasColumnName("DOC_DocumentType_Id");
                entity.Property(e => e.DocHasSignature).HasColumnName("DOC_HasSignature");
                entity.Property(e => e.DocLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOC_LastModifiedBy");
                entity.Property(e => e.DocLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DOC_LastModifiedDate");
                entity.Property(e => e.DocMimeType)
                    .HasMaxLength(250)
                    .HasColumnName("DOC_MimeType");
                entity.Property(e => e.DocOrigin)
                    .HasMaxLength(50)
                    .HasColumnName("DOC_Origin");
                entity.Property(e => e.DocSignatureDate)
                    .HasColumnType("datetime")
                    .HasColumnName("DOC_SignatureDate");
                entity.Property(e => e.DocTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DOC_TimeStamp");

                entity.HasOne(d => d.DocDocumentType).WithMany(p => p.Documents)
                    .HasForeignKey(d => d.DocDocumentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Documents_DocumentTypes");
            });

            modelBuilder.Entity<DocumentAttribute>(entity =>
            {
                entity.HasKey(e => e.DcaId);

                entity.ToTable("DocumentAttributes", "dms");

                entity.HasIndex(e => new { e.DcaDocumentId, e.DcaAttributeName }, "IX_DocumentAttributes_Document_AttributeName").IsUnique();

                entity.Property(e => e.DcaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DCA_Id");
                entity.Property(e => e.DcaAttributeContent)
                    .HasMaxLength(250)
                    .HasColumnName("DCA_AttributeContent");
                entity.Property(e => e.DcaAttributeName)
                    .HasMaxLength(50)
                    .HasColumnName("DCA_AttributeName");
                entity.Property(e => e.DcaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DCA_CreatedBy");
                entity.Property(e => e.DcaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DCA_CreatedDate");
                entity.Property(e => e.DcaDocumentId).HasColumnName("DCA_Document_Id");
                entity.Property(e => e.DcaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DCA_LastModifiedBy");
                entity.Property(e => e.DcaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DCA_LastModifiedDate");
                entity.Property(e => e.DcaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DCA_TimeStamp");

                entity.HasOne(d => d.DcaDocument).WithMany(p => p.DocumentAttributes)
                    .HasForeignKey(d => d.DcaDocumentId)
                    .HasConstraintName("FK_DocumentAttributes_Documents");
            });

            modelBuilder.Entity<DocumentAttribute1>(entity =>
            {
                entity.HasKey(e => e.DcaId);

                entity.ToTable("DocumentAttributes", "fin");

                entity.Property(e => e.DcaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DCA_Id");
                entity.Property(e => e.DcaAttributeContent)
                    .HasMaxLength(250)
                    .HasColumnName("DCA_AttributeContent");
                entity.Property(e => e.DcaAttributeName)
                    .HasMaxLength(50)
                    .HasColumnName("DCA_AttributeName");
                entity.Property(e => e.DcaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DCA_CreatedBy");
                entity.Property(e => e.DcaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DCA_CreatedDate");
                entity.Property(e => e.DcaDocumentId).HasColumnName("DCA_Document_Id");
                entity.Property(e => e.DcaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DCA_LastModifiedBy");
                entity.Property(e => e.DcaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DCA_LastModifiedDate");
                entity.Property(e => e.DcaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DCA_TimeStamp");
            });

            modelBuilder.Entity<DocumentNumber>(entity =>
            {
                entity.HasKey(e => e.DonId);

                entity.ToTable("DocumentNumbers", "ced");

                entity.Property(e => e.DonId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DON_Id");
                entity.Property(e => e.DonCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DON_CreatedBy");
                entity.Property(e => e.DonCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DON_CreatedDate");
                entity.Property(e => e.DonDescription)
                    .HasMaxLength(250)
                    .HasColumnName("DON_Description");
                entity.Property(e => e.DonEndDate)
                    .HasColumnType("date")
                    .HasColumnName("DON_EndDate");
                entity.Property(e => e.DonLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DON_LastModifiedBy");
                entity.Property(e => e.DonLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DON_LastModifiedDate");
                entity.Property(e => e.DonName)
                    .HasMaxLength(50)
                    .HasColumnName("DON_Name");
                entity.Property(e => e.DonNextNumberName)
                    .HasMaxLength(50)
                    .HasColumnName("DON_NextNumber_Name");
                entity.Property(e => e.DonOutputFormat)
                    .HasMaxLength(50)
                    .HasColumnName("DON_OutputFormat");
                entity.Property(e => e.DonStartDate)
                    .HasColumnType("date")
                    .HasColumnName("DON_StartDate");
                entity.Property(e => e.DonTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DON_TimeStamp");
            });

            modelBuilder.Entity<DocumentPage>(entity =>
            {
                entity.HasKey(e => e.DpgId);

                entity.ToTable("DocumentPages", "dms");

                entity.HasIndex(e => new { e.DpgDocumentId, e.DpgPageNumber }, "IX_DocumentPages_Document_PageNumber").IsUnique();

                entity.Property(e => e.DpgId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DPG_Id");
                entity.Property(e => e.DpgCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DPG_CreatedBy");
                entity.Property(e => e.DpgCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DPG_CreatedDate");
                entity.Property(e => e.DpgDocumentId).HasColumnName("DPG_Document_Id");
                entity.Property(e => e.DpgLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DPG_LastModifiedBy");
                entity.Property(e => e.DpgLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DPG_LastModifiedDate");
                entity.Property(e => e.DpgPageNumber).HasColumnName("DPG_PageNumber");
                entity.Property(e => e.DpgTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DPG_TimeStamp");

                entity.HasOne(d => d.DpgDocument).WithMany(p => p.DocumentPages)
                    .HasForeignKey(d => d.DpgDocumentId)
                    .HasConstraintName("FK_DocumentPages_Documents");
            });

            modelBuilder.Entity<DocumentPageAttribute>(entity =>
            {
                entity.HasKey(e => e.DpaId);

                entity.ToTable("DocumentPageAttributes", "dms");

                entity.HasIndex(e => new { e.DpaDocumentPageId, e.DpaAttributeName }, "IX_DocumentPageAttributes_DocumentPage_AttributeName").IsUnique();

                entity.Property(e => e.DpaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DPA_Id");
                entity.Property(e => e.DpaAttributeContent).HasColumnName("DPA_AttributeContent");
                entity.Property(e => e.DpaAttributeName)
                    .HasMaxLength(50)
                    .HasColumnName("DPA_AttributeName");
                entity.Property(e => e.DpaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DPA_CreatedBy");
                entity.Property(e => e.DpaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DPA_CreatedDate");
                entity.Property(e => e.DpaDocumentPageId).HasColumnName("DPA_DocumentPage_Id");
                entity.Property(e => e.DpaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DPA_LastModifiedBy");
                entity.Property(e => e.DpaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DPA_LastModifiedDate");
                entity.Property(e => e.DpaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DPA_TimeStamp");

                entity.HasOne(d => d.DpaDocumentPage).WithMany(p => p.DocumentPageAttributes)
                    .HasForeignKey(d => d.DpaDocumentPageId)
                    .HasConstraintName("FK_DocumentPageAttributes_DocumentPages");
            });

            modelBuilder.Entity<DocumentType>(entity =>
            {
                entity.HasKey(e => e.DtId);

                entity.ToTable("DocumentTypes", "ced");

                entity.Property(e => e.DtId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DT_Id");
                entity.Property(e => e.DtCode)
                    .HasMaxLength(10)
                    .HasColumnName("DT_Code");
                entity.Property(e => e.DtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DT_CreatedBy");
                entity.Property(e => e.DtCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DT_CreatedDate");
                entity.Property(e => e.DtInactive).HasColumnName("DT_Inactive");
                entity.Property(e => e.DtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DT_LastModifiedBy");
                entity.Property(e => e.DtLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DT_LastModifiedDate");
                entity.Property(e => e.DtLocalizableEntryId).HasColumnName("DT_LocalizableEntry_Id");
                entity.Property(e => e.DtLongName)
                    .HasMaxLength(250)
                    .HasColumnName("DT_LongName");
                entity.Property(e => e.DtShortName)
                    .HasMaxLength(20)
                    .HasColumnName("DT_ShortName");
                entity.Property(e => e.DtTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DT_TimeStamp");

                entity.HasOne(d => d.DtLocalizableEntry).WithMany(p => p.DocumentTypes)
                    .HasForeignKey(d => d.DtLocalizableEntryId)
                    .HasConstraintName("FK_DocumentTypes_LocalizableEntries");
            });

            modelBuilder.Entity<DocumentTypeDepartment>(entity =>
            {
                entity.HasKey(e => e.DtdId);

                entity.ToTable("DocumentTypeDepartments", "ced");

                entity.Property(e => e.DtdId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DTD_Id");
                entity.Property(e => e.DtdCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DTD_CreatedBy");
                entity.Property(e => e.DtdCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DTD_CreatedDate");
                entity.Property(e => e.DtdDepartmentId).HasColumnName("DTD_Department_Id");
                entity.Property(e => e.DtdDocumentTypeId).HasColumnName("DTD_DocumentType_Id");
                entity.Property(e => e.DtdEffectiveDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("date")
                    .HasColumnName("DTD_EffectiveDate");
                entity.Property(e => e.DtdLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DTD_LastModifiedBy");
                entity.Property(e => e.DtdLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DTD_LastModifiedDate");
                entity.Property(e => e.DtdTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("DTD_TerminationDate");
                entity.Property(e => e.DtdTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DTD_TimeStamp");

                entity.HasOne(d => d.DtdDepartment).WithMany(p => p.DocumentTypeDepartments)
                    .HasForeignKey(d => d.DtdDepartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentTypeDepartments_Departments");

                entity.HasOne(d => d.DtdDocumentType).WithMany(p => p.DocumentTypeDepartments)
                    .HasForeignKey(d => d.DtdDocumentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentTypeDepartments_DocumentTypes");
            });

            modelBuilder.Entity<DocumentTypeMapping>(entity =>
            {
                entity.HasKey(e => e.DtmId);

                entity.ToTable("DocumentTypeMapping", "pros");

                entity.Property(e => e.DtmId)
                    .ValueGeneratedNever()
                    .HasColumnName("DTM_Id");
                entity.Property(e => e.DtmCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DTM_CreatedBy");
                entity.Property(e => e.DtmCreatedDate).HasColumnName("DTM_CreatedDate");
                entity.Property(e => e.DtmEiscode)
                    .HasMaxLength(100)
                    .HasColumnName("DTM_EISCode");
                entity.Property(e => e.DtmLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DTM_LastModifiedBy");
                entity.Property(e => e.DtmLastModifiedDate).HasColumnName("DTM_LastModifiedDate");
                entity.Property(e => e.DtmProspectCode)
                    .HasMaxLength(100)
                    .HasColumnName("DTM_ProspectCode");
                entity.Property(e => e.DtmTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DTM_TimeStamp");
            });

            modelBuilder.Entity<Dossier>(entity =>
            {
                entity.HasKey(e => e.DosId);

                entity.ToTable("Dossiers", "dos", tb => tb.HasTrigger("th_dos_Dossiers_TraceHistory"));

                entity.HasIndex(e => e.DosDossierNumber, "IX_Dossiers_DOS_DossierNumber");

                entity.HasIndex(e => e.DosDossierNumber, "IX_Dossiers_DossierNumber").IsUnique();

                entity.HasIndex(e => new { e.DosEntrySystem, e.DosDossierNumber }, "IX_Dossiers_EntrySystem_DossierNumber_INCL").IsUnique();

                entity.HasIndex(e => new { e.DosDepartmentId, e.DosDossierNumber }, "IX_dos_DossiersDepartment_IdDossierNumber");

                entity.HasIndex(e => e.DosEntrySystem, "IX_dos_DossiersEntrySystem__INCL");

                entity.HasIndex(e => e.DosClientId, "IX_dos_Dossiers_Client__INCL");

                entity.Property(e => e.DosId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DOS_Id");
                entity.Property(e => e.DosAgentId).HasColumnName("DOS_Agent_Id");
                entity.Property(e => e.DosCauseId).HasColumnName("DOS_Cause_Id");
                entity.Property(e => e.DosClientId).HasColumnName("DOS_Client_Id");
                entity.Property(e => e.DosContactPersonId).HasColumnName("DOS_ContactPerson_Id");
                entity.Property(e => e.DosCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOS_CreatedBy");
                entity.Property(e => e.DosCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DOS_CreatedDate");
                entity.Property(e => e.DosCurrentStatusCode)
                    .HasMaxLength(10)
                    .HasColumnName("DOS_CurrentStatusCode");
                entity.Property(e => e.DosCurrentStatusHistoryId).HasColumnName("DOS_CurrentStatusHistory_Id");
                entity.Property(e => e.DosCurrentStatusHistoryStartDate).HasColumnName("DOS_CurrentStatusHistoryStartDate");
                entity.Property(e => e.DosDepartmentId).HasColumnName("DOS_Department_Id");
                entity.Property(e => e.DosDossierNumber)
                    .HasMaxLength(20)
                    .HasColumnName("DOS_DossierNumber");
                entity.Property(e => e.DosDossierPriorityId).HasColumnName("DOS_DossierPriority_Id");
                entity.Property(e => e.DosDossierTypeId).HasColumnName("DOS_DossierType_Id");
                entity.Property(e => e.DosEmployeeId).HasColumnName("DOS_Employee_Id");
                entity.Property(e => e.DosEntryBatch)
                    .HasMaxLength(36)
                    .HasColumnName("DOS_EntryBatch");
                entity.Property(e => e.DosEntryNumber)
                    .HasMaxLength(36)
                    .HasColumnName("DOS_EntryNumber");
                entity.Property(e => e.DosEntrySystem)
                    .HasMaxLength(10)
                    .HasColumnName("DOS_EntrySystem");
                entity.Property(e => e.DosIncidentCountryId)
                    .HasMaxLength(2)
                    .HasColumnName("DOS_IncidentCountry_Id");
                entity.Property(e => e.DosIncidentDate).HasColumnName("DOS_IncidentDate");
                entity.Property(e => e.DosIntakeDate).HasColumnName("DOS_IntakeDate");
                entity.Property(e => e.DosLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOS_LastModifiedBy");
                entity.Property(e => e.DosLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DOS_LastModifiedDate");
                entity.Property(e => e.DosLegalEntityId).HasColumnName("DOS_LegalEntity_Id");
                entity.Property(e => e.DosMainReasonId).HasColumnName("DOS_MainReason_Id");
                entity.Property(e => e.DosMandateId).HasColumnName("DOS_Mandate_Id");
                entity.Property(e => e.DosProductId).HasColumnName("DOS_Product_Id");
                entity.Property(e => e.DosReasonId).HasColumnName("DOS_Reason_Id");
                entity.Property(e => e.DosReporterId).HasColumnName("DOS_Reporter_Id");
                entity.Property(e => e.DosSubReasonId).HasColumnName("DOS_SubReason_Id");
                entity.Property(e => e.DosTenantId).HasColumnName("DOS_Tenant_Id");
                entity.Property(e => e.DosTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DOS_TimeStamp");

                entity.HasOne(d => d.DosAgent).WithMany(p => p.Dossiers)
                    .HasForeignKey(d => d.DosAgentId)
                    .HasConstraintName("FK_Dossiers_Agents");

                entity.HasOne(d => d.DosCause).WithMany(p => p.DossierDosCauses)
                    .HasForeignKey(d => d.DosCauseId)
                    .HasConstraintName("FK_Dossiers_Cause");

                entity.HasOne(d => d.DosClient).WithMany(p => p.Dossiers)
                    .HasForeignKey(d => d.DosClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Dossiers_Clients");

                entity.HasOne(d => d.DosContactPerson).WithMany(p => p.Dossiers)
                    .HasForeignKey(d => d.DosContactPersonId)
                    .HasConstraintName("FK_Dossiers_ContactPersons");

                entity.HasOne(d => d.DosDepartment).WithMany(p => p.Dossiers)
                    .HasForeignKey(d => d.DosDepartmentId)
                    .HasConstraintName("FK_Dossiers_Departments");

                entity.HasOne(d => d.DosDossierPriority).WithMany(p => p.Dossiers)
                    .HasForeignKey(d => d.DosDossierPriorityId)
                    .HasConstraintName("FK_Dossiers_DossierPriorities");

                entity.HasOne(d => d.DosDossierType).WithMany(p => p.Dossiers)
                    .HasForeignKey(d => d.DosDossierTypeId)
                    .HasConstraintName("FK_Dossiers_DossierTypes");

                entity.HasOne(d => d.DosIncidentCountry).WithMany(p => p.Dossiers)
                    .HasForeignKey(d => d.DosIncidentCountryId)
                    .HasConstraintName("FK_Dossiers_Countries");

                entity.HasOne(d => d.DosLegalEntity).WithMany(p => p.Dossiers)
                    .HasForeignKey(d => d.DosLegalEntityId)
                    .HasConstraintName("FK_Dossiers_LegalEntities");

                entity.HasOne(d => d.DosMainReason).WithMany(p => p.DossierDosMainReasons)
                    .HasForeignKey(d => d.DosMainReasonId)
                    .HasConstraintName("FK_Dossiers_MainReason");

                entity.HasOne(d => d.DosMandate).WithMany(p => p.Dossiers)
                    .HasForeignKey(d => d.DosMandateId)
                    .HasConstraintName("FK_Dossiers_Mandates");

                entity.HasOne(d => d.DosProduct).WithMany(p => p.Dossiers)
                    .HasForeignKey(d => d.DosProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Dossiers_Products");

                entity.HasOne(d => d.DosReason).WithMany(p => p.DossierDosReasons)
                    .HasForeignKey(d => d.DosReasonId)
                    .HasConstraintName("FK_Dossiers_Reason");

                entity.HasOne(d => d.DosReporter).WithMany(p => p.Dossiers)
                    .HasForeignKey(d => d.DosReporterId)
                    .HasConstraintName("FK_Dossiers_Reporters");

                entity.HasOne(d => d.DosSubReason).WithMany(p => p.DossierDosSubReasons)
                    .HasForeignKey(d => d.DosSubReasonId)
                    .HasConstraintName("FK_Dossiers_SubReason");

                entity.HasOne(d => d.DosTenant).WithMany(p => p.Dossiers)
                    .HasForeignKey(d => d.DosTenantId)
                    .HasConstraintName("FK_Dossiers_Tenants");
            });

            modelBuilder.Entity<DossierApproval>(entity =>
            {
                entity.HasKey(e => e.DapId);

                entity.ToTable("DossierApprovals", "dos", tb => tb.HasTrigger("th_dos_DossierApprovals_TraceHistory"));

                entity.HasIndex(e => e.DapDossierAuthorizationId, "IX_dos_DossierApprovals_DossierAuthorization");

                entity.Property(e => e.DapId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DAP_Id");
                entity.Property(e => e.DapApprovalDate).HasColumnName("DAP_ApprovalDate");
                entity.Property(e => e.DapAutorizationRoleId)
                    .HasMaxLength(50)
                    .HasColumnName("DAP_AutorizationRole_Id");
                entity.Property(e => e.DapComment)
                    .HasMaxLength(250)
                    .HasColumnName("DAP_Comment");
                entity.Property(e => e.DapCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DAP_CreatedBy");
                entity.Property(e => e.DapCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DAP_CreatedDate");
                entity.Property(e => e.DapDossierAuthorizationId).HasColumnName("DAP_DossierAuthorization_Id");
                entity.Property(e => e.DapEmployeeId).HasColumnName("DAP_Employee_Id");
                entity.Property(e => e.DapIsApproved).HasColumnName("DAP_IsApproved");
                entity.Property(e => e.DapLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DAP_LastModifiedBy");
                entity.Property(e => e.DapLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DAP_LastModifiedDate");
                entity.Property(e => e.DapTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DAP_TimeStamp");

                entity.HasOne(d => d.DapAutorizationRole).WithMany(p => p.DossierApprovals)
                    .HasForeignKey(d => d.DapAutorizationRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierApprovals_AuthorizationRoles");

                entity.HasOne(d => d.DapDossierAuthorization).WithMany(p => p.DossierApprovals)
                    .HasForeignKey(d => d.DapDossierAuthorizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierApprovals_DossierAuthorizations");

                entity.HasOne(d => d.DapEmployee).WithMany(p => p.DossierApprovals)
                    .HasForeignKey(d => d.DapEmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierApprovals_Employees");
            });

            modelBuilder.Entity<DossierApprovalsHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_DossierApprovals_History_ID");

                entity.ToTable("DossierApprovals_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.DapApprovalDate).HasColumnName("DAP_ApprovalDate");
                entity.Property(e => e.DapAutorizationRoleId)
                    .HasMaxLength(50)
                    .HasColumnName("DAP_AutorizationRole_Id");
                entity.Property(e => e.DapComment)
                    .HasMaxLength(250)
                    .HasColumnName("DAP_Comment");
                entity.Property(e => e.DapCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DAP_CreatedBy");
                entity.Property(e => e.DapCreatedDate).HasColumnName("DAP_CreatedDate");
                entity.Property(e => e.DapDossierAuthorizationId).HasColumnName("DAP_DossierAuthorization_Id");
                entity.Property(e => e.DapEmployeeId).HasColumnName("DAP_Employee_Id");
                entity.Property(e => e.DapId).HasColumnName("DAP_Id");
                entity.Property(e => e.DapIsApproved).HasColumnName("DAP_IsApproved");
                entity.Property(e => e.DapLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DAP_LastModifiedBy");
                entity.Property(e => e.DapLastModifiedDate).HasColumnName("DAP_LastModifiedDate");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<DossierAssignment>(entity =>
            {
                entity.HasKey(e => e.DoaId);

                entity.ToTable("DossierAssignments", "dos", tb => tb.HasTrigger("th_dos_DossierAssignments_TraceHistory"));

                entity.HasIndex(e => new { e.DoaDossierId, e.DoaClientOrderNumber }, "dos_DossierAssignements_DossierId_ClientOrderNumber");

                entity.Property(e => e.DoaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DOA_Id");
                entity.Property(e => e.DoaAssignmentNumber)
                    .HasMaxLength(20)
                    .HasColumnName("DOA_AssignmentNumber");
                entity.Property(e => e.DoaAssignmentTypeId).HasColumnName("DOA_AssignmentType_Id");
                entity.Property(e => e.DoaClientCaseNumber)
                    .HasMaxLength(50)
                    .HasColumnName("DOA_ClientCaseNumber");
                entity.Property(e => e.DoaClientOrderNumber)
                    .HasMaxLength(50)
                    .HasColumnName("DOA_ClientOrderNumber");
                entity.Property(e => e.DoaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOA_CreatedBy");
                entity.Property(e => e.DoaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DOA_CreatedDate");
                entity.Property(e => e.DoaCurrencyCode)
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('EUR')")
                    .HasColumnName("DOA_CurrencyCode");
                entity.Property(e => e.DoaCurrentStatusCode)
                    .HasMaxLength(10)
                    .HasColumnName("DOA_CurrentStatusCode");
                entity.Property(e => e.DoaCurrentStatusHistoryId).HasColumnName("DOA_CurrentStatusHistory_Id");
                entity.Property(e => e.DoaCurrentStatusHistoryStartDate).HasColumnName("DOA_CurrentStatusHistoryStartDate");
                entity.Property(e => e.DoaDamageAmountEstimate)
                    .HasColumnType("money")
                    .HasColumnName("DOA_DamageAmountEstimate");
                entity.Property(e => e.DoaDepartmentId).HasColumnName("DOA_Department_Id");
                entity.Property(e => e.DoaDossierId).HasColumnName("DOA_Dossier_Id");
                entity.Property(e => e.DoaEmployeeId).HasColumnName("DOA_Employee_Id");
                entity.Property(e => e.DoaInvolvedCoverageId).HasColumnName("DOA_InvolvedCoverage_Id");
                entity.Property(e => e.DoaInvolvedObjectId).HasColumnName("DOA_InvolvedObject_Id");
                entity.Property(e => e.DoaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOA_LastModifiedBy");
                entity.Property(e => e.DoaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DOA_LastModifiedDate");
                entity.Property(e => e.DoaPartnerId).HasColumnName("DOA_Partner_Id");
                entity.Property(e => e.DoaProductId).HasColumnName("DOA_Product_Id");
                entity.Property(e => e.DoaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DOA_TimeStamp");

                entity.HasOne(d => d.DoaAssignmentType).WithMany(p => p.DossierAssignments)
                    .HasForeignKey(d => d.DoaAssignmentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierAssignments_DossierAssignmentTypes");

                entity.HasOne(d => d.DoaDepartment).WithMany(p => p.DossierAssignments)
                    .HasForeignKey(d => d.DoaDepartmentId)
                    .HasConstraintName("FK_DossierAssignments_Departments");

                entity.HasOne(d => d.DoaDossier).WithMany(p => p.DossierAssignments)
                    .HasForeignKey(d => d.DoaDossierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierAssignments_Dossiers");

                entity.HasOne(d => d.DoaInvolvedCoverage).WithMany(p => p.DossierAssignments)
                    .HasForeignKey(d => d.DoaInvolvedCoverageId)
                    .HasConstraintName("FK_DossierAssignments_InvolvedCoverages");

                entity.HasOne(d => d.DoaInvolvedObject).WithMany(p => p.DossierAssignments)
                    .HasForeignKey(d => d.DoaInvolvedObjectId)
                    .HasConstraintName("FK_DossierAssignments_InvolvedObjects");

                entity.HasOne(d => d.DoaPartner).WithMany(p => p.DossierAssignments)
                    .HasForeignKey(d => d.DoaPartnerId)
                    .HasConstraintName("FK_DossierAssignments_Partners");

                entity.HasOne(d => d.DoaProduct).WithMany(p => p.DossierAssignments)
                    .HasForeignKey(d => d.DoaProductId)
                    .HasConstraintName("FK_DossierAssignments_Products");
            });

            modelBuilder.Entity<DossierAssignmentClosingHistory>(entity =>
            {
                entity.HasKey(e => e.AchId);

                entity.ToTable("DossierAssignmentClosingHistory", "dos", tb => tb.HasTrigger("th_dos_DossierAssignmentClosingHistory_TraceHistory"));

                entity.Property(e => e.AchId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("ACH_Id");
                entity.Property(e => e.AchClosingDate).HasColumnName("ACH_ClosingDate");
                entity.Property(e => e.AchCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ACH_CreatedBy");
                entity.Property(e => e.AchCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ACH_CreatedDate");
                entity.Property(e => e.AchDossierAssignmentId).HasColumnName("ACH_DossierAssignment_Id");
                entity.Property(e => e.AchFinancialClosing).HasColumnName("ACH_FinancialClosing");
                entity.Property(e => e.AchLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ACH_LastModifiedBy");
                entity.Property(e => e.AchLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ACH_LastModifiedDate");
                entity.Property(e => e.AchOperationalClosing)
                    .IsRequired()
                    .HasDefaultValueSql("((1))")
                    .HasColumnName("ACH_OperationalClosing");
                entity.Property(e => e.AchTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ACH_TimeStamp");

                entity.HasOne(d => d.AchDossierAssignment).WithMany(p => p.DossierAssignmentClosingHistories)
                    .HasForeignKey(d => d.AchDossierAssignmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierAssignmentClosingHistory_DossierAssignments");
            });

            modelBuilder.Entity<DossierAssignmentClosingHistoryHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_DossierAssignmentClosingHistory_History_ID");

                entity.ToTable("DossierAssignmentClosingHistory_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.AchClosingDate).HasColumnName("ACH_ClosingDate");
                entity.Property(e => e.AchCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ACH_CreatedBy");
                entity.Property(e => e.AchCreatedDate).HasColumnName("ACH_CreatedDate");
                entity.Property(e => e.AchDossierAssignmentId).HasColumnName("ACH_DossierAssignment_Id");
                entity.Property(e => e.AchFinancialClosing).HasColumnName("ACH_FinancialClosing");
                entity.Property(e => e.AchId).HasColumnName("ACH_Id");
                entity.Property(e => e.AchLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ACH_LastModifiedBy");
                entity.Property(e => e.AchLastModifiedDate).HasColumnName("ACH_LastModifiedDate");
                entity.Property(e => e.AchOperationalClosing).HasColumnName("ACH_OperationalClosing");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<DossierAssignmentCorrectionApproval>(entity =>
            {
                entity.HasKey(e => e.DacpId);

                entity.ToTable("DossierAssignmentCorrectionApprovals", "dos");

                entity.HasIndex(e => e.DacpDossierAssignmentCorrectionAuthorizationId, "IX_dos_DossierAssignmentCorrectionApprovals_DossierAssignmentCorrectionAuthorization");

                entity.Property(e => e.DacpId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DACP_Id");
                entity.Property(e => e.DacpApprovalDate).HasColumnName("DACP_ApprovalDate");
                entity.Property(e => e.DacpAutorizationRoleId)
                    .HasMaxLength(50)
                    .HasColumnName("DACP_AutorizationRole_Id");
                entity.Property(e => e.DacpComment)
                    .HasMaxLength(250)
                    .HasColumnName("DACP_Comment");
                entity.Property(e => e.DacpCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DACP_CreatedBy");
                entity.Property(e => e.DacpCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DACP_CreatedDate");
                entity.Property(e => e.DacpDossierAssignmentCorrectionAuthorizationId).HasColumnName("DACP_DossierAssignmentCorrectionAuthorization_Id");
                entity.Property(e => e.DacpEmployeeId).HasColumnName("DACP_Employee_Id");
                entity.Property(e => e.DacpIsApproved).HasColumnName("DACP_IsApproved");
                entity.Property(e => e.DacpLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DACP_LastModifiedBy");
                entity.Property(e => e.DacpLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DACP_LastModifiedDate");
                entity.Property(e => e.DacpTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DACP_TimeStamp");

                entity.HasOne(d => d.DacpAutorizationRole).WithMany(p => p.DossierAssignmentCorrectionApprovals)
                    .HasForeignKey(d => d.DacpAutorizationRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierAssignmentCorrectionApprovals_AuthorizationRoles");

                entity.HasOne(d => d.DacpDossierAssignmentCorrectionAuthorization).WithMany(p => p.DossierAssignmentCorrectionApprovals)
                    .HasForeignKey(d => d.DacpDossierAssignmentCorrectionAuthorizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierAssignmentCorrectionApprovals_DossierAssignmentCorrectionAuthorizations");

                entity.HasOne(d => d.DacpEmployee).WithMany(p => p.DossierAssignmentCorrectionApprovals)
                    .HasForeignKey(d => d.DacpEmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierAssignmentCorrectionApprovals_Employees");
            });

            modelBuilder.Entity<DossierAssignmentCorrectionAuthorization>(entity =>
            {
                entity.HasKey(e => e.DacuId);

                entity.ToTable("DossierAssignmentCorrectionAuthorizations", "dos");

                entity.Property(e => e.DacuId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DACU_Id");
                entity.Property(e => e.DacuCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DACU_CreatedBy");
                entity.Property(e => e.DacuCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DACU_CreatedDate");
                entity.Property(e => e.DacuDossierAssignmentId).HasColumnName("DACU_DossierAssignment_Id");
                entity.Property(e => e.DacuLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DACU_LastModifiedBy");
                entity.Property(e => e.DacuLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DACU_LastModifiedDate");
                entity.Property(e => e.DacuRequiredAutorizationRoleId)
                    .HasMaxLength(50)
                    .HasColumnName("DACU_RequiredAutorizationRole_Id");
                entity.Property(e => e.DacuTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DACU_TimeStamp");

                entity.HasOne(d => d.DacuDossierAssignment).WithMany(p => p.DossierAssignmentCorrectionAuthorizations)
                    .HasForeignKey(d => d.DacuDossierAssignmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierAssignmentCorrectionAuthorizations_DossierAssignments");

                entity.HasOne(d => d.DacuRequiredAutorizationRole).WithMany(p => p.DossierAssignmentCorrectionAuthorizations)
                    .HasForeignKey(d => d.DacuRequiredAutorizationRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierAssignmentCorrectionAuthorizations_AuthorizationRoles");
            });

            modelBuilder.Entity<DossierAssignmentCurrentStatus>(entity =>
            {
                entity.HasKey(e => e.DacsId);

                entity.ToTable("DossierAssignmentCurrentStatus", "dos");

                entity.Property(e => e.DacsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DACS_Id");
                entity.Property(e => e.DacsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DACS_CreatedBy");
                entity.Property(e => e.DacsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DACS_CreatedDate");
                entity.Property(e => e.DacsCurrentStatusCode)
                    .HasMaxLength(10)
                    .HasColumnName("DACS_CurrentStatusCode");
                entity.Property(e => e.DacsCurrentStatusHistoryId).HasColumnName("DACS_CurrentStatusHistory_Id");
                entity.Property(e => e.DacsCurrentStatusHistoryStartDate).HasColumnName("DACS_CurrentStatusHistoryStartDate");
                entity.Property(e => e.DacsCurrentStatusName)
                    .HasMaxLength(250)
                    .HasColumnName("DACS_CurrentStatusName");
                entity.Property(e => e.DacsCurrentStatusTypeId)
                    .HasMaxLength(20)
                    .HasColumnName("DACS_CurrentStatusType_Id");
                entity.Property(e => e.DacsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DACS_LastModifiedBy");
                entity.Property(e => e.DacsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DACS_LastModifiedDate");
                entity.Property(e => e.DacsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DACS_TimeStamp");

                entity.HasOne(d => d.DacsCurrentStatusHistory).WithMany(p => p.DossierAssignmentCurrentStatuses)
                    .HasForeignKey(d => d.DacsCurrentStatusHistoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierAssignmentCurrentStatus_DossierAssignmentStatusHistory");

                entity.HasOne(d => d.Dacs).WithOne(p => p.DossierAssignmentCurrentStatus)
                    .HasForeignKey<DossierAssignmentCurrentStatus>(d => d.DacsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierAssignmentCurrentStatus_DossierAssignments");
            });

            modelBuilder.Entity<DossierAssignmentEmployeeType>(entity =>
            {
                entity.HasKey(e => e.AetId);

                entity.ToTable("DossierAssignmentEmployeeTypes", "dos", tb => tb.HasTrigger("th_dos_DossierAssignmentEmployeeTypes_TraceHistory"));

                entity.Property(e => e.AetId)
                    .ValueGeneratedNever()
                    .HasColumnName("AET_Id");
                entity.Property(e => e.AetCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AET_CreatedBy");
                entity.Property(e => e.AetCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("AET_CreatedDate");
                entity.Property(e => e.AetInactive).HasColumnName("AET_Inactive");
                entity.Property(e => e.AetLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AET_LastModifiedBy");
                entity.Property(e => e.AetLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("AET_LastModifiedDate");
                entity.Property(e => e.AetLocalizableEntryId).HasColumnName("AET_LocalizableEntry_Id");
                entity.Property(e => e.AetName)
                    .HasMaxLength(250)
                    .HasColumnName("AET_Name");
                entity.Property(e => e.AetTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("AET_TimeStamp");

                entity.HasOne(d => d.AetLocalizableEntry).WithMany(p => p.DossierAssignmentEmployeeTypes)
                    .HasForeignKey(d => d.AetLocalizableEntryId)
                    .HasConstraintName("FK_DossierAssignmentEmployeeTypes_LocalizableEntries");
            });

            modelBuilder.Entity<DossierAssignmentEmployeeTypesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_DossierAssignmentEmployeeTypes_History_ID");

                entity.ToTable("DossierAssignmentEmployeeTypes_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.AetCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AET_CreatedBy");
                entity.Property(e => e.AetCreatedDate).HasColumnName("AET_CreatedDate");
                entity.Property(e => e.AetId).HasColumnName("AET_Id");
                entity.Property(e => e.AetInactive).HasColumnName("AET_Inactive");
                entity.Property(e => e.AetLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AET_LastModifiedBy");
                entity.Property(e => e.AetLastModifiedDate).HasColumnName("AET_LastModifiedDate");
                entity.Property(e => e.AetLocalizableEntryId).HasColumnName("AET_LocalizableEntry_Id");
                entity.Property(e => e.AetName)
                    .HasMaxLength(250)
                    .HasColumnName("AET_Name");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<DossierAssignmentHandlerHistory>(entity =>
            {
                entity.HasKey(e => e.AhhId);

                entity.ToTable("DossierAssignmentHandlerHistory", "dos", tb => tb.HasTrigger("th_dos_DossierAssignmentHandlerHistory_TraceHistory"));

                entity.Property(e => e.AhhId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("AHH_Id");
                entity.Property(e => e.AhhAssignmentHandlerEmail)
                    .HasMaxLength(250)
                    .HasColumnName("AHH_AssignmentHandlerEmail");
                entity.Property(e => e.AhhAssignmentHandlerName)
                    .HasMaxLength(250)
                    .HasColumnName("AHH_AssignmentHandlerName");
                entity.Property(e => e.AhhAssignmentHandlerPhone)
                    .HasMaxLength(20)
                    .HasColumnName("AHH_AssignmentHandlerPhone");
                entity.Property(e => e.AhhCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AHH_CreatedBy");
                entity.Property(e => e.AhhCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("AHH_CreatedDate");
                entity.Property(e => e.AhhDossierAssignmentEmployeeTypeId).HasColumnName("AHH_DossierAssignmentEmployeeType_Id");
                entity.Property(e => e.AhhDossierAssignmentId).HasColumnName("AHH_DossierAssignment_Id");
                entity.Property(e => e.AhhEmployeeId).HasColumnName("AHH_Employee_Id");
                entity.Property(e => e.AhhLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AHH_LastModifiedBy");
                entity.Property(e => e.AhhLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("AHH_LastModifiedDate");
                entity.Property(e => e.AhhReason)
                    .HasMaxLength(250)
                    .HasColumnName("AHH_Reason");
                entity.Property(e => e.AhhStartDate).HasColumnName("AHH_StartDate");
                entity.Property(e => e.AhhTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("AHH_TimeStamp");

                entity.HasOne(d => d.AhhDossierAssignmentEmployeeType).WithMany(p => p.DossierAssignmentHandlerHistories)
                    .HasForeignKey(d => d.AhhDossierAssignmentEmployeeTypeId)
                    .HasConstraintName("FK_DossierAssignmentHandlerHistory_DossierAssignmentEmployeeTypes");

                entity.HasOne(d => d.AhhDossierAssignment).WithMany(p => p.DossierAssignmentHandlerHistories)
                    .HasForeignKey(d => d.AhhDossierAssignmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierAssignmentHandlerHistory_DossierAssignments");

                entity.HasOne(d => d.AhhEmployee).WithMany(p => p.DossierAssignmentHandlerHistories)
                    .HasForeignKey(d => d.AhhEmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierAssignmentHandlerHistory_Employees");
            });

            modelBuilder.Entity<DossierAssignmentHandlerHistoryHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_DossierAssignmentHandlerHistory_History_ID");

                entity.ToTable("DossierAssignmentHandlerHistory_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.AhhAssignmentHandlerEmail)
                    .HasMaxLength(250)
                    .HasColumnName("AHH_AssignmentHandlerEmail");
                entity.Property(e => e.AhhAssignmentHandlerName)
                    .HasMaxLength(250)
                    .HasColumnName("AHH_AssignmentHandlerName");
                entity.Property(e => e.AhhAssignmentHandlerPhone)
                    .HasMaxLength(20)
                    .HasColumnName("AHH_AssignmentHandlerPhone");
                entity.Property(e => e.AhhCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AHH_CreatedBy");
                entity.Property(e => e.AhhCreatedDate).HasColumnName("AHH_CreatedDate");
                entity.Property(e => e.AhhDossierAssignmentEmployeeTypeId).HasColumnName("AHH_DossierAssignmentEmployeeType_Id");
                entity.Property(e => e.AhhDossierAssignmentId).HasColumnName("AHH_DossierAssignment_Id");
                entity.Property(e => e.AhhEmployeeId).HasColumnName("AHH_Employee_Id");
                entity.Property(e => e.AhhId).HasColumnName("AHH_Id");
                entity.Property(e => e.AhhLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AHH_LastModifiedBy");
                entity.Property(e => e.AhhLastModifiedDate).HasColumnName("AHH_LastModifiedDate");
                entity.Property(e => e.AhhStartDate).HasColumnName("AHH_StartDate");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<DossierAssignmentInvolvedObject>(entity =>
            {
                entity.HasKey(e => e.DaioId);

                entity.ToTable("DossierAssignmentInvolvedObjects", "dos");

                entity.Property(e => e.DaioId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DAIO_Id");
                entity.Property(e => e.DaioCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DAIO_CreatedBy");
                entity.Property(e => e.DaioCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DAIO_CreatedDate");
                entity.Property(e => e.DaioDossierAssignmentId).HasColumnName("DAIO_DossierAssignment_Id");
                entity.Property(e => e.DaioInvolvedObjectId).HasColumnName("DAIO_InvolvedObject_Id");
                entity.Property(e => e.DaioLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DAIO_LastModifiedBy");
                entity.Property(e => e.DaioLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DAIO_LastModifiedDate");
                entity.Property(e => e.DaioTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DAIO_TimeStamp");

                entity.HasOne(d => d.DaioDossierAssignment).WithMany(p => p.DossierAssignmentInvolvedObjects)
                    .HasForeignKey(d => d.DaioDossierAssignmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierAssignmentInvolvedObjects_DossierAssignments");

                entity.HasOne(d => d.DaioInvolvedObject).WithMany(p => p.DossierAssignmentInvolvedObjects)
                    .HasForeignKey(d => d.DaioInvolvedObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierAssignmentInvolvedObjects_InvolvedObjects");
            });

            modelBuilder.Entity<DossierAssignmentLogHistory>(entity =>
            {
                entity.HasKey(e => e.DalhId);

                entity.ToTable("DossierAssignmentLogHistory", "dos");

                entity.Property(e => e.DalhId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DALH_Id");
                entity.Property(e => e.DalhCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DALH_CreatedBy");
                entity.Property(e => e.DalhCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DALH_CreatedDate");
                entity.Property(e => e.DalhDossierAssignmentId).HasColumnName("DALH_DossierAssignment_Id");
                entity.Property(e => e.DalhFreeText)
                    .HasColumnType("ntext")
                    .HasColumnName("DALH_FreeText");
                entity.Property(e => e.DalhLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DALH_LastModifiedBy");
                entity.Property(e => e.DalhLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DALH_LastModifiedDate");
                entity.Property(e => e.DalhLineNumber).HasColumnName("DALH_LineNumber");
                entity.Property(e => e.DalhLogHistoryTypeId).HasColumnName("DALH_LogHistoryType_Id");
                entity.Property(e => e.DalhRoleCodeId).HasColumnName("DALH_RoleCode_Id");
                entity.Property(e => e.DalhTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DALH_TimeStamp");

                entity.HasOne(d => d.DalhDossierAssignment).WithMany(p => p.DossierAssignmentLogHistories)
                    .HasForeignKey(d => d.DalhDossierAssignmentId)
                    .HasConstraintName("FK_DossierAssignmentLogHistory_DossierAssignments");

                entity.HasOne(d => d.DalhLogHistoryType).WithMany(p => p.DossierAssignmentLogHistories)
                    .HasForeignKey(d => d.DalhLogHistoryTypeId)
                    .HasConstraintName("FK_DossierAssignmentLogHistory_LogHistoryTypes");

                entity.HasOne(d => d.DalhRoleCode).WithMany(p => p.DossierAssignmentLogHistories)
                    .HasForeignKey(d => d.DalhRoleCodeId)
                    .HasConstraintName("FK_DossierAssignmentLogHistory_RoleCodes");
            });

            modelBuilder.Entity<DossierAssignmentNote>(entity =>
            {
                entity.HasKey(e => e.DanId);

                entity.ToTable("DossierAssignmentNotes", "dos");

                entity.Property(e => e.DanId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DAN_Id");
                entity.Property(e => e.DanCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DAN_CreatedBy");
                entity.Property(e => e.DanCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DAN_CreatedDate");
                entity.Property(e => e.DanDossierAssignmentId).HasColumnName("DAN_DossierAssignment_Id");
                entity.Property(e => e.DanFreeText)
                    .HasColumnType("ntext")
                    .HasColumnName("DAN_FreeText");
                entity.Property(e => e.DanLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DAN_LastModifiedBy");
                entity.Property(e => e.DanLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DAN_LastModifiedDate");
                entity.Property(e => e.DanLineNumber).HasColumnName("DAN_LineNumber");
                entity.Property(e => e.DanNoteTypeId).HasColumnName("DAN_NoteType_Id");
                entity.Property(e => e.DanRoleCodeId).HasColumnName("DAN_RoleCode_Id");
                entity.Property(e => e.DanTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DAN_TimeStamp");
                entity.Property(e => e.DanTitle)
                    .HasMaxLength(50)
                    .HasColumnName("DAN_Title");

                entity.HasOne(d => d.DanDossierAssignment).WithMany(p => p.DossierAssignmentNotes)
                    .HasForeignKey(d => d.DanDossierAssignmentId)
                    .HasConstraintName("FK_DossierAssignmentNotes_DossierAssignments");

                entity.HasOne(d => d.DanNoteType).WithMany(p => p.DossierAssignmentNotes)
                    .HasForeignKey(d => d.DanNoteTypeId)
                    .HasConstraintName("FK_DossierAssignmentNotes_NoteTypes");

                entity.HasOne(d => d.DanRoleCode).WithMany(p => p.DossierAssignmentNotes)
                    .HasForeignKey(d => d.DanRoleCodeId)
                    .HasConstraintName("FK_DossierAssignmentNotes_RoleCodes");
            });

            modelBuilder.Entity<DossierAssignmentNoteRole>(entity =>
            {
                entity.HasKey(e => e.DanrId);

                entity.ToTable("DossierAssignmentNoteRoles", "dos");

                entity.Property(e => e.DanrId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DANR_Id");
                entity.Property(e => e.DanrAuthorizationGroupRoleId)
                    .HasMaxLength(50)
                    .HasColumnName("DANR_AuthorizationGroupRole_Id");
                entity.Property(e => e.DanrCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DANR_CreatedBy");
                entity.Property(e => e.DanrCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DANR_CreatedDate");
                entity.Property(e => e.DanrDossierAssignmentNoteId).HasColumnName("DANR_DossierAssignmentNote_Id");
                entity.Property(e => e.DanrLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DANR_LastModifiedBy");
                entity.Property(e => e.DanrLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DANR_LastModifiedDate");
                entity.Property(e => e.DanrTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DANR_TimeStamp");

                entity.HasOne(d => d.DanrAuthorizationGroupRole).WithMany(p => p.DossierAssignmentNoteRoles)
                    .HasForeignKey(d => d.DanrAuthorizationGroupRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierAssignmentNoteRoles_AuthorizationGroupRoles");

                entity.HasOne(d => d.DanrDossierAssignmentNote).WithMany(p => p.DossierAssignmentNoteRoles)
                    .HasForeignKey(d => d.DanrDossierAssignmentNoteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierAssignmentNoteRoles_DossierAssignmentNotes");
            });

            modelBuilder.Entity<DossierAssignmentNotesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_DossierAssignmentNotes_History_ID");

                entity.ToTable("DossierAssignmentNotes_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.DanCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DAN_CreatedBy");
                entity.Property(e => e.DanCreatedDate).HasColumnName("DAN_CreatedDate");
                entity.Property(e => e.DanDossierAssignmentId).HasColumnName("DAN_DossierAssignment_Id");
                entity.Property(e => e.DanFreeText)
                    .HasColumnType("ntext")
                    .HasColumnName("DAN_FreeText");
                entity.Property(e => e.DanId).HasColumnName("DAN_Id");
                entity.Property(e => e.DanLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DAN_LastModifiedBy");
                entity.Property(e => e.DanLastModifiedDate).HasColumnName("DAN_LastModifiedDate");
                entity.Property(e => e.DanLineNumber).HasColumnName("DAN_LineNumber");
                entity.Property(e => e.DanNoteTypeId).HasColumnName("DAN_NoteType_Id");
                entity.Property(e => e.DanRoleCodeId).HasColumnName("DAN_RoleCode_Id");
                entity.Property(e => e.DanTitle)
                    .HasMaxLength(50)
                    .HasColumnName("DAN_Title");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<DossierAssignmentOperationalStatus>(entity =>
            {
                entity.HasKey(e => e.AosId);

                entity.ToTable("DossierAssignmentOperationalStatuses", "dos");

                entity.Property(e => e.AosId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("AOS_Id");
                entity.Property(e => e.AosCode)
                    .HasMaxLength(10)
                    .HasColumnName("AOS_Code");
                entity.Property(e => e.AosCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AOS_CreatedBy");
                entity.Property(e => e.AosCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("AOS_CreatedDate");
                entity.Property(e => e.AosDossierAssignmentOperationalStatusTypeId)
                    .HasMaxLength(20)
                    .HasColumnName("AOS_DossierAssignmentOperationalStatusType_Id");
                entity.Property(e => e.AosInactive).HasColumnName("AOS_Inactive");
                entity.Property(e => e.AosLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AOS_LastModifiedBy");
                entity.Property(e => e.AosLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("AOS_LastModifiedDate");
                entity.Property(e => e.AosLocalizableEntryId).HasColumnName("AOS_LocalizableEntry_Id");
                entity.Property(e => e.AosLongName)
                    .HasMaxLength(250)
                    .HasColumnName("AOS_LongName");
                entity.Property(e => e.AosShortName)
                    .HasMaxLength(50)
                    .HasColumnName("AOS_ShortName");
                entity.Property(e => e.AosTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("AOS_TimeStamp");

                entity.HasOne(d => d.AosDossierAssignmentOperationalStatusType).WithMany(p => p.DossierAssignmentOperationalStatuses)
                    .HasForeignKey(d => d.AosDossierAssignmentOperationalStatusTypeId)
                    .HasConstraintName("FK_DossierAssignmentOperationalStatuses_DossierAssignmentOperationalStatusTypes");

                entity.HasOne(d => d.AosLocalizableEntry).WithMany(p => p.DossierAssignmentOperationalStatuses)
                    .HasForeignKey(d => d.AosLocalizableEntryId)
                    .HasConstraintName("FK_DossierAssignmentOperationalStatuses_LocalizableEntries");
            });

            modelBuilder.Entity<DossierAssignmentOperationalStatusHistory>(entity =>
            {
                entity.HasKey(e => e.AshId);

                entity.ToTable("DossierAssignmentOperationalStatusHistory", "dos");

                entity.Property(e => e.AshId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("ASH_Id");
                entity.Property(e => e.AshCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ASH_CreatedBy");
                entity.Property(e => e.AshCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ASH_CreatedDate");
                entity.Property(e => e.AshDossierAssignmentId).HasColumnName("ASH_DossierAssignment_Id");
                entity.Property(e => e.AshDossierAssignmentOperationalStatusId).HasColumnName("ASH_DossierAssignmentOperationalStatus_Id");
                entity.Property(e => e.AshEmployeeId).HasColumnName("ASH_Employee_Id");
                entity.Property(e => e.AshLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ASH_LastModifiedBy");
                entity.Property(e => e.AshLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ASH_LastModifiedDate");
                entity.Property(e => e.AshStartDate).HasColumnName("ASH_StartDate");
                entity.Property(e => e.AshStatusChangeReason)
                    .HasMaxLength(250)
                    .HasColumnName("ASH_StatusChangeReason");
                entity.Property(e => e.AshTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ASH_TimeStamp");

                entity.HasOne(d => d.AshDossierAssignment).WithMany(p => p.DossierAssignmentOperationalStatusHistories)
                    .HasForeignKey(d => d.AshDossierAssignmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierAssignmentOperationalStatusHistory_DossierAssignments");

                entity.HasOne(d => d.AshDossierAssignmentOperationalStatus).WithMany(p => p.DossierAssignmentOperationalStatusHistories)
                    .HasForeignKey(d => d.AshDossierAssignmentOperationalStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierAssignmentOperationalStatusHistory_DossierAssignmentOperationalStatuses");
            });

            modelBuilder.Entity<DossierAssignmentOperationalStatusType>(entity =>
            {
                entity.HasKey(e => e.AstId);

                entity.ToTable("DossierAssignmentOperationalStatusTypes", "dos");

                entity.Property(e => e.AstId)
                    .HasMaxLength(20)
                    .HasColumnName("AST_Id");
                entity.Property(e => e.AstCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AST_CreatedBy");
                entity.Property(e => e.AstCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("AST_CreatedDate");
                entity.Property(e => e.AstInactive).HasColumnName("AST_Inactive");
                entity.Property(e => e.AstLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AST_LastModifiedBy");
                entity.Property(e => e.AstLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("AST_LastModifiedDate");
                entity.Property(e => e.AstLocalizableEntryId).HasColumnName("AST_LocalizableEntry_Id");
                entity.Property(e => e.AstName)
                    .HasMaxLength(250)
                    .HasColumnName("AST_Name");
                entity.Property(e => e.AstTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("AST_TimeStamp");

                entity.HasOne(d => d.AstLocalizableEntry).WithMany(p => p.DossierAssignmentOperationalStatusTypes)
                    .HasForeignKey(d => d.AstLocalizableEntryId)
                    .HasConstraintName("FK_DossierAssignmentOperationalStatusTypes_LocalizableEntries");
            });

            modelBuilder.Entity<DossierAssignmentPartiesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_DossierAssignmentParties_History_ID");

                entity.ToTable("DossierAssignmentParties_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.DapCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DAP_CreatedBy");
                entity.Property(e => e.DapCreatedDate).HasColumnName("DAP_CreatedDate");
                entity.Property(e => e.DapDossierAssignmentId).HasColumnName("DAP_DossierAssignment_Id");
                entity.Property(e => e.DapDossierPartyId).HasColumnName("DAP_DossierParty_Id");
                entity.Property(e => e.DapId).HasColumnName("DAP_Id");
                entity.Property(e => e.DapLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DAP_LastModifiedBy");
                entity.Property(e => e.DapLastModifiedDate).HasColumnName("DAP_LastModifiedDate");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<DossierAssignmentParty>(entity =>
            {
                entity.HasKey(e => e.DapId);

                entity.ToTable("DossierAssignmentParties", "dos", tb =>
                {
                    tb.HasTrigger("WorkingOrderParty");
                    tb.HasTrigger("th_dos_DossierAssignmentParties_TraceHistory");
                });

                entity.Property(e => e.DapId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DAP_Id");
                entity.Property(e => e.DapCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DAP_CreatedBy");
                entity.Property(e => e.DapCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DAP_CreatedDate");
                entity.Property(e => e.DapDossierAssignmentId).HasColumnName("DAP_DossierAssignment_Id");
                entity.Property(e => e.DapDossierPartyId).HasColumnName("DAP_DossierParty_Id");
                entity.Property(e => e.DapLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DAP_LastModifiedBy");
                entity.Property(e => e.DapLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DAP_LastModifiedDate");
                entity.Property(e => e.DapTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DAP_TimeStamp");

                entity.HasOne(d => d.DapDossierAssignment).WithMany(p => p.DossierAssignmentParties)
                    .HasForeignKey(d => d.DapDossierAssignmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierAssignmentParties_DossierAssignments");

                entity.HasOne(d => d.DapDossierParty).WithMany(p => p.DossierAssignmentParties)
                    .HasForeignKey(d => d.DapDossierPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierAssignmentParties_DossierParties");
            });

            modelBuilder.Entity<DossierAssignmentStatus>(entity =>
            {
                entity.HasKey(e => e.AstId);

                entity.ToTable("DossierAssignmentStatuses", "dos", tb => tb.HasTrigger("th_dos_DossierAssignmentStatuses_TraceHistory"));

                entity.HasIndex(e => e.AstDossierAssignmentStatusTypeId, "AST_DossierAssignmentStatusType_Id");

                entity.HasIndex(e => e.AstId, "AST_Id");

                entity.Property(e => e.AstId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("AST_Id");
                entity.Property(e => e.AstCode)
                    .HasMaxLength(10)
                    .HasColumnName("AST_Code");
                entity.Property(e => e.AstCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AST_CreatedBy");
                entity.Property(e => e.AstCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("AST_CreatedDate");
                entity.Property(e => e.AstDossierAssignmentStatusTypeId)
                    .HasMaxLength(20)
                    .HasColumnName("AST_DossierAssignmentStatusType_Id");
                entity.Property(e => e.AstInactive).HasColumnName("AST_Inactive");
                entity.Property(e => e.AstLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AST_LastModifiedBy");
                entity.Property(e => e.AstLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("AST_LastModifiedDate");
                entity.Property(e => e.AstLocalizableEntryId).HasColumnName("AST_LocalizableEntry_Id");
                entity.Property(e => e.AstLongName)
                    .HasMaxLength(250)
                    .HasColumnName("AST_LongName");
                entity.Property(e => e.AstShortName)
                    .HasMaxLength(50)
                    .HasColumnName("AST_ShortName");
                entity.Property(e => e.AstTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("AST_TimeStamp");

                entity.HasOne(d => d.AstLocalizableEntry).WithMany(p => p.DossierAssignmentStatuses)
                    .HasForeignKey(d => d.AstLocalizableEntryId)
                    .HasConstraintName("FK_DossierAssignmentStatuses_LocalizableEntries");
            });

            modelBuilder.Entity<DossierAssignmentStatusHistory>(entity =>
            {
                entity.HasKey(e => e.AshId);

                entity.ToTable("DossierAssignmentStatusHistory", "dos", tb =>
                {
                    tb.HasTrigger("SetDossierAssignmentClosingHistory");
                    tb.HasTrigger("SetDossierStatusToHandlingWhenAssignmentStatusIsHandling");
                    tb.HasTrigger("th_dos_DossierAssignmentStatusHistory_TraceHistory");
                    tb.HasTrigger("tr_DossierAssignmentStatusHistory");
                });

                entity.HasIndex(e => e.AshDossierAssignmentId, "AASH_DossierAssignment_Id");

                entity.HasIndex(e => e.AshDossierAssignmentStatusId, "ASH_DossierAssignmentStatus_Id");

                entity.Property(e => e.AshId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("ASH_Id");
                entity.Property(e => e.AshCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ASH_CreatedBy");
                entity.Property(e => e.AshCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ASH_CreatedDate");
                entity.Property(e => e.AshDossierAssignmentId).HasColumnName("ASH_DossierAssignment_Id");
                entity.Property(e => e.AshDossierAssignmentStatusId).HasColumnName("ASH_DossierAssignmentStatus_Id");
                entity.Property(e => e.AshEmployeeId).HasColumnName("ASH_Employee_Id");
                entity.Property(e => e.AshLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ASH_LastModifiedBy");
                entity.Property(e => e.AshLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ASH_LastModifiedDate");
                entity.Property(e => e.AshReason)
                    .HasMaxLength(250)
                    .HasColumnName("ASH_Reason");
                entity.Property(e => e.AshStartDate).HasColumnName("ASH_StartDate");
                entity.Property(e => e.AshTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ASH_TimeStamp");

                entity.HasOne(d => d.AshDossierAssignment).WithMany(p => p.DossierAssignmentStatusHistories)
                    .HasForeignKey(d => d.AshDossierAssignmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierAssignmentStatusHistory_DossierAssignments");

                entity.HasOne(d => d.AshDossierAssignmentStatus).WithMany(p => p.DossierAssignmentStatusHistories)
                    .HasForeignKey(d => d.AshDossierAssignmentStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierAssignmentStatusHistory_DossierAssignmentStatuses");
            });

            modelBuilder.Entity<DossierAssignmentStatusHistoryHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_DossierAssignmentStatusHistory_History_ID");

                entity.ToTable("DossierAssignmentStatusHistory_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.AshCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ASH_CreatedBy");
                entity.Property(e => e.AshCreatedDate).HasColumnName("ASH_CreatedDate");
                entity.Property(e => e.AshDossierAssignmentId).HasColumnName("ASH_DossierAssignment_Id");
                entity.Property(e => e.AshDossierAssignmentStatusId).HasColumnName("ASH_DossierAssignmentStatus_Id");
                entity.Property(e => e.AshEmployeeId).HasColumnName("ASH_Employee_Id");
                entity.Property(e => e.AshId).HasColumnName("ASH_Id");
                entity.Property(e => e.AshLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ASH_LastModifiedBy");
                entity.Property(e => e.AshLastModifiedDate).HasColumnName("ASH_LastModifiedDate");
                entity.Property(e => e.AshReason)
                    .HasMaxLength(250)
                    .HasColumnName("ASH_Reason");
                entity.Property(e => e.AshStartDate).HasColumnName("ASH_StartDate");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<DossierAssignmentStatusType>(entity =>
            {
                entity.HasKey(e => e.DasId);

                entity.ToTable("DossierAssignmentStatusTypes", "dos", tb => tb.HasTrigger("th_dos_DossierAssignmentStatusTypes_TraceHistory"));

                entity.Property(e => e.DasId)
                    .HasMaxLength(20)
                    .HasColumnName("DAS_Id");
                entity.Property(e => e.DasCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DAS_CreatedBy");
                entity.Property(e => e.DasCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DAS_CreatedDate");
                entity.Property(e => e.DasInactive).HasColumnName("DAS_Inactive");
                entity.Property(e => e.DasLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DAS_LastModifiedBy");
                entity.Property(e => e.DasLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DAS_LastModifiedDate");
                entity.Property(e => e.DasLocalizableEntryId).HasColumnName("DAS_LocalizableEntry_Id");
                entity.Property(e => e.DasName)
                    .HasMaxLength(250)
                    .HasColumnName("DAS_Name");
                entity.Property(e => e.DasTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DAS_TimeStamp");

                entity.HasOne(d => d.DasLocalizableEntry).WithMany(p => p.DossierAssignmentStatusTypes)
                    .HasForeignKey(d => d.DasLocalizableEntryId)
                    .HasConstraintName("FK_DossierAssignmentStatusTypes_LocalizableEntries");
            });

            modelBuilder.Entity<DossierAssignmentStatusTypesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_DossierAssignmentStatusTypes_History_ID");

                entity.ToTable("DossierAssignmentStatusTypes_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.DasCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DAS_CreatedBy");
                entity.Property(e => e.DasCreatedDate).HasColumnName("DAS_CreatedDate");
                entity.Property(e => e.DasId)
                    .HasMaxLength(20)
                    .HasColumnName("DAS_Id");
                entity.Property(e => e.DasInactive).HasColumnName("DAS_Inactive");
                entity.Property(e => e.DasLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DAS_LastModifiedBy");
                entity.Property(e => e.DasLastModifiedDate).HasColumnName("DAS_LastModifiedDate");
                entity.Property(e => e.DasLocalizableEntryId).HasColumnName("DAS_LocalizableEntry_Id");
                entity.Property(e => e.DasName)
                    .HasMaxLength(250)
                    .HasColumnName("DAS_Name");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<DossierAssignmentStatusesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_DossierAssignmentStatuses_History_ID");

                entity.ToTable("DossierAssignmentStatuses_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.AstCode)
                    .HasMaxLength(10)
                    .HasColumnName("AST_Code");
                entity.Property(e => e.AstCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AST_CreatedBy");
                entity.Property(e => e.AstCreatedDate).HasColumnName("AST_CreatedDate");
                entity.Property(e => e.AstDossierAssignmentStatusTypeId)
                    .HasMaxLength(20)
                    .HasColumnName("AST_DossierAssignmentStatusType_Id");
                entity.Property(e => e.AstId).HasColumnName("AST_Id");
                entity.Property(e => e.AstInactive).HasColumnName("AST_Inactive");
                entity.Property(e => e.AstLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AST_LastModifiedBy");
                entity.Property(e => e.AstLastModifiedDate).HasColumnName("AST_LastModifiedDate");
                entity.Property(e => e.AstLocalizableEntryId).HasColumnName("AST_LocalizableEntry_Id");
                entity.Property(e => e.AstLongName)
                    .HasMaxLength(250)
                    .HasColumnName("AST_LongName");
                entity.Property(e => e.AstShortName)
                    .HasMaxLength(50)
                    .HasColumnName("AST_ShortName");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<DossierAssignmentType>(entity =>
            {
                entity.HasKey(e => e.FatId);

                entity.ToTable("DossierAssignmentTypes", "dos", tb => tb.HasTrigger("th_dos_DossierAssignmentTypes_TraceHistory"));

                entity.Property(e => e.FatId)
                    .ValueGeneratedNever()
                    .HasColumnName("FAT_Id");
                entity.Property(e => e.FatCode)
                    .HasMaxLength(10)
                    .HasColumnName("FAT_Code");
                entity.Property(e => e.FatCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FAT_CreatedBy");
                entity.Property(e => e.FatCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FAT_CreatedDate");
                entity.Property(e => e.FatInactive).HasColumnName("FAT_Inactive");
                entity.Property(e => e.FatLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FAT_LastModifiedBy");
                entity.Property(e => e.FatLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FAT_LastModifiedDate");
                entity.Property(e => e.FatLocalizableEntryId).HasColumnName("FAT_LocalizableEntry_Id");
                entity.Property(e => e.FatLongName)
                    .HasMaxLength(250)
                    .HasColumnName("FAT_LongName");
                entity.Property(e => e.FatShortName)
                    .HasMaxLength(20)
                    .HasColumnName("FAT_ShortName");
                entity.Property(e => e.FatTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("FAT_TimeStamp");

                entity.HasOne(d => d.FatLocalizableEntry).WithMany(p => p.DossierAssignmentTypes)
                    .HasForeignKey(d => d.FatLocalizableEntryId)
                    .HasConstraintName("FK_DossierAssignmentTypes_LocalizableEntries");
            });

            modelBuilder.Entity<DossierAssignmentTypesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_DossierAssignmentTypes_History_ID");

                entity.ToTable("DossierAssignmentTypes_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.FatCode)
                    .HasMaxLength(10)
                    .HasColumnName("FAT_Code");
                entity.Property(e => e.FatCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FAT_CreatedBy");
                entity.Property(e => e.FatCreatedDate).HasColumnName("FAT_CreatedDate");
                entity.Property(e => e.FatId).HasColumnName("FAT_Id");
                entity.Property(e => e.FatInactive).HasColumnName("FAT_Inactive");
                entity.Property(e => e.FatLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FAT_LastModifiedBy");
                entity.Property(e => e.FatLastModifiedDate).HasColumnName("FAT_LastModifiedDate");
                entity.Property(e => e.FatLocalizableEntryId).HasColumnName("FAT_LocalizableEntry_Id");
                entity.Property(e => e.FatLongName)
                    .HasMaxLength(250)
                    .HasColumnName("FAT_LongName");
                entity.Property(e => e.FatShortName)
                    .HasMaxLength(20)
                    .HasColumnName("FAT_ShortName");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<DossierAssignmentView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DossierAssignment_View", "dos");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EmployeeEmail).HasMaxLength(250);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.Feature).HasMaxLength(10);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.MainActivityCode).HasMaxLength(10);
                entity.Property(e => e.MainActivityName).HasMaxLength(20);
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.Product).HasMaxLength(20);
                entity.Property(e => e.QualityCheckStatus).HasMaxLength(10);
                entity.Property(e => e.Status).HasMaxLength(10);
                entity.Property(e => e.SubStatus).HasMaxLength(10);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<DossierAssignmentVisitInformation>(entity =>
            {
                entity.HasKey(e => e.DavId);

                entity.ToTable("DossierAssignmentVisitInformations", "dos", tb => tb.HasTrigger("th_dos_DossierAssignmentVisitInformations_TraceHistory"));

                entity.HasIndex(e => e.DavDossierAssignmentId, "DossierAssignmentVisitInformations");

                entity.Property(e => e.DavId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DAV_Id");
                entity.Property(e => e.DavCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DAV_CreatedBy");
                entity.Property(e => e.DavCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DAV_CreatedDate");
                entity.Property(e => e.DavDossierAssignmentId).HasColumnName("DAV_DossierAssignment_Id");
                entity.Property(e => e.DavLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DAV_LastModifiedBy");
                entity.Property(e => e.DavLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DAV_LastModifiedDate");
                entity.Property(e => e.DavTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DAV_TimeStamp");
                entity.Property(e => e.DavVisitInformationId).HasColumnName("DAV_VisitInformation_Id");

                entity.HasOne(d => d.DavDossierAssignment).WithMany(p => p.DossierAssignmentVisitInformations)
                    .HasForeignKey(d => d.DavDossierAssignmentId)
                    .HasConstraintName("FK_DossierAssignmentVisitInformations_DossierAssignments");

                entity.HasOne(d => d.DavVisitInformation).WithMany(p => p.DossierAssignmentVisitInformations)
                    .HasForeignKey(d => d.DavVisitInformationId)
                    .HasConstraintName("FK_DossierAssignmentVisitInformations_VisitInformations");
            });

            modelBuilder.Entity<DossierAssignmentVisitInformationsHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_DossierAssignmentVisitInformations_History_ID");

                entity.ToTable("DossierAssignmentVisitInformations_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.DavCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DAV_CreatedBy");
                entity.Property(e => e.DavCreatedDate).HasColumnName("DAV_CreatedDate");
                entity.Property(e => e.DavDossierAssignmentId).HasColumnName("DAV_DossierAssignment_Id");
                entity.Property(e => e.DavId).HasColumnName("DAV_Id");
                entity.Property(e => e.DavLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DAV_LastModifiedBy");
                entity.Property(e => e.DavLastModifiedDate).HasColumnName("DAV_LastModifiedDate");
                entity.Property(e => e.DavVisitInformationId).HasColumnName("DAV_VisitInformation_Id");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<DossierAssignmentsHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_DossierAssignments_History_ID");

                entity.ToTable("DossierAssignments_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.DoaAssignmentNumber)
                    .HasMaxLength(20)
                    .HasColumnName("DOA_AssignmentNumber");
                entity.Property(e => e.DoaAssignmentTypeId).HasColumnName("DOA_AssignmentType_Id");
                entity.Property(e => e.DoaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOA_CreatedBy");
                entity.Property(e => e.DoaCreatedDate).HasColumnName("DOA_CreatedDate");
                entity.Property(e => e.DoaCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("DOA_CurrencyCode");
                entity.Property(e => e.DoaCurrentStatusCode)
                    .HasMaxLength(10)
                    .HasColumnName("DOA_CurrentStatusCode");
                entity.Property(e => e.DoaCurrentStatusHistoryId).HasColumnName("DOA_CurrentStatusHistory_Id");
                entity.Property(e => e.DoaCurrentStatusHistoryStartDate).HasColumnName("DOA_CurrentStatusHistoryStartDate");
                entity.Property(e => e.DoaDepartmentId).HasColumnName("DOA_Department_Id");
                entity.Property(e => e.DoaDossierId).HasColumnName("DOA_Dossier_Id");
                entity.Property(e => e.DoaEmployeeId).HasColumnName("DOA_Employee_Id");
                entity.Property(e => e.DoaId).HasColumnName("DOA_Id");
                entity.Property(e => e.DoaInvolvedCoverageId).HasColumnName("DOA_InvolvedCoverage_Id");
                entity.Property(e => e.DoaInvolvedObjectId).HasColumnName("DOA_InvolvedObject_Id");
                entity.Property(e => e.DoaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOA_LastModifiedBy");
                entity.Property(e => e.DoaLastModifiedDate).HasColumnName("DOA_LastModifiedDate");
                entity.Property(e => e.DoaPartnerId).HasColumnName("DOA_Partner_Id");
                entity.Property(e => e.DoaProductId).HasColumnName("DOA_Product_Id");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<DossierAssignmentsSearchView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DossierAssignmentsSearchView", "ux");

                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LeadCurrencyCode).HasMaxLength(3);
            });

            modelBuilder.Entity<DossierAssignmentsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DossierAssignmentsView", "dos");

                entity.Property(e => e.AssignmentHandlerEmail).HasMaxLength(250);
                entity.Property(e => e.AssignmentHandlerName).HasMaxLength(250);
                entity.Property(e => e.AssignmentHandlerPhone).HasMaxLength(20);
                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.AssignmentStatusAbbreviation).HasMaxLength(50);
                entity.Property(e => e.AssignmentStatusCode).HasMaxLength(10);
                entity.Property(e => e.AssignmentStatusName).HasMaxLength(250);
                entity.Property(e => e.AssignmentTypeAbbreviation).HasMaxLength(20);
                entity.Property(e => e.AssignmentTypeCode).HasMaxLength(10);
                entity.Property(e => e.AssignmentTypeName).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DepartmentAbbreviation).HasMaxLength(20);
                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.DepartmentName).HasMaxLength(756);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityAbbreviation).HasMaxLength(20);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.PartnerAbbreviation).HasMaxLength(20);
                entity.Property(e => e.PartnerCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.PartnerName).HasMaxLength(756);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<DossierAttachment>(entity =>
            {
                entity.HasKey(e => e.DatId);

                entity.ToTable("DossierAttachments", "dos");

                entity.Property(e => e.DatId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DAT_Id");
                entity.Property(e => e.DatCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DAT_CreatedBy");
                entity.Property(e => e.DatCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DAT_CreatedDate");
                entity.Property(e => e.DatDocumentId).HasColumnName("DAT_Document_Id");
                entity.Property(e => e.DatDossierId).HasColumnName("DAT_Dossier_Id");
                entity.Property(e => e.DatInactive).HasColumnName("DAT_Inactive");
                entity.Property(e => e.DatLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DAT_LastModifiedBy");
                entity.Property(e => e.DatLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DAT_LastModifiedDate");
                entity.Property(e => e.DatTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DAT_TimeStamp");

                entity.HasOne(d => d.DatDocument).WithMany(p => p.DossierAttachments)
                    .HasForeignKey(d => d.DatDocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierAttachments_Documents");

                entity.HasOne(d => d.DatDossier).WithMany(p => p.DossierAttachments)
                    .HasForeignKey(d => d.DatDossierId)
                    .HasConstraintName("FK_DossierAttachments_Dossiers");
            });

            modelBuilder.Entity<DossierAuthorization>(entity =>
            {
                entity.HasKey(e => e.DauId);

                entity.ToTable("DossierAuthorizations", "dos", tb => tb.HasTrigger("th_dos_DossierAuthorizations_TraceHistory"));

                entity.Property(e => e.DauId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DAU_Id");
                entity.Property(e => e.DauCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DAU_CreatedBy");
                entity.Property(e => e.DauCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DAU_CreatedDate");
                entity.Property(e => e.DauDossierId).HasColumnName("DAU_Dossier_Id");
                entity.Property(e => e.DauLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DAU_LastModifiedBy");
                entity.Property(e => e.DauLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DAU_LastModifiedDate");
                entity.Property(e => e.DauRequiredAutorizationRoleId)
                    .HasMaxLength(50)
                    .HasColumnName("DAU_RequiredAutorizationRole_Id");
                entity.Property(e => e.DauTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DAU_TimeStamp");

                entity.HasOne(d => d.DauDossier).WithMany(p => p.DossierAuthorizations)
                    .HasForeignKey(d => d.DauDossierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierAuthorizations_Dossiers");

                entity.HasOne(d => d.DauRequiredAutorizationRole).WithMany(p => p.DossierAuthorizations)
                    .HasForeignKey(d => d.DauRequiredAutorizationRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierAuthorizations_AuthorizationRoles");
            });

            modelBuilder.Entity<DossierAuthorizationsHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_DossierAuthorizations_History_ID");

                entity.ToTable("DossierAuthorizations_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.DauCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DAU_CreatedBy");
                entity.Property(e => e.DauCreatedDate).HasColumnName("DAU_CreatedDate");
                entity.Property(e => e.DauDossierId).HasColumnName("DAU_Dossier_Id");
                entity.Property(e => e.DauId).HasColumnName("DAU_Id");
                entity.Property(e => e.DauLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DAU_LastModifiedBy");
                entity.Property(e => e.DauLastModifiedDate).HasColumnName("DAU_LastModifiedDate");
                entity.Property(e => e.DauRequiredAutorizationRoleId)
                    .HasMaxLength(50)
                    .HasColumnName("DAU_RequiredAutorizationRole_Id");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<DossierAuthorizationsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DossierAuthorizationsView", "dos");

                entity.Property(e => e.ApprovalComment).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.SelectedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<DossierAuthorizationsWithoutApprovalsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DossierAuthorizationsWithoutApprovalsView", "dos");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<DossierClientHandlerHistory>(entity =>
            {
                entity.HasKey(e => e.DchId);

                entity.ToTable("DossierClientHandlerHistory", "dos", tb => tb.HasTrigger("th_dos_DossierClientHandlerHistory_TraceHistory"));

                entity.Property(e => e.DchId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DCH_Id");
                entity.Property(e => e.DchClientHandlerEmail)
                    .HasMaxLength(250)
                    .HasColumnName("DCH_ClientHandlerEmail");
                entity.Property(e => e.DchClientHandlerName)
                    .HasMaxLength(250)
                    .HasColumnName("DCH_ClientHandlerName");
                entity.Property(e => e.DchClientHandlerPhone)
                    .HasMaxLength(20)
                    .HasColumnName("DCH_ClientHandlerPhone");
                entity.Property(e => e.DchCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DCH_CreatedBy");
                entity.Property(e => e.DchCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DCH_CreatedDate");
                entity.Property(e => e.DchDossierId).HasColumnName("DCH_Dossier_Id");
                entity.Property(e => e.DchLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DCH_LastModifiedBy");
                entity.Property(e => e.DchLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DCH_LastModifiedDate");
                entity.Property(e => e.DchStartDate).HasColumnName("DCH_StartDate");
                entity.Property(e => e.DchTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DCH_TimeStamp");

                entity.HasOne(d => d.DchDossier).WithMany(p => p.DossierClientHandlerHistories)
                    .HasForeignKey(d => d.DchDossierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierClientHandlerHistory_Dossier");
            });

            modelBuilder.Entity<DossierClientHandlerHistoryHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_DossierClientHandlerHistory_History_ID");

                entity.ToTable("DossierClientHandlerHistory_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.DchClientHandlerEmail)
                    .HasMaxLength(250)
                    .HasColumnName("DCH_ClientHandlerEmail");
                entity.Property(e => e.DchClientHandlerName)
                    .HasMaxLength(250)
                    .HasColumnName("DCH_ClientHandlerName");
                entity.Property(e => e.DchClientHandlerPhone)
                    .HasMaxLength(20)
                    .HasColumnName("DCH_ClientHandlerPhone");
                entity.Property(e => e.DchCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DCH_CreatedBy");
                entity.Property(e => e.DchCreatedDate).HasColumnName("DCH_CreatedDate");
                entity.Property(e => e.DchDossierId).HasColumnName("DCH_Dossier_Id");
                entity.Property(e => e.DchId).HasColumnName("DCH_Id");
                entity.Property(e => e.DchLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DCH_LastModifiedBy");
                entity.Property(e => e.DchLastModifiedDate).HasColumnName("DCH_LastModifiedDate");
                entity.Property(e => e.DchStartDate).HasColumnName("DCH_StartDate");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<DossierClosingHistoriesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DossierClosingHistoriesView", "dos");

                entity.Property(e => e.ClosingReason).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierStatusCode).HasMaxLength(10);
                entity.Property(e => e.DossierStatusName).HasMaxLength(250);
                entity.Property(e => e.DossierStatusType).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<DossierClosingHistory>(entity =>
            {
                entity.HasKey(e => e.DchId);

                entity.ToTable("DossierClosingHistory", "dos", tb => tb.HasTrigger("th_dos_DossierClosingHistory_TraceHistory"));

                entity.HasIndex(e => e.DchDossierId, "IX_dos_DossierClosingHistory_Dossier");

                entity.Property(e => e.DchId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DCH_Id");
                entity.Property(e => e.DchCancelled).HasColumnName("DCH_Cancelled");
                entity.Property(e => e.DchClosingDate).HasColumnName("DCH_ClosingDate");
                entity.Property(e => e.DchClosingReason)
                    .HasMaxLength(250)
                    .HasColumnName("DCH_ClosingReason");
                entity.Property(e => e.DchCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DCH_CreatedBy");
                entity.Property(e => e.DchCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DCH_CreatedDate");
                entity.Property(e => e.DchDossierId).HasColumnName("DCH_Dossier_Id");
                entity.Property(e => e.DchFinancialClosing).HasColumnName("DCH_FinancialClosing");
                entity.Property(e => e.DchLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DCH_LastModifiedBy");
                entity.Property(e => e.DchLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DCH_LastModifiedDate");
                entity.Property(e => e.DchOperationalClosing)
                    .IsRequired()
                    .HasDefaultValueSql("((1))")
                    .HasColumnName("DCH_OperationalClosing");
                entity.Property(e => e.DchTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DCH_TimeStamp");

                entity.HasOne(d => d.DchDossier).WithMany(p => p.DossierClosingHistories)
                    .HasForeignKey(d => d.DchDossierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierClosingHistory_Dossiers");
            });

            modelBuilder.Entity<DossierClosingHistoryHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_DossierClosingHistory_History_ID");

                entity.ToTable("DossierClosingHistory_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.DchCancelled).HasColumnName("DCH_Cancelled");
                entity.Property(e => e.DchClosingDate).HasColumnName("DCH_ClosingDate");
                entity.Property(e => e.DchClosingReason)
                    .HasMaxLength(250)
                    .HasColumnName("DCH_ClosingReason");
                entity.Property(e => e.DchCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DCH_CreatedBy");
                entity.Property(e => e.DchCreatedDate).HasColumnName("DCH_CreatedDate");
                entity.Property(e => e.DchDossierId).HasColumnName("DCH_Dossier_Id");
                entity.Property(e => e.DchFinancialClosing).HasColumnName("DCH_FinancialClosing");
                entity.Property(e => e.DchId).HasColumnName("DCH_Id");
                entity.Property(e => e.DchLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DCH_LastModifiedBy");
                entity.Property(e => e.DchLastModifiedDate).HasColumnName("DCH_LastModifiedDate");
                entity.Property(e => e.DchOperationalClosing).HasColumnName("DCH_OperationalClosing");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<DossierContactPerson>(entity =>
            {
                entity.HasKey(e => e.DcpId);

                entity.ToTable("DossierContactPersons", "dos", tb => tb.HasTrigger("th_dos_DossierContactPersons_TraceHistory"));

                entity.HasIndex(e => e.DcpDossierId, "DossierContactPersons");

                entity.Property(e => e.DcpId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DCP_Id");
                entity.Property(e => e.DcpContactPersonId).HasColumnName("DCP_ContactPerson_Id");
                entity.Property(e => e.DcpContactPersonTypeId).HasColumnName("DCP_ContactPersonType_Id");
                entity.Property(e => e.DcpCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DCP_CreatedBy");
                entity.Property(e => e.DcpCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DCP_CreatedDate");
                entity.Property(e => e.DcpDossierId).HasColumnName("DCP_Dossier_Id");
                entity.Property(e => e.DcpEffectiveDate).HasColumnName("DCP_EffectiveDate");
                entity.Property(e => e.DcpLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DCP_LastModifiedBy");
                entity.Property(e => e.DcpLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DCP_LastModifiedDate");
                entity.Property(e => e.DcpTerminationDate).HasColumnName("DCP_TerminationDate");
                entity.Property(e => e.DcpTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DCP_TimeStamp");

                entity.HasOne(d => d.DcpContactPerson).WithMany(p => p.DossierContactPeople)
                    .HasForeignKey(d => d.DcpContactPersonId)
                    .HasConstraintName("FK_DossierContactPersons_ContactPersons");

                entity.HasOne(d => d.DcpContactPersonType).WithMany(p => p.DossierContactPeople)
                    .HasForeignKey(d => d.DcpContactPersonTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierContactPersons_ContactPersonTypes");

                entity.HasOne(d => d.DcpDossier).WithMany(p => p.DossierContactPeople)
                    .HasForeignKey(d => d.DcpDossierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierContactPersons_Dossiers");
            });

            modelBuilder.Entity<DossierContactPersonsHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_DossierContactPersons_History_ID");

                entity.ToTable("DossierContactPersons_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.DcpContactPersonId).HasColumnName("DCP_ContactPerson_Id");
                entity.Property(e => e.DcpContactPersonTypeId).HasColumnName("DCP_ContactPersonType_Id");
                entity.Property(e => e.DcpCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DCP_CreatedBy");
                entity.Property(e => e.DcpCreatedDate).HasColumnName("DCP_CreatedDate");
                entity.Property(e => e.DcpDossierId).HasColumnName("DCP_Dossier_Id");
                entity.Property(e => e.DcpEffectiveDate).HasColumnName("DCP_EffectiveDate");
                entity.Property(e => e.DcpId).HasColumnName("DCP_Id");
                entity.Property(e => e.DcpLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DCP_LastModifiedBy");
                entity.Property(e => e.DcpLastModifiedDate).HasColumnName("DCP_LastModifiedDate");
                entity.Property(e => e.DcpTerminationDate).HasColumnName("DCP_TerminationDate");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<DossierCostType>(entity =>
            {
                entity.HasKey(e => e.DctId);

                entity.ToTable("DossierCostTypes", "dos", tb => tb.HasTrigger("th_dos_DossierCostTypes_TraceHistory"));

                entity.Property(e => e.DctId)
                    .ValueGeneratedNever()
                    .HasColumnName("DCT_Id");
                entity.Property(e => e.DctCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DCT_CreatedBy");
                entity.Property(e => e.DctCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DCT_CreatedDate");
                entity.Property(e => e.DctInactive).HasColumnName("DCT_Inactive");
                entity.Property(e => e.DctLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DCT_LastModifiedBy");
                entity.Property(e => e.DctLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DCT_LastModifiedDate");
                entity.Property(e => e.DctLocalizableEntryId).HasColumnName("DCT_LocalizableEntry_Id");
                entity.Property(e => e.DctName)
                    .HasMaxLength(250)
                    .HasColumnName("DCT_Name");
                entity.Property(e => e.DctTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DCT_TimeStamp");

                entity.HasOne(d => d.DctLocalizableEntry).WithMany(p => p.DossierCostTypes)
                    .HasForeignKey(d => d.DctLocalizableEntryId)
                    .HasConstraintName("FK_DossierCostTypes_LocalizableEntries");
            });

            modelBuilder.Entity<DossierCostTypesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_DossierCostTypes_History_ID");

                entity.ToTable("DossierCostTypes_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.DctCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DCT_CreatedBy");
                entity.Property(e => e.DctCreatedDate).HasColumnName("DCT_CreatedDate");
                entity.Property(e => e.DctId).HasColumnName("DCT_Id");
                entity.Property(e => e.DctInactive).HasColumnName("DCT_Inactive");
                entity.Property(e => e.DctLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DCT_LastModifiedBy");
                entity.Property(e => e.DctLastModifiedDate).HasColumnName("DCT_LastModifiedDate");
                entity.Property(e => e.DctLocalizableEntryId).HasColumnName("DCT_LocalizableEntry_Id");
                entity.Property(e => e.DctName)
                    .HasMaxLength(250)
                    .HasColumnName("DCT_Name");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<DossierFeeSalesOrdersView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DossierFeeSalesOrdersView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.SalesOdersAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<DossierHandler>(entity =>
            {
                entity.HasKey(e => e.DohId);

                entity.ToTable("DossierHandlers", "dos", tb => tb.HasTrigger("th_dos_DossierHandlers_TraceHistory"));

                entity.Property(e => e.DohId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DOH_Id");
                entity.Property(e => e.DohCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOH_CreatedBy");
                entity.Property(e => e.DohCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DOH_CreatedDate");
                entity.Property(e => e.DohDossierId).HasColumnName("DOH_Dossier_Id");
                entity.Property(e => e.DohEmployeeId).HasColumnName("DOH_Employee_Id");
                entity.Property(e => e.DohLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOH_LastModifiedBy");
                entity.Property(e => e.DohLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DOH_LastModifiedDate");
                entity.Property(e => e.DohStartDate).HasColumnName("DOH_StartDate");
                entity.Property(e => e.DohTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DOH_TimeStamp");

                entity.HasOne(d => d.DohDossier).WithMany(p => p.DossierHandlers)
                    .HasForeignKey(d => d.DohDossierId)
                    .HasConstraintName("FK_DossierHandlers_Dossiers");
            });

            modelBuilder.Entity<DossierHandlersHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_DossierHandlers_History_ID");

                entity.ToTable("DossierHandlers_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.DohCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOH_CreatedBy");
                entity.Property(e => e.DohCreatedDate).HasColumnName("DOH_CreatedDate");
                entity.Property(e => e.DohDossierId).HasColumnName("DOH_Dossier_Id");
                entity.Property(e => e.DohEmployeeId).HasColumnName("DOH_Employee_Id");
                entity.Property(e => e.DohId).HasColumnName("DOH_Id");
                entity.Property(e => e.DohLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOH_LastModifiedBy");
                entity.Property(e => e.DohLastModifiedDate).HasColumnName("DOH_LastModifiedDate");
                entity.Property(e => e.DohStartDate).HasColumnName("DOH_StartDate");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<DossierInsuree>(entity =>
            {
                entity.HasKey(e => e.DoiId);

                entity.ToTable("DossierInsurees", "dos", tb => tb.HasTrigger("th_dos_DossierInsurees_TraceHistory"));

                entity.HasIndex(e => e.DoiDossierId, "IX_DossierInsurees_DOI_Dossier_Id");

                entity.HasIndex(e => e.DoiDossierPartyId, "IX_dos_DossierInsurees_DossierParty");

                entity.Property(e => e.DoiId)
                    .ValueGeneratedNever()
                    .HasColumnName("DOI_Id");
                entity.Property(e => e.DoiCity)
                    .HasMaxLength(200)
                    .HasColumnName("DOI_City");
                entity.Property(e => e.DoiCountryCodeIso3)
                    .HasMaxLength(3)
                    .HasColumnName("DOI_CountryCodeISO3");
                entity.Property(e => e.DoiCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOI_CreatedBy");
                entity.Property(e => e.DoiCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DOI_CreatedDate");
                entity.Property(e => e.DoiDateOfBirth)
                    .HasColumnType("date")
                    .HasColumnName("DOI_DateOfBirth");
                entity.Property(e => e.DoiDossierId).HasColumnName("DOI_Dossier_Id");
                entity.Property(e => e.DoiDossierPartyId).HasColumnName("DOI_DossierParty_Id");
                entity.Property(e => e.DoiFirstName)
                    .HasMaxLength(200)
                    .HasColumnName("DOI_FirstName");
                entity.Property(e => e.DoiFormattedAddress)
                    .HasMaxLength(200)
                    .HasColumnName("DOI_FormattedAddress");
                entity.Property(e => e.DoiFormattedName)
                    .HasMaxLength(200)
                    .HasColumnName("DOI_FormattedName");
                entity.Property(e => e.DoiHouseNumber)
                    .HasMaxLength(50)
                    .HasColumnName("DOI_HouseNumber");
                entity.Property(e => e.DoiHouseNumberAddition)
                    .HasMaxLength(200)
                    .HasColumnName("DOI_HouseNumberAddition");
                entity.Property(e => e.DoiInactive).HasColumnName("DOI_Inactive");
                entity.Property(e => e.DoiInitials)
                    .HasMaxLength(20)
                    .HasColumnName("DOI_Initials");
                entity.Property(e => e.DoiLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOI_LastModifiedBy");
                entity.Property(e => e.DoiLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DOI_LastModifiedDate");
                entity.Property(e => e.DoiLastName)
                    .HasMaxLength(200)
                    .HasColumnName("DOI_LastName");
                entity.Property(e => e.DoiPolicyNumber)
                    .HasMaxLength(20)
                    .HasColumnName("DOI_PolicyNumber");
                entity.Property(e => e.DoiPostalCode)
                    .HasMaxLength(10)
                    .HasColumnName("DOI_PostalCode");
                entity.Property(e => e.DoiPrefixLastName)
                    .HasMaxLength(200)
                    .HasColumnName("DOI_PrefixLastName");
                entity.Property(e => e.DoiStreetName)
                    .HasMaxLength(200)
                    .HasColumnName("DOI_StreetName");
                entity.Property(e => e.DoiTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DOI_TimeStamp");

                entity.HasOne(d => d.DoiDossier).WithMany(p => p.DossierInsurees)
                    .HasForeignKey(d => d.DoiDossierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierInsurees_Dossiers");

                entity.HasOne(d => d.DoiDossierParty).WithMany(p => p.DossierInsurees)
                    .HasForeignKey(d => d.DoiDossierPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierInsurees_DossierParties");
            });

            modelBuilder.Entity<DossierInsureesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_DossierInsurees_History_ID");

                entity.ToTable("DossierInsurees_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.DoiCity)
                    .HasMaxLength(200)
                    .HasColumnName("DOI_City");
                entity.Property(e => e.DoiCountryCodeIso3)
                    .HasMaxLength(3)
                    .HasColumnName("DOI_CountryCodeISO3");
                entity.Property(e => e.DoiCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOI_CreatedBy");
                entity.Property(e => e.DoiCreatedDate).HasColumnName("DOI_CreatedDate");
                entity.Property(e => e.DoiDateOfBirth)
                    .HasColumnType("date")
                    .HasColumnName("DOI_DateOfBirth");
                entity.Property(e => e.DoiDossierId).HasColumnName("DOI_Dossier_Id");
                entity.Property(e => e.DoiDossierPartyId).HasColumnName("DOI_DossierParty_Id");
                entity.Property(e => e.DoiFirstName)
                    .HasMaxLength(200)
                    .HasColumnName("DOI_FirstName");
                entity.Property(e => e.DoiFormattedAddress)
                    .HasMaxLength(200)
                    .HasColumnName("DOI_FormattedAddress");
                entity.Property(e => e.DoiFormattedName)
                    .HasMaxLength(200)
                    .HasColumnName("DOI_FormattedName");
                entity.Property(e => e.DoiHouseNumber)
                    .HasMaxLength(50)
                    .HasColumnName("DOI_HouseNumber");
                entity.Property(e => e.DoiHouseNumberAddition)
                    .HasMaxLength(200)
                    .HasColumnName("DOI_HouseNumberAddition");
                entity.Property(e => e.DoiId).HasColumnName("DOI_Id");
                entity.Property(e => e.DoiInactive).HasColumnName("DOI_Inactive");
                entity.Property(e => e.DoiInitials)
                    .HasMaxLength(20)
                    .HasColumnName("DOI_Initials");
                entity.Property(e => e.DoiLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOI_LastModifiedBy");
                entity.Property(e => e.DoiLastModifiedDate).HasColumnName("DOI_LastModifiedDate");
                entity.Property(e => e.DoiLastName)
                    .HasMaxLength(200)
                    .HasColumnName("DOI_LastName");
                entity.Property(e => e.DoiPolicyNumber)
                    .HasMaxLength(20)
                    .HasColumnName("DOI_PolicyNumber");
                entity.Property(e => e.DoiPostalCode)
                    .HasMaxLength(10)
                    .HasColumnName("DOI_PostalCode");
                entity.Property(e => e.DoiPrefixLastName)
                    .HasMaxLength(200)
                    .HasColumnName("DOI_PrefixLastName");
                entity.Property(e => e.DoiStreetName)
                    .HasMaxLength(200)
                    .HasColumnName("DOI_StreetName");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<DossierLine>(entity =>
            {
                entity.HasKey(e => e.DolId);

                entity.ToTable("DossierLines", "dos", tb => tb.HasTrigger("th_dos_DossierLines_TraceHistory"));

                entity.Property(e => e.DolId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DOL_Id");
                entity.Property(e => e.DolCanceled).HasColumnName("DOL_Canceled");
                entity.Property(e => e.DolCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOL_CreatedBy");
                entity.Property(e => e.DolCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DOL_CreatedDate");
                entity.Property(e => e.DolDescription)
                    .HasMaxLength(250)
                    .HasColumnName("DOL_Description");
                entity.Property(e => e.DolDossierId).HasColumnName("DOL_Dossier_Id");
                entity.Property(e => e.DolLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOL_LastModifiedBy");
                entity.Property(e => e.DolLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DOL_LastModifiedDate");
                entity.Property(e => e.DolNumber).HasColumnName("DOL_Number");
                entity.Property(e => e.DolPriority)
                    .HasMaxLength(10)
                    .HasColumnName("DOL_Priority");
                entity.Property(e => e.DolReparActionTypeId).HasColumnName("DOL_ReparActionType_Id");
                entity.Property(e => e.DolSkillId).HasColumnName("DOL_Skill_Id");
                entity.Property(e => e.DolStatus).HasColumnName("DOL_Status");
                entity.Property(e => e.DolTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DOL_TimeStamp");

                entity.HasOne(d => d.DolDossier).WithMany(p => p.DossierLines)
                    .HasForeignKey(d => d.DolDossierId)
                    .HasConstraintName("FK_DossierLines_Dossiers");

                entity.HasOne(d => d.DolSkill).WithMany(p => p.DossierLines)
                    .HasForeignKey(d => d.DolSkillId)
                    .HasConstraintName("FK_DossierLines_Skills");
            });

            modelBuilder.Entity<DossierLinesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_DossierLines_History_ID");

                entity.ToTable("DossierLines_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.DolCanceled).HasColumnName("DOL_Canceled");
                entity.Property(e => e.DolCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOL_CreatedBy");
                entity.Property(e => e.DolCreatedDate).HasColumnName("DOL_CreatedDate");
                entity.Property(e => e.DolDescription)
                    .HasMaxLength(250)
                    .HasColumnName("DOL_Description");
                entity.Property(e => e.DolDossierId).HasColumnName("DOL_Dossier_Id");
                entity.Property(e => e.DolId).HasColumnName("DOL_Id");
                entity.Property(e => e.DolLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOL_LastModifiedBy");
                entity.Property(e => e.DolLastModifiedDate).HasColumnName("DOL_LastModifiedDate");
                entity.Property(e => e.DolNumber).HasColumnName("DOL_Number");
                entity.Property(e => e.DolPriority)
                    .HasMaxLength(10)
                    .HasColumnName("DOL_Priority");
                entity.Property(e => e.DolReparActionTypeId).HasColumnName("DOL_ReparActionType_Id");
                entity.Property(e => e.DolSkillId).HasColumnName("DOL_Skill_Id");
                entity.Property(e => e.DolStatus).HasColumnName("DOL_Status");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<DossierLogHistory>(entity =>
            {
                entity.HasKey(e => e.DhlId);

                entity.ToTable("DossierLogHistory", "dos");

                entity.Property(e => e.DhlId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DHL_Id");
                entity.Property(e => e.DhlCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DHL_CreatedBy");
                entity.Property(e => e.DhlCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DHL_CreatedDate");
                entity.Property(e => e.DhlDossierId).HasColumnName("DHL_Dossier_Id");
                entity.Property(e => e.DhlFreeText)
                    .HasColumnType("ntext")
                    .HasColumnName("DHL_FreeText");
                entity.Property(e => e.DhlLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DHL_LastModifiedBy");
                entity.Property(e => e.DhlLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DHL_LastModifiedDate");
                entity.Property(e => e.DhlLineNumber).HasColumnName("DHL_LineNumber");
                entity.Property(e => e.DhlLogHistoryTypeId).HasColumnName("DHL_LogHistoryType_Id");
                entity.Property(e => e.DhlRoleCodeId).HasColumnName("DHL_RoleCode_Id");
                entity.Property(e => e.DhlTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DHL_TimeStamp");

                entity.HasOne(d => d.DhlDossier).WithMany(p => p.DossierLogHistories)
                    .HasForeignKey(d => d.DhlDossierId)
                    .HasConstraintName("FK_DossierLogHistory_Dossiers");

                entity.HasOne(d => d.DhlLogHistoryType).WithMany(p => p.DossierLogHistories)
                    .HasForeignKey(d => d.DhlLogHistoryTypeId)
                    .HasConstraintName("FK_DossierLogHistory_LogHistoryTypes");

                entity.HasOne(d => d.DhlRoleCode).WithMany(p => p.DossierLogHistories)
                    .HasForeignKey(d => d.DhlRoleCodeId)
                    .HasConstraintName("FK_DossierLogHistory_RoleCodes");
            });

            modelBuilder.Entity<DossierLogHistoryHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_DossierLogHistory_History_ID");

                entity.ToTable("DossierLogHistory_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.DhlCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DHL_CreatedBy");
                entity.Property(e => e.DhlCreatedDate).HasColumnName("DHL_CreatedDate");
                entity.Property(e => e.DhlDossierId).HasColumnName("DHL_Dossier_Id");
                entity.Property(e => e.DhlFreeText)
                    .HasColumnType("ntext")
                    .HasColumnName("DHL_FreeText");
                entity.Property(e => e.DhlId).HasColumnName("DHL_Id");
                entity.Property(e => e.DhlLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DHL_LastModifiedBy");
                entity.Property(e => e.DhlLastModifiedDate).HasColumnName("DHL_LastModifiedDate");
                entity.Property(e => e.DhlLineNumber).HasColumnName("DHL_LineNumber");
                entity.Property(e => e.DhlLogHistoryTypeId).HasColumnName("DHL_LogHistoryType_Id");
                entity.Property(e => e.DhlRoleCodeId).HasColumnName("DHL_RoleCode_Id");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<DossierNote>(entity =>
            {
                entity.HasKey(e => e.DonId);

                entity.ToTable("DossierNotes", "dos");

                entity.HasIndex(e => e.DonDossierId, "IX_DossierNotes_Dossier");

                entity.Property(e => e.DonId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DON_Id");
                entity.Property(e => e.DonCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DON_CreatedBy");
                entity.Property(e => e.DonCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DON_CreatedDate");
                entity.Property(e => e.DonDossierId).HasColumnName("DON_Dossier_Id");
                entity.Property(e => e.DonFreeText).HasColumnName("DON_FreeText");
                entity.Property(e => e.DonInactive).HasColumnName("DON_Inactive");
                entity.Property(e => e.DonLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DON_LastModifiedBy");
                entity.Property(e => e.DonLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DON_LastModifiedDate");
                entity.Property(e => e.DonLineNumber).HasColumnName("DON_LineNumber");
                entity.Property(e => e.DonNoteTypeId).HasColumnName("DON_NoteType_Id");
                entity.Property(e => e.DonRoleCodeId).HasColumnName("DON_RoleCode_Id");
                entity.Property(e => e.DonTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DON_TimeStamp");

                entity.HasOne(d => d.DonDossier).WithMany(p => p.DossierNotes)
                    .HasForeignKey(d => d.DonDossierId)
                    .HasConstraintName("FK_DossierNotes_Dossiers");

                entity.HasOne(d => d.DonNoteType).WithMany(p => p.DossierNotes)
                    .HasForeignKey(d => d.DonNoteTypeId)
                    .HasConstraintName("FK_DossierNotes_NoteTypes");

                entity.HasOne(d => d.DonRoleCode).WithMany(p => p.DossierNotes)
                    .HasForeignKey(d => d.DonRoleCodeId)
                    .HasConstraintName("FK_DossierNotes_RoleCodes");
            });

            modelBuilder.Entity<DossierOperationalStatus>(entity =>
            {
                entity.HasKey(e => e.OpsId);

                entity.ToTable("DossierOperationalStatuses", "dos");

                entity.Property(e => e.OpsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("OPS_Id");
                entity.Property(e => e.OpsCode)
                    .HasMaxLength(10)
                    .HasColumnName("OPS_Code");
                entity.Property(e => e.OpsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OPS_CreatedBy");
                entity.Property(e => e.OpsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OPS_CreatedDate");
                entity.Property(e => e.OpsDossierOperationalStatusTypeId)
                    .HasMaxLength(20)
                    .HasColumnName("OPS_DossierOperationalStatusType_Id");
                entity.Property(e => e.OpsInactive).HasColumnName("OPS_Inactive");
                entity.Property(e => e.OpsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OPS_LastModifiedBy");
                entity.Property(e => e.OpsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OPS_LastModifiedDate");
                entity.Property(e => e.OpsLocalizableEntryId).HasColumnName("OPS_LocalizableEntry_Id");
                entity.Property(e => e.OpsLongName)
                    .HasMaxLength(250)
                    .HasColumnName("OPS_LongName");
                entity.Property(e => e.OpsShortName)
                    .HasMaxLength(50)
                    .HasColumnName("OPS_ShortName");
                entity.Property(e => e.OpsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OPS_TimeStamp");

                entity.HasOne(d => d.OpsDossierOperationalStatusType).WithMany(p => p.DossierOperationalStatuses)
                    .HasForeignKey(d => d.OpsDossierOperationalStatusTypeId)
                    .HasConstraintName("FK_DossierOperationalStatuses_DossierOperationalStatusTypes");

                entity.HasOne(d => d.OpsLocalizableEntry).WithMany(p => p.DossierOperationalStatuses)
                    .HasForeignKey(d => d.OpsLocalizableEntryId)
                    .HasConstraintName("FK_DossierOperationalStatuses_LocalizableEntries");
            });

            modelBuilder.Entity<DossierOperationalStatusHistory>(entity =>
            {
                entity.HasKey(e => e.OshId);

                entity.ToTable("DossierOperationalStatusHistory", "dos");

                entity.Property(e => e.OshId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("OSH_Id");
                entity.Property(e => e.OshCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OSH_CreatedBy");
                entity.Property(e => e.OshCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OSH_CreatedDate");
                entity.Property(e => e.OshDossierId).HasColumnName("OSH_Dossier_Id");
                entity.Property(e => e.OshDossierOperationalStatusId).HasColumnName("OSH_DossierOperationalStatus_Id");
                entity.Property(e => e.OshEmployeeId).HasColumnName("OSH_Employee_Id");
                entity.Property(e => e.OshLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OSH_LastModifiedBy");
                entity.Property(e => e.OshLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OSH_LastModifiedDate");
                entity.Property(e => e.OshStartDate).HasColumnName("OSH_StartDate");
                entity.Property(e => e.OshStatusChangeReason)
                    .HasMaxLength(250)
                    .HasColumnName("OSH_StatusChangeReason");
                entity.Property(e => e.OshTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OSH_TimeStamp");

                entity.HasOne(d => d.OshDossier).WithMany(p => p.DossierOperationalStatusHistories)
                    .HasForeignKey(d => d.OshDossierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierOperationalStatusHistory_Dossiers");

                entity.HasOne(d => d.OshDossierOperationalStatus).WithMany(p => p.DossierOperationalStatusHistories)
                    .HasForeignKey(d => d.OshDossierOperationalStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierOperationalStatusHistory_DossierOperationalStatuses");
            });

            modelBuilder.Entity<DossierOperationalStatusType>(entity =>
            {
                entity.HasKey(e => e.DstId);

                entity.ToTable("DossierOperationalStatusTypes", "dos");

                entity.Property(e => e.DstId)
                    .HasMaxLength(20)
                    .HasColumnName("DST_Id");
                entity.Property(e => e.DstCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DST_CreatedBy");
                entity.Property(e => e.DstCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DST_CreatedDate");
                entity.Property(e => e.DstInactive).HasColumnName("DST_Inactive");
                entity.Property(e => e.DstLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DST_LastModifiedBy");
                entity.Property(e => e.DstLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DST_LastModifiedDate");
                entity.Property(e => e.DstLocalizableEntryId).HasColumnName("DST_LocalizableEntry_Id");
                entity.Property(e => e.DstName)
                    .HasMaxLength(250)
                    .HasColumnName("DST_Name");
                entity.Property(e => e.DstTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DST_TimeStamp");

                entity.HasOne(d => d.DstLocalizableEntry).WithMany(p => p.DossierOperationalStatusTypes)
                    .HasForeignKey(d => d.DstLocalizableEntryId)
                    .HasConstraintName("FK_DossierOperationalStatusTypes_LocalizableEntries");
            });

            modelBuilder.Entity<DossierPartiesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_DossierParties_History_ID");

                entity.ToTable("DossierParties_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.DopCrcommunityAddress)
                    .HasMaxLength(8)
                    .HasColumnName("DOP_CRCommunityAddress");
                entity.Property(e => e.DopCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOP_CreatedBy");
                entity.Property(e => e.DopCreatedDate).HasColumnName("DOP_CreatedDate");
                entity.Property(e => e.DopDossierAssignmentId).HasColumnName("DOP_DossierAssignment_Id");
                entity.Property(e => e.DopDossierId).HasColumnName("DOP_Dossier_Id");
                entity.Property(e => e.DopId).HasColumnName("DOP_Id");
                entity.Property(e => e.DopInvolvedPartyId).HasColumnName("DOP_InvolvedParty_Id");
                entity.Property(e => e.DopInvolvedPartyRoleId).HasColumnName("DOP_InvolvedPartyRole_Id");
                entity.Property(e => e.DopInvolvedPartySubRoleId).HasColumnName("DOP_InvolvedPartySubRole_Id");
                entity.Property(e => e.DopIsActive).HasColumnName("DOP_IsActive");
                entity.Property(e => e.DopIsClearinghuisParticipant).HasColumnName("DOP_IsClearinghuisParticipant");
                entity.Property(e => e.DopKnownOrganizationUnitId).HasColumnName("DOP_KnownOrganizationUnit_Id");
                entity.Property(e => e.DopLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOP_LastModifiedBy");
                entity.Property(e => e.DopLastModifiedDate).HasColumnName("DOP_LastModifiedDate");
                entity.Property(e => e.DopNoFraud).HasColumnName("DOP_NoFraud");
                entity.Property(e => e.DopPartyOrder).HasColumnName("DOP_PartyOrder");
                entity.Property(e => e.DopReferalDossierPartyId).HasColumnName("DOP_ReferalDossierParty_Id");
                entity.Property(e => e.DopReference)
                    .HasMaxLength(200)
                    .HasColumnName("DOP_Reference");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<DossierPartiesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DossierPartiesView", "dos");

                entity.Property(e => e.CrcommunityAddress)
                    .HasMaxLength(8)
                    .HasColumnName("CRCommunityAddress");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.Fax).HasMaxLength(20);
                entity.Property(e => e.InvolvedPartyBankAccountBic)
                    .HasMaxLength(11)
                    .HasColumnName("InvolvedPartyBankAccountBIC");
                entity.Property(e => e.InvolvedPartyBankAccountIban)
                    .HasMaxLength(34)
                    .HasColumnName("InvolvedPartyBankAccountIBAN");
                entity.Property(e => e.InvolvedPartyChamberOfCommerceNumber).HasMaxLength(20);
                entity.Property(e => e.InvolvedPartyCity).HasMaxLength(200);
                entity.Property(e => e.InvolvedPartyCountryCode).HasMaxLength(3);
                entity.Property(e => e.InvolvedPartyDateOfBirth).HasColumnType("date");
                entity.Property(e => e.InvolvedPartyEmail).HasMaxLength(200);
                entity.Property(e => e.InvolvedPartyFullAddress).HasMaxLength(200);
                entity.Property(e => e.InvolvedPartyFullName).HasMaxLength(200);
                entity.Property(e => e.InvolvedPartyGender).HasMaxLength(50);
                entity.Property(e => e.InvolvedPartyHouseNumber).HasMaxLength(50);
                entity.Property(e => e.InvolvedPartyHouseNumberAddition).HasMaxLength(200);
                entity.Property(e => e.InvolvedPartyNumber).HasMaxLength(20);
                entity.Property(e => e.InvolvedPartyPhoneNumber).HasMaxLength(20);
                entity.Property(e => e.InvolvedPartyPostalCode).HasMaxLength(10);
                entity.Property(e => e.InvolvedPartyRoleCode).HasMaxLength(10);
                entity.Property(e => e.InvolvedPartyRoleName).HasMaxLength(250);
                entity.Property(e => e.InvolvedPartyStreetName).HasMaxLength(200);
                entity.Property(e => e.InvolvedPartySubRoleCode).HasMaxLength(10);
                entity.Property(e => e.InvolvedPartySubRoleName).HasMaxLength(250);
                entity.Property(e => e.InvolvedPartyVatNumber).HasMaxLength(50);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LiabilityStatusCode).HasMaxLength(10);
                entity.Property(e => e.LiabilityStatusName).HasMaxLength(250);
                entity.Property(e => e.Reference).HasMaxLength(200);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<DossierParty>(entity =>
            {
                entity.HasKey(e => e.DopId);

                entity.ToTable("DossierParties", "dos", tb => tb.HasTrigger("th_dos_DossierParties_TraceHistory"));

                entity.HasIndex(e => e.DopInvolvedPartyId, "IX_dos_DossierParties_InvolvedParty");

                entity.HasIndex(e => e.DopDossierId, "IX_dossierparties_dossier_id");

                entity.Property(e => e.DopId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DOP_Id");
                entity.Property(e => e.DopCrcommunityAddress)
                    .HasMaxLength(8)
                    .HasColumnName("DOP_CRCommunityAddress");
                entity.Property(e => e.DopCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOP_CreatedBy");
                entity.Property(e => e.DopCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DOP_CreatedDate");
                entity.Property(e => e.DopDossierAssignmentId).HasColumnName("DOP_DossierAssignment_Id");
                entity.Property(e => e.DopDossierId).HasColumnName("DOP_Dossier_Id");
                entity.Property(e => e.DopInvolvedPartyId).HasColumnName("DOP_InvolvedParty_Id");
                entity.Property(e => e.DopInvolvedPartyRoleId).HasColumnName("DOP_InvolvedPartyRole_Id");
                entity.Property(e => e.DopInvolvedPartySubRoleId).HasColumnName("DOP_InvolvedPartySubRole_Id");
                entity.Property(e => e.DopIsActive).HasColumnName("DOP_IsActive");
                entity.Property(e => e.DopIsClearinghuisParticipant).HasColumnName("DOP_IsClearinghuisParticipant");
                entity.Property(e => e.DopKnownOrganizationUnitId).HasColumnName("DOP_KnownOrganizationUnit_Id");
                entity.Property(e => e.DopLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOP_LastModifiedBy");
                entity.Property(e => e.DopLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DOP_LastModifiedDate");
                entity.Property(e => e.DopNoFraud).HasColumnName("DOP_NoFraud");
                entity.Property(e => e.DopPartyOrder).HasColumnName("DOP_PartyOrder");
                entity.Property(e => e.DopReferalDossierPartyId).HasColumnName("DOP_ReferalDossierParty_Id");
                entity.Property(e => e.DopReference)
                    .HasMaxLength(200)
                    .HasColumnName("DOP_Reference");
                entity.Property(e => e.DopTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DOP_TimeStamp");

                entity.HasOne(d => d.DopDossierAssignment).WithMany(p => p.DossierParties)
                    .HasForeignKey(d => d.DopDossierAssignmentId)
                    .HasConstraintName("FK_DossierParties_DossierAssignments");

                entity.HasOne(d => d.DopDossier).WithMany(p => p.DossierParties)
                    .HasForeignKey(d => d.DopDossierId)
                    .HasConstraintName("FK_DossierParties_Dossiers");

                entity.HasOne(d => d.DopInvolvedParty).WithMany(p => p.DossierParties)
                    .HasForeignKey(d => d.DopInvolvedPartyId)
                    .HasConstraintName("FK_DossierParties_InvolvedParties");

                entity.HasOne(d => d.DopInvolvedPartyRole).WithMany(p => p.DossierPartyDopInvolvedPartyRoles)
                    .HasForeignKey(d => d.DopInvolvedPartyRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierParties_RoleCodes");

                entity.HasOne(d => d.DopInvolvedPartySubRole).WithMany(p => p.DossierPartyDopInvolvedPartySubRoles)
                    .HasForeignKey(d => d.DopInvolvedPartySubRoleId)
                    .HasConstraintName("FK_DossierParties_SubRoleCodes");

                entity.HasOne(d => d.DopKnownOrganizationUnit).WithMany(p => p.DossierParties)
                    .HasForeignKey(d => d.DopKnownOrganizationUnitId)
                    .HasConstraintName("FK_DossierParties_OrganizationUnits");
            });

            modelBuilder.Entity<DossierPartyInvolvedCoverage>(entity =>
            {
                entity.HasKey(e => e.DpicId);

                entity.ToTable("DossierPartyInvolvedCoverages", "dos");

                entity.Property(e => e.DpicId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DPIC_Id");
                entity.Property(e => e.DpicCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DPIC_CreatedBy");
                entity.Property(e => e.DpicCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DPIC_CreatedDate");
                entity.Property(e => e.DpicDossierPartyId).HasColumnName("DPIC_DossierParty_Id");
                entity.Property(e => e.DpicInvolvedCoverageId).HasColumnName("DPIC_InvolvedCoverage_Id");
                entity.Property(e => e.DpicLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DPIC_LastModifiedBy");
                entity.Property(e => e.DpicLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DPIC_LastModifiedDate");

                entity.HasOne(d => d.DpicDossierParty).WithMany(p => p.DossierPartyInvolvedCoverages)
                    .HasForeignKey(d => d.DpicDossierPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierPartyInvolvedCoverages_DossierParties");

                entity.HasOne(d => d.DpicInvolvedCoverage).WithMany(p => p.DossierPartyInvolvedCoverages)
                    .HasForeignKey(d => d.DpicInvolvedCoverageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierPartyInvolvedCoverages_InvolvedCoverages");
            });

            modelBuilder.Entity<DossierPartyObjectRelation>(entity =>
            {
                entity.HasKey(e => e.DpoId);

                entity.ToTable("DossierPartyObjectRelations", "dos", tb => tb.HasTrigger("th_dos_DossierPartyObjectRelations_TraceHistory"));

                entity.HasIndex(e => e.DpoDossierPartyId, "IX_DossierPartyObjectRelations_DPO_DossierParty_Id");

                entity.HasIndex(e => e.DpoInvolvedObjectId, "IX_DossierPartyObjectRelations_DPO_InvolvedObject_Id");

                entity.Property(e => e.DpoId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DPO_Id");
                entity.Property(e => e.DpoCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DPO_CreatedBy");
                entity.Property(e => e.DpoCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DPO_CreatedDate");
                entity.Property(e => e.DpoDossierPartyId).HasColumnName("DPO_DossierParty_Id");
                entity.Property(e => e.DpoInvolvedObjectId).HasColumnName("DPO_InvolvedObject_Id");
                entity.Property(e => e.DpoLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DPO_LastModifiedBy");
                entity.Property(e => e.DpoLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DPO_LastModifiedDate");
                entity.Property(e => e.DpoTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DPO_TimeStamp");

                entity.HasOne(d => d.DpoDossierParty).WithMany(p => p.DossierPartyObjectRelations)
                    .HasForeignKey(d => d.DpoDossierPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierPartyObjectRelations_DossierParties");

                entity.HasOne(d => d.DpoInvolvedObject).WithMany(p => p.DossierPartyObjectRelations)
                    .HasForeignKey(d => d.DpoInvolvedObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierPartyObjectRelations_InvolvedObjects");
            });

            modelBuilder.Entity<DossierPartyObjectRelationsHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_DossierPartyObjectRelations_History_ID");

                entity.ToTable("DossierPartyObjectRelations_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.DpoCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DPO_CreatedBy");
                entity.Property(e => e.DpoCreatedDate).HasColumnName("DPO_CreatedDate");
                entity.Property(e => e.DpoDossierPartyId).HasColumnName("DPO_DossierParty_Id");
                entity.Property(e => e.DpoId).HasColumnName("DPO_Id");
                entity.Property(e => e.DpoInvolvedObjectId).HasColumnName("DPO_InvolvedObject_Id");
                entity.Property(e => e.DpoLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DPO_LastModifiedBy");
                entity.Property(e => e.DpoLastModifiedDate).HasColumnName("DPO_LastModifiedDate");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<DossierPartyObjectsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DossierPartyObjectsView", "dos");

                entity.Property(e => e.AgentCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.AgentName).HasMaxLength(250);
                entity.Property(e => e.AgentPhoneNumber).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DossierInsureeFullName).HasMaxLength(200);
                entity.Property(e => e.DossierInsureeHouseNumber).HasMaxLength(50);
                entity.Property(e => e.DossierInsureeHouseNumberAddition).HasMaxLength(200);
                entity.Property(e => e.DossierInsureePostalCode).HasMaxLength(10);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.GreencardNumber).HasMaxLength(20);
                entity.Property(e => e.InsurancePolicyFreeField1).HasMaxLength(500);
                entity.Property(e => e.InsurancePolicyFreeField2).HasMaxLength(500);
                entity.Property(e => e.InsurancePolicyFreeField3).HasMaxLength(500);
                entity.Property(e => e.InsurancePolicyFreeField4).HasMaxLength(500);
                entity.Property(e => e.InsurancePolicyNumber).HasMaxLength(50);
                entity.Property(e => e.InsuranceProductType).HasMaxLength(200);
                entity.Property(e => e.InsurerCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.InsurerName).HasMaxLength(250);
                entity.Property(e => e.InsurerPhoneNumber).HasMaxLength(20);
                entity.Property(e => e.InvolvedObjectCode).HasMaxLength(10);
                entity.Property(e => e.InvolvedObjectName).HasMaxLength(250);
                entity.Property(e => e.InvolvedPartyDateOfBirth).HasColumnType("date");
                entity.Property(e => e.InvolvedPartyFullAddress).HasMaxLength(200);
                entity.Property(e => e.InvolvedPartyFullName).HasMaxLength(200);
                entity.Property(e => e.InvolvedPartyHouseNumber).HasMaxLength(50);
                entity.Property(e => e.InvolvedPartyHouseNumberAddition).HasMaxLength(200);
                entity.Property(e => e.InvolvedPartyPhoneNumber).HasMaxLength(20);
                entity.Property(e => e.InvolvedPartyPostalcode).HasMaxLength(10);
                entity.Property(e => e.InvolvedPartyRoleCode).HasMaxLength(10);
                entity.Property(e => e.InvolvedPartyRoleName).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.MandateCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.MandateCrwamCode)
                    .HasMaxLength(250)
                    .HasColumnName("MandateCRWamCode");
                entity.Property(e => e.MandateName).HasMaxLength(250);
                entity.Property(e => e.MandatePhoneNumber).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.TypeVehicle).HasMaxLength(50);
                entity.Property(e => e.VehicleBrand).HasMaxLength(50);
                entity.Property(e => e.VehicleLicensePlate).HasMaxLength(15);
                entity.Property(e => e.VehicleLicensePlateCountryCode).HasMaxLength(3);
                entity.Property(e => e.VehicleModel).HasMaxLength(50);
            });

            modelBuilder.Entity<DossierPartyRole>(entity =>
            {
                entity.HasKey(e => e.DprId);

                entity.ToTable("DossierPartyRoles", "dos", tb => tb.HasTrigger("th_dos_DossierPartyRoles_TraceHistory"));

                entity.HasIndex(e => e.DprDossierPartyId, "IX_DossierPartyRoles_DossierParty_Id");

                entity.Property(e => e.DprId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DPR_Id");
                entity.Property(e => e.DprCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DPR_CreatedBy");
                entity.Property(e => e.DprCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DPR_CreatedDate");
                entity.Property(e => e.DprDossierPartyId).HasColumnName("DPR_DossierParty_Id");
                entity.Property(e => e.DprLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DPR_LastModifiedBy");
                entity.Property(e => e.DprLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DPR_LastModifiedDate");
                entity.Property(e => e.DprRoleCodeId).HasColumnName("DPR_RoleCode_Id");
                entity.Property(e => e.DprTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DPR_TimeStamp");

                entity.HasOne(d => d.DprDossierParty).WithMany(p => p.DossierPartyRoles)
                    .HasForeignKey(d => d.DprDossierPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierPartyRoles_DossierParties");

                entity.HasOne(d => d.DprRoleCode).WithMany(p => p.DossierPartyRoles)
                    .HasForeignKey(d => d.DprRoleCodeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierPartyRoles_RoleCodes");
            });

            modelBuilder.Entity<DossierPartyRolesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_DossierPartyRoles_History_ID");

                entity.ToTable("DossierPartyRoles_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.DprCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DPR_CreatedBy");
                entity.Property(e => e.DprCreatedDate).HasColumnName("DPR_CreatedDate");
                entity.Property(e => e.DprDossierPartyId).HasColumnName("DPR_DossierParty_Id");
                entity.Property(e => e.DprId).HasColumnName("DPR_Id");
                entity.Property(e => e.DprLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DPR_LastModifiedBy");
                entity.Property(e => e.DprLastModifiedDate).HasColumnName("DPR_LastModifiedDate");
                entity.Property(e => e.DprRoleCodeId).HasColumnName("DPR_RoleCode_Id");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<DossierPendingFeeSalesInvoicesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DossierPendingFeeSalesInvoicesView", "dos");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierStatusType).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<DossierPendingFeeSalesOrdersView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DossierPendingFeeSalesOrdersView", "dos");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierStatusType).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<DossierPrioritiesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_DossierPriorities_History_ID");

                entity.ToTable("DossierPriorities_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.DopCode)
                    .HasMaxLength(10)
                    .HasColumnName("DOP_Code");
                entity.Property(e => e.DopCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOP_CreatedBy");
                entity.Property(e => e.DopCreatedDate).HasColumnName("DOP_CreatedDate");
                entity.Property(e => e.DopId).HasColumnName("DOP_Id");
                entity.Property(e => e.DopInactive).HasColumnName("DOP_Inactive");
                entity.Property(e => e.DopLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOP_LastModifiedBy");
                entity.Property(e => e.DopLastModifiedDate).HasColumnName("DOP_LastModifiedDate");
                entity.Property(e => e.DopLongName)
                    .HasMaxLength(250)
                    .HasColumnName("DOP_LongName");
                entity.Property(e => e.DopShortName)
                    .HasMaxLength(20)
                    .HasColumnName("DOP_ShortName");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<DossierPriority>(entity =>
            {
                entity.HasKey(e => e.DopId);

                entity.ToTable("DossierPriorities", "dos", tb => tb.HasTrigger("th_dos_DossierPriorities_TraceHistory"));

                entity.Property(e => e.DopId)
                    .ValueGeneratedNever()
                    .HasColumnName("DOP_Id");
                entity.Property(e => e.DopCode)
                    .HasMaxLength(10)
                    .HasColumnName("DOP_Code");
                entity.Property(e => e.DopCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOP_CreatedBy");
                entity.Property(e => e.DopCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DOP_CreatedDate");
                entity.Property(e => e.DopInactive).HasColumnName("DOP_Inactive");
                entity.Property(e => e.DopLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOP_LastModifiedBy");
                entity.Property(e => e.DopLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DOP_LastModifiedDate");
                entity.Property(e => e.DopLongName)
                    .HasMaxLength(250)
                    .HasColumnName("DOP_LongName");
                entity.Property(e => e.DopShortName)
                    .HasMaxLength(20)
                    .HasColumnName("DOP_ShortName");
                entity.Property(e => e.DopTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DOP_TimeStamp");
            });

            modelBuilder.Entity<DossierStatus>(entity =>
            {
                entity.HasKey(e => e.DstId);

                entity.ToTable("DossierStatuses", "dos", tb => tb.HasTrigger("th_dos_DossierStatuses_TraceHistory"));

                entity.HasIndex(e => e.DstDossierStatusTypeId, "IX_DossierStatuses_DossierStatusType");

                entity.Property(e => e.DstId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DST_Id");
                entity.Property(e => e.DstCode)
                    .HasMaxLength(10)
                    .HasColumnName("DST_Code");
                entity.Property(e => e.DstCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DST_CreatedBy");
                entity.Property(e => e.DstCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DST_CreatedDate");
                entity.Property(e => e.DstDossierStatusTypeId)
                    .HasMaxLength(20)
                    .HasColumnName("DST_DossierStatusType_Id");
                entity.Property(e => e.DstInactive).HasColumnName("DST_Inactive");
                entity.Property(e => e.DstLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DST_LastModifiedBy");
                entity.Property(e => e.DstLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DST_LastModifiedDate");
                entity.Property(e => e.DstLocalizableEntryId).HasColumnName("DST_LocalizableEntry_Id");
                entity.Property(e => e.DstLongName)
                    .HasMaxLength(250)
                    .HasColumnName("DST_LongName");
                entity.Property(e => e.DstShortName)
                    .HasMaxLength(50)
                    .HasColumnName("DST_ShortName");
                entity.Property(e => e.DstTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DST_TimeStamp");

                entity.HasOne(d => d.DstDossierStatusType).WithMany(p => p.DossierStatuses)
                    .HasForeignKey(d => d.DstDossierStatusTypeId)
                    .HasConstraintName("FK_DossierStatuses_DossierStatusTypes");

                entity.HasOne(d => d.DstLocalizableEntry).WithMany(p => p.DossierStatuses)
                    .HasForeignKey(d => d.DstLocalizableEntryId)
                    .HasConstraintName("FK_DossierStatuses_LocalizableEntries");
            });

            modelBuilder.Entity<DossierStatusApplication>(entity =>
            {
                entity.HasKey(e => e.DsaId);

                entity.ToTable("DossierStatusApplications", "dos", tb => tb.HasTrigger("th_dos_DossierStatusApplications_TraceHistory"));

                entity.Property(e => e.DsaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DSA_Id");
                entity.Property(e => e.DsaApplicationId).HasColumnName("DSA_Application_Id");
                entity.Property(e => e.DsaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DSA_CreatedBy");
                entity.Property(e => e.DsaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DSA_CreatedDate");
                entity.Property(e => e.DsaDossierStatusId).HasColumnName("DSA_DossierStatus_Id");
                entity.Property(e => e.DsaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DSA_LastModifiedBy");
                entity.Property(e => e.DsaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DSA_LastModifiedDate");
                entity.Property(e => e.DsaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DSA_TimeStamp");

                entity.HasOne(d => d.DsaApplication).WithMany(p => p.DossierStatusApplications)
                    .HasForeignKey(d => d.DsaApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierStatusApplications_Applications");

                entity.HasOne(d => d.DsaDossierStatus).WithMany(p => p.DossierStatusApplications)
                    .HasForeignKey(d => d.DsaDossierStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierStatusApplications_DossierStatuses");
            });

            modelBuilder.Entity<DossierStatusApplicationsHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_DossierStatusApplications_History_ID");

                entity.ToTable("DossierStatusApplications_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.DsaApplicationId).HasColumnName("DSA_Application_Id");
                entity.Property(e => e.DsaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DSA_CreatedBy");
                entity.Property(e => e.DsaCreatedDate).HasColumnName("DSA_CreatedDate");
                entity.Property(e => e.DsaDossierStatusId).HasColumnName("DSA_DossierStatus_Id");
                entity.Property(e => e.DsaId).HasColumnName("DSA_Id");
                entity.Property(e => e.DsaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DSA_LastModifiedBy");
                entity.Property(e => e.DsaLastModifiedDate).HasColumnName("DSA_LastModifiedDate");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<DossierStatusHistory>(entity =>
            {
                entity.HasKey(e => e.DshId);

                entity.ToTable("DossierStatusHistory", "dos", tb =>
                {
                    tb.HasTrigger("SetDossierClosingHistory");
                    tb.HasTrigger("UpdateDossierHandler");
                    tb.HasTrigger("td_DossierStatusHistory");
                    tb.HasTrigger("th_dos_DossierStatusHistory_TraceHistory");
                    tb.HasTrigger("tr_DossierStatusHistory");
                });

                entity.HasIndex(e => new { e.DshDossierId, e.DshDossierStatusId }, "IX_DossierStatusHistory_Dossier_DossierStatus");

                entity.HasIndex(e => new { e.DshDossierId, e.DshStartDate }, "IX_DossierStatusHistory_Dossier_StartDate_INCL");

                entity.Property(e => e.DshId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DSH_Id");
                entity.Property(e => e.DshCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DSH_CreatedBy");
                entity.Property(e => e.DshCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DSH_CreatedDate");
                entity.Property(e => e.DshDossierId).HasColumnName("DSH_Dossier_Id");
                entity.Property(e => e.DshDossierStatusId).HasColumnName("DSH_DossierStatus_Id");
                entity.Property(e => e.DshEmployeeId).HasColumnName("DSH_Employee_Id");
                entity.Property(e => e.DshLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DSH_LastModifiedBy");
                entity.Property(e => e.DshLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DSH_LastModifiedDate");
                entity.Property(e => e.DshStartDate).HasColumnName("DSH_StartDate");
                entity.Property(e => e.DshStatusChangeReason)
                    .HasMaxLength(250)
                    .HasColumnName("DSH_StatusChangeReason");
                entity.Property(e => e.DshTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DSH_TimeStamp");

                entity.HasOne(d => d.DshDossier).WithMany(p => p.DossierStatusHistories)
                    .HasForeignKey(d => d.DshDossierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierStatusHistory_Dossiers");

                entity.HasOne(d => d.DshDossierStatus).WithMany(p => p.DossierStatusHistories)
                    .HasForeignKey(d => d.DshDossierStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierStatusHistory_DossierStatuses");
            });

            modelBuilder.Entity<DossierStatusHistoryHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_DossierStatusHistory_History_ID");

                entity.ToTable("DossierStatusHistory_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.DshCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DSH_CreatedBy");
                entity.Property(e => e.DshCreatedDate).HasColumnName("DSH_CreatedDate");
                entity.Property(e => e.DshDossierId).HasColumnName("DSH_Dossier_Id");
                entity.Property(e => e.DshDossierStatusId).HasColumnName("DSH_DossierStatus_Id");
                entity.Property(e => e.DshEmployeeId).HasColumnName("DSH_Employee_Id");
                entity.Property(e => e.DshId).HasColumnName("DSH_Id");
                entity.Property(e => e.DshLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DSH_LastModifiedBy");
                entity.Property(e => e.DshLastModifiedDate).HasColumnName("DSH_LastModifiedDate");
                entity.Property(e => e.DshStartDate).HasColumnName("DSH_StartDate");
                entity.Property(e => e.DshStatusChangeReason)
                    .HasMaxLength(250)
                    .HasColumnName("DSH_StatusChangeReason");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<DossierStatusType>(entity =>
            {
                entity.HasKey(e => e.DtyId);

                entity.ToTable("DossierStatusTypes", "dos", tb => tb.HasTrigger("th_dos_DossierStatusTypes_TraceHistory"));

                entity.Property(e => e.DtyId)
                    .HasMaxLength(20)
                    .HasColumnName("DTY_Id");
                entity.Property(e => e.DtyCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DTY_CreatedBy");
                entity.Property(e => e.DtyCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DTY_CreatedDate");
                entity.Property(e => e.DtyInactive).HasColumnName("DTY_Inactive");
                entity.Property(e => e.DtyLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DTY_LastModifiedBy");
                entity.Property(e => e.DtyLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DTY_LastModifiedDate");
                entity.Property(e => e.DtyLocalizableEntryId).HasColumnName("DTY_LocalizableEntry_Id");
                entity.Property(e => e.DtyName)
                    .HasMaxLength(250)
                    .HasColumnName("DTY_Name");
                entity.Property(e => e.DtyTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DTY_TimeStamp");

                entity.HasOne(d => d.DtyLocalizableEntry).WithMany(p => p.DossierStatusTypes)
                    .HasForeignKey(d => d.DtyLocalizableEntryId)
                    .HasConstraintName("FK_DossierStatusTypes_LocalizableEntries");
            });

            modelBuilder.Entity<DossierStatusTypesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_DossierStatusTypes_History_ID");

                entity.ToTable("DossierStatusTypes_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.DtyCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DTY_CreatedBy");
                entity.Property(e => e.DtyCreatedDate).HasColumnName("DTY_CreatedDate");
                entity.Property(e => e.DtyId)
                    .HasMaxLength(20)
                    .HasColumnName("DTY_Id");
                entity.Property(e => e.DtyInactive).HasColumnName("DTY_Inactive");
                entity.Property(e => e.DtyLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DTY_LastModifiedBy");
                entity.Property(e => e.DtyLastModifiedDate).HasColumnName("DTY_LastModifiedDate");
                entity.Property(e => e.DtyLocalizableEntryId).HasColumnName("DTY_LocalizableEntry_Id");
                entity.Property(e => e.DtyName)
                    .HasMaxLength(250)
                    .HasColumnName("DTY_Name");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<DossierStatusesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_DossierStatuses_History_ID");

                entity.ToTable("DossierStatuses_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.DstCode)
                    .HasMaxLength(10)
                    .HasColumnName("DST_Code");
                entity.Property(e => e.DstCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DST_CreatedBy");
                entity.Property(e => e.DstCreatedDate).HasColumnName("DST_CreatedDate");
                entity.Property(e => e.DstDossierStatusTypeId)
                    .HasMaxLength(20)
                    .HasColumnName("DST_DossierStatusType_Id");
                entity.Property(e => e.DstId).HasColumnName("DST_Id");
                entity.Property(e => e.DstInactive).HasColumnName("DST_Inactive");
                entity.Property(e => e.DstLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DST_LastModifiedBy");
                entity.Property(e => e.DstLastModifiedDate).HasColumnName("DST_LastModifiedDate");
                entity.Property(e => e.DstLocalizableEntryId).HasColumnName("DST_LocalizableEntry_Id");
                entity.Property(e => e.DstLongName)
                    .HasMaxLength(250)
                    .HasColumnName("DST_LongName");
                entity.Property(e => e.DstShortName)
                    .HasMaxLength(50)
                    .HasColumnName("DST_ShortName");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<DossierSummaryInfo>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DossierSummaryInfo", "ux");

                entity.Property(e => e.AgentCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.AgentName).HasMaxLength(756);
                entity.Property(e => e.BusinessUnitCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.BusinessUnitName).HasMaxLength(756);
                entity.Property(e => e.CauseDamageReasonCode).HasMaxLength(10);
                entity.Property(e => e.CauseDamageReasonName).HasMaxLength(250);
                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DamageReasonCode).HasMaxLength(10);
                entity.Property(e => e.DamageReasonName).HasMaxLength(250);
                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.DepartmentName).HasMaxLength(756);
                entity.Property(e => e.DossierInsureesName).HasMaxLength(4000);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierStatusCode).HasMaxLength(10);
                entity.Property(e => e.DossierStatusName).HasMaxLength(250);
                entity.Property(e => e.DossierStatusTypeId).HasMaxLength(250);
                entity.Property(e => e.DossierStatusTypeName).HasMaxLength(250);
                entity.Property(e => e.DossierTypeCode).HasMaxLength(10);
                entity.Property(e => e.DossierTypeName).HasMaxLength(250);
                entity.Property(e => e.EmployeeFullName).HasMaxLength(250);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.IncidentCountryCode).HasMaxLength(2);
                entity.Property(e => e.IncidentCountryName).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.MainDamageReasonCode).HasMaxLength(10);
                entity.Property(e => e.MainDamageReasonName).HasMaxLength(250);
                entity.Property(e => e.MandateCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.MandateName).HasMaxLength(756);
                entity.Property(e => e.ProductCode).HasMaxLength(20);
                entity.Property(e => e.ProductName).HasMaxLength(250);
                entity.Property(e => e.ReporterCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ReporterName).HasMaxLength(756);
                entity.Property(e => e.SubDamageReasonCode).HasMaxLength(10);
                entity.Property(e => e.SubDamageReasonName).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<DossierSummaryView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DossierSummaryView", "dos");

                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.BusinessUnitCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.BusinessUnitName).HasMaxLength(756);
                entity.Property(e => e.CostCenterCode).HasMaxLength(10);
                entity.Property(e => e.CostCenterName).HasMaxLength(250);
                entity.Property(e => e.CostUnitCode).HasMaxLength(10);
                entity.Property(e => e.CostUnitName).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.DepartmentName).HasMaxLength(756);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierPartyRoleCode).HasMaxLength(10);
                entity.Property(e => e.DossierStatusCode).HasMaxLength(10);
                entity.Property(e => e.DossierStatusName).HasMaxLength(250);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.LiabilityStatusCode).HasMaxLength(10);
                entity.Property(e => e.LiabilityStatusName).HasMaxLength(250);
                entity.Property(e => e.PartyDateOfBirth).HasColumnType("date");
                entity.Property(e => e.PartyFullName).HasMaxLength(200);
                entity.Property(e => e.PartyNumber).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<DossierType>(entity =>
            {
                entity.HasKey(e => e.DotId);

                entity.ToTable("DossierTypes", "dos", tb => tb.HasTrigger("th_dos_DossierTypes_TraceHistory"));

                entity.Property(e => e.DotId)
                    .ValueGeneratedNever()
                    .HasColumnName("DOT_Id");
                entity.Property(e => e.DotCode)
                    .HasMaxLength(10)
                    .HasColumnName("DOT_Code");
                entity.Property(e => e.DotCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOT_CreatedBy");
                entity.Property(e => e.DotCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DOT_CreatedDate");
                entity.Property(e => e.DotInactive).HasColumnName("DOT_Inactive");
                entity.Property(e => e.DotLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOT_LastModifiedBy");
                entity.Property(e => e.DotLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DOT_LastModifiedDate");
                entity.Property(e => e.DotLongName)
                    .HasMaxLength(250)
                    .HasColumnName("DOT_LongName");
                entity.Property(e => e.DotShortName)
                    .HasMaxLength(20)
                    .HasColumnName("DOT_ShortName");
                entity.Property(e => e.DotTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DOT_TimeStamp");
            });

            modelBuilder.Entity<DossierTypesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_DossierTypes_History_ID");

                entity.ToTable("DossierTypes_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.DotCode)
                    .HasMaxLength(10)
                    .HasColumnName("DOT_Code");
                entity.Property(e => e.DotCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOT_CreatedBy");
                entity.Property(e => e.DotCreatedDate).HasColumnName("DOT_CreatedDate");
                entity.Property(e => e.DotId).HasColumnName("DOT_Id");
                entity.Property(e => e.DotInactive).HasColumnName("DOT_Inactive");
                entity.Property(e => e.DotLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOT_LastModifiedBy");
                entity.Property(e => e.DotLastModifiedDate).HasColumnName("DOT_LastModifiedDate");
                entity.Property(e => e.DotLongName)
                    .HasMaxLength(250)
                    .HasColumnName("DOT_LongName");
                entity.Property(e => e.DotShortName)
                    .HasMaxLength(20)
                    .HasColumnName("DOT_ShortName");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<DossierWorkActivitiesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_DossierWorkActivities_History_ID");

                entity.ToTable("DossierWorkActivities_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.DwaActivityExecutionId).HasColumnName("DWA_ActivityExecution_Id");
                entity.Property(e => e.DwaActivityOptionId).HasColumnName("DWA_ActivityOption_Id");
                entity.Property(e => e.DwaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DWA_CreatedBy");
                entity.Property(e => e.DwaCreatedDate).HasColumnName("DWA_CreatedDate");
                entity.Property(e => e.DwaDossierAssignmentId).HasColumnName("DWA_DossierAssignment_Id");
                entity.Property(e => e.DwaDossierId).HasColumnName("DWA_Dossier_Id");
                entity.Property(e => e.DwaDossierPartyId).HasColumnName("DWA_DossierParty_Id");
                entity.Property(e => e.DwaId).HasColumnName("DWA_Id");
                entity.Property(e => e.DwaInactive).HasColumnName("DWA_Inactive");
                entity.Property(e => e.DwaInvolvedCoverageId).HasColumnName("DWA_InvolvedCoverage_Id");
                entity.Property(e => e.DwaInvolvedObjectId).HasColumnName("DWA_InvolvedObject_Id");
                entity.Property(e => e.DwaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DWA_LastModifiedBy");
                entity.Property(e => e.DwaLastModifiedDate).HasColumnName("DWA_LastModifiedDate");
                entity.Property(e => e.DwaProductId).HasColumnName("DWA_Product_Id");
                entity.Property(e => e.DwaWorkActivityId).HasColumnName("DWA_WorkActivity_Id");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<DossierWorkActivitiesInvoiceableView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DossierWorkActivitiesInvoiceableView", "ux");

                entity.Property(e => e.ActivityExecutionCode).HasMaxLength(10);
                entity.Property(e => e.ActivityExecutionName).HasMaxLength(250);
                entity.Property(e => e.ActivityOptionCode).HasMaxLength(20);
                entity.Property(e => e.ActivityOptionName).HasMaxLength(250);
                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.DossierAssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.DossierAssignmentStatusCode).HasMaxLength(10);
                entity.Property(e => e.DossierAssignmentStatusName).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierStatusCode).HasMaxLength(10);
                entity.Property(e => e.DossierStatusName).HasMaxLength(250);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.FeeRecipientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.FeeRecipientName).HasMaxLength(756);
                entity.Property(e => e.ProductCode).HasMaxLength(20);
                entity.Property(e => e.ProductName).HasMaxLength(250);
                entity.Property(e => e.WorkActivityCode).HasMaxLength(10);
                entity.Property(e => e.WorkActivityName).HasMaxLength(250);
            });

            modelBuilder.Entity<DossierWorkActivitiesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DossierWorkActivitiesView", "dos");

                entity.Property(e => e.ActivityExecutionCode).HasMaxLength(10);
                entity.Property(e => e.ActivityExecutionName).HasMaxLength(250);
                entity.Property(e => e.ActivityOptionCode).HasMaxLength(20);
                entity.Property(e => e.ActivityOptionName).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.ProductCode).HasMaxLength(20);
                entity.Property(e => e.ProductName).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VehicleLicensePlate).HasMaxLength(15);
                entity.Property(e => e.VehicleLicensePlateCountryCode).HasMaxLength(3);
                entity.Property(e => e.WorkActivityCode).HasMaxLength(10);
                entity.Property(e => e.WorkActivityName).HasMaxLength(250);
            });

            modelBuilder.Entity<DossierWorkActivitiesWithoutFeeSalesOrdersView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DossierWorkActivitiesWithoutFeeSalesOrdersView", "dos");

                entity.Property(e => e.ActivityOptionName).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.WorkActivityName).HasMaxLength(250);
            });

            modelBuilder.Entity<DossierWorkActivity>(entity =>
            {
                entity.HasKey(e => e.DwaId);

                entity.ToTable("DossierWorkActivities", "dos", tb => tb.HasTrigger("th_dos_DossierWorkActivities_TraceHistory"));

                entity.HasIndex(e => e.DwaDossierId, "IX_DossierWorkActivities_DWA_Dossier_Id");

                entity.HasIndex(e => e.DwaInvolvedObjectId, "IX_dos_DossierWorkActivities_InvolvedObject");

                entity.Property(e => e.DwaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DWA_Id");
                entity.Property(e => e.DwaActivityExecutionId).HasColumnName("DWA_ActivityExecution_Id");
                entity.Property(e => e.DwaActivityOptionId).HasColumnName("DWA_ActivityOption_Id");
                entity.Property(e => e.DwaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DWA_CreatedBy");
                entity.Property(e => e.DwaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DWA_CreatedDate");
                entity.Property(e => e.DwaDossierAssignmentId).HasColumnName("DWA_DossierAssignment_Id");
                entity.Property(e => e.DwaDossierId).HasColumnName("DWA_Dossier_Id");
                entity.Property(e => e.DwaDossierPartyId).HasColumnName("DWA_DossierParty_Id");
                entity.Property(e => e.DwaInactive).HasColumnName("DWA_Inactive");
                entity.Property(e => e.DwaInvolvedCoverageId).HasColumnName("DWA_InvolvedCoverage_Id");
                entity.Property(e => e.DwaInvolvedObjectId).HasColumnName("DWA_InvolvedObject_Id");
                entity.Property(e => e.DwaIsActivityOptionManuallySelected).HasColumnName("DWA_IsActivityOptionManuallySelected");
                entity.Property(e => e.DwaIsInvoiceable)
                    .IsRequired()
                    .HasDefaultValueSql("((1))")
                    .HasColumnName("DWA_IsInvoiceable");
                entity.Property(e => e.DwaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DWA_LastModifiedBy");
                entity.Property(e => e.DwaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DWA_LastModifiedDate");
                entity.Property(e => e.DwaProductId).HasColumnName("DWA_Product_Id");
                entity.Property(e => e.DwaReportingFormId).HasColumnName("DWA_ReportingForm_Id");
                entity.Property(e => e.DwaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DWA_TimeStamp");
                entity.Property(e => e.DwaWorkActivityId).HasColumnName("DWA_WorkActivity_Id");

                entity.HasOne(d => d.DwaActivityExecution).WithMany(p => p.DossierWorkActivities)
                    .HasForeignKey(d => d.DwaActivityExecutionId)
                    .HasConstraintName("FK_DossierWorkActivities_ActivityExecutions");

                entity.HasOne(d => d.DwaActivityOption).WithMany(p => p.DossierWorkActivities)
                    .HasForeignKey(d => d.DwaActivityOptionId)
                    .HasConstraintName("FK_DossierWorkActivities_ActivityOptions");

                entity.HasOne(d => d.DwaDossierAssignment).WithMany(p => p.DossierWorkActivities)
                    .HasForeignKey(d => d.DwaDossierAssignmentId)
                    .HasConstraintName("FK_DossierWorkActivities_DossierAssignments");

                entity.HasOne(d => d.DwaDossier).WithMany(p => p.DossierWorkActivities)
                    .HasForeignKey(d => d.DwaDossierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierWorkActivities_Dossiers");

                entity.HasOne(d => d.DwaDossierParty).WithMany(p => p.DossierWorkActivities)
                    .HasForeignKey(d => d.DwaDossierPartyId)
                    .HasConstraintName("FK_DossierWorkActivities_DossierParties");

                entity.HasOne(d => d.DwaInvolvedCoverage).WithMany(p => p.DossierWorkActivities)
                    .HasForeignKey(d => d.DwaInvolvedCoverageId)
                    .HasConstraintName("FK_DossierWorkActivities_InvolvedCoverages");

                entity.HasOne(d => d.DwaInvolvedObject).WithMany(p => p.DossierWorkActivities)
                    .HasForeignKey(d => d.DwaInvolvedObjectId)
                    .HasConstraintName("FK_DossierWorkActivities_InvolvedObjects");

                entity.HasOne(d => d.DwaProduct).WithMany(p => p.DossierWorkActivities)
                    .HasForeignKey(d => d.DwaProductId)
                    .HasConstraintName("FK_DossierWorkActivities_Products");

                entity.HasOne(d => d.DwaReportingForm).WithMany(p => p.DossierWorkActivities)
                    .HasForeignKey(d => d.DwaReportingFormId)
                    .HasConstraintName("FK__DossierWo__DWA_R__37687CB6");

                entity.HasOne(d => d.DwaWorkActivity).WithMany(p => p.DossierWorkActivities)
                    .HasForeignKey(d => d.DwaWorkActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierWorkActivities_WorkActivities");
            });

            modelBuilder.Entity<DossierWorkActivityCoveragesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DossierWorkActivityCoveragesView", "dos");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LicenseCountryCode).HasMaxLength(3);
                entity.Property(e => e.LicensePlate).HasMaxLength(15);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.WorkActivityCode).HasMaxLength(10);
                entity.Property(e => e.WorkActivityName).HasMaxLength(250);
            });

            modelBuilder.Entity<DossierWorkActivityTrigger>(entity =>
            {
                entity.HasKey(e => e.DwatId);

                entity.ToTable("DossierWorkActivityTriggers", "dos");

                entity.Property(e => e.DwatId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DWAT_Id");
                entity.Property(e => e.DwatCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DWAT_CreatedBy");
                entity.Property(e => e.DwatCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DWAT_CreatedDate");
                entity.Property(e => e.DwatDossierWorkActivityTypeId)
                    .HasMaxLength(20)
                    .HasColumnName("DWAT_DossierWorkActivityType_Id");
                entity.Property(e => e.DwatLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DWAT_LastModifiedBy");
                entity.Property(e => e.DwatLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DWAT_LastModifiedDate");
                entity.Property(e => e.DwatTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DWAT_TimeStamp");
                entity.Property(e => e.DwatTriggerSequence).HasColumnName("DWAT_TriggerSequence");

                entity.HasOne(d => d.DwatDossierWorkActivityType).WithMany(p => p.DossierWorkActivityTriggers)
                    .HasForeignKey(d => d.DwatDossierWorkActivityTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierWorkActivityTriggers_DossierWorkActivityTriggerTypes");

                entity.HasOne(d => d.Dwat).WithOne(p => p.DossierWorkActivityTrigger)
                    .HasForeignKey<DossierWorkActivityTrigger>(d => d.DwatId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DossierWorkActivityTriggers_DossierWorkActivities");
            });

            modelBuilder.Entity<DossierWorkActivityTriggerType>(entity =>
            {
                entity.HasKey(e => e.DwattId);

                entity.ToTable("DossierWorkActivityTriggerTypes", "dos");

                entity.Property(e => e.DwattId)
                    .HasMaxLength(20)
                    .HasColumnName("DWATT_Id");
                entity.Property(e => e.DwattCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DWATT_CreatedBy");
                entity.Property(e => e.DwattCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DWATT_CreatedDate");
                entity.Property(e => e.DwattInactive).HasColumnName("DWATT_Inactive");
                entity.Property(e => e.DwattLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DWATT_LastModifiedBy");
                entity.Property(e => e.DwattLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DWATT_LastModifiedDate");
                entity.Property(e => e.DwattName)
                    .HasMaxLength(250)
                    .HasColumnName("DWATT_Name");
                entity.Property(e => e.DwattTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DWATT_TimeStamp");
            });

            modelBuilder.Entity<DossiersHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_Dossiers_History_ID");

                entity.ToTable("Dossiers_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.DosAgentId).HasColumnName("DOS_Agent_Id");
                entity.Property(e => e.DosClientId).HasColumnName("DOS_Client_Id");
                entity.Property(e => e.DosContactPersonId).HasColumnName("DOS_ContactPerson_Id");
                entity.Property(e => e.DosCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOS_CreatedBy");
                entity.Property(e => e.DosCreatedDate).HasColumnName("DOS_CreatedDate");
                entity.Property(e => e.DosCurrentStatusCode)
                    .HasMaxLength(10)
                    .HasColumnName("DOS_CurrentStatusCode");
                entity.Property(e => e.DosCurrentStatusHistoryId).HasColumnName("DOS_CurrentStatusHistory_Id");
                entity.Property(e => e.DosCurrentStatusHistoryStartDate).HasColumnName("DOS_CurrentStatusHistoryStartDate");
                entity.Property(e => e.DosDepartmentId).HasColumnName("DOS_Department_Id");
                entity.Property(e => e.DosDossierNumber)
                    .HasMaxLength(20)
                    .HasColumnName("DOS_DossierNumber");
                entity.Property(e => e.DosDossierPriorityId).HasColumnName("DOS_DossierPriority_Id");
                entity.Property(e => e.DosDossierTypeId).HasColumnName("DOS_DossierType_Id");
                entity.Property(e => e.DosEmployeeId).HasColumnName("DOS_Employee_Id");
                entity.Property(e => e.DosEntryBatch)
                    .HasMaxLength(36)
                    .HasColumnName("DOS_EntryBatch");
                entity.Property(e => e.DosEntryNumber)
                    .HasMaxLength(36)
                    .HasColumnName("DOS_EntryNumber");
                entity.Property(e => e.DosEntrySystem)
                    .HasMaxLength(10)
                    .HasColumnName("DOS_EntrySystem");
                entity.Property(e => e.DosId).HasColumnName("DOS_Id");
                entity.Property(e => e.DosLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DOS_LastModifiedBy");
                entity.Property(e => e.DosLastModifiedDate).HasColumnName("DOS_LastModifiedDate");
                entity.Property(e => e.DosLegalEntityId).HasColumnName("DOS_LegalEntity_Id");
                entity.Property(e => e.DosMandateId).HasColumnName("DOS_Mandate_Id");
                entity.Property(e => e.DosProductId).HasColumnName("DOS_Product_Id");
                entity.Property(e => e.DosTenantId).HasColumnName("DOS_Tenant_Id");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<DossiersSearchView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DossiersSearchView", "dos");

                entity.Property(e => e.AssistancePlanNumbers).HasMaxLength(4000);
                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.DepartmentName).HasMaxLength(756);
                entity.Property(e => e.DossierAssignmentNumbers).HasMaxLength(4000);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierStatusCode).HasMaxLength(10);
                entity.Property(e => e.DossierStatusName).HasMaxLength(250);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.InsurancePolicyNumbers).HasMaxLength(4000);
                entity.Property(e => e.InsureeHouseNumbers).HasMaxLength(4000);
                entity.Property(e => e.InsureeNames).HasMaxLength(4000);
                entity.Property(e => e.InsureePostalCodes).HasMaxLength(4000);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.LicensePlates).HasMaxLength(4000);
                entity.Property(e => e.ProductCode).HasMaxLength(20);
                entity.Property(e => e.ProductName).HasMaxLength(250);
                entity.Property(e => e.SalesInvoiceNumbers).HasMaxLength(4000);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.WorkingOrderNumbers).HasMaxLength(4000);
            });

            modelBuilder.Entity<DossiersUnifiedView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DossiersUnifiedView", "dos");

                entity.Property(e => e.AgentCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.AgentName).HasMaxLength(756);
                entity.Property(e => e.ApplicationName).HasMaxLength(255);
                entity.Property(e => e.Cause).HasMaxLength(200);
                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.DepartmentName).HasMaxLength(756);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierStatusCode).HasMaxLength(10);
                entity.Property(e => e.DossierStatusName).HasMaxLength(250);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.ExternalComments).HasMaxLength(500);
                entity.Property(e => e.IncidentCity).HasMaxLength(250);
                entity.Property(e => e.IncidentCountryCode).HasMaxLength(3);
                entity.Property(e => e.IncidentHouseNo).HasMaxLength(10);
                entity.Property(e => e.IncidentHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.IncidentPostalCode).HasMaxLength(10);
                entity.Property(e => e.IncidentProvince).HasMaxLength(250);
                entity.Property(e => e.IncidentStreetName).HasMaxLength(250);
                entity.Property(e => e.InternalComments).HasMaxLength(500);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.MandateCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.MandateName).HasMaxLength(756);
                entity.Property(e => e.ProductCode).HasMaxLength(20);
                entity.Property(e => e.ProductName).HasMaxLength(250);
                entity.Property(e => e.Reason).HasMaxLength(200);
            });

            modelBuilder.Entity<DossiersView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("Dossiers_view", "dos");

                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EmployeeEmail).HasMaxLength(250);
                entity.Property(e => e.EmployeeId).HasMaxLength(50);
                entity.Property(e => e.Status)
                    .HasMaxLength(10)
                    .HasColumnName("STATUS");
            });

            modelBuilder.Entity<DossiersView1>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DossiersView", "dos");

                entity.Property(e => e.AgentCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.AgentName).HasMaxLength(756);
                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.ContactPersonEmail).HasMaxLength(250);
                entity.Property(e => e.ContactPersonFullName).HasMaxLength(250);
                entity.Property(e => e.ContactPersonMobile).HasMaxLength(20);
                entity.Property(e => e.ContactPersonPhone).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.DepartmentName).HasMaxLength(756);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierTypeCode).HasMaxLength(10);
                entity.Property(e => e.DossierTypeName).HasMaxLength(250);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(20);
                entity.Property(e => e.ProductCode).HasMaxLength(20);
                entity.Property(e => e.ProductName).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<DraftApproval>(entity =>
            {
                entity.HasKey(e => e.DraId);

                entity.Property(e => e.DraId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DRA_Id");
                entity.Property(e => e.DraComment)
                    .HasMaxLength(250)
                    .HasColumnName("DRA_Comment");
                entity.Property(e => e.DraCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DRA_CreatedBy");
                entity.Property(e => e.DraCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DRA_CreatedDate");
                entity.Property(e => e.DraDraftName)
                    .HasMaxLength(50)
                    .HasColumnName("DRA_DraftName");
                entity.Property(e => e.DraIdSelected).HasColumnName("DRA_IdSelected");
                entity.Property(e => e.DraIsApproved).HasColumnName("DRA_IsApproved");
                entity.Property(e => e.DraLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DRA_LastModifiedBy");
                entity.Property(e => e.DraLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DRA_LastModifiedDate");
                entity.Property(e => e.DraTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DRA_TimeStamp");
                entity.Property(e => e.DraUserName)
                    .HasMaxLength(250)
                    .HasColumnName("DRA_UserName");
            });

            modelBuilder.Entity<DraftForm>(entity =>
            {
                entity.HasKey(e => e.DrfId);

                entity.HasIndex(e => new { e.DrfUserName, e.DrfDraftName, e.DrfDraftNumber }, "IX_DraftForms_UserName_DraftName_DraftNumber").IsUnique();

                entity.Property(e => e.DrfId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DRF_Id");
                entity.Property(e => e.DrfCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DRF_CreatedBy");
                entity.Property(e => e.DrfCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DRF_CreatedDate");
                entity.Property(e => e.DrfDraftName)
                    .HasMaxLength(50)
                    .HasColumnName("DRF_DraftName");
                entity.Property(e => e.DrfDraftNumber)
                    .HasMaxLength(20)
                    .HasColumnName("DRF_DraftNumber");
                entity.Property(e => e.DrfJson).HasColumnName("DRF_Json");
                entity.Property(e => e.DrfLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DRF_LastModifiedBy");
                entity.Property(e => e.DrfLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DRF_LastModifiedDate");
                entity.Property(e => e.DrfTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DRF_TimeStamp");
                entity.Property(e => e.DrfUserName)
                    .HasMaxLength(250)
                    .HasColumnName("DRF_UserName");
            });

            modelBuilder.Entity<DraftSelection>(entity =>
            {
                entity.HasKey(e => e.DrsId);

                entity.HasIndex(e => new { e.DrsIdSelected, e.DrsDraftName, e.DrsUserName }, "IX_DraftSelections_IdSelected_DraftName_UserName").IsUnique();

                entity.Property(e => e.DrsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DRS_Id");
                entity.Property(e => e.DrsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DRS_CreatedBy");
                entity.Property(e => e.DrsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DRS_CreatedDate");
                entity.Property(e => e.DrsDraftName)
                    .HasMaxLength(50)
                    .HasColumnName("DRS_DraftName");
                entity.Property(e => e.DrsIdSelected).HasColumnName("DRS_IdSelected");
                entity.Property(e => e.DrsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DRS_LastModifiedBy");
                entity.Property(e => e.DrsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DRS_LastModifiedDate");
                entity.Property(e => e.DrsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DRS_TimeStamp");
                entity.Property(e => e.DrsUserName)
                    .HasMaxLength(250)
                    .HasColumnName("DRS_UserName");
            });

            modelBuilder.Entity<DraftSuppliersCountView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DraftSuppliersCountView", "mdm");

                entity.Property(e => e.EntrySystem).HasMaxLength(20);
            });

            modelBuilder.Entity<DraftUpload>(entity =>
            {
                entity.HasKey(e => e.DruId);

                entity.Property(e => e.DruId)
                    .ValueGeneratedNever()
                    .HasColumnName("DRU_Id");
                entity.Property(e => e.DruCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DRU_CreatedBy");
                entity.Property(e => e.DruCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DRU_CreatedDate");
                entity.Property(e => e.DruImage)
                    .HasColumnType("image")
                    .HasColumnName("DRU_Image");
                entity.Property(e => e.DruLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DRU_LastModifiedBy");
                entity.Property(e => e.DruLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DRU_LastModifiedDate");
                entity.Property(e => e.DruTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DRU_TimeStamp");
            });

            modelBuilder.Entity<EdiStatus>(entity =>
            {
                entity.HasKey(e => e.EdiId);

                entity.ToTable("EdiStatuses", "ced");

                entity.Property(e => e.EdiId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("EDI_Id");
                entity.Property(e => e.EdiCode)
                    .HasMaxLength(10)
                    .HasColumnName("EDI_Code");
                entity.Property(e => e.EdiCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_CreatedBy");
                entity.Property(e => e.EdiCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("EDI_CreatedDate");
                entity.Property(e => e.EdiInactive).HasColumnName("EDI_Inactive");
                entity.Property(e => e.EdiLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_LastModifiedBy");
                entity.Property(e => e.EdiLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("EDI_LastModifiedDate");
                entity.Property(e => e.EdiLongName)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_LongName");
                entity.Property(e => e.EdiShortName)
                    .HasMaxLength(20)
                    .HasColumnName("EDI_ShortName");
                entity.Property(e => e.EdiTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("EDI_TimeStamp");
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.HasKey(e => e.EmpId);

                entity.ToTable("Employees", "ced");

                entity.HasIndex(e => e.EmpEmail, "IX_Employees_EMP_Email");

                entity.HasIndex(e => e.EmpFullName, "IX_Employees_EMP_FullName");

                entity.HasIndex(e => e.EmpEmployeeNumber, "IX_ced_Employees_EmployeeNumber");

                entity.HasIndex(e => e.EmpFirstName, "IX_ced_Employees_FirstName__INCL");

                entity.HasIndex(e => e.EmpLastName, "IX_ced_Employees_LastName__INCL");

                entity.Property(e => e.EmpId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("EMP_Id");
                entity.Property(e => e.EmpCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("EMP_CreatedBy");
                entity.Property(e => e.EmpCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("EMP_CreatedDate");
                entity.Property(e => e.EmpCultureCodePreferredLanguage)
                    .HasMaxLength(10)
                    .HasColumnName("EMP_CultureCodePreferredLanguage");
                entity.Property(e => e.EmpDepartmentId).HasColumnName("EMP_Department_Id");
                entity.Property(e => e.EmpEisNumber)
                    .HasMaxLength(10)
                    .HasColumnName("EMP_EisNumber");
                entity.Property(e => e.EmpEmail)
                    .HasMaxLength(250)
                    .HasColumnName("EMP_Email");
                entity.Property(e => e.EmpEmailSignature).HasColumnName("EMP_EmailSignature");
                entity.Property(e => e.EmpEmployeeNumber)
                    .HasMaxLength(10)
                    .HasColumnName("EMP_EmployeeNumber");
                entity.Property(e => e.EmpEmploymentTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("EMP_EmploymentTerminationDate");
                entity.Property(e => e.EmpEnrollmentDate)
                    .HasColumnType("date")
                    .HasColumnName("EMP_EnrollmentDate");
                entity.Property(e => e.EmpFax)
                    .HasMaxLength(20)
                    .HasColumnName("EMP_Fax");
                entity.Property(e => e.EmpFirstName)
                    .HasMaxLength(250)
                    .HasColumnName("EMP_FirstName");
                entity.Property(e => e.EmpFullName)
                    .HasMaxLength(250)
                    .HasColumnName("EMP_FullName");
                entity.Property(e => e.EmpInactive).HasColumnName("EMP_Inactive");
                entity.Property(e => e.EmpInitials)
                    .HasMaxLength(20)
                    .HasColumnName("EMP_Initials");
                entity.Property(e => e.EmpIsExpert).HasColumnName("EMP_IsExpert");
                entity.Property(e => e.EmpJobId).HasColumnName("EMP_Job_Id");
                entity.Property(e => e.EmpLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("EMP_LastModifiedBy");
                entity.Property(e => e.EmpLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("EMP_LastModifiedDate");
                entity.Property(e => e.EmpLastName)
                    .HasMaxLength(250)
                    .HasColumnName("EMP_LastName");
                entity.Property(e => e.EmpManagerId).HasColumnName("EMP_Manager_Id");
                entity.Property(e => e.EmpMobileNumber)
                    .HasMaxLength(20)
                    .HasColumnName("EMP_MobileNumber");
                entity.Property(e => e.EmpNumberFormat)
                    .HasMaxLength(50)
                    .HasColumnName("EMP_NumberFormat");
                entity.Property(e => e.EmpPhoneNumber)
                    .HasMaxLength(20)
                    .HasColumnName("EMP_PhoneNumber");
                entity.Property(e => e.EmpPrefixLastName)
                    .HasMaxLength(250)
                    .HasColumnName("EMP_PrefixLastName");
                entity.Property(e => e.EmpRegionId).HasColumnName("EMP_Region_Id");
                entity.Property(e => e.EmpSalutationId).HasColumnName("EMP_Salutation_Id");
                entity.Property(e => e.EmpTeamId).HasColumnName("EMP_Team_Id");
                entity.Property(e => e.EmpTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("EMP_TimeStamp");

                entity.HasOne(d => d.EmpDepartment).WithMany(p => p.Employees)
                    .HasForeignKey(d => d.EmpDepartmentId)
                    .HasConstraintName("FK_Employees_Departments");

                entity.HasOne(d => d.EmpJob).WithMany(p => p.Employees)
                    .HasForeignKey(d => d.EmpJobId)
                    .HasConstraintName("FK_Employees_Jobs");

                entity.HasOne(d => d.EmpManager).WithMany(p => p.InverseEmpManager)
                    .HasForeignKey(d => d.EmpManagerId)
                    .HasConstraintName("FK_Employees_ManagerEmployees");

                entity.HasOne(d => d.EmpRegion).WithMany(p => p.Employees)
                    .HasForeignKey(d => d.EmpRegionId)
                    .HasConstraintName("FK_Employees_Regions");

                entity.HasOne(d => d.EmpSalutation).WithMany(p => p.Employees)
                    .HasForeignKey(d => d.EmpSalutationId)
                    .HasConstraintName("FK_Employees_Salutations");

                entity.HasOne(d => d.EmpTeam).WithMany(p => p.Employees)
                    .HasForeignKey(d => d.EmpTeamId)
                    .HasConstraintName("FK_Employees_Teams");
            });

            modelBuilder.Entity<EmployeeAuthorization>(entity =>
            {
                entity.HasKey(e => e.EauId);

                entity.ToTable("EmployeeAuthorizations", "mdm");

                entity.HasIndex(e => new { e.EauEmployeeId, e.EauLegalEntityId, e.EauEffectiveDate, e.EauTerminationDate }, "IX_EmployeeAuthorizations_EAU_Employee_Id_EAU_EffectiveDate_EAU_TerminationDate");

                entity.HasIndex(e => new { e.EauEmployeeId, e.EauAuthorizationRoleId, e.EauEffectiveDate, e.EauLegalEntityId, e.EauTerminationDate }, "IX_EmployeeAuthorizations_Employee_AuthorizationRole_EffectiveDate__LegalEntity_TerminationDate_INCL");

                entity.Property(e => e.EauId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("EAU_Id");
                entity.Property(e => e.EauAuthorizationRoleId)
                    .HasMaxLength(50)
                    .HasColumnName("EAU_AuthorizationRole_Id");
                entity.Property(e => e.EauCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("EAU_CreatedBy");
                entity.Property(e => e.EauCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("EAU_CreatedDate");
                entity.Property(e => e.EauEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("EAU_EffectiveDate");
                entity.Property(e => e.EauEmployeeId).HasColumnName("EAU_Employee_Id");
                entity.Property(e => e.EauLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("EAU_LastModifiedBy");
                entity.Property(e => e.EauLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("EAU_LastModifiedDate");
                entity.Property(e => e.EauLegalEntityId).HasColumnName("EAU_LegalEntity_Id");
                entity.Property(e => e.EauOperationCreate).HasColumnName("EAU_OperationCreate");
                entity.Property(e => e.EauOperationDelete).HasColumnName("EAU_OperationDelete");
                entity.Property(e => e.EauOperationExecute)
                    .IsRequired()
                    .HasDefaultValueSql("((1))")
                    .HasColumnName("EAU_OperationExecute");
                entity.Property(e => e.EauOperationRead).HasColumnName("EAU_OperationRead");
                entity.Property(e => e.EauOperationUpdate).HasColumnName("EAU_OperationUpdate");
                entity.Property(e => e.EauTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("EAU_TerminationDate");
                entity.Property(e => e.EauTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("EAU_TimeStamp");

                entity.HasOne(d => d.EauAuthorizationRole).WithMany(p => p.EmployeeAuthorizations)
                    .HasForeignKey(d => d.EauAuthorizationRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeAuthorizations_AuthorizationRoles");

                entity.HasOne(d => d.EauEmployee).WithMany(p => p.EmployeeAuthorizations)
                    .HasForeignKey(d => d.EauEmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeAuthorizations_Employees");

                entity.HasOne(d => d.EauLegalEntity).WithMany(p => p.EmployeeAuthorizations)
                    .HasForeignKey(d => d.EauLegalEntityId)
                    .HasConstraintName("FK_EmployeeAuthorizations_LegalEntities");
            });

            modelBuilder.Entity<EmployeeAuthorizationGroupsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("EmployeeAuthorizationGroupsView", "mdm");

                entity.Property(e => e.AuthorizationRoleId).HasMaxLength(50);
                entity.Property(e => e.AuthorizationRoleTypeId).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.EffectiveDate).HasColumnType("date");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TerminationDate).HasColumnType("date");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<EmployeeAuthorizationsOptimizedView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("EmployeeAuthorizationsOptimizedView", "mdm");

                entity.Property(e => e.AuthorizationRoleId).HasMaxLength(50);
                entity.Property(e => e.AuthorizationRoleTypeId).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.EffectiveDate).HasColumnType("date");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TerminationDate).HasColumnType("date");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<EmployeeAuthorizationsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("EmployeeAuthorizationsView", "mdm");

                entity.Property(e => e.AuthorizationRoleId).HasMaxLength(50);
                entity.Property(e => e.AuthorizationRoleTypeId).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.EffectiveDate).HasColumnType("date");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TerminationDate).HasColumnType("date");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<EmployeeAuthorizationsViewEmployeeIdAuthorizationRoleId>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("EmployeeAuthorizationsView_EmployeeId_AuthorizationRoleId", "mdm");

                entity.Property(e => e.AuthorizationRoleId).HasMaxLength(50);
            });

            modelBuilder.Entity<EmployeeAuthorizationsViewUnionAll>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("EmployeeAuthorizationsView_UnionAll", "mdm");

                entity.Property(e => e.AuthorizationRoleId).HasMaxLength(50);
                entity.Property(e => e.AuthorizationRoleTypeId).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.EffectiveDate).HasColumnType("date");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TerminationDate).HasColumnType("date");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<EmployeeAuthorizationsViewUnionAllEmployeeIdAuthorizationRoleId>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("EmployeeAuthorizationsView_UnionAll_EmployeeId_AuthorizationRoleId", "mdm");

                entity.Property(e => e.AuthorizationRoleId).HasMaxLength(50);
            });

            modelBuilder.Entity<EmployeeMapping>(entity =>
            {
                entity.HasKey(e => e.EmId);

                entity.ToTable("EmployeeMapping", "pros");

                entity.Property(e => e.EmId)
                    .ValueGeneratedNever()
                    .HasColumnName("EM_Id");
                entity.Property(e => e.EmCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("EM_CreatedBy");
                entity.Property(e => e.EmCreatedDate).HasColumnName("EM_CreatedDate");
                entity.Property(e => e.EmEiscode).HasColumnName("EM_EISCode");
                entity.Property(e => e.EmLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("EM_LastModifiedBy");
                entity.Property(e => e.EmLastModifiedDate).HasColumnName("EM_LastModifiedDate");
                entity.Property(e => e.EmProspectCode).HasColumnName("EM_ProspectCode");
                entity.Property(e => e.EmTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("EM_TimeStamp");
            });

            modelBuilder.Entity<EmployeeSkill>(entity =>
            {
                entity.HasKey(e => e.EskId);

                entity.ToTable("EmployeeSkills", "ced");

                entity.Property(e => e.EskId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("ESK_Id");
                entity.Property(e => e.EskCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ESK_CreatedBy");
                entity.Property(e => e.EskCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ESK_CreatedDate");
                entity.Property(e => e.EskEmployeeId).HasColumnName("ESK_Employee_Id");
                entity.Property(e => e.EskLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ESK_LastModifiedBy");
                entity.Property(e => e.EskLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ESK_LastModifiedDate");
                entity.Property(e => e.EskSkillId).HasColumnName("ESK_Skill_Id");
                entity.Property(e => e.EskTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ESK_TimeStamp");

                entity.HasOne(d => d.EskEmployee).WithMany(p => p.EmployeeSkills)
                    .HasForeignKey(d => d.EskEmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeSkills_Employee");
            });

            modelBuilder.Entity<EmployeeTeam>(entity =>
            {
                entity.HasKey(e => e.EmtId);

                entity.ToTable("EmployeeTeams", "ced");

                entity.Property(e => e.EmtId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("EMT_Id");
                entity.Property(e => e.EmtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("EMT_CreatedBy");
                entity.Property(e => e.EmtCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("EMT_CreatedDate");
                entity.Property(e => e.EmtEmployeeId).HasColumnName("EMT_Employee_Id");
                entity.Property(e => e.EmtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("EMT_LastModifiedBy");
                entity.Property(e => e.EmtLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("EMT_LastModifiedDate");
                entity.Property(e => e.EmtTeamId).HasColumnName("EMT_Team_Id");
                entity.Property(e => e.EmtTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("EMT_TimeStamp");

                entity.HasOne(d => d.EmtEmployee).WithMany(p => p.EmployeeTeams)
                    .HasForeignKey(d => d.EmtEmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeTeams_Employees");

                entity.HasOne(d => d.EmtTeam).WithMany(p => p.EmployeeTeams)
                    .HasForeignKey(d => d.EmtTeamId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeTeams_Teams");
            });

            modelBuilder.Entity<EmployeesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("EmployeesView", "ced");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.EisNumber).HasMaxLength(10);
                entity.Property(e => e.Email).HasMaxLength(250);
                entity.Property(e => e.EmployeeNumber).HasMaxLength(10);
                entity.Property(e => e.FirstName).HasMaxLength(250);
                entity.Property(e => e.FullName).HasMaxLength(250);
                entity.Property(e => e.Initials).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LastName).HasMaxLength(250);
                entity.Property(e => e.MobileNumber).HasMaxLength(20);
                entity.Property(e => e.PhoneNumber).HasMaxLength(20);
                entity.Property(e => e.PrefixLastName).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<EnumProperty>(entity =>
            {
                entity.HasKey(e => e.EprId);

                entity.ToTable("EnumProperties", "mdm");

                entity.Property(e => e.EprId)
                    .HasMaxLength(50)
                    .HasColumnName("EPR_Id");
                entity.Property(e => e.EprCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("EPR_CreatedBy");
                entity.Property(e => e.EprCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("EPR_CreatedDate");
                entity.Property(e => e.EprLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("EPR_LastModifiedBy");
                entity.Property(e => e.EprLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("EPR_LastModifiedDate");
                entity.Property(e => e.EprTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("EPR_TimeStamp");
            });

            modelBuilder.Entity<EuropeanUnionCountry>(entity =>
            {
                entity.HasKey(e => e.EucId);

                entity.ToTable("EuropeanUnionCountries", "mdm");

                entity.Property(e => e.EucId)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("EUC_Id");
                entity.Property(e => e.EucCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("EUC_CreatedBy");
                entity.Property(e => e.EucCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("EUC_CreatedDate");
                entity.Property(e => e.EucCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("EUC_CurrencyCode");
                entity.Property(e => e.EucEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("EUC_EffectiveDate");
                entity.Property(e => e.EucLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("EUC_LastModifiedBy");
                entity.Property(e => e.EucLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("EUC_LastModifiedDate");
                entity.Property(e => e.EucTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("EUC_TerminationDate");
                entity.Property(e => e.EucTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("EUC_TimeStamp");

                entity.HasOne(d => d.Euc).WithOne(p => p.EuropeanUnionCountry)
                    .HasForeignKey<EuropeanUnionCountry>(d => d.EucId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EuropeanUnionCountries_Countries");
            });

            modelBuilder.Entity<ExactAccountCategory>(entity =>
            {
                entity.HasKey(e => e.EacId);

                entity.ToTable("ExactAccountCategories", "fin");

                entity.Property(e => e.EacId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("EAC_Id");
                entity.Property(e => e.EacCode)
                    .HasMaxLength(10)
                    .HasColumnName("EAC_Code");
                entity.Property(e => e.EacCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("EAC_CreatedBy");
                entity.Property(e => e.EacCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("EAC_CreatedDate");
                entity.Property(e => e.EacDescription)
                    .HasMaxLength(250)
                    .HasColumnName("EAC_Description");
                entity.Property(e => e.EacInactive).HasColumnName("EAC_Inactive");
                entity.Property(e => e.EacLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("EAC_LastModifiedBy");
                entity.Property(e => e.EacLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("EAC_LastModifiedDate");
                entity.Property(e => e.EacTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("EAC_TimeStamp");
            });

            modelBuilder.Entity<ExactGlobeLegalEntity>(entity =>
            {
                entity.HasKey(e => e.EgId).HasName("PK_ExactGlobeSettings");

                entity.ToTable("ExactGlobeLegalEntities", "exact");

                entity.Property(e => e.EgId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("EG_Id");
                entity.Property(e => e.EgAdministrationName)
                    .HasMaxLength(250)
                    .HasColumnName("EG_AdministrationName");
                entity.Property(e => e.EgAdministrationNumber).HasColumnName("EG_AdministrationNumber");
                entity.Property(e => e.EgCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("EG_CreatedBy");
                entity.Property(e => e.EgCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("EG_CreatedDate");
                entity.Property(e => e.EgDatabaseName)
                    .HasMaxLength(250)
                    .HasColumnName("EG_DatabaseName");
                entity.Property(e => e.EgDatabaseServer)
                    .HasMaxLength(250)
                    .HasColumnName("EG_DatabaseServer");
                entity.Property(e => e.EgEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("EG_EffectiveDate");
                entity.Property(e => e.EgLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("EG_LastModifiedBy");
                entity.Property(e => e.EgLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("EG_LastModifiedDate");
                entity.Property(e => e.EgLegalEntityId).HasColumnName("EG_LegalEntity_Id");
                entity.Property(e => e.EgTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("EG_TerminationDate");

                entity.HasOne(d => d.EgLegalEntity).WithMany(p => p.ExactGlobeLegalEntities)
                    .HasForeignKey(d => d.EgLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExactGlobeLegalEntities_LegalEntities");
            });

            modelBuilder.Entity<ExchangeAskRatesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ExchangeAskRatesView", "fin");

                entity.Property(e => e.AccountingDate).HasColumnType("date");
                entity.Property(e => e.Aed).HasColumnName("AED");
                entity.Property(e => e.Afn).HasColumnName("AFN");
                entity.Property(e => e.All).HasColumnName("ALL");
                entity.Property(e => e.Amd).HasColumnName("AMD");
                entity.Property(e => e.Ang).HasColumnName("ANG");
                entity.Property(e => e.Aoa).HasColumnName("AOA");
                entity.Property(e => e.Ars).HasColumnName("ARS");
                entity.Property(e => e.Aud).HasColumnName("AUD");
                entity.Property(e => e.Awg).HasColumnName("AWG");
                entity.Property(e => e.Azn).HasColumnName("AZN");
                entity.Property(e => e.Bam).HasColumnName("BAM");
                entity.Property(e => e.Bbd).HasColumnName("BBD");
                entity.Property(e => e.Bdt).HasColumnName("BDT");
                entity.Property(e => e.Bgn).HasColumnName("BGN");
                entity.Property(e => e.Bhd).HasColumnName("BHD");
                entity.Property(e => e.Bif).HasColumnName("BIF");
                entity.Property(e => e.Bmd).HasColumnName("BMD");
                entity.Property(e => e.Bnd).HasColumnName("BND");
                entity.Property(e => e.Bob).HasColumnName("BOB");
                entity.Property(e => e.Brl).HasColumnName("BRL");
                entity.Property(e => e.Bsd).HasColumnName("BSD");
                entity.Property(e => e.Btn).HasColumnName("BTN");
                entity.Property(e => e.Bwp).HasColumnName("BWP");
                entity.Property(e => e.Byn).HasColumnName("BYN");
                entity.Property(e => e.Bzd).HasColumnName("BZD");
                entity.Property(e => e.Cad).HasColumnName("CAD");
                entity.Property(e => e.Cdf).HasColumnName("CDF");
                entity.Property(e => e.Chf).HasColumnName("CHF");
                entity.Property(e => e.Clp).HasColumnName("CLP");
                entity.Property(e => e.Cny).HasColumnName("CNY");
                entity.Property(e => e.Cop).HasColumnName("COP");
                entity.Property(e => e.Crc).HasColumnName("CRC");
                entity.Property(e => e.Cuc).HasColumnName("CUC");
                entity.Property(e => e.Cup).HasColumnName("CUP");
                entity.Property(e => e.Cve).HasColumnName("CVE");
                entity.Property(e => e.Czk).HasColumnName("CZK");
                entity.Property(e => e.Djf).HasColumnName("DJF");
                entity.Property(e => e.Dkk).HasColumnName("DKK");
                entity.Property(e => e.Dop).HasColumnName("DOP");
                entity.Property(e => e.Dzd).HasColumnName("DZD");
                entity.Property(e => e.Egp).HasColumnName("EGP");
                entity.Property(e => e.Ern).HasColumnName("ERN");
                entity.Property(e => e.Etb).HasColumnName("ETB");
                entity.Property(e => e.Eur).HasColumnName("EUR");
                entity.Property(e => e.ExchangeAmount).HasColumnType("money");
                entity.Property(e => e.ExchangeDate).HasColumnType("date");
                entity.Property(e => e.Fjd).HasColumnName("FJD");
                entity.Property(e => e.Fkp).HasColumnName("FKP");
                entity.Property(e => e.FromCurrency).HasMaxLength(3);
                entity.Property(e => e.Gbp).HasColumnName("GBP");
                entity.Property(e => e.Gel).HasColumnName("GEL");
                entity.Property(e => e.Ggp).HasColumnName("GGP");
                entity.Property(e => e.Ghs).HasColumnName("GHS");
                entity.Property(e => e.Gip).HasColumnName("GIP");
                entity.Property(e => e.Gmd).HasColumnName("GMD");
                entity.Property(e => e.Gnf).HasColumnName("GNF");
                entity.Property(e => e.Gtq).HasColumnName("GTQ");
                entity.Property(e => e.Gyd).HasColumnName("GYD");
                entity.Property(e => e.Hkd).HasColumnName("HKD");
                entity.Property(e => e.Hnl).HasColumnName("HNL");
                entity.Property(e => e.Hrk).HasColumnName("HRK");
                entity.Property(e => e.Htg).HasColumnName("HTG");
                entity.Property(e => e.Huf).HasColumnName("HUF");
                entity.Property(e => e.Idr).HasColumnName("IDR");
                entity.Property(e => e.Ils).HasColumnName("ILS");
                entity.Property(e => e.Imp).HasColumnName("IMP");
                entity.Property(e => e.Inr).HasColumnName("INR");
                entity.Property(e => e.Iqd).HasColumnName("IQD");
                entity.Property(e => e.Irr).HasColumnName("IRR");
                entity.Property(e => e.Isk).HasColumnName("ISK");
                entity.Property(e => e.Jep).HasColumnName("JEP");
                entity.Property(e => e.Jmd).HasColumnName("JMD");
                entity.Property(e => e.Jod).HasColumnName("JOD");
                entity.Property(e => e.Jpy).HasColumnName("JPY");
                entity.Property(e => e.Kes).HasColumnName("KES");
                entity.Property(e => e.Kgs).HasColumnName("KGS");
                entity.Property(e => e.Khr).HasColumnName("KHR");
                entity.Property(e => e.Kmf).HasColumnName("KMF");
                entity.Property(e => e.Kpw).HasColumnName("KPW");
                entity.Property(e => e.Krw).HasColumnName("KRW");
                entity.Property(e => e.Kwd).HasColumnName("KWD");
                entity.Property(e => e.Kyd).HasColumnName("KYD");
                entity.Property(e => e.Kzt).HasColumnName("KZT");
                entity.Property(e => e.Lak).HasColumnName("LAK");
                entity.Property(e => e.Lbp).HasColumnName("LBP");
                entity.Property(e => e.Lkr).HasColumnName("LKR");
                entity.Property(e => e.Lrd).HasColumnName("LRD");
                entity.Property(e => e.Lsl).HasColumnName("LSL");
                entity.Property(e => e.Lyd).HasColumnName("LYD");
                entity.Property(e => e.Mad).HasColumnName("MAD");
                entity.Property(e => e.Mdl).HasColumnName("MDL");
                entity.Property(e => e.Mga).HasColumnName("MGA");
                entity.Property(e => e.Mkd).HasColumnName("MKD");
                entity.Property(e => e.Mmk).HasColumnName("MMK");
                entity.Property(e => e.Mnt).HasColumnName("MNT");
                entity.Property(e => e.Mop).HasColumnName("MOP");
                entity.Property(e => e.Mro).HasColumnName("MRO");
                entity.Property(e => e.Mur).HasColumnName("MUR");
                entity.Property(e => e.Mvr).HasColumnName("MVR");
                entity.Property(e => e.Mwk).HasColumnName("MWK");
                entity.Property(e => e.Mxn).HasColumnName("MXN");
                entity.Property(e => e.Myr).HasColumnName("MYR");
                entity.Property(e => e.Mzn).HasColumnName("MZN");
                entity.Property(e => e.Nad).HasColumnName("NAD");
                entity.Property(e => e.Ngn).HasColumnName("NGN");
                entity.Property(e => e.Nio).HasColumnName("NIO");
                entity.Property(e => e.Nok).HasColumnName("NOK");
                entity.Property(e => e.Npr).HasColumnName("NPR");
                entity.Property(e => e.Nzd).HasColumnName("NZD");
                entity.Property(e => e.Omr).HasColumnName("OMR");
                entity.Property(e => e.Pab).HasColumnName("PAB");
                entity.Property(e => e.Pen).HasColumnName("PEN");
                entity.Property(e => e.Pgk).HasColumnName("PGK");
                entity.Property(e => e.Php).HasColumnName("PHP");
                entity.Property(e => e.Pkr).HasColumnName("PKR");
                entity.Property(e => e.Pln).HasColumnName("PLN");
                entity.Property(e => e.ProviderCode).HasMaxLength(10);
                entity.Property(e => e.ProviderName).HasMaxLength(250);
                entity.Property(e => e.Pyg).HasColumnName("PYG");
                entity.Property(e => e.Qar).HasColumnName("QAR");
                entity.Property(e => e.Ron).HasColumnName("RON");
                entity.Property(e => e.Rsd).HasColumnName("RSD");
                entity.Property(e => e.Rub).HasColumnName("RUB");
                entity.Property(e => e.Rwf).HasColumnName("RWF");
                entity.Property(e => e.Sar).HasColumnName("SAR");
                entity.Property(e => e.Sbd).HasColumnName("SBD");
                entity.Property(e => e.Scr).HasColumnName("SCR");
                entity.Property(e => e.Sdg).HasColumnName("SDG");
                entity.Property(e => e.Sek).HasColumnName("SEK");
                entity.Property(e => e.Sgd).HasColumnName("SGD");
                entity.Property(e => e.Shp).HasColumnName("SHP");
                entity.Property(e => e.Sll).HasColumnName("SLL");
                entity.Property(e => e.Sos).HasColumnName("SOS");
                entity.Property(e => e.Spl).HasColumnName("SPL");
                entity.Property(e => e.Srd).HasColumnName("SRD");
                entity.Property(e => e.Std).HasColumnName("STD");
                entity.Property(e => e.Svc).HasColumnName("SVC");
                entity.Property(e => e.Syp).HasColumnName("SYP");
                entity.Property(e => e.Szl).HasColumnName("SZL");
                entity.Property(e => e.Thb).HasColumnName("THB");
                entity.Property(e => e.Tjs).HasColumnName("TJS");
                entity.Property(e => e.Tmt).HasColumnName("TMT");
                entity.Property(e => e.Tnd).HasColumnName("TND");
                entity.Property(e => e.Top).HasColumnName("TOP");
                entity.Property(e => e.Try).HasColumnName("TRY");
                entity.Property(e => e.Ttd).HasColumnName("TTD");
                entity.Property(e => e.Tvd).HasColumnName("TVD");
                entity.Property(e => e.Twd).HasColumnName("TWD");
                entity.Property(e => e.Tzs).HasColumnName("TZS");
                entity.Property(e => e.Uah).HasColumnName("UAH");
                entity.Property(e => e.Ugx).HasColumnName("UGX");
                entity.Property(e => e.Usd).HasColumnName("USD");
                entity.Property(e => e.Uyu).HasColumnName("UYU");
                entity.Property(e => e.Uzs).HasColumnName("UZS");
                entity.Property(e => e.Vef).HasColumnName("VEF");
                entity.Property(e => e.Vnd).HasColumnName("VND");
                entity.Property(e => e.Vuv).HasColumnName("VUV");
                entity.Property(e => e.Wst).HasColumnName("WST");
                entity.Property(e => e.Xaf).HasColumnName("XAF");
                entity.Property(e => e.Xcd).HasColumnName("XCD");
                entity.Property(e => e.Xdr).HasColumnName("XDR");
                entity.Property(e => e.Xof).HasColumnName("XOF");
                entity.Property(e => e.Xpf).HasColumnName("XPF");
                entity.Property(e => e.Yer).HasColumnName("YER");
                entity.Property(e => e.Zar).HasColumnName("ZAR");
                entity.Property(e => e.Zmw).HasColumnName("ZMW");
                entity.Property(e => e.Zwd).HasColumnName("ZWD");
            });

            modelBuilder.Entity<ExchangeBidRatesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ExchangeBidRatesView", "fin");

                entity.Property(e => e.AccountingDate).HasColumnType("date");
                entity.Property(e => e.Aed).HasColumnName("AED");
                entity.Property(e => e.Afn).HasColumnName("AFN");
                entity.Property(e => e.All).HasColumnName("ALL");
                entity.Property(e => e.Amd).HasColumnName("AMD");
                entity.Property(e => e.Ang).HasColumnName("ANG");
                entity.Property(e => e.Aoa).HasColumnName("AOA");
                entity.Property(e => e.Ars).HasColumnName("ARS");
                entity.Property(e => e.Aud).HasColumnName("AUD");
                entity.Property(e => e.Awg).HasColumnName("AWG");
                entity.Property(e => e.Azn).HasColumnName("AZN");
                entity.Property(e => e.Bam).HasColumnName("BAM");
                entity.Property(e => e.Bbd).HasColumnName("BBD");
                entity.Property(e => e.Bdt).HasColumnName("BDT");
                entity.Property(e => e.Bgn).HasColumnName("BGN");
                entity.Property(e => e.Bhd).HasColumnName("BHD");
                entity.Property(e => e.Bif).HasColumnName("BIF");
                entity.Property(e => e.Bmd).HasColumnName("BMD");
                entity.Property(e => e.Bnd).HasColumnName("BND");
                entity.Property(e => e.Bob).HasColumnName("BOB");
                entity.Property(e => e.Brl).HasColumnName("BRL");
                entity.Property(e => e.Bsd).HasColumnName("BSD");
                entity.Property(e => e.Btn).HasColumnName("BTN");
                entity.Property(e => e.Bwp).HasColumnName("BWP");
                entity.Property(e => e.Byn).HasColumnName("BYN");
                entity.Property(e => e.Bzd).HasColumnName("BZD");
                entity.Property(e => e.Cad).HasColumnName("CAD");
                entity.Property(e => e.Cdf).HasColumnName("CDF");
                entity.Property(e => e.Chf).HasColumnName("CHF");
                entity.Property(e => e.Clp).HasColumnName("CLP");
                entity.Property(e => e.Cny).HasColumnName("CNY");
                entity.Property(e => e.Cop).HasColumnName("COP");
                entity.Property(e => e.Crc).HasColumnName("CRC");
                entity.Property(e => e.Cuc).HasColumnName("CUC");
                entity.Property(e => e.Cup).HasColumnName("CUP");
                entity.Property(e => e.Cve).HasColumnName("CVE");
                entity.Property(e => e.Czk).HasColumnName("CZK");
                entity.Property(e => e.Djf).HasColumnName("DJF");
                entity.Property(e => e.Dkk).HasColumnName("DKK");
                entity.Property(e => e.Dop).HasColumnName("DOP");
                entity.Property(e => e.Dzd).HasColumnName("DZD");
                entity.Property(e => e.Egp).HasColumnName("EGP");
                entity.Property(e => e.Ern).HasColumnName("ERN");
                entity.Property(e => e.Etb).HasColumnName("ETB");
                entity.Property(e => e.Eur).HasColumnName("EUR");
                entity.Property(e => e.ExchangeAmount).HasColumnType("money");
                entity.Property(e => e.ExchangeDate).HasColumnType("date");
                entity.Property(e => e.Fjd).HasColumnName("FJD");
                entity.Property(e => e.Fkp).HasColumnName("FKP");
                entity.Property(e => e.FromCurrency).HasMaxLength(3);
                entity.Property(e => e.Gbp).HasColumnName("GBP");
                entity.Property(e => e.Gel).HasColumnName("GEL");
                entity.Property(e => e.Ggp).HasColumnName("GGP");
                entity.Property(e => e.Ghs).HasColumnName("GHS");
                entity.Property(e => e.Gip).HasColumnName("GIP");
                entity.Property(e => e.Gmd).HasColumnName("GMD");
                entity.Property(e => e.Gnf).HasColumnName("GNF");
                entity.Property(e => e.Gtq).HasColumnName("GTQ");
                entity.Property(e => e.Gyd).HasColumnName("GYD");
                entity.Property(e => e.Hkd).HasColumnName("HKD");
                entity.Property(e => e.Hnl).HasColumnName("HNL");
                entity.Property(e => e.Hrk).HasColumnName("HRK");
                entity.Property(e => e.Htg).HasColumnName("HTG");
                entity.Property(e => e.Huf).HasColumnName("HUF");
                entity.Property(e => e.Idr).HasColumnName("IDR");
                entity.Property(e => e.Ils).HasColumnName("ILS");
                entity.Property(e => e.Imp).HasColumnName("IMP");
                entity.Property(e => e.Inr).HasColumnName("INR");
                entity.Property(e => e.Iqd).HasColumnName("IQD");
                entity.Property(e => e.Irr).HasColumnName("IRR");
                entity.Property(e => e.Isk).HasColumnName("ISK");
                entity.Property(e => e.Jep).HasColumnName("JEP");
                entity.Property(e => e.Jmd).HasColumnName("JMD");
                entity.Property(e => e.Jod).HasColumnName("JOD");
                entity.Property(e => e.Jpy).HasColumnName("JPY");
                entity.Property(e => e.Kes).HasColumnName("KES");
                entity.Property(e => e.Kgs).HasColumnName("KGS");
                entity.Property(e => e.Khr).HasColumnName("KHR");
                entity.Property(e => e.Kmf).HasColumnName("KMF");
                entity.Property(e => e.Kpw).HasColumnName("KPW");
                entity.Property(e => e.Krw).HasColumnName("KRW");
                entity.Property(e => e.Kwd).HasColumnName("KWD");
                entity.Property(e => e.Kyd).HasColumnName("KYD");
                entity.Property(e => e.Kzt).HasColumnName("KZT");
                entity.Property(e => e.Lak).HasColumnName("LAK");
                entity.Property(e => e.Lbp).HasColumnName("LBP");
                entity.Property(e => e.Lkr).HasColumnName("LKR");
                entity.Property(e => e.Lrd).HasColumnName("LRD");
                entity.Property(e => e.Lsl).HasColumnName("LSL");
                entity.Property(e => e.Lyd).HasColumnName("LYD");
                entity.Property(e => e.Mad).HasColumnName("MAD");
                entity.Property(e => e.Mdl).HasColumnName("MDL");
                entity.Property(e => e.Mga).HasColumnName("MGA");
                entity.Property(e => e.Mkd).HasColumnName("MKD");
                entity.Property(e => e.Mmk).HasColumnName("MMK");
                entity.Property(e => e.Mnt).HasColumnName("MNT");
                entity.Property(e => e.Mop).HasColumnName("MOP");
                entity.Property(e => e.Mro).HasColumnName("MRO");
                entity.Property(e => e.Mur).HasColumnName("MUR");
                entity.Property(e => e.Mvr).HasColumnName("MVR");
                entity.Property(e => e.Mwk).HasColumnName("MWK");
                entity.Property(e => e.Mxn).HasColumnName("MXN");
                entity.Property(e => e.Myr).HasColumnName("MYR");
                entity.Property(e => e.Mzn).HasColumnName("MZN");
                entity.Property(e => e.Nad).HasColumnName("NAD");
                entity.Property(e => e.Ngn).HasColumnName("NGN");
                entity.Property(e => e.Nio).HasColumnName("NIO");
                entity.Property(e => e.Nok).HasColumnName("NOK");
                entity.Property(e => e.Npr).HasColumnName("NPR");
                entity.Property(e => e.Nzd).HasColumnName("NZD");
                entity.Property(e => e.Omr).HasColumnName("OMR");
                entity.Property(e => e.Pab).HasColumnName("PAB");
                entity.Property(e => e.Pen).HasColumnName("PEN");
                entity.Property(e => e.Pgk).HasColumnName("PGK");
                entity.Property(e => e.Php).HasColumnName("PHP");
                entity.Property(e => e.Pkr).HasColumnName("PKR");
                entity.Property(e => e.Pln).HasColumnName("PLN");
                entity.Property(e => e.ProviderCode).HasMaxLength(10);
                entity.Property(e => e.ProviderName).HasMaxLength(250);
                entity.Property(e => e.Pyg).HasColumnName("PYG");
                entity.Property(e => e.Qar).HasColumnName("QAR");
                entity.Property(e => e.Ron).HasColumnName("RON");
                entity.Property(e => e.Rsd).HasColumnName("RSD");
                entity.Property(e => e.Rub).HasColumnName("RUB");
                entity.Property(e => e.Rwf).HasColumnName("RWF");
                entity.Property(e => e.Sar).HasColumnName("SAR");
                entity.Property(e => e.Sbd).HasColumnName("SBD");
                entity.Property(e => e.Scr).HasColumnName("SCR");
                entity.Property(e => e.Sdg).HasColumnName("SDG");
                entity.Property(e => e.Sek).HasColumnName("SEK");
                entity.Property(e => e.Sgd).HasColumnName("SGD");
                entity.Property(e => e.Shp).HasColumnName("SHP");
                entity.Property(e => e.Sll).HasColumnName("SLL");
                entity.Property(e => e.Sos).HasColumnName("SOS");
                entity.Property(e => e.Spl).HasColumnName("SPL");
                entity.Property(e => e.Srd).HasColumnName("SRD");
                entity.Property(e => e.Std).HasColumnName("STD");
                entity.Property(e => e.Svc).HasColumnName("SVC");
                entity.Property(e => e.Syp).HasColumnName("SYP");
                entity.Property(e => e.Szl).HasColumnName("SZL");
                entity.Property(e => e.Thb).HasColumnName("THB");
                entity.Property(e => e.Tjs).HasColumnName("TJS");
                entity.Property(e => e.Tmt).HasColumnName("TMT");
                entity.Property(e => e.Tnd).HasColumnName("TND");
                entity.Property(e => e.Top).HasColumnName("TOP");
                entity.Property(e => e.Try).HasColumnName("TRY");
                entity.Property(e => e.Ttd).HasColumnName("TTD");
                entity.Property(e => e.Tvd).HasColumnName("TVD");
                entity.Property(e => e.Twd).HasColumnName("TWD");
                entity.Property(e => e.Tzs).HasColumnName("TZS");
                entity.Property(e => e.Uah).HasColumnName("UAH");
                entity.Property(e => e.Ugx).HasColumnName("UGX");
                entity.Property(e => e.Usd).HasColumnName("USD");
                entity.Property(e => e.Uyu).HasColumnName("UYU");
                entity.Property(e => e.Uzs).HasColumnName("UZS");
                entity.Property(e => e.Vef).HasColumnName("VEF");
                entity.Property(e => e.Vnd).HasColumnName("VND");
                entity.Property(e => e.Vuv).HasColumnName("VUV");
                entity.Property(e => e.Wst).HasColumnName("WST");
                entity.Property(e => e.Xaf).HasColumnName("XAF");
                entity.Property(e => e.Xcd).HasColumnName("XCD");
                entity.Property(e => e.Xdr).HasColumnName("XDR");
                entity.Property(e => e.Xof).HasColumnName("XOF");
                entity.Property(e => e.Xpf).HasColumnName("XPF");
                entity.Property(e => e.Yer).HasColumnName("YER");
                entity.Property(e => e.Zar).HasColumnName("ZAR");
                entity.Property(e => e.Zmw).HasColumnName("ZMW");
                entity.Property(e => e.Zwd).HasColumnName("ZWD");
            });

            modelBuilder.Entity<ExchangeConversionRatesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ExchangeConversionRatesView", "fin");

                entity.Property(e => e.AccountingDate).HasColumnType("date");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.ExchangeAmount).HasColumnType("money");
                entity.Property(e => e.FromCurrency).HasMaxLength(3);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.ProviderCode).HasMaxLength(10);
                entity.Property(e => e.ProviderName).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.ToCurrency).HasMaxLength(3);
            });

            modelBuilder.Entity<ExchangeMidRatesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ExchangeMidRatesView", "fin");

                entity.Property(e => e.AccountingDate).HasColumnType("date");
                entity.Property(e => e.Aed).HasColumnName("AED");
                entity.Property(e => e.Afn).HasColumnName("AFN");
                entity.Property(e => e.All).HasColumnName("ALL");
                entity.Property(e => e.Amd).HasColumnName("AMD");
                entity.Property(e => e.Ang).HasColumnName("ANG");
                entity.Property(e => e.Aoa).HasColumnName("AOA");
                entity.Property(e => e.Ars).HasColumnName("ARS");
                entity.Property(e => e.Aud).HasColumnName("AUD");
                entity.Property(e => e.Awg).HasColumnName("AWG");
                entity.Property(e => e.Azn).HasColumnName("AZN");
                entity.Property(e => e.Bam).HasColumnName("BAM");
                entity.Property(e => e.Bbd).HasColumnName("BBD");
                entity.Property(e => e.Bdt).HasColumnName("BDT");
                entity.Property(e => e.Bgn).HasColumnName("BGN");
                entity.Property(e => e.Bhd).HasColumnName("BHD");
                entity.Property(e => e.Bif).HasColumnName("BIF");
                entity.Property(e => e.Bmd).HasColumnName("BMD");
                entity.Property(e => e.Bnd).HasColumnName("BND");
                entity.Property(e => e.Bob).HasColumnName("BOB");
                entity.Property(e => e.Brl).HasColumnName("BRL");
                entity.Property(e => e.Bsd).HasColumnName("BSD");
                entity.Property(e => e.Btn).HasColumnName("BTN");
                entity.Property(e => e.Bwp).HasColumnName("BWP");
                entity.Property(e => e.Byn).HasColumnName("BYN");
                entity.Property(e => e.Bzd).HasColumnName("BZD");
                entity.Property(e => e.Cad).HasColumnName("CAD");
                entity.Property(e => e.Cdf).HasColumnName("CDF");
                entity.Property(e => e.Chf).HasColumnName("CHF");
                entity.Property(e => e.Clp).HasColumnName("CLP");
                entity.Property(e => e.Cny).HasColumnName("CNY");
                entity.Property(e => e.Cop).HasColumnName("COP");
                entity.Property(e => e.Crc).HasColumnName("CRC");
                entity.Property(e => e.Cuc).HasColumnName("CUC");
                entity.Property(e => e.Cup).HasColumnName("CUP");
                entity.Property(e => e.Cve).HasColumnName("CVE");
                entity.Property(e => e.Czk).HasColumnName("CZK");
                entity.Property(e => e.Djf).HasColumnName("DJF");
                entity.Property(e => e.Dkk).HasColumnName("DKK");
                entity.Property(e => e.Dop).HasColumnName("DOP");
                entity.Property(e => e.Dzd).HasColumnName("DZD");
                entity.Property(e => e.Egp).HasColumnName("EGP");
                entity.Property(e => e.Ern).HasColumnName("ERN");
                entity.Property(e => e.Etb).HasColumnName("ETB");
                entity.Property(e => e.Eur).HasColumnName("EUR");
                entity.Property(e => e.ExchangeAmount).HasColumnType("money");
                entity.Property(e => e.ExchangeDate).HasColumnType("date");
                entity.Property(e => e.Fjd).HasColumnName("FJD");
                entity.Property(e => e.Fkp).HasColumnName("FKP");
                entity.Property(e => e.FromCurrency).HasMaxLength(3);
                entity.Property(e => e.Gbp).HasColumnName("GBP");
                entity.Property(e => e.Gel).HasColumnName("GEL");
                entity.Property(e => e.Ggp).HasColumnName("GGP");
                entity.Property(e => e.Ghs).HasColumnName("GHS");
                entity.Property(e => e.Gip).HasColumnName("GIP");
                entity.Property(e => e.Gmd).HasColumnName("GMD");
                entity.Property(e => e.Gnf).HasColumnName("GNF");
                entity.Property(e => e.Gtq).HasColumnName("GTQ");
                entity.Property(e => e.Gyd).HasColumnName("GYD");
                entity.Property(e => e.Hkd).HasColumnName("HKD");
                entity.Property(e => e.Hnl).HasColumnName("HNL");
                entity.Property(e => e.Hrk).HasColumnName("HRK");
                entity.Property(e => e.Htg).HasColumnName("HTG");
                entity.Property(e => e.Huf).HasColumnName("HUF");
                entity.Property(e => e.Idr).HasColumnName("IDR");
                entity.Property(e => e.Ils).HasColumnName("ILS");
                entity.Property(e => e.Imp).HasColumnName("IMP");
                entity.Property(e => e.Inr).HasColumnName("INR");
                entity.Property(e => e.Iqd).HasColumnName("IQD");
                entity.Property(e => e.Irr).HasColumnName("IRR");
                entity.Property(e => e.Isk).HasColumnName("ISK");
                entity.Property(e => e.Jep).HasColumnName("JEP");
                entity.Property(e => e.Jmd).HasColumnName("JMD");
                entity.Property(e => e.Jod).HasColumnName("JOD");
                entity.Property(e => e.Jpy).HasColumnName("JPY");
                entity.Property(e => e.Kes).HasColumnName("KES");
                entity.Property(e => e.Kgs).HasColumnName("KGS");
                entity.Property(e => e.Khr).HasColumnName("KHR");
                entity.Property(e => e.Kmf).HasColumnName("KMF");
                entity.Property(e => e.Kpw).HasColumnName("KPW");
                entity.Property(e => e.Krw).HasColumnName("KRW");
                entity.Property(e => e.Kwd).HasColumnName("KWD");
                entity.Property(e => e.Kyd).HasColumnName("KYD");
                entity.Property(e => e.Kzt).HasColumnName("KZT");
                entity.Property(e => e.Lak).HasColumnName("LAK");
                entity.Property(e => e.Lbp).HasColumnName("LBP");
                entity.Property(e => e.Lkr).HasColumnName("LKR");
                entity.Property(e => e.Lrd).HasColumnName("LRD");
                entity.Property(e => e.Lsl).HasColumnName("LSL");
                entity.Property(e => e.Lyd).HasColumnName("LYD");
                entity.Property(e => e.Mad).HasColumnName("MAD");
                entity.Property(e => e.Mdl).HasColumnName("MDL");
                entity.Property(e => e.Mga).HasColumnName("MGA");
                entity.Property(e => e.Mkd).HasColumnName("MKD");
                entity.Property(e => e.Mmk).HasColumnName("MMK");
                entity.Property(e => e.Mnt).HasColumnName("MNT");
                entity.Property(e => e.Mop).HasColumnName("MOP");
                entity.Property(e => e.Mro).HasColumnName("MRO");
                entity.Property(e => e.Mur).HasColumnName("MUR");
                entity.Property(e => e.Mvr).HasColumnName("MVR");
                entity.Property(e => e.Mwk).HasColumnName("MWK");
                entity.Property(e => e.Mxn).HasColumnName("MXN");
                entity.Property(e => e.Myr).HasColumnName("MYR");
                entity.Property(e => e.Mzn).HasColumnName("MZN");
                entity.Property(e => e.Nad).HasColumnName("NAD");
                entity.Property(e => e.Ngn).HasColumnName("NGN");
                entity.Property(e => e.Nio).HasColumnName("NIO");
                entity.Property(e => e.Nok).HasColumnName("NOK");
                entity.Property(e => e.Npr).HasColumnName("NPR");
                entity.Property(e => e.Nzd).HasColumnName("NZD");
                entity.Property(e => e.Omr).HasColumnName("OMR");
                entity.Property(e => e.Pab).HasColumnName("PAB");
                entity.Property(e => e.Pen).HasColumnName("PEN");
                entity.Property(e => e.Pgk).HasColumnName("PGK");
                entity.Property(e => e.Php).HasColumnName("PHP");
                entity.Property(e => e.Pkr).HasColumnName("PKR");
                entity.Property(e => e.Pln).HasColumnName("PLN");
                entity.Property(e => e.ProviderCode).HasMaxLength(10);
                entity.Property(e => e.ProviderName).HasMaxLength(250);
                entity.Property(e => e.Pyg).HasColumnName("PYG");
                entity.Property(e => e.Qar).HasColumnName("QAR");
                entity.Property(e => e.Ron).HasColumnName("RON");
                entity.Property(e => e.Rsd).HasColumnName("RSD");
                entity.Property(e => e.Rub).HasColumnName("RUB");
                entity.Property(e => e.Rwf).HasColumnName("RWF");
                entity.Property(e => e.Sar).HasColumnName("SAR");
                entity.Property(e => e.Sbd).HasColumnName("SBD");
                entity.Property(e => e.Scr).HasColumnName("SCR");
                entity.Property(e => e.Sdg).HasColumnName("SDG");
                entity.Property(e => e.Sek).HasColumnName("SEK");
                entity.Property(e => e.Sgd).HasColumnName("SGD");
                entity.Property(e => e.Shp).HasColumnName("SHP");
                entity.Property(e => e.Sll).HasColumnName("SLL");
                entity.Property(e => e.Sos).HasColumnName("SOS");
                entity.Property(e => e.Spl).HasColumnName("SPL");
                entity.Property(e => e.Srd).HasColumnName("SRD");
                entity.Property(e => e.Std).HasColumnName("STD");
                entity.Property(e => e.Svc).HasColumnName("SVC");
                entity.Property(e => e.Syp).HasColumnName("SYP");
                entity.Property(e => e.Szl).HasColumnName("SZL");
                entity.Property(e => e.Thb).HasColumnName("THB");
                entity.Property(e => e.Tjs).HasColumnName("TJS");
                entity.Property(e => e.Tmt).HasColumnName("TMT");
                entity.Property(e => e.Tnd).HasColumnName("TND");
                entity.Property(e => e.Top).HasColumnName("TOP");
                entity.Property(e => e.Try).HasColumnName("TRY");
                entity.Property(e => e.Ttd).HasColumnName("TTD");
                entity.Property(e => e.Tvd).HasColumnName("TVD");
                entity.Property(e => e.Twd).HasColumnName("TWD");
                entity.Property(e => e.Tzs).HasColumnName("TZS");
                entity.Property(e => e.Uah).HasColumnName("UAH");
                entity.Property(e => e.Ugx).HasColumnName("UGX");
                entity.Property(e => e.Usd).HasColumnName("USD");
                entity.Property(e => e.Uyu).HasColumnName("UYU");
                entity.Property(e => e.Uzs).HasColumnName("UZS");
                entity.Property(e => e.Vef).HasColumnName("VEF");
                entity.Property(e => e.Vnd).HasColumnName("VND");
                entity.Property(e => e.Vuv).HasColumnName("VUV");
                entity.Property(e => e.Wst).HasColumnName("WST");
                entity.Property(e => e.Xaf).HasColumnName("XAF");
                entity.Property(e => e.Xcd).HasColumnName("XCD");
                entity.Property(e => e.Xdr).HasColumnName("XDR");
                entity.Property(e => e.Xof).HasColumnName("XOF");
                entity.Property(e => e.Xpf).HasColumnName("XPF");
                entity.Property(e => e.Yer).HasColumnName("YER");
                entity.Property(e => e.Zar).HasColumnName("ZAR");
                entity.Property(e => e.Zmw).HasColumnName("ZMW");
                entity.Property(e => e.Zwd).HasColumnName("ZWD");
            });

            modelBuilder.Entity<ExchangePendingExportsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ExchangePendingExportsView", "fin");

                entity.Property(e => e.AccountingDate).HasColumnType("date");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.ExchangeAmount).HasColumnType("money");
                entity.Property(e => e.ExportSystemId).HasMaxLength(20);
                entity.Property(e => e.FromCurrencyIso3).HasMaxLength(3);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.ProviderName).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.ToCurrencyIso3).HasMaxLength(3);
            });

            modelBuilder.Entity<ExchangePendingRetrievalView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ExchangePendingRetrievalView", "fin");

                entity.Property(e => e.AccountingDate).HasColumnType("date");
                entity.Property(e => e.ErpCode)
                    .HasMaxLength(10)
                    .HasColumnName("ERP_Code");
                entity.Property(e => e.ErpShortName)
                    .HasMaxLength(50)
                    .HasColumnName("ERP_ShortName");
                entity.Property(e => e.ExcFromCurrencyIso3)
                    .HasMaxLength(3)
                    .HasColumnName("EXC_FromCurrencyIso3");
                entity.Property(e => e.ExcToCurrencyIso3)
                    .HasMaxLength(3)
                    .HasColumnName("EXC_ToCurrencyIso3");
                entity.Property(e => e.LastAccountingDate).HasColumnType("date");
            });

            modelBuilder.Entity<ExchangeRate>(entity =>
            {
                entity.HasKey(e => e.ExrId);

                entity.ToTable("ExchangeRates", "fin");

                entity.HasIndex(e => e.ExrAccountingDate, "IX_ExchangeRates_EXR_AccountingDate");

                entity.HasIndex(e => e.ExrExchangeRateProviderId, "IX_ExchangeRates_EXR_ExchangeRateProvider_Id");

                entity.HasIndex(e => new { e.ExrFromCurrencyIso3, e.ExrAccountingDate }, "IX_fin_ExchangeRates_FromCurrencyIso3_AccountingDate_INCL");

                entity.Property(e => e.ExrId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("EXR_Id");
                entity.Property(e => e.ExrAccountingDate)
                    .HasColumnType("date")
                    .HasColumnName("EXR_AccountingDate");
                entity.Property(e => e.ExrAskRate).HasColumnName("EXR_AskRate");
                entity.Property(e => e.ExrBidRate).HasColumnName("EXR_BidRate");
                entity.Property(e => e.ExrCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("EXR_CreatedBy");
                entity.Property(e => e.ExrCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("EXR_CreatedDate");
                entity.Property(e => e.ExrEffectiveDate).HasColumnName("EXR_EffectiveDate");
                entity.Property(e => e.ExrExchangeAmount)
                    .HasColumnType("money")
                    .HasColumnName("EXR_ExchangeAmount");
                entity.Property(e => e.ExrExchangeRateProviderId).HasColumnName("EXR_ExchangeRateProvider_Id");
                entity.Property(e => e.ExrFromCurrencyIso3)
                    .HasMaxLength(3)
                    .HasColumnName("EXR_FromCurrencyIso3");
                entity.Property(e => e.ExrLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("EXR_LastModifiedBy");
                entity.Property(e => e.ExrLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("EXR_LastModifiedDate");
                entity.Property(e => e.ExrMidRate).HasColumnName("EXR_MidRate");
                entity.Property(e => e.ExrRetrievalDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("EXR_RetrievalDate");
                entity.Property(e => e.ExrTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("EXR_TimeStamp");
                entity.Property(e => e.ExrToCurrencyIso3)
                    .HasMaxLength(3)
                    .HasColumnName("EXR_ToCurrencyIso3");
                entity.Property(e => e.ExrUntilDate).HasColumnName("EXR_UntilDate");

                entity.HasOne(d => d.ExrExchangeRateProvider).WithMany(p => p.ExchangeRates)
                    .HasForeignKey(d => d.ExrExchangeRateProviderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExchangeRates_ExchangeRateProviders");

                entity.HasOne(d => d.ExrFromCurrencyIso3Navigation).WithMany(p => p.ExchangeRateExrFromCurrencyIso3Navigations)
                    .HasForeignKey(d => d.ExrFromCurrencyIso3)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExchangeRates_SourceCurrencies");

                entity.HasOne(d => d.ExrToCurrencyIso3Navigation).WithMany(p => p.ExchangeRateExrToCurrencyIso3Navigations)
                    .HasForeignKey(d => d.ExrToCurrencyIso3)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExchangeRates_TargetCurrencies");
            });

            modelBuilder.Entity<ExchangeRateCurrency>(entity =>
            {
                entity.HasKey(e => e.ExcId);

                entity.ToTable("ExchangeRateCurrencies", "fin");

                entity.HasIndex(e => e.ExcFromCurrencyIso3, "IX_ExchangeRateCurrencies_EXC_FromCurrencyIso3");

                entity.HasIndex(e => new { e.ExcExchangeRateProviderId, e.ExcFromCurrencyIso3, e.ExcToCurrencyIso3 }, "IX_ExchangeRateCurrencies_ExchangeRateCurrencies").IsUnique();

                entity.Property(e => e.ExcId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("EXC_Id");
                entity.Property(e => e.ExcCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("EXC_CreatedBy");
                entity.Property(e => e.ExcCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("EXC_CreatedDate");
                entity.Property(e => e.ExcEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("EXC_EffectiveDate");
                entity.Property(e => e.ExcExchangeRateProviderId).HasColumnName("EXC_ExchangeRateProvider_Id");
                entity.Property(e => e.ExcFromCurrencyIso3)
                    .HasMaxLength(3)
                    .HasColumnName("EXC_FromCurrencyIso3");
                entity.Property(e => e.ExcInactiveDate)
                    .HasColumnType("date")
                    .HasColumnName("EXC_InactiveDate");
                entity.Property(e => e.ExcLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("EXC_LastModifiedBy");
                entity.Property(e => e.ExcLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("EXC_LastModifiedDate");
                entity.Property(e => e.ExcTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("EXC_TimeStamp");
                entity.Property(e => e.ExcToCurrencyIso3)
                    .HasMaxLength(3)
                    .HasColumnName("EXC_ToCurrencyIso3");

                entity.HasOne(d => d.ExcExchangeRateProvider).WithMany(p => p.ExchangeRateCurrencies)
                    .HasForeignKey(d => d.ExcExchangeRateProviderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExchangeRateCurrencies_ExchangeRateProviders");

                entity.HasOne(d => d.ExcFromCurrencyIso3Navigation).WithMany(p => p.ExchangeRateCurrencyExcFromCurrencyIso3Navigations)
                    .HasForeignKey(d => d.ExcFromCurrencyIso3)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExchangeRateCurrencies_SourceCurrencies");

                entity.HasOne(d => d.ExcToCurrencyIso3Navigation).WithMany(p => p.ExchangeRateCurrencyExcToCurrencyIso3Navigations)
                    .HasForeignKey(d => d.ExcToCurrencyIso3)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExchangeRateCurrencies_TargetCurrencies");
            });

            modelBuilder.Entity<ExchangeRateExport>(entity =>
            {
                entity.HasKey(e => e.EreId);

                entity.ToTable("ExchangeRateExports", "fin");

                entity.HasIndex(e => new { e.EreExchangeRateId, e.EreExchangeRateExportSystemId }, "IX_ExchangeRateExports_ExchangeRate_ExchangeRateExportSystem");

                entity.Property(e => e.EreId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("ERE_Id");
                entity.Property(e => e.EreCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ERE_CreatedBy");
                entity.Property(e => e.EreCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ERE_CreatedDate");
                entity.Property(e => e.EreExchangeRateExportSystemId)
                    .HasMaxLength(20)
                    .HasColumnName("ERE_ExchangeRateExportSystemId");
                entity.Property(e => e.EreExchangeRateId).HasColumnName("ERE_ExchangeRate_Id");
                entity.Property(e => e.EreExportDate).HasColumnName("ERE_ExportDate");
                entity.Property(e => e.EreLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ERE_LastModifiedBy");
                entity.Property(e => e.EreLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ERE_LastModifiedDate");
                entity.Property(e => e.EreTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ERE_TimeStamp");

                entity.HasOne(d => d.EreExchangeRateExportSystem).WithMany(p => p.ExchangeRateExports)
                    .HasForeignKey(d => d.EreExchangeRateExportSystemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExchangeRateExports_ExchangeRateExportSystems");

                entity.HasOne(d => d.EreExchangeRate).WithMany(p => p.ExchangeRateExports)
                    .HasForeignKey(d => d.EreExchangeRateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExchangeRateExports_ExchangeRates");
            });

            modelBuilder.Entity<ExchangeRateExportSystem>(entity =>
            {
                entity.HasKey(e => e.EresId).HasName("PK_ExchangeRateExportSystems_1");

                entity.ToTable("ExchangeRateExportSystems", "fin");

                entity.Property(e => e.EresId)
                    .HasMaxLength(20)
                    .HasColumnName("ERES_Id");
                entity.Property(e => e.EresCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ERES_CreatedBy");
                entity.Property(e => e.EresCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ERES_CreatedDate");
                entity.Property(e => e.EresLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ERES_LastModifiedBy");
                entity.Property(e => e.EresLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ERES_LastModifiedDate");
                entity.Property(e => e.EresTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ERES_TimeStamp");
            });

            modelBuilder.Entity<ExchangeRateExportSystemLine>(entity =>
            {
                entity.HasKey(e => e.ErelId);

                entity.ToTable("ExchangeRateExportSystemLines", "fin");

                entity.HasIndex(e => new { e.ErelExchangeRateCurrencyId, e.ErelExchangeRateExportSystemId }, "IX_ExchangeRateExportSystemLines_ExchangeRateCurrency_ExportSystem_INCL");

                entity.HasIndex(e => new { e.ErelExchangeRateExportSystemId, e.ErelExchangeRateCurrencyId }, "IX_ExchangeRateExportSystemLines_ExportSystem_ExchangeRateCurrency_INCL");

                entity.Property(e => e.ErelId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("EREL_Id");
                entity.Property(e => e.ErelCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("EREL_CreatedBy");
                entity.Property(e => e.ErelCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("EREL_CreatedDate");
                entity.Property(e => e.ErelEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("EREL_EffectiveDate");
                entity.Property(e => e.ErelExchangeRateCurrencyId).HasColumnName("EREL_ExchangeRateCurrency_Id");
                entity.Property(e => e.ErelExchangeRateExportSystemId)
                    .HasMaxLength(20)
                    .HasColumnName("EREL_ExchangeRateExportSystem_Id");
                entity.Property(e => e.ErelInactiveDate)
                    .HasColumnType("date")
                    .HasColumnName("EREL_InactiveDate");
                entity.Property(e => e.ErelLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("EREL_LastModifiedBy");
                entity.Property(e => e.ErelLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("EREL_LastModifiedDate");
                entity.Property(e => e.ErelTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("EREL_TimeStamp");

                entity.HasOne(d => d.ErelExchangeRateCurrency).WithMany(p => p.ExchangeRateExportSystemLines)
                    .HasForeignKey(d => d.ErelExchangeRateCurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExchangeRateExportSystemLines_ExchangeRateCurrencies");

                entity.HasOne(d => d.ErelExchangeRateExportSystem).WithMany(p => p.ExchangeRateExportSystemLines)
                    .HasForeignKey(d => d.ErelExchangeRateExportSystemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExchangeRateExportSystemLines_ExchangeRateExportSystems");
            });

            modelBuilder.Entity<ExchangeRateProvider>(entity =>
            {
                entity.HasKey(e => e.ErpId);

                entity.ToTable("ExchangeRateProviders", "fin");

                entity.HasIndex(e => e.ErpCode, "IX_ExchangeRateProviders_Code").IsUnique();

                entity.Property(e => e.ErpId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("ERP_Id");
                entity.Property(e => e.ErpCode)
                    .HasMaxLength(10)
                    .HasColumnName("ERP_Code");
                entity.Property(e => e.ErpCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ERP_CreatedBy");
                entity.Property(e => e.ErpCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ERP_CreatedDate");
                entity.Property(e => e.ErpLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ERP_LastModifiedBy");
                entity.Property(e => e.ErpLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ERP_LastModifiedDate");
                entity.Property(e => e.ErpLongName)
                    .HasMaxLength(250)
                    .HasColumnName("ERP_LongName");
                entity.Property(e => e.ErpResource).HasColumnName("ERP_Resource");
                entity.Property(e => e.ErpShortName)
                    .HasMaxLength(50)
                    .HasColumnName("ERP_ShortName");
                entity.Property(e => e.ErpTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ERP_TimeStamp");
            });

            modelBuilder.Entity<ExchangeRateType>(entity =>
            {
                entity.HasKey(e => e.ErtId);

                entity.ToTable("ExchangeRateTypes", "mdm");

                entity.Property(e => e.ErtId)
                    .HasMaxLength(3)
                    .HasColumnName("ERT_Id");
                entity.Property(e => e.ErtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ERT_CreatedBy");
                entity.Property(e => e.ErtCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ERT_CreatedDate");
                entity.Property(e => e.ErtInactive).HasColumnName("ERT_Inactive");
                entity.Property(e => e.ErtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ERT_LastModifiedBy");
                entity.Property(e => e.ErtLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ERT_LastModifiedDate");
                entity.Property(e => e.ErtLocalizableEntryId).HasColumnName("ERT_LocalizableEntry_Id");
                entity.Property(e => e.ErtName)
                    .HasMaxLength(250)
                    .HasColumnName("ERT_Name");
                entity.Property(e => e.ErtTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ERT_TimeStamp");

                entity.HasOne(d => d.ErtLocalizableEntry).WithMany(p => p.ExchangeRateTypes)
                    .HasForeignKey(d => d.ErtLocalizableEntryId)
                    .HasConstraintName("FK_ExchangeRateTypes_LocalizableEntries");
            });

            modelBuilder.Entity<ExchangeRatesExactView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ExchangeRatesExactView", "exact");

                entity.Property(e => e.AccountingDate).HasColumnType("date");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.ExchangeAmount).HasColumnType("money");
                entity.Property(e => e.ExportSystemId).HasMaxLength(20);
                entity.Property(e => e.FromCurrencyIso3).HasMaxLength(3);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.ProviderName).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.ToCurrencyIso3).HasMaxLength(3);
            });

            modelBuilder.Entity<ExchangeRatesExactView1>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ExchangeRatesExactView", "tmp");

                entity.Property(e => e.AccountingDate).HasColumnType("date");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.ExchangeAmount).HasColumnType("money");
                entity.Property(e => e.ExportSystemId).HasMaxLength(20);
                entity.Property(e => e.FromCurrencyIso3).HasMaxLength(3);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.ProviderName).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.ToCurrencyIso3).HasMaxLength(3);
            });

            modelBuilder.Entity<ExchangeRatesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ExchangeRatesView", "fin");

                entity.Property(e => e.AccountingDate).HasColumnType("date");
                entity.Property(e => e.Aed).HasColumnName("AED");
                entity.Property(e => e.Afn).HasColumnName("AFN");
                entity.Property(e => e.All).HasColumnName("ALL");
                entity.Property(e => e.Amd).HasColumnName("AMD");
                entity.Property(e => e.Ang).HasColumnName("ANG");
                entity.Property(e => e.Aoa).HasColumnName("AOA");
                entity.Property(e => e.Ars).HasColumnName("ARS");
                entity.Property(e => e.Aud).HasColumnName("AUD");
                entity.Property(e => e.Awg).HasColumnName("AWG");
                entity.Property(e => e.Azn).HasColumnName("AZN");
                entity.Property(e => e.Bam).HasColumnName("BAM");
                entity.Property(e => e.Bbd).HasColumnName("BBD");
                entity.Property(e => e.Bdt).HasColumnName("BDT");
                entity.Property(e => e.Bgn).HasColumnName("BGN");
                entity.Property(e => e.Bhd).HasColumnName("BHD");
                entity.Property(e => e.Bif).HasColumnName("BIF");
                entity.Property(e => e.Bmd).HasColumnName("BMD");
                entity.Property(e => e.Bnd).HasColumnName("BND");
                entity.Property(e => e.Bob).HasColumnName("BOB");
                entity.Property(e => e.Brl).HasColumnName("BRL");
                entity.Property(e => e.Bsd).HasColumnName("BSD");
                entity.Property(e => e.Btn).HasColumnName("BTN");
                entity.Property(e => e.Bwp).HasColumnName("BWP");
                entity.Property(e => e.Byn).HasColumnName("BYN");
                entity.Property(e => e.Bzd).HasColumnName("BZD");
                entity.Property(e => e.Cad).HasColumnName("CAD");
                entity.Property(e => e.Cdf).HasColumnName("CDF");
                entity.Property(e => e.Chf).HasColumnName("CHF");
                entity.Property(e => e.Clp).HasColumnName("CLP");
                entity.Property(e => e.Cny).HasColumnName("CNY");
                entity.Property(e => e.Cop).HasColumnName("COP");
                entity.Property(e => e.Crc).HasColumnName("CRC");
                entity.Property(e => e.Cuc).HasColumnName("CUC");
                entity.Property(e => e.Cup).HasColumnName("CUP");
                entity.Property(e => e.Cve).HasColumnName("CVE");
                entity.Property(e => e.Czk).HasColumnName("CZK");
                entity.Property(e => e.Djf).HasColumnName("DJF");
                entity.Property(e => e.Dkk).HasColumnName("DKK");
                entity.Property(e => e.Dop).HasColumnName("DOP");
                entity.Property(e => e.Dzd).HasColumnName("DZD");
                entity.Property(e => e.Egp).HasColumnName("EGP");
                entity.Property(e => e.Ern).HasColumnName("ERN");
                entity.Property(e => e.Etb).HasColumnName("ETB");
                entity.Property(e => e.Eur).HasColumnName("EUR");
                entity.Property(e => e.ExchangeAmount).HasColumnType("money");
                entity.Property(e => e.ExchangeDate).HasColumnType("date");
                entity.Property(e => e.Fjd).HasColumnName("FJD");
                entity.Property(e => e.Fkp).HasColumnName("FKP");
                entity.Property(e => e.FromCurrency).HasMaxLength(3);
                entity.Property(e => e.Gbp).HasColumnName("GBP");
                entity.Property(e => e.Gel).HasColumnName("GEL");
                entity.Property(e => e.Ggp).HasColumnName("GGP");
                entity.Property(e => e.Ghs).HasColumnName("GHS");
                entity.Property(e => e.Gip).HasColumnName("GIP");
                entity.Property(e => e.Gmd).HasColumnName("GMD");
                entity.Property(e => e.Gnf).HasColumnName("GNF");
                entity.Property(e => e.Gtq).HasColumnName("GTQ");
                entity.Property(e => e.Gyd).HasColumnName("GYD");
                entity.Property(e => e.Hkd).HasColumnName("HKD");
                entity.Property(e => e.Hnl).HasColumnName("HNL");
                entity.Property(e => e.Hrk).HasColumnName("HRK");
                entity.Property(e => e.Htg).HasColumnName("HTG");
                entity.Property(e => e.Huf).HasColumnName("HUF");
                entity.Property(e => e.Idr).HasColumnName("IDR");
                entity.Property(e => e.Ils).HasColumnName("ILS");
                entity.Property(e => e.Imp).HasColumnName("IMP");
                entity.Property(e => e.Inr).HasColumnName("INR");
                entity.Property(e => e.Iqd).HasColumnName("IQD");
                entity.Property(e => e.Irr).HasColumnName("IRR");
                entity.Property(e => e.Isk).HasColumnName("ISK");
                entity.Property(e => e.Jep).HasColumnName("JEP");
                entity.Property(e => e.Jmd).HasColumnName("JMD");
                entity.Property(e => e.Jod).HasColumnName("JOD");
                entity.Property(e => e.Jpy).HasColumnName("JPY");
                entity.Property(e => e.Kes).HasColumnName("KES");
                entity.Property(e => e.Kgs).HasColumnName("KGS");
                entity.Property(e => e.Khr).HasColumnName("KHR");
                entity.Property(e => e.Kmf).HasColumnName("KMF");
                entity.Property(e => e.Kpw).HasColumnName("KPW");
                entity.Property(e => e.Krw).HasColumnName("KRW");
                entity.Property(e => e.Kwd).HasColumnName("KWD");
                entity.Property(e => e.Kyd).HasColumnName("KYD");
                entity.Property(e => e.Kzt).HasColumnName("KZT");
                entity.Property(e => e.Lak).HasColumnName("LAK");
                entity.Property(e => e.Lbp).HasColumnName("LBP");
                entity.Property(e => e.Lkr).HasColumnName("LKR");
                entity.Property(e => e.Lrd).HasColumnName("LRD");
                entity.Property(e => e.Lsl).HasColumnName("LSL");
                entity.Property(e => e.Lyd).HasColumnName("LYD");
                entity.Property(e => e.Mad).HasColumnName("MAD");
                entity.Property(e => e.Mdl).HasColumnName("MDL");
                entity.Property(e => e.Mga).HasColumnName("MGA");
                entity.Property(e => e.Mkd).HasColumnName("MKD");
                entity.Property(e => e.Mmk).HasColumnName("MMK");
                entity.Property(e => e.Mnt).HasColumnName("MNT");
                entity.Property(e => e.Mop).HasColumnName("MOP");
                entity.Property(e => e.Mro).HasColumnName("MRO");
                entity.Property(e => e.Mur).HasColumnName("MUR");
                entity.Property(e => e.Mvr).HasColumnName("MVR");
                entity.Property(e => e.Mwk).HasColumnName("MWK");
                entity.Property(e => e.Mxn).HasColumnName("MXN");
                entity.Property(e => e.Myr).HasColumnName("MYR");
                entity.Property(e => e.Mzn).HasColumnName("MZN");
                entity.Property(e => e.Nad).HasColumnName("NAD");
                entity.Property(e => e.Ngn).HasColumnName("NGN");
                entity.Property(e => e.Nio).HasColumnName("NIO");
                entity.Property(e => e.Nok).HasColumnName("NOK");
                entity.Property(e => e.Npr).HasColumnName("NPR");
                entity.Property(e => e.Nzd).HasColumnName("NZD");
                entity.Property(e => e.Omr).HasColumnName("OMR");
                entity.Property(e => e.Pab).HasColumnName("PAB");
                entity.Property(e => e.Pen).HasColumnName("PEN");
                entity.Property(e => e.Pgk).HasColumnName("PGK");
                entity.Property(e => e.Php).HasColumnName("PHP");
                entity.Property(e => e.Pkr).HasColumnName("PKR");
                entity.Property(e => e.Pln).HasColumnName("PLN");
                entity.Property(e => e.ProviderCode).HasMaxLength(10);
                entity.Property(e => e.ProviderName).HasMaxLength(250);
                entity.Property(e => e.Pyg).HasColumnName("PYG");
                entity.Property(e => e.Qar).HasColumnName("QAR");
                entity.Property(e => e.Ron).HasColumnName("RON");
                entity.Property(e => e.Rsd).HasColumnName("RSD");
                entity.Property(e => e.Rub).HasColumnName("RUB");
                entity.Property(e => e.Rwf).HasColumnName("RWF");
                entity.Property(e => e.Sar).HasColumnName("SAR");
                entity.Property(e => e.Sbd).HasColumnName("SBD");
                entity.Property(e => e.Scr).HasColumnName("SCR");
                entity.Property(e => e.Sdg).HasColumnName("SDG");
                entity.Property(e => e.Sek).HasColumnName("SEK");
                entity.Property(e => e.Sgd).HasColumnName("SGD");
                entity.Property(e => e.Shp).HasColumnName("SHP");
                entity.Property(e => e.Sll).HasColumnName("SLL");
                entity.Property(e => e.Sos).HasColumnName("SOS");
                entity.Property(e => e.Spl).HasColumnName("SPL");
                entity.Property(e => e.Srd).HasColumnName("SRD");
                entity.Property(e => e.Std).HasColumnName("STD");
                entity.Property(e => e.Svc).HasColumnName("SVC");
                entity.Property(e => e.Syp).HasColumnName("SYP");
                entity.Property(e => e.Szl).HasColumnName("SZL");
                entity.Property(e => e.Thb).HasColumnName("THB");
                entity.Property(e => e.Tjs).HasColumnName("TJS");
                entity.Property(e => e.Tmt).HasColumnName("TMT");
                entity.Property(e => e.Tnd).HasColumnName("TND");
                entity.Property(e => e.Top).HasColumnName("TOP");
                entity.Property(e => e.Try).HasColumnName("TRY");
                entity.Property(e => e.Ttd).HasColumnName("TTD");
                entity.Property(e => e.Tvd).HasColumnName("TVD");
                entity.Property(e => e.Twd).HasColumnName("TWD");
                entity.Property(e => e.Tzs).HasColumnName("TZS");
                entity.Property(e => e.Uah).HasColumnName("UAH");
                entity.Property(e => e.Ugx).HasColumnName("UGX");
                entity.Property(e => e.Usd).HasColumnName("USD");
                entity.Property(e => e.Uyu).HasColumnName("UYU");
                entity.Property(e => e.Uzs).HasColumnName("UZS");
                entity.Property(e => e.Vef).HasColumnName("VEF");
                entity.Property(e => e.Vnd).HasColumnName("VND");
                entity.Property(e => e.Vuv).HasColumnName("VUV");
                entity.Property(e => e.Wst).HasColumnName("WST");
                entity.Property(e => e.Xaf).HasColumnName("XAF");
                entity.Property(e => e.Xcd).HasColumnName("XCD");
                entity.Property(e => e.Xdr).HasColumnName("XDR");
                entity.Property(e => e.Xof).HasColumnName("XOF");
                entity.Property(e => e.Xpf).HasColumnName("XPF");
                entity.Property(e => e.Yer).HasColumnName("YER");
                entity.Property(e => e.Zar).HasColumnName("ZAR");
                entity.Property(e => e.Zmw).HasColumnName("ZMW");
                entity.Property(e => e.Zwd).HasColumnName("ZWD");
            });

            modelBuilder.Entity<ExportGrid658e72a5E0d34144B445Abd2a8d806fa>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToTable("export_grid_658e72a5-e0d3-4144-b445-abd2a8d806fa", "tmp");

                entity.HasIndex(e => e.Dossiernumber, "IX_export_grid_658e72a5-e0d3-4144-b445-abd2a8d806fa");

                entity.Property(e => e.Dossiernumber).HasMaxLength(50);
                entity.Property(e => e.Status).HasMaxLength(50);
                entity.Property(e => e.Week)
                    .HasMaxLength(50)
                    .HasColumnName("week");
            });

            modelBuilder.Entity<ExportService>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ExportServices", "pros");

                entity.Property(e => e.Active)
                    .HasMaxLength(3)
                    .IsUnicode(false);
                entity.Property(e => e.ServiceBefr)
                    .HasMaxLength(250)
                    .HasColumnName("ServiceBEFR");
                entity.Property(e => e.ServiceBenl)
                    .HasMaxLength(250)
                    .HasColumnName("ServiceBENL");
                entity.Property(e => e.ServiceCode).HasMaxLength(10);
                entity.Property(e => e.ServiceEng)
                    .HasMaxLength(250)
                    .HasColumnName("ServiceENG");
                entity.Property(e => e.ServiceGroupCode).HasMaxLength(10);
                entity.Property(e => e.ServiceGroupNameEng)
                    .HasMaxLength(250)
                    .HasColumnName("ServiceGroupNameENG");
                entity.Property(e => e.ServiceGroupNameNl)
                    .HasMaxLength(250)
                    .HasColumnName("ServiceGroupNameNL");
                entity.Property(e => e.ServiceNl)
                    .HasMaxLength(250)
                    .HasColumnName("ServiceNL");
                entity.Property(e => e.ServiceRelation).HasMaxLength(10);
                entity.Property(e => e.ServiceType).HasMaxLength(10);
                entity.Property(e => e.SkillCode).HasMaxLength(10);
                entity.Property(e => e.SkillNameEng)
                    .HasMaxLength(250)
                    .HasColumnName("SkillNameENG");
                entity.Property(e => e.SkillNameNl)
                    .HasMaxLength(250)
                    .HasColumnName("SkillNameNL");
            });

            modelBuilder.Entity<ExternalMaterial>(entity =>
            {
                entity.HasKey(e => e.EmId);

                entity.ToTable("ExternalMaterials", "pdc");

                entity.Property(e => e.EmId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("EM_Id");
                entity.Property(e => e.EmCode)
                    .HasMaxLength(10)
                    .HasColumnName("EM_Code");
                entity.Property(e => e.EmCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("EM_CreatedBy");
                entity.Property(e => e.EmCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("EM_CreatedDate");
                entity.Property(e => e.EmInactive).HasColumnName("EM_Inactive");
                entity.Property(e => e.EmLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("EM_LastModifiedBy");
                entity.Property(e => e.EmLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("EM_LastModifiedDate");
                entity.Property(e => e.EmLocalizableEntryId).HasColumnName("EM_LocalizableEntry_Id");
                entity.Property(e => e.EmLongName)
                    .HasMaxLength(250)
                    .HasColumnName("EM_LongName");
                entity.Property(e => e.EmShortName)
                    .HasMaxLength(50)
                    .HasColumnName("EM_ShortName");
                entity.Property(e => e.EmTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("EM_TimeStamp");

                entity.HasOne(d => d.EmLocalizableEntry).WithMany(p => p.ExternalMaterials)
                    .HasForeignKey(d => d.EmLocalizableEntryId)
                    .HasConstraintName("FK_ExternalMaterials_LocalizableEntries");
            });

            modelBuilder.Entity<FailedExactExportCreditorsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("FailedExactExportCreditorsView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditorName).HasMaxLength(250);
                entity.Property(e => e.CreditorName2).HasMaxLength(250);
                entity.Property(e => e.CreditorName3).HasMaxLength(250);
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.ExactAdministration).HasMaxLength(10);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.StatusCode).HasMaxLength(20);
                entity.Property(e => e.StatusName).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<FailedExactExportDebtorsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("FailedExactExportDebtorsView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DebtorName).HasMaxLength(250);
                entity.Property(e => e.DebtorName2).HasMaxLength(250);
                entity.Property(e => e.DebtorName3).HasMaxLength(250);
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.ExactAdministration).HasMaxLength(10);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.StatusCode).HasMaxLength(20);
                entity.Property(e => e.StatusName).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<FailedExactExportJournalEntriesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("FailedExactExportJournalEntriesView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(20);
                entity.Property(e => e.ExactAdministration).HasMaxLength(10);
                entity.Property(e => e.ExactJournal).HasMaxLength(10);
                entity.Property(e => e.JournalEntryDate).HasColumnType("date");
                entity.Property(e => e.JournalEntryNumber).HasMaxLength(20);
                entity.Property(e => e.JournalId).HasMaxLength(20);
                entity.Property(e => e.JournalTypeId).HasMaxLength(10);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.StatusCode).HasMaxLength(20);
                entity.Property(e => e.StatusName).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.TotalCreditValue).HasColumnType("money");
                entity.Property(e => e.TotalDebitValue).HasColumnType("money");
            });

            modelBuilder.Entity<FailedQueueMessage>(entity =>
            {
                entity.HasKey(e => e.FqmId);

                entity.Property(e => e.FqmId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("FQM_Id");
                entity.Property(e => e.FqmCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FQM_CreatedBy");
                entity.Property(e => e.FqmCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FQM_CreatedDate");
                entity.Property(e => e.FqmFailedReason).HasColumnName("FQM_FailedReason");
                entity.Property(e => e.FqmLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FQM_LastModifiedBy");
                entity.Property(e => e.FqmLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FQM_LastModifiedDate");
                entity.Property(e => e.FqmMessage).HasColumnName("FQM_Message");
                entity.Property(e => e.FqmProcessType).HasColumnName("FQM_ProcessType");
                entity.Property(e => e.FqmProcessed).HasColumnName("FQM_Processed");
                entity.Property(e => e.FqmQueueSettingName)
                    .HasMaxLength(20)
                    .HasColumnName("FQM_QueueSettingName");
                entity.Property(e => e.FqmTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("FQM_TimeStamp");
                entity.Property(e => e.FqmTopicSettingName)
                    .HasMaxLength(20)
                    .HasColumnName("FQM_TopicSettingName");
            });

            modelBuilder.Entity<FeeAgreement>(entity =>
            {
                entity.HasKey(e => e.AgrId);

                entity.ToTable("FeeAgreements", "fee");

                entity.Property(e => e.AgrId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("AGR_Id");
                entity.Property(e => e.AgrAgreementName)
                    .HasMaxLength(250)
                    .HasColumnName("AGR_AgreementName");
                entity.Property(e => e.AgrCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AGR_CreatedBy");
                entity.Property(e => e.AgrCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("AGR_CreatedDate");
                entity.Property(e => e.AgrCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("AGR_CurrencyCode");
                entity.Property(e => e.AgrEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("AGR_EffectiveDate");
                entity.Property(e => e.AgrFeeAgreementTypeId).HasColumnName("AGR_FeeAgreementType_Id");
                entity.Property(e => e.AgrFollowUpAgreementId).HasColumnName("AGR_FollowUpAgreement_Id");
                entity.Property(e => e.AgrIncludingTax).HasColumnName("AGR_IncludingTax");
                entity.Property(e => e.AgrLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AGR_LastModifiedBy");
                entity.Property(e => e.AgrLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("AGR_LastModifiedDate");
                entity.Property(e => e.AgrTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("AGR_TerminationDate");
                entity.Property(e => e.AgrTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("AGR_TimeStamp");

                entity.HasOne(d => d.AgrFeeAgreementType).WithMany(p => p.FeeAgreements)
                    .HasForeignKey(d => d.AgrFeeAgreementTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FeeAgreements_FeeAgreementTypes");
            });

            modelBuilder.Entity<FeeAgreementType>(entity =>
            {
                entity.HasKey(e => e.AgtId);

                entity.ToTable("FeeAgreementTypes", "fee");

                entity.Property(e => e.AgtId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("AGT_Id");
                entity.Property(e => e.AgtCode)
                    .HasMaxLength(10)
                    .HasColumnName("AGT_Code");
                entity.Property(e => e.AgtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AGT_CreatedBy");
                entity.Property(e => e.AgtCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("AGT_CreatedDate");
                entity.Property(e => e.AgtInactive).HasColumnName("AGT_Inactive");
                entity.Property(e => e.AgtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AGT_LastModifiedBy");
                entity.Property(e => e.AgtLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("AGT_LastModifiedDate");
                entity.Property(e => e.AgtLocalizableEntryId).HasColumnName("AGT_LocalizableEntry_Id");
                entity.Property(e => e.AgtLongName)
                    .HasMaxLength(250)
                    .HasColumnName("AGT_LongName");
                entity.Property(e => e.AgtShortName)
                    .HasMaxLength(20)
                    .HasColumnName("AGT_ShortName");
                entity.Property(e => e.AgtTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("AGT_TimeStamp");

                entity.HasOne(d => d.AgtLocalizableEntry).WithMany(p => p.FeeAgreementTypes)
                    .HasForeignKey(d => d.AgtLocalizableEntryId)
                    .HasConstraintName("FK_FeeAgreementTypes_LocalizableEntries");
            });

            modelBuilder.Entity<FeeAgreementsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("FeeAgreementsView", "fee");

                entity.Property(e => e.AgreementName).HasMaxLength(250);
                entity.Property(e => e.AgreementTypeName).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.FixedAmount).HasColumnType("money");
                entity.Property(e => e.HourlyRate).HasColumnType("money");
                entity.Property(e => e.HourlyRateMaxAmount).HasColumnType("money");
                entity.Property(e => e.HourlyRateMinAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.Percentage).HasColumnType("numeric(8, 4)");
                entity.Property(e => e.PercentageMaxAmount).HasColumnType("money");
                entity.Property(e => e.PercentageMinAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.UnitOfMeasure).HasMaxLength(250);
                entity.Property(e => e.UnitOfMeasureId).HasMaxLength(20);
            });

            modelBuilder.Entity<FeeSettlement>(entity =>
            {
                entity.HasKey(e => e.FesId);

                entity.ToTable("FeeSettlements", "fee");

                entity.HasIndex(e => e.FesClientId, "IX_FeeSettlements_Client");

                entity.Property(e => e.FesId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("FES_Id");
                entity.Property(e => e.FesClientId).HasColumnName("FES_Client_Id");
                entity.Property(e => e.FesCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FES_CreatedBy");
                entity.Property(e => e.FesCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FES_CreatedDate");
                entity.Property(e => e.FesDossierFeeDateRuleId)
                    .HasMaxLength(20)
                    .HasColumnName("FES_DossierFeeDateRule_Id");
                entity.Property(e => e.FesEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("FES_EffectiveDate");
                entity.Property(e => e.FesEntrySystem)
                    .HasMaxLength(10)
                    .HasColumnName("FES_EntrySystem");
                entity.Property(e => e.FesExchangeRateProviderId).HasColumnName("FES_ExchangeRateProvider_Id");
                entity.Property(e => e.FesExchangeRateTypeId)
                    .HasMaxLength(3)
                    .HasColumnName("FES_ExchangeRateType_Id");
                entity.Property(e => e.FesInvoiceDeliveryMethodId)
                    .HasMaxLength(20)
                    .HasColumnName("FES_InvoiceDeliveryMethod_Id");
                entity.Property(e => e.FesInvoiceRuleTypeId)
                    .HasMaxLength(50)
                    .HasColumnName("FES_InvoiceRuleType_Id");
                entity.Property(e => e.FesLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FES_LastModifiedBy");
                entity.Property(e => e.FesLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FES_LastModifiedDate");
                entity.Property(e => e.FesLegalEntityId).HasColumnName("FES_LegalEntity_Id");
                entity.Property(e => e.FesSettlementName)
                    .HasMaxLength(50)
                    .HasColumnName("FES_SettlementName");
                entity.Property(e => e.FesSubDossierFeeDateRuleId)
                    .HasMaxLength(20)
                    .HasColumnName("FES_SubDossierFeeDateRule_Id");
                entity.Property(e => e.FesTaxDateRuleId)
                    .HasMaxLength(20)
                    .HasColumnName("FES_TaxDateRule_Id");
                entity.Property(e => e.FesTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("FES_TerminationDate");
                entity.Property(e => e.FesTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("FES_TimeStamp");

                entity.HasOne(d => d.FesClient).WithMany(p => p.FeeSettlements)
                    .HasForeignKey(d => d.FesClientId)
                    .HasConstraintName("FK_FeeSettlements_Clients");

                entity.HasOne(d => d.FesExchangeRateProvider).WithMany(p => p.FeeSettlements)
                    .HasForeignKey(d => d.FesExchangeRateProviderId)
                    .HasConstraintName("FK_FeeSettlements_ExchangeRateProviders");

                entity.HasOne(d => d.FesExchangeRateType).WithMany(p => p.FeeSettlements)
                    .HasForeignKey(d => d.FesExchangeRateTypeId)
                    .HasConstraintName("FK_FeeSettlements_ExchangeRateTypes");

                entity.HasOne(d => d.FesInvoiceDeliveryMethod).WithMany(p => p.FeeSettlements)
                    .HasForeignKey(d => d.FesInvoiceDeliveryMethodId)
                    .HasConstraintName("FK_FeeSettlements_InvoiceDeliveryMethods");

                entity.HasOne(d => d.FesInvoiceRuleType).WithMany(p => p.FeeSettlements)
                    .HasForeignKey(d => d.FesInvoiceRuleTypeId)
                    .HasConstraintName("FK_FeeSettlements_InvoiceRuleTypes");

                entity.HasOne(d => d.FesLegalEntity).WithMany(p => p.FeeSettlements)
                    .HasForeignKey(d => d.FesLegalEntityId)
                    .HasConstraintName("FK_FeeSettlements_LegalEntities");
            });

            modelBuilder.Entity<FeeSettlementLine>(entity =>
            {
                entity.HasKey(e => e.FslId);

                entity.ToTable("FeeSettlementLines", "fee");

                entity.HasIndex(e => new { e.FslFeeSettlementId, e.FslProductId, e.FslWorkActivityId }, "IX_fee_FeeSettlementLines_FeeSettlement_Product_WorkActivity__INCL");

                entity.HasIndex(e => new { e.FslProductId, e.FslWorkActivityId }, "IX_fee_FeeSettlementLines_Product_WorkActivity__INCL");

                entity.Property(e => e.FslId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("FSL_Id");
                entity.Property(e => e.FslActivityExecutionId).HasColumnName("FSL_ActivityExecution_Id");
                entity.Property(e => e.FslActivityOptionId).HasColumnName("FSL_ActivityOption_Id");
                entity.Property(e => e.FslCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("FSL_CountryCode");
                entity.Property(e => e.FslCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FSL_CreatedBy");
                entity.Property(e => e.FslCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FSL_CreatedDate");
                entity.Property(e => e.FslDeliveryMethodProductId).HasColumnName("FSL_DeliveryMethodProduct_Id");
                entity.Property(e => e.FslDescription)
                    .HasMaxLength(128)
                    .HasColumnName("FSL_Description");
                entity.Property(e => e.FslDossierFeeDateRuleId)
                    .HasMaxLength(20)
                    .HasColumnName("FSL_DossierFeeDateRule_Id");
                entity.Property(e => e.FslFeeAgreementId).HasColumnName("FSL_FeeAgreement_Id");
                entity.Property(e => e.FslFeeSettlementId).HasColumnName("FSL_FeeSettlement_Id");
                entity.Property(e => e.FslInsuranceCoverageId).HasColumnName("FSL_InsuranceCoverage_Id");
                entity.Property(e => e.FslLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FSL_LastModifiedBy");
                entity.Property(e => e.FslLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FSL_LastModifiedDate");
                entity.Property(e => e.FslLineNumber).HasColumnName("FSL_LineNumber");
                entity.Property(e => e.FslProductId).HasColumnName("FSL_Product_Id");
                entity.Property(e => e.FslReportingFormProductId).HasColumnName("FSL_ReportingFormProduct_Id");
                entity.Property(e => e.FslSubDossierFeeDateRuleId)
                    .HasMaxLength(20)
                    .HasColumnName("FSL_SubDossierFeeDateRule_Id");
                entity.Property(e => e.FslTaxDateRuleId)
                    .HasMaxLength(20)
                    .HasColumnName("FSL_TaxDateRule_Id");
                entity.Property(e => e.FslTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("FSL_TimeStamp");
                entity.Property(e => e.FslWorkActivityId).HasColumnName("FSL_WorkActivity_Id");

                entity.HasOne(d => d.FslActivityExecution).WithMany(p => p.FeeSettlementLines)
                    .HasForeignKey(d => d.FslActivityExecutionId)
                    .HasConstraintName("FK_FeeSettlementLines_ActivityExecutions");

                entity.HasOne(d => d.FslActivityOption).WithMany(p => p.FeeSettlementLines)
                    .HasForeignKey(d => d.FslActivityOptionId)
                    .HasConstraintName("FK_FeeSettlementLines_ActivityOptions");

                entity.HasOne(d => d.FslFeeAgreement).WithMany(p => p.FeeSettlementLines)
                    .HasForeignKey(d => d.FslFeeAgreementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FeeSettlementLines_FeeAgreements");

                entity.HasOne(d => d.FslFeeSettlement).WithMany(p => p.FeeSettlementLines)
                    .HasForeignKey(d => d.FslFeeSettlementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FeeSettlementLines_FeeSettlements");

                entity.HasOne(d => d.FslInsuranceCoverage).WithMany(p => p.FeeSettlementLines)
                    .HasForeignKey(d => d.FslInsuranceCoverageId)
                    .HasConstraintName("FK_FeeSettlementLines_InsuranceCoverages");

                entity.HasOne(d => d.FslProduct).WithMany(p => p.FeeSettlementLines)
                    .HasForeignKey(d => d.FslProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FeeSettlementLines_Products");

                entity.HasOne(d => d.FslWorkActivity).WithMany(p => p.FeeSettlementLines)
                    .HasForeignKey(d => d.FslWorkActivityId)
                    .HasConstraintName("FK_FeeSettlementLines_WorkActivities");
            });

            modelBuilder.Entity<FeeSettlementLineOperationalClient>(entity =>
            {
                entity.HasKey(e => e.FlsocId);

                entity.ToTable("FeeSettlementLineOperationalClients", "fee");

                entity.Property(e => e.FlsocId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("FLSOC_Id");
                entity.Property(e => e.FlsocClientId).HasColumnName("FLSOC_ClientId");
                entity.Property(e => e.FlsocCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FLSOC_CreatedBy");
                entity.Property(e => e.FlsocCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FLSOC_CreatedDate");
                entity.Property(e => e.FlsocEndDate).HasColumnName("FLSOC_EndDate");
                entity.Property(e => e.FlsocFeeSettlementLineId).HasColumnName("FLSOC_FeeSettlementLineId");
                entity.Property(e => e.FlsocLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FLSOC_LastModifiedBy");
                entity.Property(e => e.FlsocLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FLSOC_LastModifiedDate");
                entity.Property(e => e.FlsocStartDate).HasColumnName("FLSOC_StartDate");
                entity.Property(e => e.FlsocTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("FLSOC_TimeStamp");

                entity.HasOne(d => d.FlsocClient).WithMany(p => p.FeeSettlementLineOperationalClients)
                    .HasForeignKey(d => d.FlsocClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FeeSettlementLineOperationalClients_ChildClient");

                entity.HasOne(d => d.FlsocFeeSettlementLine).WithMany(p => p.FeeSettlementLineOperationalClients)
                    .HasForeignKey(d => d.FlsocFeeSettlementLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FeeSettlementLineOperationalClients_FeeSettlementLine");
            });

            modelBuilder.Entity<FeeSettlementReportingFormOption>(entity =>
            {
                entity.HasKey(e => e.FsrId);

                entity.ToTable("FeeSettlementReportingFormOptions", "fee");

                entity.Property(e => e.FsrId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("FSR_Id");
                entity.Property(e => e.FsrCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FSR_CreatedBy");
                entity.Property(e => e.FsrCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FSR_CreatedDate");
                entity.Property(e => e.FsrFeeAgreementId).HasColumnName("FSR_FeeAgreement_Id");
                entity.Property(e => e.FsrFeeSettlementId).HasColumnName("FSR_FeeSettlement_Id");
                entity.Property(e => e.FsrLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FSR_LastModifiedBy");
                entity.Property(e => e.FsrLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FSR_LastModifiedDate");
                entity.Property(e => e.FsrProductId).HasColumnName("FSR_Product_Id");
                entity.Property(e => e.FsrReportingFormId).HasColumnName("FSR_ReportingForm_Id");
                entity.Property(e => e.FsrTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("FSR_TimeStamp");

                entity.HasOne(d => d.FsrFeeAgreement).WithMany(p => p.FeeSettlementReportingFormOptions)
                    .HasForeignKey(d => d.FsrFeeAgreementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FeeSettlementReportingFormOptions_FeeAgreements");

                entity.HasOne(d => d.FsrFeeSettlement).WithMany(p => p.FeeSettlementReportingFormOptions)
                    .HasForeignKey(d => d.FsrFeeSettlementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FeeSettlementReportingFormOptions_FeeSettlements");

                entity.HasOne(d => d.FsrProduct).WithMany(p => p.FeeSettlementReportingFormOptions)
                    .HasForeignKey(d => d.FsrProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FeeSettlementReportingFormOptions_Products");

                entity.HasOne(d => d.FsrReportingForm).WithMany(p => p.FeeSettlementReportingFormOptions)
                    .HasForeignKey(d => d.FsrReportingFormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FeeSettlementReportingFormOptions_ReportingForm");
            });

            modelBuilder.Entity<FeeSettlementStatus>(entity =>
            {
                entity.HasKey(e => e.FstId);

                entity.ToTable("FeeSettlementStatuses", "fee");

                entity.Property(e => e.FstId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("FST_Id");
                entity.Property(e => e.FstCode)
                    .HasMaxLength(10)
                    .HasColumnName("FST_Code");
                entity.Property(e => e.FstCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FST_CreatedBy");
                entity.Property(e => e.FstCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FST_CreatedDate");
                entity.Property(e => e.FstFeeSettlementStatusTypeId)
                    .HasMaxLength(20)
                    .HasColumnName("FST_FeeSettlementStatusType_Id");
                entity.Property(e => e.FstInactive).HasColumnName("FST_Inactive");
                entity.Property(e => e.FstLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FST_LastModifiedBy");
                entity.Property(e => e.FstLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FST_LastModifiedDate");
                entity.Property(e => e.FstLocalizableEntryId).HasColumnName("FST_LocalizableEntry_Id");
                entity.Property(e => e.FstLongName)
                    .HasMaxLength(250)
                    .HasColumnName("FST_LongName");
                entity.Property(e => e.FstShortName)
                    .HasMaxLength(20)
                    .HasColumnName("FST_ShortName");
                entity.Property(e => e.FstTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("FST_TimeStamp");

                entity.HasOne(d => d.FstFeeSettlementStatusType).WithMany(p => p.FeeSettlementStatuses)
                    .HasForeignKey(d => d.FstFeeSettlementStatusTypeId)
                    .HasConstraintName("FK_FeeSettlementStatuses_FeeSettlementStatusTypes");

                entity.HasOne(d => d.FstLocalizableEntry).WithMany(p => p.FeeSettlementStatuses)
                    .HasForeignKey(d => d.FstLocalizableEntryId)
                    .HasConstraintName("FK_FeeSettlementStatuses_LocalizableEntries");
            });

            modelBuilder.Entity<FeeSettlementStatusHistory>(entity =>
            {
                entity.HasKey(e => e.FshId);

                entity.ToTable("FeeSettlementStatusHistory", "fee");

                entity.Property(e => e.FshId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("FSH_Id");
                entity.Property(e => e.FshCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FSH_CreatedBy");
                entity.Property(e => e.FshCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FSH_CreatedDate");
                entity.Property(e => e.FshFeeSettlementId).HasColumnName("FSH_FeeSettlement_Id");
                entity.Property(e => e.FshFeeSettlementStatusId).HasColumnName("FSH_FeeSettlementStatus_Id");
                entity.Property(e => e.FshLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FSH_LastModifiedBy");
                entity.Property(e => e.FshLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FSH_LastModifiedDate");
                entity.Property(e => e.FshStartDate).HasColumnName("FSH_StartDate");
                entity.Property(e => e.FshStatusChangeReason)
                    .HasMaxLength(250)
                    .HasColumnName("FSH_StatusChangeReason");
                entity.Property(e => e.FshTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("FSH_TimeStamp");

                entity.HasOne(d => d.FshFeeSettlement).WithMany(p => p.FeeSettlementStatusHistories)
                    .HasForeignKey(d => d.FshFeeSettlementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FeeSettlementStatusHistory_FeeSettlements");

                entity.HasOne(d => d.FshFeeSettlementStatus).WithMany(p => p.FeeSettlementStatusHistories)
                    .HasForeignKey(d => d.FshFeeSettlementStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FeeSettlementStatusHistory_FeeSettlementStatuses");
            });

            modelBuilder.Entity<FeeSettlementStatusType>(entity =>
            {
                entity.HasKey(e => e.FsstId);

                entity.ToTable("FeeSettlementStatusTypes", "fee");

                entity.Property(e => e.FsstId)
                    .HasMaxLength(20)
                    .HasColumnName("FSST_Id");
                entity.Property(e => e.FsstCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FSST_CreatedBy");
                entity.Property(e => e.FsstCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FSST_CreatedDate");
                entity.Property(e => e.FsstInactive).HasColumnName("FSST_Inactive");
                entity.Property(e => e.FsstLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FSST_LastModifiedBy");
                entity.Property(e => e.FsstLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FSST_LastModifiedDate");
                entity.Property(e => e.FsstLocalizableEntryId).HasColumnName("FSST_LocalizableEntry_Id");
                entity.Property(e => e.FsstName)
                    .HasMaxLength(250)
                    .HasColumnName("FSST_Name");
                entity.Property(e => e.FsstTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("FSST_TimeStamp");

                entity.HasOne(d => d.FsstLocalizableEntry).WithMany(p => p.FeeSettlementStatusTypes)
                    .HasForeignKey(d => d.FsstLocalizableEntryId)
                    .HasConstraintName("FK_FeeSettlementStatusTypes_LocalizableEntries");
            });

            modelBuilder.Entity<FeeSettlementsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("FeeSettlementsView", "fee");

                entity.Property(e => e.ActivityExecutionName).HasMaxLength(250);
                entity.Property(e => e.ActivityOptionName).HasMaxLength(250);
                entity.Property(e => e.AgreementName).HasMaxLength(250);
                entity.Property(e => e.AgreementTypeName).HasMaxLength(250);
                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.CoverageName).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.FixedAmount).HasColumnType("money");
                entity.Property(e => e.HourlyRate).HasColumnType("money");
                entity.Property(e => e.HourlyRateMaxAmount).HasColumnType("money");
                entity.Property(e => e.HourlyRateMinAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.Percentage).HasColumnType("numeric(8, 4)");
                entity.Property(e => e.PercentageMaxAmount).HasColumnType("money");
                entity.Property(e => e.PercentageMinAmount).HasColumnType("money");
                entity.Property(e => e.ProductName).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.UnitOfMeasure).HasMaxLength(250);
                entity.Property(e => e.UnitOfMeasureId).HasMaxLength(20);
                entity.Property(e => e.WorkActivityName).HasMaxLength(250);
            });

            modelBuilder.Entity<FinancialBookingPeriod>(entity =>
            {
                entity.HasKey(e => e.FbpId);

                entity.ToTable("FinancialBookingPeriods", "fin");

                entity.HasIndex(e => new { e.FbpLegalEntityId, e.FbpFinancialYear, e.FbpFinancialPeriod }, "IX_FinancialBookingPeriods_LegalEntity_FinancialYear_FinancialPeriod").IsUnique();

                entity.Property(e => e.FbpId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("FBP_Id");
                entity.Property(e => e.FbpCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FBP_CreatedBy");
                entity.Property(e => e.FbpCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FBP_CreatedDate");
                entity.Property(e => e.FbpDateFrom)
                    .HasColumnType("date")
                    .HasColumnName("FBP_DateFrom");
                entity.Property(e => e.FbpDateUntil)
                    .HasColumnType("date")
                    .HasColumnName("FBP_DateUntil");
                entity.Property(e => e.FbpFinancialPeriod)
                    .HasMaxLength(20)
                    .HasColumnName("FBP_FinancialPeriod");
                entity.Property(e => e.FbpFinancialYear)
                    .HasMaxLength(20)
                    .HasColumnName("FBP_FinancialYear");
                entity.Property(e => e.FbpIsClosed).HasColumnName("FBP_IsClosed");
                entity.Property(e => e.FbpLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FBP_LastModifiedBy");
                entity.Property(e => e.FbpLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FBP_LastModifiedDate");
                entity.Property(e => e.FbpLegalEntityId).HasColumnName("FBP_LegalEntity_Id");
                entity.Property(e => e.FbpTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("FBP_TimeStamp");

                entity.HasOne(d => d.FbpLegalEntity).WithMany(p => p.FinancialBookingPeriods)
                    .HasForeignKey(d => d.FbpLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FinancialBookingPeriods_LegalEntities");
            });

            modelBuilder.Entity<FiscalEntity>(entity =>
            {
                entity.HasKey(e => e.FeId);

                entity.ToTable("FiscalEntities", "ced");

                entity.Property(e => e.FeId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("FE_Id");
                entity.Property(e => e.FeCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FE_CreatedBy");
                entity.Property(e => e.FeCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FE_CreatedDate");
                entity.Property(e => e.FeLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FE_LastModifiedBy");
                entity.Property(e => e.FeLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FE_LastModifiedDate");
                entity.Property(e => e.FeTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("FE_TimeStamp");

                entity.HasOne(d => d.Fe).WithOne(p => p.FiscalEntity)
                    .HasForeignKey<FiscalEntity>(d => d.FeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FiscalEntities_OrganizationUnits");
            });

            modelBuilder.Entity<FixedCostAgreement>(entity =>
            {
                entity.HasKey(e => e.FcaId);

                entity.ToTable("FixedCostAgreements", "mdm");

                entity.Property(e => e.FcaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("FCA_Id");
                entity.Property(e => e.FcaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FCA_CreatedBy");
                entity.Property(e => e.FcaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FCA_CreatedDate");
                entity.Property(e => e.FcaFixedCostAmount)
                    .HasColumnType("money")
                    .HasColumnName("FCA_FixedCostAmount");
                entity.Property(e => e.FcaFixedCostMarginAmount)
                    .HasColumnType("money")
                    .HasColumnName("FCA_FixedCostMarginAmount");
                entity.Property(e => e.FcaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FCA_LastModifiedBy");
                entity.Property(e => e.FcaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FCA_LastModifiedDate");
                entity.Property(e => e.FcaOrderTotalMarginAmount)
                    .HasColumnType("money")
                    .HasColumnName("FCA_OrderTotalMarginAmount");
                entity.Property(e => e.FcaOrderTotalMarginPercentage).HasColumnName("FCA_OrderTotalMarginPercentage");
                entity.Property(e => e.FcaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("FCA_TimeStamp");

                entity.HasOne(d => d.Fca).WithOne(p => p.FixedCostAgreement)
                    .HasForeignKey<FixedCostAgreement>(d => d.FcaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FixedCostAgreements_CostAgreements");
            });

            modelBuilder.Entity<FixedFeeAgreement>(entity =>
            {
                entity.HasKey(e => e.FfaId);

                entity.ToTable("FixedFeeAgreements", "fee");

                entity.Property(e => e.FfaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("FFA_Id");
                entity.Property(e => e.FfaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FFA_CreatedBy");
                entity.Property(e => e.FfaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FFA_CreatedDate");
                entity.Property(e => e.FfaFixedFeeAmount)
                    .HasColumnType("money")
                    .HasColumnName("FFA_FixedFeeAmount");
                entity.Property(e => e.FfaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FFA_LastModifiedBy");
                entity.Property(e => e.FfaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FFA_LastModifiedDate");
                entity.Property(e => e.FfaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("FFA_TimeStamp");

                entity.HasOne(d => d.Ffa).WithOne(p => p.FixedFeeAgreement)
                    .HasForeignKey<FixedFeeAgreement>(d => d.FfaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FixedFeeAgreements_FeeAgreements");
            });

            modelBuilder.Entity<FixedSalesAgreement>(entity =>
            {
                entity.HasKey(e => e.FsaId);

                entity.ToTable("FixedSalesAgreements", "mdm");

                entity.Property(e => e.FsaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("FSA_Id");
                entity.Property(e => e.FsaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FSA_CreatedBy");
                entity.Property(e => e.FsaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FSA_CreatedDate");
                entity.Property(e => e.FsaFixedSalesAmount)
                    .HasColumnType("money")
                    .HasColumnName("FSA_FixedSalesAmount");
                entity.Property(e => e.FsaFixedSalesMarginAmount)
                    .HasColumnType("money")
                    .HasColumnName("FSA_FixedSalesMarginAmount");
                entity.Property(e => e.FsaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FSA_LastModifiedBy");
                entity.Property(e => e.FsaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FSA_LastModifiedDate");
                entity.Property(e => e.FsaOrderTotalMarginAmount)
                    .HasColumnType("money")
                    .HasColumnName("FSA_OrderTotalMarginAmount");
                entity.Property(e => e.FsaOrderTotalMarginPercentage).HasColumnName("FSA_OrderTotalMarginPercentage");
                entity.Property(e => e.FsaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("FSA_TimeStamp");

                entity.HasOne(d => d.Fsa).WithOne(p => p.FixedSalesAgreement)
                    .HasForeignKey<FixedSalesAgreement>(d => d.FsaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FixedSalesAgreements_SalesAgreements");
            });

            modelBuilder.Entity<FlsdispatcherLog>(entity =>
            {
                entity.ToTable("FLSDispatcherLog", "pros");

                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
                entity.Property(e => e.IdentifierName).HasMaxLength(20);
                entity.Property(e => e.IdentifierValue).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedDate).HasDefaultValueSql("(getdate())");
                entity.Property(e => e.LogMessage).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<FollowTheGenerationOfReverseBillingView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("FollowTheGenerationOfReverseBillingView", "fin");

                entity.Property(e => e.ActionWo)
                    .HasMaxLength(37)
                    .IsUnicode(false)
                    .HasColumnName("ActionWO");
                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.Picreated).HasColumnName("PICreated");
                entity.Property(e => e.PidocumentsCreated).HasColumnName("PIDocumentsCreated");
                entity.Property(e => e.PidocumentsSent).HasColumnName("PIDocumentsSent");
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.SupplierNumber)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.WorkingOrderLineNumber).HasMaxLength(113);
                entity.Property(e => e.WorkingOrderLineStatusType).HasMaxLength(20);
                entity.Property(e => e.WorkingOrderNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<FraudDetectionLog>(entity =>
            {
                entity.HasKey(e => e.FdlId);

                entity.ToTable("FraudDetectionLog", "pros");

                entity.Property(e => e.FdlId)
                    .ValueGeneratedNever()
                    .HasColumnName("FDL_Id");
                entity.Property(e => e.FdlCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FDL_CreatedBy");
                entity.Property(e => e.FdlCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FDL_CreatedDate");
                entity.Property(e => e.FdlDossierId).HasColumnName("FDL_Dossier_Id");
                entity.Property(e => e.FdlLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FDL_LastModifiedBy");
                entity.Property(e => e.FdlLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FDL_LastModifiedDate");
                entity.Property(e => e.FdlLogMessage).HasColumnName("FDL_LogMessage");
                entity.Property(e => e.FdlTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("FDL_TimeStamp");

                entity.HasOne(d => d.FdlDossier).WithMany(p => p.FraudDetectionLogs)
                    .HasForeignKey(d => d.FdlDossierId)
                    .HasConstraintName("FK_FraudDetectionLog_FDL_Dossier_Id");
            });

            modelBuilder.Entity<Fuel>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__Fuels__3214EC07BA7FA0DD");

                entity.ToTable("Fuels", "mdm");

                entity.HasIndex(e => e.Code, "UX_mdm_Fuels_Code__Filtered")
                    .IsUnique()
                    .HasFilter("([Inactive]=(0))");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LongName).HasMaxLength(250);
                entity.Property(e => e.ShortName).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.LocalizableEntry).WithMany(p => p.Fuels)
                    .HasForeignKey(d => d.LocalizableEntryId)
                    .HasConstraintName("FK_Fuels_LocalizableEntries");
            });

            modelBuilder.Entity<FuelType>(entity =>
            {
                entity.HasKey(e => e.FtId);

                entity.ToTable("FuelTypes", "dos", tb => tb.HasTrigger("th_dos_FuelTypes_TraceHistory"));

                entity.Property(e => e.FtId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("FT_Id");
                entity.Property(e => e.FtCode)
                    .HasMaxLength(10)
                    .HasColumnName("FT_Code");
                entity.Property(e => e.FtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FT_CreatedBy");
                entity.Property(e => e.FtCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FT_CreatedDate");
                entity.Property(e => e.FtInactive).HasColumnName("FT_Inactive");
                entity.Property(e => e.FtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FT_LastModifiedBy");
                entity.Property(e => e.FtLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FT_LastModifiedDate");
                entity.Property(e => e.FtLocalizableEntryId).HasColumnName("FT_LocalizableEntry_Id");
                entity.Property(e => e.FtLongName)
                    .HasMaxLength(250)
                    .HasColumnName("FT_LongName");
                entity.Property(e => e.FtShortName)
                    .HasMaxLength(20)
                    .HasColumnName("FT_ShortName");
                entity.Property(e => e.FtTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("FT_TimeStamp");

                entity.HasOne(d => d.FtLocalizableEntry).WithMany(p => p.FuelTypes)
                    .HasForeignKey(d => d.FtLocalizableEntryId)
                    .HasConstraintName("FK_FuelTypes_LocalizableEntries");
            });

            modelBuilder.Entity<FuelTypesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_FuelTypes_History_ID");

                entity.ToTable("FuelTypes_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.FtCode)
                    .HasMaxLength(10)
                    .HasColumnName("FT_Code");
                entity.Property(e => e.FtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FT_CreatedBy");
                entity.Property(e => e.FtCreatedDate).HasColumnName("FT_CreatedDate");
                entity.Property(e => e.FtId).HasColumnName("FT_Id");
                entity.Property(e => e.FtInactive).HasColumnName("FT_Inactive");
                entity.Property(e => e.FtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FT_LastModifiedBy");
                entity.Property(e => e.FtLastModifiedDate).HasColumnName("FT_LastModifiedDate");
                entity.Property(e => e.FtLocalizableEntryId).HasColumnName("FT_LocalizableEntry_Id");
                entity.Property(e => e.FtLongName)
                    .HasMaxLength(250)
                    .HasColumnName("FT_LongName");
                entity.Property(e => e.FtShortName)
                    .HasMaxLength(20)
                    .HasColumnName("FT_ShortName");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
            });

            modelBuilder.Entity<FundingsPayment>(entity =>
            {
                entity.HasKey(e => e.FupId);

                entity.ToTable("FundingsPayments", "fin");

                entity.Property(e => e.FupId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("FUP_Id");
                entity.Property(e => e.FupBankStatementLineId).HasColumnName("FUP_BankStatementLine_Id");
                entity.Property(e => e.FupClientId).HasColumnName("FUP_Client_Id");
                entity.Property(e => e.FupCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FUP_CreatedBy");
                entity.Property(e => e.FupCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FUP_CreatedDate");
                entity.Property(e => e.FupCurrentStatusCode)
                    .HasMaxLength(20)
                    .HasColumnName("FUP_CurrentStatusCode");
                entity.Property(e => e.FupCurrentStatusHistoryId).HasColumnName("FUP_CurrentStatusHistory_Id");
                entity.Property(e => e.FupCurrentStatusHistoryStartDate).HasColumnName("FUP_CurrentStatusHistoryStartDate");
                entity.Property(e => e.FupDossierId).HasColumnName("FUP_Dossier_Id");
                entity.Property(e => e.FupDossierNumber)
                    .HasMaxLength(20)
                    .HasColumnName("FUP_DossierNumber");
                entity.Property(e => e.FupLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FUP_LastModifiedBy");
                entity.Property(e => e.FupLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FUP_LastModifiedDate");
                entity.Property(e => e.FupLegalEntityId).HasColumnName("FUP_LegalEntity_Id");
                entity.Property(e => e.FupPaymentValue)
                    .HasColumnType("money")
                    .HasColumnName("FUP_PaymentValue");
                entity.Property(e => e.FupTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("FUP_TimeStamp");

                entity.HasOne(d => d.FupBankStatementLine).WithMany(p => p.FundingsPayments)
                    .HasForeignKey(d => d.FupBankStatementLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FundingsPayments_BankStatementLines");

                entity.HasOne(d => d.FupClient).WithMany(p => p.FundingsPayments)
                    .HasForeignKey(d => d.FupClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FundingsPayments_Clients");

                entity.HasOne(d => d.FupDossier).WithMany(p => p.FundingsPayments)
                    .HasForeignKey(d => d.FupDossierId)
                    .HasConstraintName("FK_FundingsPayments_Dossiers");

                entity.HasOne(d => d.FupLegalEntity).WithMany(p => p.FundingsPayments)
                    .HasForeignKey(d => d.FupLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FundingsPayments_LegalEntities");
            });

            modelBuilder.Entity<FundingsPaymentStatus>(entity =>
            {
                entity.HasKey(e => e.FpsId);

                entity.ToTable("FundingsPaymentStatuses", "fin");

                entity.Property(e => e.FpsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("FPS_Id");
                entity.Property(e => e.FpsCode)
                    .HasMaxLength(10)
                    .HasColumnName("FPS_Code");
                entity.Property(e => e.FpsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FPS_CreatedBy");
                entity.Property(e => e.FpsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FPS_CreatedDate");
                entity.Property(e => e.FpsInactive).HasColumnName("FPS_Inactive");
                entity.Property(e => e.FpsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FPS_LastModifiedBy");
                entity.Property(e => e.FpsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FPS_LastModifiedDate");
                entity.Property(e => e.FpsLocalizableEntryId).HasColumnName("FPS_LocalizableEntry_Id");
                entity.Property(e => e.FpsLongName)
                    .HasMaxLength(250)
                    .HasColumnName("FPS_LongName");
                entity.Property(e => e.FpsShortName)
                    .HasMaxLength(20)
                    .HasColumnName("FPS_ShortName");
                entity.Property(e => e.FpsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("FPS_TimeStamp");

                entity.HasOne(d => d.FpsLocalizableEntry).WithMany(p => p.FundingsPaymentStatuses)
                    .HasForeignKey(d => d.FpsLocalizableEntryId)
                    .HasConstraintName("FK_FundingsPaymentStatuses_LocalizableEntries");
            });

            modelBuilder.Entity<FundingsPaymentStatusHistory>(entity =>
            {
                entity.HasKey(e => e.FphId);

                entity.ToTable("FundingsPaymentStatusHistory", "fin", tb =>
                {
                    tb.HasTrigger("td_FundingsPaymentStatusHistory");
                    tb.HasTrigger("ti_FundingsPaymentStatusHistory");
                    tb.HasTrigger("tu_FundingsPaymentStatusHistory");
                });

                entity.Property(e => e.FphId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("FPH_Id");
                entity.Property(e => e.FphCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FPH_CreatedBy");
                entity.Property(e => e.FphCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FPH_CreatedDate");
                entity.Property(e => e.FphFundingsPaymentId).HasColumnName("FPH_FundingsPayment_Id");
                entity.Property(e => e.FphFundingsPaymentStatusId).HasColumnName("FPH_FundingsPaymentStatus_Id");
                entity.Property(e => e.FphLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("FPH_LastModifiedBy");
                entity.Property(e => e.FphLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("FPH_LastModifiedDate");
                entity.Property(e => e.FphStartDate).HasColumnName("FPH_StartDate");
                entity.Property(e => e.FphTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("FPH_TimeStamp");

                entity.HasOne(d => d.FphFundingsPayment).WithMany(p => p.FundingsPaymentStatusHistories)
                    .HasForeignKey(d => d.FphFundingsPaymentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FundingsPaymentStatusHistory_FundingsPayments");

                entity.HasOne(d => d.FphFundingsPaymentStatus).WithMany(p => p.FundingsPaymentStatusHistories)
                    .HasForeignKey(d => d.FphFundingsPaymentStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FundingsPaymentStatusHistory_FundingsPaymentStatuses");
            });

            modelBuilder.Entity<FundingsPaymentsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("FundingsPaymentsView", "fin");

                entity.Property(e => e.BankAccountNumber).HasMaxLength(34);
                entity.Property(e => e.ClientNumber)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditorNumber).HasMaxLength(10);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DebtorNumber).HasMaxLength(10);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.Notes).HasMaxLength(500);
                entity.Property(e => e.PaymentDate).HasColumnType("date");
                entity.Property(e => e.PaymentStatus).HasMaxLength(10);
                entity.Property(e => e.PaymentValue).HasColumnType("money");
                entity.Property(e => e.RemittanceInformation).HasMaxLength(500);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Gender>(entity =>
            {
                entity.HasKey(e => e.GndId);

                entity.ToTable("Genders", "mdm");

                entity.Property(e => e.GndId)
                    .ValueGeneratedNever()
                    .HasColumnName("GND_Id");
                entity.Property(e => e.GndCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("GND_CreatedBy");
                entity.Property(e => e.GndCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("GND_CreatedDate");
                entity.Property(e => e.GndCreditManagerCode)
                    .HasMaxLength(10)
                    .HasColumnName("GND_CreditManagerCode");
                entity.Property(e => e.GndExactCode)
                    .HasMaxLength(10)
                    .HasColumnName("GND_ExactCode");
                entity.Property(e => e.GndInactive).HasColumnName("GND_Inactive");
                entity.Property(e => e.GndLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("GND_LastModifiedBy");
                entity.Property(e => e.GndLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("GND_LastModifiedDate");
                entity.Property(e => e.GndLocalizableEntryId).HasColumnName("GND_LocalizableEntry_Id");
                entity.Property(e => e.GndName)
                    .HasMaxLength(50)
                    .HasColumnName("GND_Name");
                entity.Property(e => e.GndTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("GND_TimeStamp");

                entity.HasOne(d => d.GndLocalizableEntry).WithMany(p => p.Genders)
                    .HasForeignKey(d => d.GndLocalizableEntryId)
                    .HasConstraintName("FK_Genders_LocalizableEntries");
            });

            modelBuilder.Entity<GeneralCreditor>(entity =>
            {
                entity.HasKey(e => e.GcdId);

                entity.ToTable("GeneralCreditors", "fin");

                entity.Property(e => e.GcdId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("GCD_Id");
                entity.Property(e => e.GcdCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("GCD_CreatedBy");
                entity.Property(e => e.GcdCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("GCD_CreatedDate");
                entity.Property(e => e.GcdCreditorId).HasColumnName("GCD_Creditor_Id");
                entity.Property(e => e.GcdLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("GCD_LastModifiedBy");
                entity.Property(e => e.GcdLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("GCD_LastModifiedDate");
                entity.Property(e => e.GcdTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("GCD_TimeStamp");

                entity.HasOne(d => d.GcdCreditor).WithMany(p => p.GeneralCreditors)
                    .HasForeignKey(d => d.GcdCreditorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GeneralCreditors_Creditors");
            });

            modelBuilder.Entity<GeneralCreditorsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GeneralCreditorsView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<GeneralJournalEntriesExactView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GeneralJournalEntriesExactView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.ExactAdministration).HasMaxLength(10);
                entity.Property(e => e.ExactGeneralLedger).HasMaxLength(10);
                entity.Property(e => e.ExactJournal).HasMaxLength(10);
                entity.Property(e => e.JournalEntryDate).HasColumnType("date");
                entity.Property(e => e.JournalEntryNumber).HasMaxLength(20);
                entity.Property(e => e.JournalId).HasMaxLength(20);
                entity.Property(e => e.JournalTypeId).HasMaxLength(10);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<GeneralJournalEntryLinesExactView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GeneralJournalEntryLinesExactView", "fin");

                entity.Property(e => e.Amount).HasColumnType("money");
                entity.Property(e => e.CostCenterCode).HasMaxLength(20);
                entity.Property(e => e.CostUnitCode).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(250);
                entity.Property(e => e.ExactGeneralLedger).HasMaxLength(10);
                entity.Property(e => e.ExactJournal).HasMaxLength(10);
                entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 5)");
                entity.Property(e => e.GeneralLedgerId).HasMaxLength(20);
                entity.Property(e => e.InvoiceNumber).HasMaxLength(10);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.OurReference).HasMaxLength(50);
                entity.Property(e => e.TaxCode).HasMaxLength(10);
                entity.Property(e => e.TaxValue).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(50);
            });

            modelBuilder.Entity<GeneralLedger>(entity =>
            {
                entity.HasKey(e => e.GlId);

                entity.ToTable("GeneralLedgers", "fin");

                entity.Property(e => e.GlId)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("GL_Id");
                entity.Property(e => e.GlCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("GL_CreatedBy");
                entity.Property(e => e.GlCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("GL_CreatedDate");
                entity.Property(e => e.GlDescription)
                    .HasMaxLength(250)
                    .HasColumnName("GL_Description");
                entity.Property(e => e.GlExactAdministration)
                    .HasMaxLength(10)
                    .HasColumnName("GL_ExactAdministration");
                entity.Property(e => e.GlExactGeneralLedger)
                    .HasMaxLength(10)
                    .HasColumnName("GL_ExactGeneralLedger");
                entity.Property(e => e.GlInactive).HasColumnName("GL_Inactive");
                entity.Property(e => e.GlIsPrimaryProcess)
                    .IsRequired()
                    .HasDefaultValueSql("((1))")
                    .HasColumnName("GL_IsPrimaryProcess");
                entity.Property(e => e.GlIsProfitLossAccount).HasColumnName("GL_IsProfitLossAccount");
                entity.Property(e => e.GlIsSuspenseAccount).HasColumnName("GL_IsSuspenseAccount");
                entity.Property(e => e.GlLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("GL_LastModifiedBy");
                entity.Property(e => e.GlLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("GL_LastModifiedDate");
                entity.Property(e => e.GlLocalizableEntryId).HasColumnName("GL_LocalizableEntry_Id");
                entity.Property(e => e.GlMainCategoryId).HasColumnName("GL_MainCategory_Id");
                entity.Property(e => e.GlSubCategroyId).HasColumnName("GL_SubCategroy_Id");
                entity.Property(e => e.GlTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("GL_TimeStamp");

                entity.HasOne(d => d.GlLocalizableEntry).WithMany(p => p.GeneralLedgers)
                    .HasForeignKey(d => d.GlLocalizableEntryId)
                    .HasConstraintName("FK_GeneralLedgers_LocalizableEntries");
            });

            modelBuilder.Entity<GeneralLedgerBalancesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GeneralLedgerBalancesView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.ExactAdministration).HasMaxLength(10);
                entity.Property(e => e.ExactLedgerAccount).HasMaxLength(10);
                entity.Property(e => e.Id).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.TotalCreditValue).HasColumnType("money");
                entity.Property(e => e.TotalDebitValue).HasColumnType("money");
            });

            modelBuilder.Entity<GeneralLedgerSuspendedBalancesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GeneralLedgerSuspendedBalancesView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.ExactAdministration).HasMaxLength(10);
                entity.Property(e => e.ExactLedgerAccount).HasMaxLength(10);
                entity.Property(e => e.Id).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.TotalCreditValue).HasColumnType("money");
                entity.Property(e => e.TotalDebitValue).HasColumnType("money");
            });

            modelBuilder.Entity<GeneralLedgersView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GeneralLedgersView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.ExactAdministration).HasMaxLength(10);
                entity.Property(e => e.Id).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.TotalCreditValue).HasColumnType("money");
                entity.Property(e => e.TotalDebitValue).HasColumnType("money");
            });

            modelBuilder.Entity<GreenCardOffice>(entity =>
            {
                entity.HasKey(e => e.GcoId);

                entity.ToTable("GreenCardOffices", "mdm");

                entity.Property(e => e.GcoId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("GCO_Id");
                entity.Property(e => e.GcoCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("GCO_CreatedBy");
                entity.Property(e => e.GcoCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("GCO_CreatedDate");
                entity.Property(e => e.GcoCultureCodePreferredLanguage)
                    .HasMaxLength(10)
                    .HasColumnName("GCO_CultureCodePreferredLanguage");
                entity.Property(e => e.GcoInactive).HasColumnName("GCO_Inactive");
                entity.Property(e => e.GcoLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("GCO_LastModifiedBy");
                entity.Property(e => e.GcoLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("GCO_LastModifiedDate");
                entity.Property(e => e.GcoTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("GCO_TimeStamp");

                entity.HasOne(d => d.Gco).WithOne(p => p.GreenCardOffice)
                    .HasForeignKey<GreenCardOffice>(d => d.GcoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GreenCardOffices_OrganizationUnits");
            });

            modelBuilder.Entity<GreenCardOfficeCountry>(entity =>
            {
                entity.HasKey(e => e.GccId);

                entity.ToTable("GreenCardOfficeCountries", "mdm");

                entity.Property(e => e.GccId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("GCC_Id");
                entity.Property(e => e.GccCountryId)
                    .HasMaxLength(2)
                    .HasColumnName("GCC_Country_Id");
                entity.Property(e => e.GccCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("GCC_CreatedBy");
                entity.Property(e => e.GccCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("GCC_CreatedDate");
                entity.Property(e => e.GccEffectiveDate).HasColumnName("GCC_EffectiveDate");
                entity.Property(e => e.GccGreenCardOfficeId).HasColumnName("GCC_GreenCardOffice_Id");
                entity.Property(e => e.GccLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("GCC_LastModifiedBy");
                entity.Property(e => e.GccLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("GCC_LastModifiedDate");
                entity.Property(e => e.GccTerminationDate).HasColumnName("GCC_TerminationDate");
                entity.Property(e => e.GccTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("GCC_TimeStamp");

                entity.HasOne(d => d.GccCountry).WithMany(p => p.GreenCardOfficeCountries)
                    .HasForeignKey(d => d.GccCountryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GreenCardOfficeCountries_Countries");

                entity.HasOne(d => d.GccGreenCardOffice).WithMany(p => p.GreenCardOfficeCountries)
                    .HasForeignKey(d => d.GccGreenCardOfficeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GreenCardOfficeCountries_GreenCardOffices");
            });

            modelBuilder.Entity<HandlingCountry>(entity =>
            {
                entity.HasKey(e => e.HncId);

                entity.ToTable("HandlingCountries", "mdm");

                entity.Property(e => e.HncId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("HNC_Id");
                entity.Property(e => e.HncCountryCodeIso3)
                    .HasMaxLength(3)
                    .HasColumnName("HNC_CountryCodeIso3");
                entity.Property(e => e.HncCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("HNC_CreatedBy");
                entity.Property(e => e.HncCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("HNC_CreatedDate");
                entity.Property(e => e.HncCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("HNC_CurrencyCode");
                entity.Property(e => e.HncDepartmentId).HasColumnName("HNC_Department_Id");
                entity.Property(e => e.HncEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("HNC_EffectiveDate");
                entity.Property(e => e.HncHandlingTypeId).HasColumnName("HNC_HandlingType_Id");
                entity.Property(e => e.HncLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("HNC_LastModifiedBy");
                entity.Property(e => e.HncLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("HNC_LastModifiedDate");
                entity.Property(e => e.HncLegalEntityId).HasColumnName("HNC_LegalEntity_Id");
                entity.Property(e => e.HncPartnerId).HasColumnName("HNC_Partner_Id");
                entity.Property(e => e.HncSubContractId).HasColumnName("HNC_SubContract_Id");
                entity.Property(e => e.HncTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("HNC_TerminationDate");
                entity.Property(e => e.HncTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("HNC_TimeStamp");

                entity.HasOne(d => d.HncDepartment).WithMany(p => p.HandlingCountries)
                    .HasForeignKey(d => d.HncDepartmentId)
                    .HasConstraintName("FK_HandlingCountries_Departments");

                entity.HasOne(d => d.HncHandlingType).WithMany(p => p.HandlingCountries)
                    .HasForeignKey(d => d.HncHandlingTypeId)
                    .HasConstraintName("FK_HandlingCountries_HandlingTypes");

                entity.HasOne(d => d.HncLegalEntity).WithMany(p => p.HandlingCountries)
                    .HasForeignKey(d => d.HncLegalEntityId)
                    .HasConstraintName("FK_HandlingCountries_LegalEntities");

                entity.HasOne(d => d.HncPartner).WithMany(p => p.HandlingCountries)
                    .HasForeignKey(d => d.HncPartnerId)
                    .HasConstraintName("FK_HandlingCountries_Partners");

                entity.HasOne(d => d.HncSubContract).WithMany(p => p.HandlingCountries)
                    .HasForeignKey(d => d.HncSubContractId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HandlingCountries_SubContract");
            });

            modelBuilder.Entity<HandlingType>(entity =>
            {
                entity.HasKey(e => e.HntId);

                entity.ToTable("HandlingTypes", "mdm");

                entity.HasIndex(e => e.HntCode, "UX_mdm_HandlingTypes_Code__Filtered")
                    .IsUnique()
                    .HasFilter("([HNT_Inactive]=(0))");

                entity.Property(e => e.HntId)
                    .ValueGeneratedNever()
                    .HasColumnName("HNT_Id");
                entity.Property(e => e.HntCode)
                    .HasMaxLength(10)
                    .HasColumnName("HNT_Code");
                entity.Property(e => e.HntCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("HNT_CreatedBy");
                entity.Property(e => e.HntCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("HNT_CreatedDate");
                entity.Property(e => e.HntInactive).HasColumnName("HNT_Inactive");
                entity.Property(e => e.HntLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("HNT_LastModifiedBy");
                entity.Property(e => e.HntLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("HNT_LastModifiedDate");
                entity.Property(e => e.HntLocalizableEntryId).HasColumnName("HNT_LocalizableEntry_Id");
                entity.Property(e => e.HntLongName)
                    .HasMaxLength(250)
                    .HasColumnName("HNT_LongName");
                entity.Property(e => e.HntShortName)
                    .HasMaxLength(20)
                    .HasColumnName("HNT_ShortName");
                entity.Property(e => e.HntTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("HNT_TimeStamp");

                entity.HasOne(d => d.HntLocalizableEntry).WithMany(p => p.HandlingTypes)
                    .HasForeignKey(d => d.HntLocalizableEntryId)
                    .HasConstraintName("FK_HandlingTypes_LocalizableEntries");
            });

            modelBuilder.Entity<HierarchyType>(entity =>
            {
                entity.HasKey(e => e.HtId);

                entity.ToTable("HierarchyTypes", "mdm");

                entity.Property(e => e.HtId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("HT_Id");
                entity.Property(e => e.HtCode)
                    .HasMaxLength(10)
                    .HasColumnName("HT_Code");
                entity.Property(e => e.HtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("HT_CreatedBy");
                entity.Property(e => e.HtCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("HT_CreatedDate");
                entity.Property(e => e.HtInactive).HasColumnName("HT_Inactive");
                entity.Property(e => e.HtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("HT_LastModifiedBy");
                entity.Property(e => e.HtLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("HT_LastModifiedDate");
                entity.Property(e => e.HtLocalizableEntryId).HasColumnName("HT_LocalizableEntry_Id");
                entity.Property(e => e.HtLongName)
                    .HasMaxLength(50)
                    .HasColumnName("HT_LongName");
                entity.Property(e => e.HtShortName)
                    .HasMaxLength(20)
                    .HasColumnName("HT_ShortName");
                entity.Property(e => e.HtTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("HT_TimeStamp");

                entity.HasOne(d => d.HtLocalizableEntry).WithMany(p => p.HierarchyTypes)
                    .HasForeignKey(d => d.HtLocalizableEntryId)
                    .HasConstraintName("FK_HierarchyTypes_LocalizableEntries");
            });

            modelBuilder.Entity<HierarchyType1>(entity =>
            {
                entity.HasKey(e => e.HtId);

                entity.ToTable("HierarchyTypes", "stg");

                entity.Property(e => e.HtId)
                    .ValueGeneratedNever()
                    .HasColumnName("HT_Id");
                entity.Property(e => e.HtCode)
                    .HasMaxLength(10)
                    .HasColumnName("HT_Code");
                entity.Property(e => e.HtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("HT_CreatedBy");
                entity.Property(e => e.HtCreatedDate).HasColumnName("HT_CreatedDate");
                entity.Property(e => e.HtInactive).HasColumnName("HT_Inactive");
                entity.Property(e => e.HtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("HT_LastModifiedBy");
                entity.Property(e => e.HtLastModifiedDate).HasColumnName("HT_LastModifiedDate");
                entity.Property(e => e.HtLocalizableEntryId).HasColumnName("HT_LocalizableEntry_Id");
                entity.Property(e => e.HtLongName)
                    .HasMaxLength(50)
                    .HasColumnName("HT_LongName");
                entity.Property(e => e.HtShortName)
                    .HasMaxLength(20)
                    .HasColumnName("HT_ShortName");
                entity.Property(e => e.HtTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("HT_TimeStamp");
            });

            modelBuilder.Entity<HourlyFeeAgreement>(entity =>
            {
                entity.HasKey(e => e.HfaId);

                entity.ToTable("HourlyFeeAgreements", "fee");

                entity.Property(e => e.HfaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("HFA_Id");
                entity.Property(e => e.HfaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("HFA_CreatedBy");
                entity.Property(e => e.HfaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("HFA_CreatedDate");
                entity.Property(e => e.HfaHourlyFeeRate)
                    .HasColumnType("money")
                    .HasColumnName("HFA_HourlyFeeRate");
                entity.Property(e => e.HfaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("HFA_LastModifiedBy");
                entity.Property(e => e.HfaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("HFA_LastModifiedDate");
                entity.Property(e => e.HfaMaxFeeAmount)
                    .HasColumnType("money")
                    .HasColumnName("HFA_MaxFeeAmount");
                entity.Property(e => e.HfaMinFeeAmount)
                    .HasColumnType("money")
                    .HasColumnName("HFA_MinFeeAmount");
                entity.Property(e => e.HfaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("HFA_TimeStamp");
                entity.Property(e => e.HfaUnitOfMeasureId)
                    .HasMaxLength(20)
                    .HasColumnName("HFA_UnitOfMeasure_Id");
                entity.Property(e => e.HfaUnitPrice)
                    .HasColumnType("money")
                    .HasColumnName("HFA_UnitPrice");

                entity.HasOne(d => d.Hfa).WithOne(p => p.HourlyFeeAgreement)
                    .HasForeignKey<HourlyFeeAgreement>(d => d.HfaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HourlyFeeAgreements_FeeAgreements");

                entity.HasOne(d => d.HfaUnitOfMeasure).WithMany(p => p.HourlyFeeAgreements)
                    .HasForeignKey(d => d.HfaUnitOfMeasureId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HourlyFeeAgreements_UnitOfMeasures");
            });

            modelBuilder.Entity<IbanCountry>(entity =>
            {
                entity.HasKey(e => e.IbcId);

                entity.ToTable("IbanCountries", "fin");

                entity.Property(e => e.IbcId)
                    .HasMaxLength(2)
                    .HasColumnName("IBC_Id");
                entity.Property(e => e.IbcCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IBC_CreatedBy");
                entity.Property(e => e.IbcCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IBC_CreatedDate");
                entity.Property(e => e.IbcIbanLength).HasColumnName("IBC_IbanLength");
                entity.Property(e => e.IbcLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IBC_LastModifiedBy");
                entity.Property(e => e.IbcLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IBC_LastModifiedDate");
                entity.Property(e => e.IbcTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("IBC_TimeStamp");

                entity.HasOne(d => d.Ibc).WithOne(p => p.IbanCountry)
                    .HasForeignKey<IbanCountry>(d => d.IbcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IbanCountries_Countries");
            });

            modelBuilder.Entity<InputMethod>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__InputMet__3214EC07FC66207B");

                entity.ToTable("InputMethods", "mdm");

                entity.HasIndex(e => e.Code, "UX_mdm_InputMethods_Code__Filtered")
                    .IsUnique()
                    .HasFilter("([Inactive]=(0))");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LongName).HasMaxLength(250);
                entity.Property(e => e.ShortName).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.LocalizableEntry).WithMany(p => p.InputMethods)
                    .HasForeignKey(d => d.LocalizableEntryId)
                    .HasConstraintName("FK_InputMethods_LocalizableEntries");
            });

            modelBuilder.Entity<InsuranceCoverage>(entity =>
            {
                entity.HasKey(e => e.IcId);

                entity.ToTable("InsuranceCoverages", "pdc");

                entity.Property(e => e.IcId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("IC_Id");
                entity.Property(e => e.IcCode)
                    .HasMaxLength(10)
                    .HasColumnName("IC_Code");
                entity.Property(e => e.IcCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IC_CreatedBy");
                entity.Property(e => e.IcCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IC_CreatedDate");
                entity.Property(e => e.IcInactive).HasColumnName("IC_Inactive");
                entity.Property(e => e.IcInsuranceCoverageTypeId).HasColumnName("IC_InsuranceCoverageType_Id");
                entity.Property(e => e.IcIsMain).HasColumnName("IC_IsMain");
                entity.Property(e => e.IcLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IC_LastModifiedBy");
                entity.Property(e => e.IcLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IC_LastModifiedDate");
                entity.Property(e => e.IcLocalizableEntryId).HasColumnName("IC_LocalizableEntry_Id");
                entity.Property(e => e.IcLongName)
                    .HasMaxLength(250)
                    .HasColumnName("IC_LongName");
                entity.Property(e => e.IcShortName)
                    .HasMaxLength(20)
                    .HasColumnName("IC_ShortName");
                entity.Property(e => e.IcTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("IC_TimeStamp");

                entity.HasOne(d => d.IcInsuranceCoverageType).WithMany(p => p.InsuranceCoverages)
                    .HasForeignKey(d => d.IcInsuranceCoverageTypeId)
                    .HasConstraintName("FK_InsuranceCoverages_InsuranceCoverageTypes");

                entity.HasOne(d => d.IcLocalizableEntry).WithMany(p => p.InsuranceCoverages)
                    .HasForeignKey(d => d.IcLocalizableEntryId)
                    .HasConstraintName("FK_InsuranceCoverages_LocalizableEntries");
            });

            modelBuilder.Entity<InsuranceCoverageHierarchy>(entity =>
            {
                entity.HasKey(e => e.IchId);

                entity.ToTable("InsuranceCoverageHierarchy", "pdc");

                entity.Property(e => e.IchId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("ICH_Id");
                entity.Property(e => e.IchCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ICH_CreatedBy");
                entity.Property(e => e.IchCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ICH_CreatedDate");
                entity.Property(e => e.IchEndDate)
                    .HasColumnType("date")
                    .HasColumnName("ICH_EndDate");
                entity.Property(e => e.IchLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ICH_LastModifiedBy");
                entity.Property(e => e.IchLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ICH_LastModifiedDate");
                entity.Property(e => e.IchParentInsuranceCoverageId).HasColumnName("ICH_ParentInsuranceCoverage_Id");
                entity.Property(e => e.IchStartDate)
                    .HasColumnType("date")
                    .HasColumnName("ICH_StartDate");
                entity.Property(e => e.IchTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ICH_TimeStamp");

                entity.HasOne(d => d.IchParentInsuranceCoverage).WithMany(p => p.InsuranceCoverageHierarchies)
                    .HasForeignKey(d => d.IchParentInsuranceCoverageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InsuranceCoverageHierarchy_InsuranceCoverages");
            });

            modelBuilder.Entity<InsuranceCoverageType>(entity =>
            {
                entity.HasKey(e => e.IctId);

                entity.ToTable("InsuranceCoverageTypes", "pdc");

                entity.Property(e => e.IctId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("ICT_Id");
                entity.Property(e => e.IctCode)
                    .HasMaxLength(10)
                    .HasColumnName("ICT_Code");
                entity.Property(e => e.IctCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ICT_CreatedBy");
                entity.Property(e => e.IctCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ICT_CreatedDate");
                entity.Property(e => e.IctInactive).HasColumnName("ICT_Inactive");
                entity.Property(e => e.IctLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ICT_LastModifiedBy");
                entity.Property(e => e.IctLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ICT_LastModifiedDate");
                entity.Property(e => e.IctLocalizableEntryId).HasColumnName("ICT_LocalizableEntry_Id");
                entity.Property(e => e.IctLongName)
                    .HasMaxLength(250)
                    .HasColumnName("ICT_LongName");
                entity.Property(e => e.IctShortName)
                    .HasMaxLength(20)
                    .HasColumnName("ICT_ShortName");
                entity.Property(e => e.IctTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ICT_TimeStamp");

                entity.HasOne(d => d.IctLocalizableEntry).WithMany(p => p.InsuranceCoverageTypes)
                    .HasForeignKey(d => d.IctLocalizableEntryId)
                    .HasConstraintName("FK_InsuranceCoverageTypes_LocalizableEntries");
            });

            modelBuilder.Entity<InsuranceCoveragesHierarchyView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("InsuranceCoveragesHierarchyView", "pdc");

                entity.Property(e => e.CoverageCode).HasMaxLength(10);
                entity.Property(e => e.CoverageName).HasMaxLength(20);
                entity.Property(e => e.ParentCoverageCode).HasMaxLength(10);
                entity.Property(e => e.ParentCoverageName).HasMaxLength(20);
            });

            modelBuilder.Entity<InsuranceObject>(entity =>
            {
                entity.HasKey(e => e.IoId);

                entity.ToTable("InsuranceObjects", "pdc");

                entity.HasIndex(e => e.IoCode, "UX_pdc_InsuranceObjects_Code__Filtered")
                    .IsUnique()
                    .HasFilter("([IO_Inactive]=(0))");

                entity.Property(e => e.IoId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("IO_Id");
                entity.Property(e => e.IoCode)
                    .HasMaxLength(10)
                    .HasColumnName("IO_Code");
                entity.Property(e => e.IoCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IO_CreatedBy");
                entity.Property(e => e.IoCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IO_CreatedDate");
                entity.Property(e => e.IoInactive).HasColumnName("IO_Inactive");
                entity.Property(e => e.IoInsuranceObjectTypeId).HasColumnName("IO_InsuranceObjectType_Id");
                entity.Property(e => e.IoIsBusiness).HasColumnName("IO_IsBusiness");
                entity.Property(e => e.IoIsMain).HasColumnName("IO_IsMain");
                entity.Property(e => e.IoIsPrivate).HasColumnName("IO_IsPrivate");
                entity.Property(e => e.IoLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IO_LastModifiedBy");
                entity.Property(e => e.IoLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IO_LastModifiedDate");
                entity.Property(e => e.IoLocalizableEntryId).HasColumnName("IO_LocalizableEntry_Id");
                entity.Property(e => e.IoLongName)
                    .HasMaxLength(250)
                    .HasColumnName("IO_LongName");
                entity.Property(e => e.IoObjectClassificationId)
                    .HasMaxLength(20)
                    .HasColumnName("IO_ObjectClassification_Id");
                entity.Property(e => e.IoShortName)
                    .HasMaxLength(20)
                    .HasColumnName("IO_ShortName");
                entity.Property(e => e.IoTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("IO_TimeStamp");

                entity.HasOne(d => d.IoInsuranceObjectType).WithMany(p => p.InsuranceObjects)
                    .HasForeignKey(d => d.IoInsuranceObjectTypeId)
                    .HasConstraintName("FK_InsuranceObjects_InsuranceObjectTypes");

                entity.HasOne(d => d.IoLocalizableEntry).WithMany(p => p.InsuranceObjects)
                    .HasForeignKey(d => d.IoLocalizableEntryId)
                    .HasConstraintName("FK_InsuranceObjects_LocalizableEntries");

                entity.HasOne(d => d.IoObjectClassification).WithMany(p => p.InsuranceObjects)
                    .HasForeignKey(d => d.IoObjectClassificationId)
                    .HasConstraintName("FK_InsuranceObjects_ObjectClassification");
            });

            modelBuilder.Entity<InsuranceObjectDamageLocation>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_ProductDamageLocations");

                entity.ToTable("InsuranceObjectDamageLocations", "pdc");

                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedDate).HasDefaultValueSql("(getdate())");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.DamageLocation).WithMany(p => p.InsuranceObjectDamageLocations)
                    .HasForeignKey(d => d.DamageLocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDamageLocations_DamageReasons");

                entity.HasOne(d => d.Object).WithMany(p => p.InsuranceObjectDamageLocations)
                    .HasForeignKey(d => d.ObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDamageLocations_InsuranceObjects");
            });

            modelBuilder.Entity<InsuranceObjectExternalMaterial>(entity =>
            {
                entity.HasKey(e => e.IoemId);

                entity.ToTable("InsuranceObjectExternalMaterials", "pdc");

                entity.Property(e => e.IoemId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("IOEM_Id");
                entity.Property(e => e.IoemCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IOEM_CreatedBy");
                entity.Property(e => e.IoemCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IOEM_CreatedDate");
                entity.Property(e => e.IoemExternalMaterialId).HasColumnName("IOEM_ExternalMaterial_Id");
                entity.Property(e => e.IoemInsuranceObjectId).HasColumnName("IOEM_InsuranceObject_Id");
                entity.Property(e => e.IoemLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IOEM_LastModifiedBy");
                entity.Property(e => e.IoemLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IOEM_LastModifiedDate");
                entity.Property(e => e.IoemTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("IOEM_TimeStamp");

                entity.HasOne(d => d.IoemExternalMaterial).WithMany(p => p.InsuranceObjectExternalMaterials)
                    .HasForeignKey(d => d.IoemExternalMaterialId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InsuranceObjectExternalMaterials_ExternalMaterials");

                entity.HasOne(d => d.IoemInsuranceObject).WithMany(p => p.InsuranceObjectExternalMaterials)
                    .HasForeignKey(d => d.IoemInsuranceObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InsuranceObjectExternalMaterials_InsuranceObjects");
            });

            modelBuilder.Entity<InsuranceObjectHierarchy>(entity =>
            {
                entity.HasKey(e => e.IohId);

                entity.ToTable("InsuranceObjectHierarchy", "pdc");

                entity.Property(e => e.IohId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("IOH_Id");
                entity.Property(e => e.IohCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IOH_CreatedBy");
                entity.Property(e => e.IohCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IOH_CreatedDate");
                entity.Property(e => e.IohEndDate)
                    .HasColumnType("date")
                    .HasColumnName("IOH_EndDate");
                entity.Property(e => e.IohLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IOH_LastModifiedBy");
                entity.Property(e => e.IohLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IOH_LastModifiedDate");
                entity.Property(e => e.IohParentInsuranceObjectId).HasColumnName("IOH_ParentInsuranceObject_Id");
                entity.Property(e => e.IohStartDate)
                    .HasColumnType("date")
                    .HasColumnName("IOH_StartDate");
                entity.Property(e => e.IohTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("IOH_TimeStamp");

                entity.HasOne(d => d.IohParentInsuranceObject).WithMany(p => p.InsuranceObjectHierarchies)
                    .HasForeignKey(d => d.IohParentInsuranceObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InsuranceObjectHierarchy_InsuranceObjects");
            });

            modelBuilder.Entity<InsuranceObjectRoofCovering>(entity =>
            {
                entity.HasKey(e => e.IorfId);

                entity.ToTable("InsuranceObjectRoofCoverings", "pdc");

                entity.Property(e => e.IorfId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("IORF_Id");
                entity.Property(e => e.IorfCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IORF_CreatedBy");
                entity.Property(e => e.IorfCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IORF_CreatedDate");
                entity.Property(e => e.IorfInsuranceObjectId).HasColumnName("IORF_InsuranceObject_Id");
                entity.Property(e => e.IorfLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IORF_LastModifiedBy");
                entity.Property(e => e.IorfLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IORF_LastModifiedDate");
                entity.Property(e => e.IorfRoofCoveringId).HasColumnName("IORF_RoofCovering_Id");
                entity.Property(e => e.IorfTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("IORF_TimeStamp");

                entity.HasOne(d => d.IorfInsuranceObject).WithMany(p => p.InsuranceObjectRoofCoverings)
                    .HasForeignKey(d => d.IorfInsuranceObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InsuranceObjectRoofCoverings_InsuranceObjects");

                entity.HasOne(d => d.IorfRoofCovering).WithMany(p => p.InsuranceObjectRoofCoverings)
                    .HasForeignKey(d => d.IorfRoofCoveringId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InsuranceObjectRoofCoverings_RoofCoverings");
            });

            modelBuilder.Entity<InsuranceObjectType>(entity =>
            {
                entity.HasKey(e => e.IotId);

                entity.ToTable("InsuranceObjectTypes", "pdc");

                entity.Property(e => e.IotId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("IOT_Id");
                entity.Property(e => e.IotCode)
                    .HasMaxLength(10)
                    .HasColumnName("IOT_Code");
                entity.Property(e => e.IotCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IOT_CreatedBy");
                entity.Property(e => e.IotCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IOT_CreatedDate");
                entity.Property(e => e.IotInactive).HasColumnName("IOT_Inactive");
                entity.Property(e => e.IotLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IOT_LastModifiedBy");
                entity.Property(e => e.IotLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IOT_LastModifiedDate");
                entity.Property(e => e.IotLocalizableEntryId).HasColumnName("IOT_LocalizableEntry_Id");
                entity.Property(e => e.IotLongName)
                    .HasMaxLength(250)
                    .HasColumnName("IOT_LongName");
                entity.Property(e => e.IotShortName)
                    .HasMaxLength(20)
                    .HasColumnName("IOT_ShortName");
                entity.Property(e => e.IotTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("IOT_TimeStamp");

                entity.HasOne(d => d.IotLocalizableEntry).WithMany(p => p.InsuranceObjectTypes)
                    .HasForeignKey(d => d.IotLocalizableEntryId)
                    .HasConstraintName("FK_InsuranceObjectTypes_LocalizableEntries");
            });

            modelBuilder.Entity<InsurancePoliciesCorrectionApproval>(entity =>
            {
                entity.HasKey(e => e.IpapId).HasName("PK__Insuranc__A0C79CBB552D57AE");

                entity.ToTable("InsurancePoliciesCorrectionApprovals", "dos");

                entity.Property(e => e.IpapId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("IPAP_Id");
                entity.Property(e => e.IpapApprovalDate).HasColumnName("IPAP_ApprovalDate");
                entity.Property(e => e.IpapAutorizationRoleId)
                    .HasMaxLength(50)
                    .HasColumnName("IPAP_AutorizationRole_Id");
                entity.Property(e => e.IpapComment)
                    .HasMaxLength(250)
                    .HasColumnName("IPAP_Comment");
                entity.Property(e => e.IpapCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IPAP_CreatedBy");
                entity.Property(e => e.IpapCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IPAP_CreatedDate");
                entity.Property(e => e.IpapEmployeeId).HasColumnName("IPAP_Employee_Id");
                entity.Property(e => e.IpapInsurancePolicyAuthorizationId).HasColumnName("IPAP_InsurancePolicyAuthorization_Id");
                entity.Property(e => e.IpapIsApproved).HasColumnName("IPAP_IsApproved");
                entity.Property(e => e.IpapLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IPAP_LastModifiedBy");
                entity.Property(e => e.IpapLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IPAP_LastModifiedDate");
                entity.Property(e => e.IpapTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("IPAP_TimeStamp");

                entity.HasOne(d => d.IpapAutorizationRole).WithMany(p => p.InsurancePoliciesCorrectionApprovals)
                    .HasForeignKey(d => d.IpapAutorizationRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InsurancePoliciesCorrectionApprovals_AuthorizationRoles");

                entity.HasOne(d => d.IpapEmployee).WithMany(p => p.InsurancePoliciesCorrectionApprovals)
                    .HasForeignKey(d => d.IpapEmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InsurancePoliciesCorrectionApprovals_Employees");

                entity.HasOne(d => d.IpapInsurancePolicyAuthorization).WithMany(p => p.InsurancePoliciesCorrectionApprovals)
                    .HasForeignKey(d => d.IpapInsurancePolicyAuthorizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InsurancePoliciesCorrectionApprovals_InsurancePoliciesCorrectionAuthorizations");
            });

            modelBuilder.Entity<InsurancePoliciesCorrectionAuthorization>(entity =>
            {
                entity.HasKey(e => e.IpcaId).HasName("PK__Insuranc__FDE835CE5DC95079");

                entity.ToTable("InsurancePoliciesCorrectionAuthorizations", "dos");

                entity.Property(e => e.IpcaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("IPCA_Id");
                entity.Property(e => e.IpcaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IPCA_CreatedBy");
                entity.Property(e => e.IpcaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IPCA_CreatedDate");
                entity.Property(e => e.IpcaInsurancePolicyId).HasColumnName("IPCA_InsurancePolicy_Id");
                entity.Property(e => e.IpcaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IPCA_LastModifiedBy");
                entity.Property(e => e.IpcaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IPCA_LastModifiedDate");
                entity.Property(e => e.IpcaRequiredAutorizationRoleId)
                    .HasMaxLength(50)
                    .HasColumnName("IPCA_RequiredAutorizationRole_Id");
                entity.Property(e => e.IpcaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("IPCA_TimeStamp");

                entity.HasOne(d => d.IpcaInsurancePolicy).WithMany(p => p.InsurancePoliciesCorrectionAuthorizations)
                    .HasForeignKey(d => d.IpcaInsurancePolicyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InsurancePoliciesCorrectionAuthorizations_Dossiers");

                entity.HasOne(d => d.IpcaRequiredAutorizationRole).WithMany(p => p.InsurancePoliciesCorrectionAuthorizations)
                    .HasForeignKey(d => d.IpcaRequiredAutorizationRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InsurancePoliciesCorrectionAuthorizations_AuthorizationRoles");
            });

            modelBuilder.Entity<InsurancePoliciesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_InsurancePolicies_History_ID");

                entity.ToTable("InsurancePolicies_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.IpoAgentId).HasColumnName("IPO_Agent_Id");
                entity.Property(e => e.IpoAlarmCenterId).HasColumnName("IPO_AlarmCenter_Id");
                entity.Property(e => e.IpoChargedExpensesInvoiceRecipientId).HasColumnName("IPO_ChargedExpensesInvoiceRecipient_Id");
                entity.Property(e => e.IpoClientId).HasColumnName("IPO_Client_Id");
                entity.Property(e => e.IpoContractNumber)
                    .HasMaxLength(50)
                    .HasColumnName("IPO_ContractNumber");
                entity.Property(e => e.IpoContributionPaid)
                    .HasMaxLength(200)
                    .HasColumnName("IPO_ContributionPaid");
                entity.Property(e => e.IpoCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IPO_CreatedBy");
                entity.Property(e => e.IpoCreatedDate).HasColumnName("IPO_CreatedDate");
                entity.Property(e => e.IpoDateDisbarred)
                    .HasColumnType("date")
                    .HasColumnName("IPO_DateDisbarred");
                entity.Property(e => e.IpoDossierInsureeId).HasColumnName("IPO_DossierInsuree_Id");
                entity.Property(e => e.IpoFeeInvoiceRecipientId).HasColumnName("IPO_FeeInvoiceRecipient_Id");
                entity.Property(e => e.IpoFreeField1)
                    .HasMaxLength(500)
                    .HasColumnName("IPO_FreeField1");
                entity.Property(e => e.IpoFreeField2)
                    .HasMaxLength(500)
                    .HasColumnName("IPO_FreeField2");
                entity.Property(e => e.IpoFreeField3)
                    .HasMaxLength(500)
                    .HasColumnName("IPO_FreeField3");
                entity.Property(e => e.IpoFreeField4)
                    .HasMaxLength(500)
                    .HasColumnName("IPO_FreeField4");
                entity.Property(e => e.IpoId).HasColumnName("IPO_Id");
                entity.Property(e => e.IpoInactive).HasColumnName("IPO_Inactive");
                entity.Property(e => e.IpoInsuranceProductType)
                    .HasMaxLength(200)
                    .HasColumnName("IPO_InsuranceProductType");
                entity.Property(e => e.IpoInsurerId).HasColumnName("IPO_Insurer_Id");
                entity.Property(e => e.IpoLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IPO_LastModifiedBy");
                entity.Property(e => e.IpoLastModifiedDate).HasColumnName("IPO_LastModifiedDate");
                entity.Property(e => e.IpoLeasingCompanyId).HasColumnName("IPO_LeasingCompany_Id");
                entity.Property(e => e.IpoMandateId).HasColumnName("IPO_Mandate_Id");
                entity.Property(e => e.IpoMandateNameFreeText)
                    .HasMaxLength(500)
                    .HasColumnName("IPO_MandateNameFreeText");
                entity.Property(e => e.IpoOwnRisc)
                    .HasColumnType("money")
                    .HasColumnName("IPO_OwnRisc");
                entity.Property(e => e.IpoOwnRiskInvoiceRecipientId).HasColumnName("IPO_OwnRiskInvoiceRecipient_Id");
                entity.Property(e => e.IpoPolicyDisbarred)
                    .HasMaxLength(200)
                    .HasColumnName("IPO_PolicyDisbarred");
                entity.Property(e => e.IpoRoadAuthorityId).HasColumnName("IPO_RoadAuthority_Id");
                entity.Property(e => e.IpoStartDate)
                    .HasColumnType("date")
                    .HasColumnName("IPO_StartDate");
                entity.Property(e => e.IpoUnknownAgentInfo)
                    .HasMaxLength(500)
                    .HasColumnName("IPO_UnknownAgentInfo");
                entity.Property(e => e.IpoVatdeductableInvoiceRecipientId).HasColumnName("IPO_VATDeductableInvoiceRecipient_Id");
            });

            modelBuilder.Entity<InsurancePoliciesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("InsurancePoliciesView", "dos");

                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.ContractNumber).HasMaxLength(50);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.FreeField1).HasMaxLength(500);
                entity.Property(e => e.FreeField2).HasMaxLength(500);
                entity.Property(e => e.FreeField3).HasMaxLength(500);
                entity.Property(e => e.FreeField4).HasMaxLength(500);
                entity.Property(e => e.InsurancePolicyNumber).HasMaxLength(50);
                entity.Property(e => e.InsurerCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.InsurerName).HasMaxLength(756);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.MandateCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.MandateName).HasMaxLength(756);
                entity.Property(e => e.PolicyHolder).HasMaxLength(200);
                entity.Property(e => e.StartDate).HasColumnType("date");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<InsurancePolicy>(entity =>
            {
                entity.HasKey(e => e.IpoId);

                entity.ToTable("InsurancePolicies", "dos", tb => tb.HasTrigger("th_dos_InsurancePolicies_TraceHistory"));

                entity.HasIndex(e => e.IpoDossierInsureeId, "IX_InsurancePolicies_DossierInsuree_Id");

                entity.HasIndex(e => e.IpoFeeInvoiceRecipientId, "IX_InsurancePolicies_FeeInvoiceRecipient");

                entity.Property(e => e.IpoId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("IPO_Id");
                entity.Property(e => e.IpoAgentId).HasColumnName("IPO_Agent_Id");
                entity.Property(e => e.IpoAlarmCenterId).HasColumnName("IPO_AlarmCenter_Id");
                entity.Property(e => e.IpoChargedExpensesInvoiceRecipientId).HasColumnName("IPO_ChargedExpensesInvoiceRecipient_Id");
                entity.Property(e => e.IpoClientCaseNumber)
                    .HasMaxLength(50)
                    .HasColumnName("IPO_ClientCaseNumber");
                entity.Property(e => e.IpoClientId).HasColumnName("IPO_Client_Id");
                entity.Property(e => e.IpoClientOrderNumber)
                    .HasMaxLength(50)
                    .HasColumnName("IPO_ClientOrderNumber");
                entity.Property(e => e.IpoContractNumber)
                    .HasMaxLength(50)
                    .HasColumnName("IPO_ContractNumber");
                entity.Property(e => e.IpoContributionPaid)
                    .HasMaxLength(200)
                    .HasColumnName("IPO_ContributionPaid");
                entity.Property(e => e.IpoCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IPO_CreatedBy");
                entity.Property(e => e.IpoCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IPO_CreatedDate");
                entity.Property(e => e.IpoCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("IPO_CurrencyCode");
                entity.Property(e => e.IpoDateDisbarred)
                    .HasColumnType("date")
                    .HasColumnName("IPO_DateDisbarred");
                entity.Property(e => e.IpoDossierInsureeId).HasColumnName("IPO_DossierInsuree_Id");
                entity.Property(e => e.IpoFeeInvoiceRecipientId).HasColumnName("IPO_FeeInvoiceRecipient_Id");
                entity.Property(e => e.IpoFreeField1)
                    .HasMaxLength(500)
                    .HasColumnName("IPO_FreeField1");
                entity.Property(e => e.IpoFreeField2)
                    .HasMaxLength(500)
                    .HasColumnName("IPO_FreeField2");
                entity.Property(e => e.IpoFreeField3)
                    .HasMaxLength(500)
                    .HasColumnName("IPO_FreeField3");
                entity.Property(e => e.IpoFreeField4)
                    .HasMaxLength(500)
                    .HasColumnName("IPO_FreeField4");
                entity.Property(e => e.IpoInactive).HasColumnName("IPO_Inactive");
                entity.Property(e => e.IpoInsuranceProductType)
                    .HasMaxLength(200)
                    .HasColumnName("IPO_InsuranceProductType");
                entity.Property(e => e.IpoInsurerId).HasColumnName("IPO_Insurer_Id");
                entity.Property(e => e.IpoLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IPO_LastModifiedBy");
                entity.Property(e => e.IpoLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IPO_LastModifiedDate");
                entity.Property(e => e.IpoLeasingCompanyId).HasColumnName("IPO_LeasingCompany_Id");
                entity.Property(e => e.IpoMandateId).HasColumnName("IPO_Mandate_Id");
                entity.Property(e => e.IpoMandateNameFreeText)
                    .HasMaxLength(500)
                    .HasColumnName("IPO_MandateNameFreeText");
                entity.Property(e => e.IpoOptionId).HasColumnName("IPO_OptionId");
                entity.Property(e => e.IpoOwnRisc)
                    .HasColumnType("money")
                    .HasColumnName("IPO_OwnRisc");
                entity.Property(e => e.IpoOwnRiskInvoiceRecipientId).HasColumnName("IPO_OwnRiskInvoiceRecipient_Id");
                entity.Property(e => e.IpoPolicyDisbarred)
                    .HasMaxLength(200)
                    .HasColumnName("IPO_PolicyDisbarred");
                entity.Property(e => e.IpoRoadAuthorityId).HasColumnName("IPO_RoadAuthority_Id");
                entity.Property(e => e.IpoStartDate)
                    .HasColumnType("date")
                    .HasColumnName("IPO_StartDate");
                entity.Property(e => e.IpoTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("IPO_TimeStamp");
                entity.Property(e => e.IpoUnknownAgentInfo)
                    .HasMaxLength(500)
                    .HasColumnName("IPO_UnknownAgentInfo");
                entity.Property(e => e.IpoVatdeductableInvoiceRecipientId).HasColumnName("IPO_VATDeductableInvoiceRecipient_Id");

                entity.HasOne(d => d.IpoAgent).WithMany(p => p.InsurancePolicies)
                    .HasForeignKey(d => d.IpoAgentId)
                    .HasConstraintName("FK_InsurancePolicies_Agents");

                entity.HasOne(d => d.IpoAlarmCenter).WithMany(p => p.InsurancePolicies)
                    .HasForeignKey(d => d.IpoAlarmCenterId)
                    .HasConstraintName("FK_InsurancePolicies_AlarmCenters");

                entity.HasOne(d => d.IpoChargedExpensesInvoiceRecipient).WithMany(p => p.InsurancePolicyIpoChargedExpensesInvoiceRecipients)
                    .HasForeignKey(d => d.IpoChargedExpensesInvoiceRecipientId)
                    .HasConstraintName("FK_InsurancePolicies_ChargedExpensesInvoiceRecipients");

                entity.HasOne(d => d.IpoClient).WithMany(p => p.InsurancePolicies)
                    .HasForeignKey(d => d.IpoClientId)
                    .HasConstraintName("FK_InsurancePolicies_Clients");

                entity.HasOne(d => d.IpoDossierInsuree).WithMany(p => p.InsurancePolicies)
                    .HasForeignKey(d => d.IpoDossierInsureeId)
                    .HasConstraintName("FK_InsurancePolicies_DossierInsurees");

                entity.HasOne(d => d.IpoFeeInvoiceRecipient).WithMany(p => p.InsurancePolicyIpoFeeInvoiceRecipients)
                    .HasForeignKey(d => d.IpoFeeInvoiceRecipientId)
                    .HasConstraintName("FK_InsurancePolicies_FeeInvoiceRecipients");

                entity.HasOne(d => d.IpoInsurer).WithMany(p => p.InsurancePolicies)
                    .HasForeignKey(d => d.IpoInsurerId)
                    .HasConstraintName("FK_InsurancePolicies_Insurers");

                entity.HasOne(d => d.IpoLeasingCompany).WithMany(p => p.InsurancePolicies)
                    .HasForeignKey(d => d.IpoLeasingCompanyId)
                    .HasConstraintName("FK_InsurancePolicies_LeasingCompanies");

                entity.HasOne(d => d.IpoMandate).WithMany(p => p.InsurancePolicies)
                    .HasForeignKey(d => d.IpoMandateId)
                    .HasConstraintName("FK_InsurancePolicies_Mandates");

                entity.HasOne(d => d.IpoOwnRiskInvoiceRecipient).WithMany(p => p.InsurancePolicyIpoOwnRiskInvoiceRecipients)
                    .HasForeignKey(d => d.IpoOwnRiskInvoiceRecipientId)
                    .HasConstraintName("FK_InsurancePolicies_OrganizationUnits_OwnRiskInvoiceRecipient");

                entity.HasOne(d => d.IpoRoadAuthority).WithMany(p => p.InsurancePolicies)
                    .HasForeignKey(d => d.IpoRoadAuthorityId)
                    .HasConstraintName("FK_InsurancePolicies_RoadAuthorities");

                entity.HasOne(d => d.IpoVatdeductableInvoiceRecipient).WithMany(p => p.InsurancePolicyIpoVatdeductableInvoiceRecipients)
                    .HasForeignKey(d => d.IpoVatdeductableInvoiceRecipientId)
                    .HasConstraintName("FK_InsurancePolicies_OrganizationUnits_VATDeductableInvoiceRecipient");
            });

            modelBuilder.Entity<InsurancePolicyClientsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("InsurancePolicyClientsView", "dos");

                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientName).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.InsurancePolicyFreeField1).HasMaxLength(500);
                entity.Property(e => e.InsurancePolicyFreeField2).HasMaxLength(500);
                entity.Property(e => e.InsurancePolicyFreeField3).HasMaxLength(500);
                entity.Property(e => e.InsurancePolicyFreeField4).HasMaxLength(500);
                entity.Property(e => e.InsurancePolicyNumber).HasMaxLength(50);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<InsurancePolicyCreditableSalesOrdersView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("InsurancePolicyCreditableSalesOrdersView", "dos");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<InsuranceProductType>(entity =>
            {
                entity.HasKey(e => e.IptId);

                entity.ToTable("InsuranceProductTypes", "dos", tb => tb.HasTrigger("th_dos_InsuranceProductTypes_TraceHistory"));

                entity.Property(e => e.IptId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("IPT_Id");
                entity.Property(e => e.IptCode)
                    .HasMaxLength(10)
                    .HasColumnName("IPT_Code");
                entity.Property(e => e.IptCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IPT_CreatedBy");
                entity.Property(e => e.IptCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IPT_CreatedDate");
                entity.Property(e => e.IptInactive).HasColumnName("IPT_Inactive");
                entity.Property(e => e.IptLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IPT_LastModifiedBy");
                entity.Property(e => e.IptLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IPT_LastModifiedDate");
                entity.Property(e => e.IptLocalizableEntryId).HasColumnName("IPT_LocalizableEntry_Id");
                entity.Property(e => e.IptLongName)
                    .HasMaxLength(250)
                    .HasColumnName("IPT_LongName");
                entity.Property(e => e.IptShortName)
                    .HasMaxLength(20)
                    .HasColumnName("IPT_ShortName");
                entity.Property(e => e.IptTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("IPT_TimeStamp");

                entity.HasOne(d => d.IptLocalizableEntry).WithMany(p => p.InsuranceProductTypes)
                    .HasForeignKey(d => d.IptLocalizableEntryId)
                    .HasConstraintName("FK_InsuranceProductTypes_LocalizedEntries");
            });

            modelBuilder.Entity<InsuranceProductTypesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_InsuranceProductTypes_History_ID");

                entity.ToTable("InsuranceProductTypes_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.IptCode)
                    .HasMaxLength(10)
                    .HasColumnName("IPT_Code");
                entity.Property(e => e.IptCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IPT_CreatedBy");
                entity.Property(e => e.IptCreatedDate).HasColumnName("IPT_CreatedDate");
                entity.Property(e => e.IptId).HasColumnName("IPT_Id");
                entity.Property(e => e.IptInactive).HasColumnName("IPT_Inactive");
                entity.Property(e => e.IptLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IPT_LastModifiedBy");
                entity.Property(e => e.IptLastModifiedDate).HasColumnName("IPT_LastModifiedDate");
                entity.Property(e => e.IptLocalizableEntryId).HasColumnName("IPT_LocalizableEntry_Id");
                entity.Property(e => e.IptLongName)
                    .HasMaxLength(250)
                    .HasColumnName("IPT_LongName");
                entity.Property(e => e.IptShortName)
                    .HasMaxLength(20)
                    .HasColumnName("IPT_ShortName");
            });

            modelBuilder.Entity<Insurer>(entity =>
            {
                entity.HasKey(e => e.IsrId);

                entity.ToTable("Insurers", "mdm");

                entity.Property(e => e.IsrId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("ISR_Id");
                entity.Property(e => e.IsrChargedExpensesToBroker).HasColumnName("ISR_ChargedExpensesToBroker");
                entity.Property(e => e.IsrCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ISR_CreatedBy");
                entity.Property(e => e.IsrCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ISR_CreatedDate");
                entity.Property(e => e.IsrCultureCodePreferredLanguage)
                    .HasMaxLength(10)
                    .HasColumnName("ISR_CultureCodePreferredLanguage");
                entity.Property(e => e.IsrExternalCode)
                    .HasMaxLength(10)
                    .HasColumnName("ISR_ExternalCode");
                entity.Property(e => e.IsrFeeToBroker).HasColumnName("ISR_FeeToBroker");
                entity.Property(e => e.IsrInactive).HasColumnName("ISR_Inactive");
                entity.Property(e => e.IsrLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ISR_LastModifiedBy");
                entity.Property(e => e.IsrLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ISR_LastModifiedDate");
                entity.Property(e => e.IsrTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ISR_TimeStamp");

                entity.HasOne(d => d.Isr).WithOne(p => p.Insurer)
                    .HasForeignKey<Insurer>(d => d.IsrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Insurers_OrganizationUnits");
            });

            modelBuilder.Entity<Insurer1>(entity =>
            {
                entity.HasKey(e => e.IsrId);

                entity.ToTable("Insurers", "stg");

                entity.Property(e => e.IsrId)
                    .ValueGeneratedNever()
                    .HasColumnName("ISR_Id");
                entity.Property(e => e.IsrChargedExpensesToBroker).HasColumnName("ISR_ChargedExpensesToBroker");
                entity.Property(e => e.IsrCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ISR_CreatedBy");
                entity.Property(e => e.IsrCreatedDate).HasColumnName("ISR_CreatedDate");
                entity.Property(e => e.IsrCultureCodePreferredLanguage)
                    .HasMaxLength(10)
                    .HasColumnName("ISR_CultureCodePreferredLanguage");
                entity.Property(e => e.IsrExternalCode)
                    .HasMaxLength(10)
                    .HasColumnName("ISR_ExternalCode");
                entity.Property(e => e.IsrFeeToBroker).HasColumnName("ISR_FeeToBroker");
                entity.Property(e => e.IsrInactive).HasColumnName("ISR_Inactive");
                entity.Property(e => e.IsrLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ISR_LastModifiedBy");
                entity.Property(e => e.IsrLastModifiedDate).HasColumnName("ISR_LastModifiedDate");
                entity.Property(e => e.IsrTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ISR_TimeStamp");
            });

            modelBuilder.Entity<InsurerAlarmCenter>(entity =>
            {
                entity.HasKey(e => e.IacId);

                entity.ToTable("InsurerAlarmCenters", "mdm");

                entity.Property(e => e.IacId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("IAC_Id");
                entity.Property(e => e.IacAlarmCenterId).HasColumnName("IAC_AlarmCenter_Id");
                entity.Property(e => e.IacCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IAC_CreatedBy");
                entity.Property(e => e.IacCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IAC_CreatedDate");
                entity.Property(e => e.IacInactive).HasColumnName("IAC_Inactive");
                entity.Property(e => e.IacInsurerId).HasColumnName("IAC_Insurer_Id");
                entity.Property(e => e.IacLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IAC_LastModifiedBy");
                entity.Property(e => e.IacLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IAC_LastModifiedDate");
                entity.Property(e => e.IacTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("IAC_TimeStamp");

                entity.HasOne(d => d.IacAlarmCenter).WithMany(p => p.InsurerAlarmCenters)
                    .HasForeignKey(d => d.IacAlarmCenterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InsurerAlarmCenters_AlarmCenters");

                entity.HasOne(d => d.IacInsurer).WithMany(p => p.InsurerAlarmCenters)
                    .HasForeignKey(d => d.IacInsurerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InsurerAlarmCenters_Insurers");
            });

            modelBuilder.Entity<InsurerAlarmCenter1>(entity =>
            {
                entity.HasKey(e => e.IacId);

                entity.ToTable("InsurerAlarmCenters", "stg");

                entity.Property(e => e.IacId)
                    .ValueGeneratedNever()
                    .HasColumnName("IAC_Id");
                entity.Property(e => e.IacAlarmCenterId).HasColumnName("IAC_AlarmCenter_Id");
                entity.Property(e => e.IacCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IAC_CreatedBy");
                entity.Property(e => e.IacCreatedDate).HasColumnName("IAC_CreatedDate");
                entity.Property(e => e.IacInactive).HasColumnName("IAC_Inactive");
                entity.Property(e => e.IacInsurerId).HasColumnName("IAC_Insurer_Id");
                entity.Property(e => e.IacLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IAC_LastModifiedBy");
                entity.Property(e => e.IacLastModifiedDate).HasColumnName("IAC_LastModifiedDate");
                entity.Property(e => e.IacTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("IAC_TimeStamp");
            });

            modelBuilder.Entity<InsurersView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("InsurersView", "mdm");

                entity.Property(e => e.Actief)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.Adres).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.Einddatum).HasColumnType("date");
                entity.Property(e => e.ExterneCode)
                    .HasMaxLength(10)
                    .HasColumnName("Externe code");
                entity.Property(e => e.Huisnr).HasMaxLength(10);
                entity.Property(e => e.Landcode).HasMaxLength(3);
                entity.Property(e => e.LandcodePostbus)
                    .HasMaxLength(3)
                    .HasColumnName("Landcode postbus");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NaamCpl)
                    .HasMaxLength(756)
                    .HasColumnName("Naam cpl");
                entity.Property(e => e.NaamKort)
                    .HasMaxLength(20)
                    .HasColumnName("Naam kort");
                entity.Property(e => e.NiveauPlekInStructuur)
                    .HasMaxLength(61)
                    .HasColumnName("Niveau (plek in structuur)");
                entity.Property(e => e.OgCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("OG-Code");
                entity.Property(e => e.ParentBovenliggendeType)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("Parent (bovenliggende type)");
                entity.Property(e => e.Porcode).HasMaxLength(10);
                entity.Property(e => e.Postbus).HasMaxLength(10);
                entity.Property(e => e.Postcode).HasMaxLength(10);
                entity.Property(e => e.PostcodePostbus)
                    .HasMaxLength(10)
                    .HasColumnName("Postcode postbus");
                entity.Property(e => e.Provincie).HasMaxLength(250);
                entity.Property(e => e.ProvinciePostbus)
                    .HasMaxLength(250)
                    .HasColumnName("Provincie postbus");
                entity.Property(e => e.Startdatum).HasColumnType("date");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.Toevoeging).HasMaxLength(250);
                entity.Property(e => e.TypeTpVerzOfVolmacht)
                    .HasMaxLength(61)
                    .HasColumnName("Type (tp/verz/of volmacht)");
                entity.Property(e => e.Woonplaats).HasMaxLength(250);
                entity.Property(e => e.WoonplaatsPostbus)
                    .HasMaxLength(250)
                    .HasColumnName("Woonplaats postbus");
            });

            modelBuilder.Entity<InsurersViewWithContactInformation>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("InsurersViewWithContactInformation", "mdm");

                entity.Property(e => e.Actief)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.Adres).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.Einddatum).HasColumnType("date");
                entity.Property(e => e.Email).HasMaxLength(250);
                entity.Property(e => e.ExterneCode)
                    .HasMaxLength(10)
                    .HasColumnName("Externe code");
                entity.Property(e => e.Huisnr).HasMaxLength(10);
                entity.Property(e => e.Landcode).HasMaxLength(3);
                entity.Property(e => e.LandcodePostbus)
                    .HasMaxLength(3)
                    .HasColumnName("Landcode postbus");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NaamCpl)
                    .HasMaxLength(756)
                    .HasColumnName("Naam cpl");
                entity.Property(e => e.NaamKort)
                    .HasMaxLength(20)
                    .HasColumnName("Naam kort");
                entity.Property(e => e.NiveauPlekInStructuur)
                    .HasMaxLength(61)
                    .HasColumnName("Niveau (plek in structuur)");
                entity.Property(e => e.OgCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("OG-Code");
                entity.Property(e => e.ParentBovenliggendeType)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("Parent (bovenliggende type)");
                entity.Property(e => e.PhoneNumber).HasMaxLength(250);
                entity.Property(e => e.Porcode).HasMaxLength(10);
                entity.Property(e => e.Postbus).HasMaxLength(10);
                entity.Property(e => e.Postcode).HasMaxLength(10);
                entity.Property(e => e.PostcodePostbus)
                    .HasMaxLength(10)
                    .HasColumnName("Postcode postbus");
                entity.Property(e => e.Provincie).HasMaxLength(250);
                entity.Property(e => e.ProvinciePostbus)
                    .HasMaxLength(250)
                    .HasColumnName("Provincie postbus");
                entity.Property(e => e.Startdatum).HasColumnType("date");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.Toevoeging).HasMaxLength(250);
                entity.Property(e => e.Type)
                    .HasMaxLength(7)
                    .IsUnicode(false);
                entity.Property(e => e.TypeTpVerzOfVolmacht)
                    .HasMaxLength(61)
                    .HasColumnName("Type (tp/verz/of volmacht)");
                entity.Property(e => e.Woonplaats).HasMaxLength(250);
                entity.Property(e => e.WoonplaatsPostbus)
                    .HasMaxLength(250)
                    .HasColumnName("Woonplaats postbus");
            });

            modelBuilder.Entity<IntakeMethodMapping>(entity =>
            {
                entity.HasKey(e => e.ImmId).HasName("PK__IntakeMe__2851D0358830FE14");

                entity.ToTable("IntakeMethodMapping", "pros");

                entity.Property(e => e.ImmId)
                    .ValueGeneratedNever()
                    .HasColumnName("IMM_Id");
                entity.Property(e => e.ImmCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IMM_CreatedBy");
                entity.Property(e => e.ImmCreatedDate).HasColumnName("IMM_CreatedDate");
                entity.Property(e => e.ImmEiscode).HasColumnName("IMM_EISCode");
                entity.Property(e => e.ImmLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IMM_LastModifiedBy");
                entity.Property(e => e.ImmLastModifiedDate).HasColumnName("IMM_LastModifiedDate");
                entity.Property(e => e.ImmProspectCode).HasColumnName("IMM_ProspectCode");
                entity.Property(e => e.ImmTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("IMM_TimeStamp");
            });

            modelBuilder.Entity<InternationalAssistanceGroup>(entity =>
            {
                entity.HasKey(e => e.IagId);

                entity.ToTable("InternationalAssistanceGroups", "mdm");

                entity.Property(e => e.IagId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("IAG_Id");
                entity.Property(e => e.IagCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IAG_CreatedBy");
                entity.Property(e => e.IagCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IAG_CreatedDate");
                entity.Property(e => e.IagCultureCodePreferredLanguage)
                    .HasMaxLength(10)
                    .HasColumnName("IAG_CultureCodePreferredLanguage");
                entity.Property(e => e.IagExternalCode)
                    .HasMaxLength(10)
                    .HasColumnName("IAG_ExternalCode");
                entity.Property(e => e.IagInactive).HasColumnName("IAG_Inactive");
                entity.Property(e => e.IagInternationalAssistanceGroupTypeId).HasColumnName("IAG_InternationalAssistanceGroupType_Id");
                entity.Property(e => e.IagLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IAG_LastModifiedBy");
                entity.Property(e => e.IagLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IAG_LastModifiedDate");
                entity.Property(e => e.IagTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("IAG_TimeStamp");

                entity.HasOne(d => d.Iag).WithOne(p => p.InternationalAssistanceGroup)
                    .HasForeignKey<InternationalAssistanceGroup>(d => d.IagId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InternationalAssistanceGroups_OrganizationUnits");

                entity.HasOne(d => d.IagInternationalAssistanceGroupType).WithMany(p => p.InternationalAssistanceGroups)
                    .HasForeignKey(d => d.IagInternationalAssistanceGroupTypeId)
                    .HasConstraintName("FK_InternationalAssistanceGroups_InternationalAssistanceGroupTypes");
            });

            modelBuilder.Entity<InternationalAssistanceGroup1>(entity =>
            {
                entity.HasKey(e => e.IagId);

                entity.ToTable("InternationalAssistanceGroups", "stg");

                entity.Property(e => e.IagId)
                    .ValueGeneratedNever()
                    .HasColumnName("IAG_Id");
                entity.Property(e => e.IagCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IAG_CreatedBy");
                entity.Property(e => e.IagCreatedDate).HasColumnName("IAG_CreatedDate");
                entity.Property(e => e.IagCultureCodePreferredLanguage)
                    .HasMaxLength(10)
                    .HasColumnName("IAG_CultureCodePreferredLanguage");
                entity.Property(e => e.IagExternalCode)
                    .HasMaxLength(10)
                    .HasColumnName("IAG_ExternalCode");
                entity.Property(e => e.IagInactive).HasColumnName("IAG_Inactive");
                entity.Property(e => e.IagInternationalAssistanceGroupTypeId).HasColumnName("IAG_InternationalAssistanceGroupType_Id");
                entity.Property(e => e.IagLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IAG_LastModifiedBy");
                entity.Property(e => e.IagLastModifiedDate).HasColumnName("IAG_LastModifiedDate");
                entity.Property(e => e.IagTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("IAG_TimeStamp");
            });

            modelBuilder.Entity<InternationalAssistanceGroupType>(entity =>
            {
                entity.HasKey(e => e.AigtId);

                entity.ToTable("InternationalAssistanceGroupTypes", "mdm");

                entity.HasIndex(e => e.AigtCode, "UX_mdm_InternationalAssistanceGroupTypes_Code__Filtered")
                    .IsUnique()
                    .HasFilter("([AIGT_Inactive]=(0))");

                entity.Property(e => e.AigtId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("AIGT_Id");
                entity.Property(e => e.AigtCode)
                    .HasMaxLength(10)
                    .HasColumnName("AIGT_Code");
                entity.Property(e => e.AigtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AIGT_CreatedBy");
                entity.Property(e => e.AigtCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("AIGT_CreatedDate");
                entity.Property(e => e.AigtInactive).HasColumnName("AIGT_Inactive");
                entity.Property(e => e.AigtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("AIGT_LastModifiedBy");
                entity.Property(e => e.AigtLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("AIGT_LastModifiedDate");
                entity.Property(e => e.AigtLocalizableEntryId).HasColumnName("AIGT_LocalizableEntry_Id");
                entity.Property(e => e.AigtLongName)
                    .HasMaxLength(250)
                    .HasColumnName("AIGT_LongName");
                entity.Property(e => e.AigtShortName)
                    .HasMaxLength(20)
                    .HasColumnName("AIGT_ShortName");
                entity.Property(e => e.AigtTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("AIGT_TimeStamp");

                entity.HasOne(d => d.AigtLocalizableEntry).WithMany(p => p.InternationalAssistanceGroupTypes)
                    .HasForeignKey(d => d.AigtLocalizableEntryId)
                    .HasConstraintName("FK_InternationalAssistanceGroupTypes_LocalizableEntries");
            });

            modelBuilder.Entity<InvoiceAttributeType>(entity =>
            {
                entity.HasKey(e => e.IatId);

                entity.ToTable("InvoiceAttributeTypes", "fin");

                entity.Property(e => e.IatId)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("IAT_Id");
                entity.Property(e => e.IatCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IAT_CreatedBy");
                entity.Property(e => e.IatCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IAT_CreatedDate");
                entity.Property(e => e.IatInactive).HasColumnName("IAT_Inactive");
                entity.Property(e => e.IatLabel)
                    .HasMaxLength(50)
                    .HasColumnName("IAT_Label");
                entity.Property(e => e.IatLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IAT_LastModifiedBy");
                entity.Property(e => e.IatLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IAT_LastModifiedDate");
                entity.Property(e => e.IatLocalizableEntryId).HasColumnName("IAT_LocalizableEntry_Id");
                entity.Property(e => e.IatTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("IAT_TimeStamp");
                entity.Property(e => e.IatValueType)
                    .HasMaxLength(250)
                    .HasColumnName("IAT_ValueType");

                entity.HasOne(d => d.IatLocalizableEntry).WithMany(p => p.InvoiceAttributeTypes)
                    .HasForeignKey(d => d.IatLocalizableEntryId)
                    .HasConstraintName("FK_InvoiceAttributeTypes_LocalizableEntries");
            });

            modelBuilder.Entity<InvoiceDeliveryMethod>(entity =>
            {
                entity.HasKey(e => e.IdmId);

                entity.ToTable("InvoiceDeliveryMethods", "fin");

                entity.Property(e => e.IdmId)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("IDM_Id");
                entity.Property(e => e.IdmCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IDM_CreatedBy");
                entity.Property(e => e.IdmCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IDM_CreatedDate");
                entity.Property(e => e.IdmDescription)
                    .HasMaxLength(250)
                    .HasColumnName("IDM_Description");
                entity.Property(e => e.IdmInactive).HasColumnName("IDM_Inactive");
                entity.Property(e => e.IdmInvoiceDeliveryMethodTypeId)
                    .HasMaxLength(20)
                    .HasColumnName("IDM_InvoiceDeliveryMethodType_Id");
                entity.Property(e => e.IdmIsCreditorDefault).HasColumnName("IDM_IsCreditorDefault");
                entity.Property(e => e.IdmIsDebtorDefault).HasColumnName("IDM_IsDebtorDefault");
                entity.Property(e => e.IdmLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IDM_LastModifiedBy");
                entity.Property(e => e.IdmLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IDM_LastModifiedDate");
                entity.Property(e => e.IdmLocalizableEntryId).HasColumnName("IDM_LocalizableEntry_Id");
                entity.Property(e => e.IdmTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("IDM_TimeStamp");

                entity.HasOne(d => d.IdmInvoiceDeliveryMethodType).WithMany(p => p.InvoiceDeliveryMethods)
                    .HasForeignKey(d => d.IdmInvoiceDeliveryMethodTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InvoiceDeliveryMethods_InvoiceDeliveryMethodTypes");

                entity.HasOne(d => d.IdmLocalizableEntry).WithMany(p => p.InvoiceDeliveryMethods)
                    .HasForeignKey(d => d.IdmLocalizableEntryId)
                    .HasConstraintName("FK_InvoiceDeliveryMethods_LocalizableEntries");
            });

            modelBuilder.Entity<InvoiceDeliveryMethodType>(entity =>
            {
                entity.HasKey(e => e.DmtId);

                entity.ToTable("InvoiceDeliveryMethodTypes", "fin");

                entity.Property(e => e.DmtId)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("DMT_Id");
                entity.Property(e => e.DmtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DMT_CreatedBy");
                entity.Property(e => e.DmtCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DMT_CreatedDate");
                entity.Property(e => e.DmtDescription)
                    .HasMaxLength(250)
                    .HasColumnName("DMT_Description");
                entity.Property(e => e.DmtInactive).HasColumnName("DMT_Inactive");
                entity.Property(e => e.DmtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("DMT_LastModifiedBy");
                entity.Property(e => e.DmtLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("DMT_LastModifiedDate");
                entity.Property(e => e.DmtLocalizableEntryId).HasColumnName("DMT_LocalizableEntry_Id");
                entity.Property(e => e.DmtTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("DMT_TimeStamp");

                entity.HasOne(d => d.DmtLocalizableEntry).WithMany(p => p.InvoiceDeliveryMethodTypes)
                    .HasForeignKey(d => d.DmtLocalizableEntryId)
                    .HasConstraintName("FK_InvoiceDeliveryMethodTypes_LocalizableEntries");
            });

            modelBuilder.Entity<InvoicePriorityType>(entity =>
            {
                entity.HasKey(e => e.IvptId);

                entity.ToTable("InvoicePriorityTypes", "fin");

                entity.HasIndex(e => e.IvptCode, "IX_InvoicePriorityTypes_Code").IsUnique();

                entity.HasIndex(e => e.IvptRank, "IX_InvoicePriorityTypes_Rank").IsUnique();

                entity.Property(e => e.IvptId)
                    .ValueGeneratedNever()
                    .HasColumnName("IVPT_Id");
                entity.Property(e => e.IvptCode)
                    .HasMaxLength(10)
                    .HasColumnName("IVPT_Code");
                entity.Property(e => e.IvptCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IVPT_CreatedBy");
                entity.Property(e => e.IvptCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IVPT_CreatedDate");
                entity.Property(e => e.IvptDescription)
                    .HasMaxLength(250)
                    .HasColumnName("IVPT_Description");
                entity.Property(e => e.IvptInactive).HasColumnName("IVPT_Inactive");
                entity.Property(e => e.IvptLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IVPT_LastModifiedBy");
                entity.Property(e => e.IvptLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IVPT_LastModifiedDate");
                entity.Property(e => e.IvptLocalizableEntryId).HasColumnName("IVPT_LocalizableEntry_Id");
                entity.Property(e => e.IvptRank).HasColumnName("IVPT_Rank");
                entity.Property(e => e.IvptTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("IVPT_TimeStamp");

                entity.HasOne(d => d.IvptLocalizableEntry).WithMany(p => p.InvoicePriorityTypes)
                    .HasForeignKey(d => d.IvptLocalizableEntryId)
                    .HasConstraintName("FK_InvoicePriorityTypes_LocalizableEntries");
            });

            modelBuilder.Entity<InvoiceRuleType>(entity =>
            {
                entity.HasKey(e => e.IrtId);

                entity.ToTable("InvoiceRuleTypes", "fin");

                entity.Property(e => e.IrtId)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("IRT_Id");
                entity.Property(e => e.IrtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IRT_CreatedBy");
                entity.Property(e => e.IrtCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IRT_CreatedDate");
                entity.Property(e => e.IrtDescription)
                    .HasMaxLength(250)
                    .HasColumnName("IRT_Description");
                entity.Property(e => e.IrtInactive).HasColumnName("IRT_Inactive");
                entity.Property(e => e.IrtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IRT_LastModifiedBy");
                entity.Property(e => e.IrtLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IRT_LastModifiedDate");
                entity.Property(e => e.IrtLocalizableEntryId).HasColumnName("IRT_LocalizableEntry_Id");
                entity.Property(e => e.IrtTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("IRT_TimeStamp");

                entity.HasOne(d => d.IrtLocalizableEntry).WithMany(p => p.InvoiceRuleTypes)
                    .HasForeignKey(d => d.IrtLocalizableEntryId)
                    .HasConstraintName("FK_InvoiceRuleTypes_LocalizableEntries");
            });

            modelBuilder.Entity<InvoiceType>(entity =>
            {
                entity.HasKey(e => e.IvtId);

                entity.ToTable("InvoiceTypes", "fin");

                entity.HasIndex(e => new { e.IvtCode, e.IvtLegalEntityId }, "IX_InvoiceTypes_Code").IsUnique();

                entity.Property(e => e.IvtId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("IVT_Id");
                entity.Property(e => e.IvtCode)
                    .HasMaxLength(10)
                    .HasColumnName("IVT_Code");
                entity.Property(e => e.IvtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IVT_CreatedBy");
                entity.Property(e => e.IvtCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IVT_CreatedDate");
                entity.Property(e => e.IvtInactive).HasColumnName("IVT_Inactive");
                entity.Property(e => e.IvtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IVT_LastModifiedBy");
                entity.Property(e => e.IvtLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IVT_LastModifiedDate");
                entity.Property(e => e.IvtLegalEntityId).HasColumnName("IVT_LegalEntity_Id");
                entity.Property(e => e.IvtLocalizableEntryId).HasColumnName("IVT_LocalizableEntry_Id");
                entity.Property(e => e.IvtLongName)
                    .HasMaxLength(250)
                    .HasColumnName("IVT_LongName");
                entity.Property(e => e.IvtShortName)
                    .HasMaxLength(20)
                    .HasColumnName("IVT_ShortName");
                entity.Property(e => e.IvtTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("IVT_TimeStamp");

                entity.HasOne(d => d.IvtLegalEntity).WithMany(p => p.InvoiceTypes)
                    .HasForeignKey(d => d.IvtLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InvoiceTypes_LegalEntities");

                entity.HasOne(d => d.IvtLocalizableEntry).WithMany(p => p.InvoiceTypes)
                    .HasForeignKey(d => d.IvtLocalizableEntryId)
                    .HasConstraintName("FK_InvoiceTypes_LocalizableEntries");
            });

            modelBuilder.Entity<InvoiceTypesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("InvoiceTypesView", "fin");

                entity.Property(e => e.Code).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityAbbreviation).HasMaxLength(20);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.LongName).HasMaxLength(250);
                entity.Property(e => e.ShortName).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<InvoiceablePurchaseInvoicesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("InvoiceablePurchaseInvoicesView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.InvoiceableNetAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.StatusChangeReason).HasMaxLength(250);
                entity.Property(e => e.StatusCode).HasMaxLength(20);
                entity.Property(e => e.StatusName).HasMaxLength(250);
                entity.Property(e => e.SupplierInvoiceDate).HasColumnType("date");
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.SupplierNumber)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<InvolvedComponent>(entity =>
            {
                entity.HasKey(e => e.IcoId);

                entity.ToTable("InvolvedComponents", "dos", tb => tb.HasTrigger("th_dos_InvolvedComponents_TraceHistory"));

                entity.Property(e => e.IcoId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("ICO_Id");
                entity.Property(e => e.IcoCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ICO_CreatedBy");
                entity.Property(e => e.IcoCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ICO_CreatedDate");
                entity.Property(e => e.IcoInvolvedObjectId).HasColumnName("ICO_InvolvedObject_Id");
                entity.Property(e => e.IcoLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ICO_LastModifiedBy");
                entity.Property(e => e.IcoLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ICO_LastModifiedDate");
                entity.Property(e => e.IcoTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ICO_TimeStamp");

                entity.HasOne(d => d.IcoInvolvedObject).WithMany(p => p.InvolvedComponents)
                    .HasForeignKey(d => d.IcoInvolvedObjectId)
                    .HasConstraintName("FK_InvolvedComponents_InvolvedObjects");
            });

            modelBuilder.Entity<InvolvedComponentsHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_InvolvedComponents_History_ID");

                entity.ToTable("InvolvedComponents_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.IcoCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ICO_CreatedBy");
                entity.Property(e => e.IcoCreatedDate).HasColumnName("ICO_CreatedDate");
                entity.Property(e => e.IcoId).HasColumnName("ICO_Id");
                entity.Property(e => e.IcoInvolvedObjectId).HasColumnName("ICO_InvolvedObject_Id");
                entity.Property(e => e.IcoLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ICO_LastModifiedBy");
                entity.Property(e => e.IcoLastModifiedDate).HasColumnName("ICO_LastModifiedDate");
            });

            modelBuilder.Entity<InvolvedCoverage>(entity =>
            {
                entity.HasKey(e => e.IcoId);

                entity.ToTable("InvolvedCoverages", "dos", tb => tb.HasTrigger("th_dos_InvolvedCoverages_TraceHistory"));

                entity.HasIndex(e => new { e.IcoDossierId, e.IcoInsurancePolicyId }, "IX_InvolvedCoverages_Dossier_InsurancePolicy");

                entity.HasIndex(e => e.IcoInsurancePolicyId, "IX_InvolvedCoverages_ICO_InsurancePolicy_Id");

                entity.Property(e => e.IcoId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("ICO_Id");
                entity.Property(e => e.IcoConfirmationDate).HasColumnName("ICO_ConfirmationDate");
                entity.Property(e => e.IcoCoverageAmount)
                    .HasColumnType("money")
                    .HasColumnName("ICO_CoverageAmount");
                entity.Property(e => e.IcoCoverageConfirmed).HasColumnName("ICO_CoverageConfirmed");
                entity.Property(e => e.IcoCoveragePercentage)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("ICO_CoveragePercentage");
                entity.Property(e => e.IcoCoverageProductId).HasColumnName("ICO_CoverageProduct_Id");
                entity.Property(e => e.IcoCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ICO_CreatedBy");
                entity.Property(e => e.IcoCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ICO_CreatedDate");
                entity.Property(e => e.IcoCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("ICO_CurrencyCode");
                entity.Property(e => e.IcoDossierId).HasColumnName("ICO_Dossier_Id");
                entity.Property(e => e.IcoInactive).HasColumnName("ICO_Inactive");
                entity.Property(e => e.IcoInsuranceCoverageId).HasColumnName("ICO_InsuranceCoverage_Id");
                entity.Property(e => e.IcoInsurancePolicyId).HasColumnName("ICO_InsurancePolicy_Id");
                entity.Property(e => e.IcoInsurancePolicyNumber)
                    .HasMaxLength(50)
                    .HasColumnName("ICO_InsurancePolicyNumber");
                entity.Property(e => e.IcoLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ICO_LastModifiedBy");
                entity.Property(e => e.IcoLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ICO_LastModifiedDate");
                entity.Property(e => e.IcoPriority).HasColumnName("ICO_Priority");
                entity.Property(e => e.IcoTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ICO_TimeStamp");

                entity.HasOne(d => d.IcoCoverageProduct).WithMany(p => p.InvolvedCoverages)
                    .HasForeignKey(d => d.IcoCoverageProductId)
                    .HasConstraintName("FK_InvolvedCoverages_CoverageProducts");

                entity.HasOne(d => d.IcoDossier).WithMany(p => p.InvolvedCoverages)
                    .HasForeignKey(d => d.IcoDossierId)
                    .HasConstraintName("FK_InvolvedCoverages_Dossiers");

                entity.HasOne(d => d.IcoInsuranceCoverage).WithMany(p => p.InvolvedCoverages)
                    .HasForeignKey(d => d.IcoInsuranceCoverageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InvolvedCoverages_InsuranceCoverages");

                entity.HasOne(d => d.IcoInsurancePolicy).WithMany(p => p.InvolvedCoverages)
                    .HasForeignKey(d => d.IcoInsurancePolicyId)
                    .HasConstraintName("FK_InvolvedCoverages_InsurancePolicies");
            });

            modelBuilder.Entity<InvolvedCoverageObjectRelation>(entity =>
            {
                entity.HasKey(e => e.IorId);

                entity.ToTable("InvolvedCoverageObjectRelations", "dos", tb => tb.HasTrigger("th_dos_InvolvedCoverageObjectRelations_TraceHistory"));

                entity.HasIndex(e => e.IorInvolvedObjectId, "IX_InvolvedCoverageObjectRelations_IOR_InvolvedObject_Id");

                entity.HasIndex(e => e.IorInvolvedCoverageId, "IX_dos_InvolvedCoverageObjectRelations_InvolvedCoverage");

                entity.Property(e => e.IorId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("IOR_Id");
                entity.Property(e => e.IorCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IOR_CreatedBy");
                entity.Property(e => e.IorCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IOR_CreatedDate");
                entity.Property(e => e.IorInvolvedCoverageId).HasColumnName("IOR_InvolvedCoverage_Id");
                entity.Property(e => e.IorInvolvedObjectId).HasColumnName("IOR_InvolvedObject_Id");
                entity.Property(e => e.IorLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IOR_LastModifiedBy");
                entity.Property(e => e.IorLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IOR_LastModifiedDate");
                entity.Property(e => e.IorTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("IOR_TimeStamp");

                entity.HasOne(d => d.IorInvolvedCoverage).WithMany(p => p.InvolvedCoverageObjectRelations)
                    .HasForeignKey(d => d.IorInvolvedCoverageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InvolvedCoverageObjectRelations_InvolvedCoverages");

                entity.HasOne(d => d.IorInvolvedObject).WithMany(p => p.InvolvedCoverageObjectRelations)
                    .HasForeignKey(d => d.IorInvolvedObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InvolvedCoverageObjectRelations_InvolvedObjects");
            });

            modelBuilder.Entity<InvolvedCoverageObjectRelationsHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_InvolvedCoverageObjectRelations_History_ID");

                entity.ToTable("InvolvedCoverageObjectRelations_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.IorCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IOR_CreatedBy");
                entity.Property(e => e.IorCreatedDate).HasColumnName("IOR_CreatedDate");
                entity.Property(e => e.IorId).HasColumnName("IOR_Id");
                entity.Property(e => e.IorInvolvedCoverageId).HasColumnName("IOR_InvolvedCoverage_Id");
                entity.Property(e => e.IorInvolvedObjectId).HasColumnName("IOR_InvolvedObject_Id");
                entity.Property(e => e.IorLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IOR_LastModifiedBy");
                entity.Property(e => e.IorLastModifiedDate).HasColumnName("IOR_LastModifiedDate");
            });

            modelBuilder.Entity<InvolvedCoverageObjectsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("InvolvedCoverageObjectsView", "dos");

                entity.Property(e => e.GreencardNumber).HasMaxLength(20);
                entity.Property(e => e.InvolvedPartyRoleCode).HasMaxLength(10);
                entity.Property(e => e.TypeVehicle).HasMaxLength(50);
                entity.Property(e => e.VehicleBrand).HasMaxLength(50);
                entity.Property(e => e.VehicleLicensePlate).HasMaxLength(15);
                entity.Property(e => e.VehicleLicensePlateCountryCode).HasMaxLength(3);
                entity.Property(e => e.VehicleModel).HasMaxLength(50);
            });

            modelBuilder.Entity<InvolvedCoverageProductsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("InvolvedCoverageProductsView", "dos");

                entity.Property(e => e.AgentCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.AgentName).HasMaxLength(756);
                entity.Property(e => e.ChargedExpensesInvoiceRecipientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ChargedExpensesInvoiceRecipientName).HasMaxLength(756);
                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.CoverageAmount).HasColumnType("money");
                entity.Property(e => e.CoverageCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.CoveragePercentage).HasColumnType("decimal(5, 2)");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.FeeInvoiceRecipientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.FeeInvoiceRecipientName).HasMaxLength(756);
                entity.Property(e => e.InsuranceCoverageCode).HasMaxLength(10);
                entity.Property(e => e.InsuranceCoverageName).HasMaxLength(250);
                entity.Property(e => e.InsurancePolicyFreeField1).HasMaxLength(500);
                entity.Property(e => e.InsurancePolicyFreeField2).HasMaxLength(500);
                entity.Property(e => e.InsurancePolicyFreeField3).HasMaxLength(500);
                entity.Property(e => e.InsurancePolicyFreeField4).HasMaxLength(500);
                entity.Property(e => e.InsurancePolicyNumber).HasMaxLength(50);
                entity.Property(e => e.InsuranceProductType).HasMaxLength(200);
                entity.Property(e => e.InsurerName).HasMaxLength(756);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.MandateName).HasMaxLength(756);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.UnknownAgentInfo).HasMaxLength(500);
            });

            modelBuilder.Entity<InvolvedCoveragesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_InvolvedCoverages_History_ID");

                entity.ToTable("InvolvedCoverages_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.IcoConfirmationDate).HasColumnName("ICO_ConfirmationDate");
                entity.Property(e => e.IcoCoverageAmount)
                    .HasColumnType("money")
                    .HasColumnName("ICO_CoverageAmount");
                entity.Property(e => e.IcoCoverageConfirmed).HasColumnName("ICO_CoverageConfirmed");
                entity.Property(e => e.IcoCoveragePercentage)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ICO_CoveragePercentage");
                entity.Property(e => e.IcoCoverageProductId).HasColumnName("ICO_CoverageProduct_Id");
                entity.Property(e => e.IcoCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ICO_CreatedBy");
                entity.Property(e => e.IcoCreatedDate).HasColumnName("ICO_CreatedDate");
                entity.Property(e => e.IcoCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("ICO_CurrencyCode");
                entity.Property(e => e.IcoDossierId).HasColumnName("ICO_Dossier_Id");
                entity.Property(e => e.IcoId).HasColumnName("ICO_Id");
                entity.Property(e => e.IcoInactive).HasColumnName("ICO_Inactive");
                entity.Property(e => e.IcoInsuranceCoverageId).HasColumnName("ICO_InsuranceCoverage_Id");
                entity.Property(e => e.IcoInsurancePolicyId).HasColumnName("ICO_InsurancePolicy_Id");
                entity.Property(e => e.IcoInsurancePolicyNumber)
                    .HasMaxLength(50)
                    .HasColumnName("ICO_InsurancePolicyNumber");
                entity.Property(e => e.IcoLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ICO_LastModifiedBy");
                entity.Property(e => e.IcoLastModifiedDate).HasColumnName("ICO_LastModifiedDate");
                entity.Property(e => e.IcoOwnRiskAmount)
                    .HasColumnType("money")
                    .HasColumnName("ICO_OwnRiskAmount");
                entity.Property(e => e.IcoPriority).HasColumnName("ICO_Priority");
            });

            modelBuilder.Entity<InvolvedCoveragesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("InvolvedCoveragesView", "dos");

                entity.Property(e => e.AgentCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.AgentName).HasMaxLength(756);
                entity.Property(e => e.AlarmCenterCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.AlarmCenterName).HasMaxLength(756);
                entity.Property(e => e.ChargedExpensesInvoiceRecipientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ChargedExpensesInvoiceRecipientName).HasMaxLength(756);
                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.CoverageAmount).HasColumnType("money");
                entity.Property(e => e.CoverageCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.CoveragePercentage).HasColumnType("decimal(5, 2)");
                entity.Property(e => e.CoverageProductCode).HasMaxLength(10);
                entity.Property(e => e.CoverageProductName).HasMaxLength(250);
                entity.Property(e => e.CoverageProductTypeName).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.FeeInvoiceRecipientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.FeeInvoiceRecipientName).HasMaxLength(756);
                entity.Property(e => e.InsuranceCoverageCode).HasMaxLength(10);
                entity.Property(e => e.InsuranceCoverageName).HasMaxLength(250);
                entity.Property(e => e.InsurancePolicyFreeField1).HasMaxLength(500);
                entity.Property(e => e.InsurancePolicyFreeField2).HasMaxLength(500);
                entity.Property(e => e.InsurancePolicyFreeField3).HasMaxLength(500);
                entity.Property(e => e.InsurancePolicyFreeField4).HasMaxLength(500);
                entity.Property(e => e.InsurancePolicyNumber).HasMaxLength(50);
                entity.Property(e => e.InsuranceProductType).HasMaxLength(200);
                entity.Property(e => e.InsurerCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.InsurerName).HasMaxLength(756);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LeasingCompanyCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LeasingCompanyName).HasMaxLength(756);
                entity.Property(e => e.LiabilityStatusCode).HasMaxLength(10);
                entity.Property(e => e.LiabilityStatusLongName).HasMaxLength(250);
                entity.Property(e => e.LiabilityStatusShortName).HasMaxLength(50);
                entity.Property(e => e.MandateCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.MandateName).HasMaxLength(756);
                entity.Property(e => e.PolicyHolder).HasMaxLength(200);
                entity.Property(e => e.PolicyHolderDateOfBirth).HasColumnType("date");
                entity.Property(e => e.RoadAuthorityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.RoadAuthorityName).HasMaxLength(756);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.UnknownAgentInfo).HasMaxLength(500);
            });

            modelBuilder.Entity<InvolvedObject>(entity =>
            {
                entity.HasKey(e => e.IobId);

                entity.ToTable("InvolvedObjects", "dos", tb => tb.HasTrigger("th_dos_InvolvedObjects_TraceHistory"));

                entity.HasIndex(e => e.IobDossierId, "IX_InvolvedObjects_IOB_Dossier_Id");

                entity.Property(e => e.IobId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("IOB_Id");
                entity.Property(e => e.IobCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IOB_CreatedBy");
                entity.Property(e => e.IobCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IOB_CreatedDate");
                entity.Property(e => e.IobDossierId).HasColumnName("IOB_Dossier_Id");
                entity.Property(e => e.IobInsuranceObjectId).HasColumnName("IOB_InsuranceObject_Id");
                entity.Property(e => e.IobInvolvedCoverageId).HasColumnName("IOB_InvolvedCoverage_Id");
                entity.Property(e => e.IobIsActive).HasColumnName("IOB_IsActive");
                entity.Property(e => e.IobLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IOB_LastModifiedBy");
                entity.Property(e => e.IobLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IOB_LastModifiedDate");
                entity.Property(e => e.IobSequenceNumber).HasColumnName("IOB_SequenceNumber");
                entity.Property(e => e.IobTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("IOB_TimeStamp");

                entity.HasOne(d => d.IobDossier).WithMany(p => p.InvolvedObjects)
                    .HasForeignKey(d => d.IobDossierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InvolvedObjects_Dossiers");

                entity.HasOne(d => d.IobInsuranceObject).WithMany(p => p.InvolvedObjects)
                    .HasForeignKey(d => d.IobInsuranceObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InvolvedObjects_InsuranceObjects");

                entity.HasOne(d => d.IobInvolvedCoverage).WithMany(p => p.InvolvedObjects)
                    .HasForeignKey(d => d.IobInvolvedCoverageId)
                    .HasConstraintName("FK_InvolvedObjects_InvolvedCoverages");
            });

            modelBuilder.Entity<InvolvedObjectDamageLocation>(entity =>
            {
                entity.HasKey(e => e.IolId);

                entity.ToTable("InvolvedObjectDamageLocations", "dos", tb => tb.HasTrigger("th_dos_InvolvedObjectDamageLocations_TraceHistory"));

                entity.Property(e => e.IolId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("IOL_Id");
                entity.Property(e => e.IolCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IOL_CreatedBy");
                entity.Property(e => e.IolCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IOL_CreatedDate");
                entity.Property(e => e.IolDamageLocationId).HasColumnName("IOL_DamageLocation_Id");
                entity.Property(e => e.IolInvolvedObjectId).HasColumnName("IOL_InvolvedObject_Id");
                entity.Property(e => e.IolIsActive).HasColumnName("IOL_IsActive");
                entity.Property(e => e.IolLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IOL_LastModifiedBy");
                entity.Property(e => e.IolLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IOL_LastModifiedDate");
                entity.Property(e => e.IolSequenceNumber).HasColumnName("IOL_SequenceNumber");
                entity.Property(e => e.IolTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("IOL_TimeStamp");

                entity.HasOne(d => d.IolDamageLocation).WithMany(p => p.InvolvedObjectDamageLocations)
                    .HasForeignKey(d => d.IolDamageLocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InvolvedObjectDamageLocations_DamageLocations");

                entity.HasOne(d => d.IolInvolvedObject).WithMany(p => p.InvolvedObjectDamageLocations)
                    .HasForeignKey(d => d.IolInvolvedObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InvolvedObjectDamageLocations_InvolvedObjects");
            });

            modelBuilder.Entity<InvolvedObjectDamageLocationsHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_InvolvedObjectDamageLocations_History_ID");

                entity.ToTable("InvolvedObjectDamageLocations_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.IolCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IOL_CreatedBy");
                entity.Property(e => e.IolCreatedDate).HasColumnName("IOL_CreatedDate");
                entity.Property(e => e.IolDamageLocationId).HasColumnName("IOL_DamageLocation_Id");
                entity.Property(e => e.IolId).HasColumnName("IOL_Id");
                entity.Property(e => e.IolInvolvedObjectId).HasColumnName("IOL_InvolvedObject_Id");
                entity.Property(e => e.IolIsActive).HasColumnName("IOL_IsActive");
                entity.Property(e => e.IolLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IOL_LastModifiedBy");
                entity.Property(e => e.IolLastModifiedDate).HasColumnName("IOL_LastModifiedDate");
                entity.Property(e => e.IolSequenceNumber).HasColumnName("IOL_SequenceNumber");
            });

            modelBuilder.Entity<InvolvedObjectsHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_InvolvedObjects_History_ID");

                entity.ToTable("InvolvedObjects_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.IobCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IOB_CreatedBy");
                entity.Property(e => e.IobCreatedDate).HasColumnName("IOB_CreatedDate");
                entity.Property(e => e.IobDossierId).HasColumnName("IOB_Dossier_Id");
                entity.Property(e => e.IobId).HasColumnName("IOB_Id");
                entity.Property(e => e.IobInsuranceObjectId).HasColumnName("IOB_InsuranceObject_Id");
                entity.Property(e => e.IobInvolvedCoverageId).HasColumnName("IOB_InvolvedCoverage_Id");
                entity.Property(e => e.IobIsActive).HasColumnName("IOB_IsActive");
                entity.Property(e => e.IobLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IOB_LastModifiedBy");
                entity.Property(e => e.IobLastModifiedDate).HasColumnName("IOB_LastModifiedDate");
                entity.Property(e => e.IobSequenceNumber).HasColumnName("IOB_SequenceNumber");
            });

            modelBuilder.Entity<InvolvedObjectsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("InvolvedObjectsView", "dos");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.GreencardNumber).HasMaxLength(20);
                entity.Property(e => e.InsurancePolicyNumber).HasMaxLength(50);
                entity.Property(e => e.InvolvedObjectCode).HasMaxLength(10);
                entity.Property(e => e.InvolvedObjectName).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.TypeVehicle).HasMaxLength(50);
                entity.Property(e => e.VehicleBrand).HasMaxLength(50);
                entity.Property(e => e.VehicleLicensePlate).HasMaxLength(15);
                entity.Property(e => e.VehicleLicensePlateCountryCode).HasMaxLength(3);
                entity.Property(e => e.VehicleModel).HasMaxLength(50);
            });

            modelBuilder.Entity<InvolvedPartiesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_InvolvedParties_History_ID");

                entity.ToTable("InvolvedParties_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.IpaBankAccountNumber).HasColumnName("IPA_BankAccountNumber");
                entity.Property(e => e.IpaBic)
                    .HasMaxLength(11)
                    .HasColumnName("IPA_Bic");
                entity.Property(e => e.IpaCity)
                    .HasMaxLength(200)
                    .HasColumnName("IPA_City");
                entity.Property(e => e.IpaCocNumber)
                    .HasMaxLength(20)
                    .HasColumnName("IPA_CocNumber");
                entity.Property(e => e.IpaCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("IPA_Country_Code");
                entity.Property(e => e.IpaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IPA_CreatedBy");
                entity.Property(e => e.IpaCreatedDate).HasColumnName("IPA_CreatedDate");
                entity.Property(e => e.IpaDateOfBirth)
                    .HasColumnType("date")
                    .HasColumnName("IPA_DateOfBirth");
                entity.Property(e => e.IpaEmail)
                    .HasMaxLength(200)
                    .HasColumnName("IPA_Email");
                entity.Property(e => e.IpaExemptNumber)
                    .HasMaxLength(20)
                    .HasColumnName("IPA_ExemptNumber");
                entity.Property(e => e.IpaFirstName)
                    .HasMaxLength(200)
                    .HasColumnName("IPA_FirstName");
                entity.Property(e => e.IpaFullAddress)
                    .HasMaxLength(200)
                    .HasColumnName("IPA_FullAddress");
                entity.Property(e => e.IpaFullName)
                    .HasMaxLength(200)
                    .HasColumnName("IPA_FullName");
                entity.Property(e => e.IpaHouseNumber)
                    .HasMaxLength(50)
                    .HasColumnName("IPA_HouseNumber");
                entity.Property(e => e.IpaHouseNumberAddition)
                    .HasMaxLength(200)
                    .HasColumnName("IPA_HouseNumberAddition");
                entity.Property(e => e.IpaIban)
                    .HasMaxLength(34)
                    .HasColumnName("IPA_Iban");
                entity.Property(e => e.IpaId).HasColumnName("IPA_Id");
                entity.Property(e => e.IpaInitials)
                    .HasMaxLength(20)
                    .HasColumnName("IPA_Initials");
                entity.Property(e => e.IpaIsHomeOwnerAssociation).HasColumnName("IPA_IsHomeOwnerAssociation");
                entity.Property(e => e.IpaIsTaxExempted).HasColumnName("IPA_IsTaxExempted");
                entity.Property(e => e.IpaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IPA_LastModifiedBy");
                entity.Property(e => e.IpaLastModifiedDate).HasColumnName("IPA_LastModifiedDate");
                entity.Property(e => e.IpaLastName)
                    .HasMaxLength(200)
                    .HasColumnName("IPA_LastName");
                entity.Property(e => e.IpaMiddleName)
                    .HasMaxLength(200)
                    .HasColumnName("IPA_MiddleName");
                entity.Property(e => e.IpaPartyGender)
                    .HasMaxLength(50)
                    .HasColumnName("IPA_PartyGender");
                entity.Property(e => e.IpaPartyNumber)
                    .HasMaxLength(20)
                    .HasColumnName("IPA_PartyNumber");
                entity.Property(e => e.IpaPhoneNumber)
                    .HasMaxLength(20)
                    .HasColumnName("IPA_PhoneNumber");
                entity.Property(e => e.IpaPhoneNumber2)
                    .HasMaxLength(20)
                    .HasColumnName("IPA_PhoneNumber2");
                entity.Property(e => e.IpaPhoneNumber3)
                    .HasMaxLength(20)
                    .HasColumnName("IPA_PhoneNumber3");
                entity.Property(e => e.IpaPostalCode)
                    .HasMaxLength(10)
                    .HasColumnName("IPA_PostalCode");
                entity.Property(e => e.IpaPrefixLastName)
                    .HasMaxLength(200)
                    .HasColumnName("IPA_PrefixLastName");
                entity.Property(e => e.IpaProvince)
                    .HasMaxLength(200)
                    .HasColumnName("IPA_Province");
                entity.Property(e => e.IpaReference)
                    .HasMaxLength(200)
                    .HasColumnName("IPA_Reference");
                entity.Property(e => e.IpaSalutationId).HasColumnName("IPA_Salutation_Id");
                entity.Property(e => e.IpaStreetName)
                    .HasMaxLength(200)
                    .HasColumnName("IPA_StreetName");
            });

            modelBuilder.Entity<InvolvedPartiesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("InvolvedPartiesView", "dos");

                entity.Property(e => e.Bic).HasMaxLength(11);
                entity.Property(e => e.City).HasMaxLength(200);
                entity.Property(e => e.CountryCode).HasMaxLength(3);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DateOfBirth).HasColumnType("date");
                entity.Property(e => e.Email).HasMaxLength(200);
                entity.Property(e => e.ExemptNumber).HasMaxLength(20);
                entity.Property(e => e.FirstName).HasMaxLength(200);
                entity.Property(e => e.FullAddress).HasMaxLength(200);
                entity.Property(e => e.FullName).HasMaxLength(200);
                entity.Property(e => e.HouseNumber).HasMaxLength(50);
                entity.Property(e => e.HouseNumberAddition).HasMaxLength(200);
                entity.Property(e => e.Iban).HasMaxLength(34);
                entity.Property(e => e.Initials).HasMaxLength(20);
                entity.Property(e => e.InvolvedPartyRoleCode).HasMaxLength(10);
                entity.Property(e => e.InvolvedPartyRoleName).HasMaxLength(250);
                entity.Property(e => e.InvolvedPartySubRoleCode).HasMaxLength(10);
                entity.Property(e => e.InvolvedPartySubRoleName).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LastName).HasMaxLength(200);
                entity.Property(e => e.PartyGender).HasMaxLength(50);
                entity.Property(e => e.PartyNumber).HasMaxLength(20);
                entity.Property(e => e.PhoneNumber).HasMaxLength(20);
                entity.Property(e => e.PostalCode).HasMaxLength(10);
                entity.Property(e => e.PrefixLastName).HasMaxLength(200);
                entity.Property(e => e.Province).HasMaxLength(200);
                entity.Property(e => e.Reference).HasMaxLength(200);
                entity.Property(e => e.StreetName).HasMaxLength(200);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<InvolvedParty>(entity =>
            {
                entity.HasKey(e => e.IpaId);

                entity.ToTable("InvolvedParties", "dos", tb => tb.HasTrigger("th_dos_InvolvedParties_TraceHistory"));

                entity.Property(e => e.IpaId)
                    .ValueGeneratedNever()
                    .HasColumnName("IPA_Id");
                entity.Property(e => e.IpaBankAccountNumber).HasColumnName("IPA_BankAccountNumber");
                entity.Property(e => e.IpaBic)
                    .HasMaxLength(11)
                    .HasColumnName("IPA_Bic");
                entity.Property(e => e.IpaBsnCitizenServiceNumber)
                    .HasMaxLength(50)
                    .HasColumnName("IPA_BSN_CitizenServiceNumber");
                entity.Property(e => e.IpaCity)
                    .HasMaxLength(200)
                    .HasColumnName("IPA_City");
                entity.Property(e => e.IpaCocNumber)
                    .HasMaxLength(20)
                    .HasColumnName("IPA_CocNumber");
                entity.Property(e => e.IpaCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("IPA_Country_Code");
                entity.Property(e => e.IpaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IPA_CreatedBy");
                entity.Property(e => e.IpaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IPA_CreatedDate");
                entity.Property(e => e.IpaDateOfBirth)
                    .HasColumnType("date")
                    .HasColumnName("IPA_DateOfBirth");
                entity.Property(e => e.IpaEmail)
                    .HasMaxLength(200)
                    .HasColumnName("IPA_Email");
                entity.Property(e => e.IpaExemptNumber)
                    .HasMaxLength(20)
                    .HasColumnName("IPA_ExemptNumber");
                entity.Property(e => e.IpaFirstName)
                    .HasMaxLength(200)
                    .HasColumnName("IPA_FirstName");
                entity.Property(e => e.IpaFullAddress)
                    .HasMaxLength(200)
                    .HasColumnName("IPA_FullAddress");
                entity.Property(e => e.IpaFullName)
                    .HasMaxLength(200)
                    .HasColumnName("IPA_FullName");
                entity.Property(e => e.IpaHouseNumber)
                    .HasMaxLength(50)
                    .HasColumnName("IPA_HouseNumber");
                entity.Property(e => e.IpaHouseNumberAddition)
                    .HasMaxLength(200)
                    .HasColumnName("IPA_HouseNumberAddition");
                entity.Property(e => e.IpaIban)
                    .HasMaxLength(34)
                    .HasColumnName("IPA_Iban");
                entity.Property(e => e.IpaInactive).HasColumnName("IPA_Inactive");
                entity.Property(e => e.IpaInitials)
                    .HasMaxLength(20)
                    .HasColumnName("IPA_Initials");
                entity.Property(e => e.IpaIsCompany).HasColumnName("IPA_IsCompany");
                entity.Property(e => e.IpaIsHomeOwnerAssociation).HasColumnName("IPA_IsHomeOwnerAssociation");
                entity.Property(e => e.IpaIsTaxExempted).HasColumnName("IPA_IsTaxExempted");
                entity.Property(e => e.IpaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IPA_LastModifiedBy");
                entity.Property(e => e.IpaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IPA_LastModifiedDate");
                entity.Property(e => e.IpaLastName)
                    .HasMaxLength(200)
                    .HasColumnName("IPA_LastName");
                entity.Property(e => e.IpaMiddleName)
                    .HasMaxLength(200)
                    .HasColumnName("IPA_MiddleName");
                entity.Property(e => e.IpaPartyGender)
                    .HasMaxLength(50)
                    .HasColumnName("IPA_PartyGender");
                entity.Property(e => e.IpaPartyNumber)
                    .HasMaxLength(20)
                    .HasColumnName("IPA_PartyNumber");
                entity.Property(e => e.IpaPhoneNumber)
                    .HasMaxLength(20)
                    .HasColumnName("IPA_PhoneNumber");
                entity.Property(e => e.IpaPhoneNumber2)
                    .HasMaxLength(20)
                    .HasColumnName("IPA_PhoneNumber2");
                entity.Property(e => e.IpaPhoneNumber3)
                    .HasMaxLength(20)
                    .HasColumnName("IPA_PhoneNumber3");
                entity.Property(e => e.IpaPostalCode)
                    .HasMaxLength(10)
                    .HasColumnName("IPA_PostalCode");
                entity.Property(e => e.IpaPrefixLastName)
                    .HasMaxLength(200)
                    .HasColumnName("IPA_PrefixLastName");
                entity.Property(e => e.IpaProvince)
                    .HasMaxLength(200)
                    .HasColumnName("IPA_Province");
                entity.Property(e => e.IpaReference)
                    .HasMaxLength(200)
                    .HasColumnName("IPA_Reference");
                entity.Property(e => e.IpaSalutationId).HasColumnName("IPA_Salutation_Id");
                entity.Property(e => e.IpaStreetName)
                    .HasMaxLength(200)
                    .HasColumnName("IPA_StreetName");
                entity.Property(e => e.IpaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("IPA_TimeStamp");
                entity.Property(e => e.IpaVatNumber)
                    .HasMaxLength(50)
                    .HasColumnName("IPA_VatNumber");

                entity.HasOne(d => d.IpaSalutation).WithMany(p => p.InvolvedParties)
                    .HasForeignKey(d => d.IpaSalutationId)
                    .HasConstraintName("FK_InvolvedParties_Salutations");
            });

            modelBuilder.Entity<Job>(entity =>
            {
                entity.ToTable("Jobs", "ced");

                entity.Property(e => e.JobId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("JOB_Id");
                entity.Property(e => e.JobCode)
                    .HasMaxLength(10)
                    .HasColumnName("JOB_Code");
                entity.Property(e => e.JobCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("JOB_CreatedBy");
                entity.Property(e => e.JobCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("JOB_CreatedDate");
                entity.Property(e => e.JobInactive).HasColumnName("JOB_Inactive");
                entity.Property(e => e.JobLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("JOB_LastModifiedBy");
                entity.Property(e => e.JobLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("JOB_LastModifiedDate");
                entity.Property(e => e.JobLongName)
                    .HasMaxLength(250)
                    .HasColumnName("JOB_LongName");
                entity.Property(e => e.JobShortName)
                    .HasMaxLength(20)
                    .HasColumnName("JOB_ShortName");
                entity.Property(e => e.JobTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("JOB_TimeStamp");
            });

            modelBuilder.Entity<Journal>(entity =>
            {
                entity.HasKey(e => e.JrlId);

                entity.ToTable("Journals", "fin");

                entity.HasIndex(e => e.JrlBankAccountId, "IX_Journals_BankAccount_Id");

                entity.Property(e => e.JrlId)
                    .HasMaxLength(20)
                    .HasColumnName("JRL_Id");
                entity.Property(e => e.JrlAbbreviation)
                    .HasMaxLength(20)
                    .HasColumnName("JRL_Abbreviation");
                entity.Property(e => e.JrlBankAccountId).HasColumnName("JRL_BankAccount_Id");
                entity.Property(e => e.JrlCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("JRL_CreatedBy");
                entity.Property(e => e.JrlCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("JRL_CreatedDate");
                entity.Property(e => e.JrlCurrencyCode)
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('EUR')")
                    .HasColumnName("JRL_CurrencyCode");
                entity.Property(e => e.JrlDescription)
                    .HasMaxLength(250)
                    .HasColumnName("JRL_Description");
                entity.Property(e => e.JrlExactAdministration)
                    .HasMaxLength(10)
                    .HasColumnName("JRL_ExactAdministration");
                entity.Property(e => e.JrlExactJournal)
                    .HasMaxLength(10)
                    .HasColumnName("JRL_ExactJournal");
                entity.Property(e => e.JrlGeneralLedgerId)
                    .HasMaxLength(20)
                    .HasColumnName("JRL_GeneralLedger_Id");
                entity.Property(e => e.JrlInactive).HasColumnName("JRL_Inactive");
                entity.Property(e => e.JrlJournalTypeId)
                    .HasMaxLength(10)
                    .HasColumnName("JRL_JournalType_Id");
                entity.Property(e => e.JrlLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("JRL_LastModifiedBy");
                entity.Property(e => e.JrlLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("JRL_LastModifiedDate");
                entity.Property(e => e.JrlLegalEntityId).HasColumnName("JRL_LegalEntity_Id");
                entity.Property(e => e.JrlLocalizableEntryId).HasColumnName("JRL_LocalizableEntry_Id");
                entity.Property(e => e.JrlTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("JRL_TimeStamp");

                entity.HasOne(d => d.JrlBankAccount).WithMany(p => p.Journals)
                    .HasForeignKey(d => d.JrlBankAccountId)
                    .HasConstraintName("FK_Journals_BankAccounts");

                entity.HasOne(d => d.JrlGeneralLedger).WithMany(p => p.Journals)
                    .HasForeignKey(d => d.JrlGeneralLedgerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Journals_GeneralLedgers");

                entity.HasOne(d => d.JrlJournalType).WithMany(p => p.Journals)
                    .HasForeignKey(d => d.JrlJournalTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Journals_JournalTypes");

                entity.HasOne(d => d.JrlLegalEntity).WithMany(p => p.Journals)
                    .HasForeignKey(d => d.JrlLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Journals_LegalEntities");

                entity.HasOne(d => d.JrlLocalizableEntry).WithMany(p => p.Journals)
                    .HasForeignKey(d => d.JrlLocalizableEntryId)
                    .HasConstraintName("FK_Journals_LocalizableEntries");
            });

            modelBuilder.Entity<JournalBalancesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("JournalBalancesView", "fin");

                entity.Property(e => e.Abbreviation).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.ExactAdministration).HasMaxLength(10);
                entity.Property(e => e.ExactJournal).HasMaxLength(10);
                entity.Property(e => e.ExactJournalDescription).HasMaxLength(250);
                entity.Property(e => e.ExactLedgerAccount).HasMaxLength(10);
                entity.Property(e => e.GeneralLedgerDescription).HasMaxLength(250);
                entity.Property(e => e.GeneralLedgerId).HasMaxLength(20);
                entity.Property(e => e.Id).HasMaxLength(20);
                entity.Property(e => e.JournalTypeId).HasMaxLength(10);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.TotalCreditValue).HasColumnType("money");
                entity.Property(e => e.TotalDebitValue).HasColumnType("money");
            });

            modelBuilder.Entity<JournalEntriesPendingExportView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("JournalEntriesPendingExportView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.ExactAdministration).HasMaxLength(10);
                entity.Property(e => e.JournalDate).HasColumnType("date");
                entity.Property(e => e.JournalEntryStatusCode).HasMaxLength(20);
                entity.Property(e => e.JournalEntryStatusName).HasMaxLength(250);
                entity.Property(e => e.JournalId)
                    .HasMaxLength(20)
                    .HasColumnName("Journal_Id");
                entity.Property(e => e.JournalNumber).HasMaxLength(20);
                entity.Property(e => e.JournalTypeId)
                    .HasMaxLength(10)
                    .HasColumnName("JournalType_Id");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<JournalEntriesPendingExportViewOld>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("JournalEntriesPendingExportView_old", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.ExactAdministration).HasMaxLength(10);
                entity.Property(e => e.JournalDate).HasColumnType("date");
                entity.Property(e => e.JournalEntryStatusCode).HasMaxLength(20);
                entity.Property(e => e.JournalEntryStatusName).HasMaxLength(250);
                entity.Property(e => e.JournalId)
                    .HasMaxLength(20)
                    .HasColumnName("Journal_Id");
                entity.Property(e => e.JournalNumber).HasMaxLength(20);
                entity.Property(e => e.JournalTypeId)
                    .HasMaxLength(10)
                    .HasColumnName("JournalType_Id");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<JournalEntriesSuspendedView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("JournalEntriesSuspendedView", "fin");

                entity.Property(e => e.BankAccountAbbreviation).HasMaxLength(20);
                entity.Property(e => e.BankAccountIban)
                    .HasMaxLength(34)
                    .HasColumnName("BankAccountIBAN");
                entity.Property(e => e.BankAccountName).HasMaxLength(250);
                entity.Property(e => e.CostCenterCode).HasMaxLength(10);
                entity.Property(e => e.CostUnitCode).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditValue).HasColumnType("money");
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Date).HasColumnType("date");
                entity.Property(e => e.DebitValue).HasColumnType("money");
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.ExactJournal).HasMaxLength(10);
                entity.Property(e => e.ExactLedger).HasMaxLength(10);
                entity.Property(e => e.GeneralLedgerDescription).HasMaxLength(250);
                entity.Property(e => e.GeneralLedgerId).HasMaxLength(20);
                entity.Property(e => e.InvoiceNumber).HasMaxLength(10);
                entity.Property(e => e.JournalDescription).HasMaxLength(250);
                entity.Property(e => e.JournalId).HasMaxLength(20);
                entity.Property(e => e.JournalNumber).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LinkDate).HasColumnType("date");
                entity.Property(e => e.Notes).HasMaxLength(500);
                entity.Property(e => e.OurReference).HasMaxLength(50);
                entity.Property(e => e.SignedAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(50);
            });

            modelBuilder.Entity<JournalEntriesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("JournalEntriesView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.ExactAdministration).HasMaxLength(10);
                entity.Property(e => e.JournalDate).HasColumnType("date");
                entity.Property(e => e.JournalId)
                    .HasMaxLength(20)
                    .HasColumnName("Journal_Id");
                entity.Property(e => e.JournalNumber).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.TotalCreditValue).HasColumnType("money");
                entity.Property(e => e.TotalDebitValue).HasColumnType("money");
            });

            modelBuilder.Entity<JournalEntry>(entity =>
            {
                entity.HasKey(e => e.JreId);

                entity.ToTable("JournalEntries", "fin");

                entity.HasIndex(e => e.JreJournalNumber, "IX_JournalEntries_JournalNumber");

                entity.HasIndex(e => new { e.JreJournalId, e.JreExactExportDate }, "IX_fin_JournalEntries_Journal_ExactExportDate__INCL");

                entity.Property(e => e.JreId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("JRE_Id");
                entity.Property(e => e.JreCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("JRE_CreatedBy");
                entity.Property(e => e.JreCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("JRE_CreatedDate");
                entity.Property(e => e.JreCreditValue)
                    .HasColumnType("money")
                    .HasColumnName("JRE_CreditValue");
                entity.Property(e => e.JreCurrentStatusCode)
                    .HasMaxLength(20)
                    .HasColumnName("JRE_CurrentStatusCode");
                entity.Property(e => e.JreCurrentStatusHistoryId).HasColumnName("JRE_CurrentStatusHistory_Id");
                entity.Property(e => e.JreCurrentStatusHistoryStartDate).HasColumnName("JRE_CurrentStatusHistoryStartDate");
                entity.Property(e => e.JreDebitValue)
                    .HasColumnType("money")
                    .HasColumnName("JRE_DebitValue");
                entity.Property(e => e.JreExactAdministration)
                    .HasMaxLength(10)
                    .HasColumnName("JRE_ExactAdministration");
                entity.Property(e => e.JreExactExportDate).HasColumnName("JRE_ExactExportDate");
                entity.Property(e => e.JreExchangeRate).HasColumnName("JRE_ExchangeRate");
                entity.Property(e => e.JreExchangeRateId).HasColumnName("JRE_ExchangeRate_Id");
                entity.Property(e => e.JreForeignCreditValue)
                    .HasColumnType("money")
                    .HasColumnName("JRE_ForeignCreditValue");
                entity.Property(e => e.JreForeignCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("JRE_ForeignCurrencyCode");
                entity.Property(e => e.JreForeignDebitValue)
                    .HasColumnType("money")
                    .HasColumnName("JRE_ForeignDebitValue");
                entity.Property(e => e.JreJournalCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("JRE_JournalCurrencyCode");
                entity.Property(e => e.JreJournalDate)
                    .HasColumnType("date")
                    .HasColumnName("JRE_JournalDate");
                entity.Property(e => e.JreJournalId)
                    .HasMaxLength(20)
                    .HasColumnName("JRE_Journal_Id");
                entity.Property(e => e.JreJournalNumber)
                    .HasMaxLength(20)
                    .HasColumnName("JRE_JournalNumber");
                entity.Property(e => e.JreLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("JRE_LastModifiedBy");
                entity.Property(e => e.JreLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("JRE_LastModifiedDate");
                entity.Property(e => e.JreLeadCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("JRE_LeadCurrencyCode");
                entity.Property(e => e.JreTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("JRE_TimeStamp");

                entity.HasOne(d => d.JreExchangeRateNavigation).WithMany(p => p.JournalEntries)
                    .HasForeignKey(d => d.JreExchangeRateId)
                    .HasConstraintName("FK_JournalEntries_ExchangeRates");

                entity.HasOne(d => d.JreJournal).WithMany(p => p.JournalEntries)
                    .HasForeignKey(d => d.JreJournalId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JournalEntries_Journals");
            });

            modelBuilder.Entity<JournalEntryLine>(entity =>
            {
                entity.HasKey(e => e.JelId);

                entity.ToTable("JournalEntryLines", "fin");

                entity.HasIndex(e => e.JelCostCenterCode, "IX_JournalEntryLines_CostCenterCode");

                entity.HasIndex(e => e.JelCostUnitCode, "IX_JournalEntryLines_CostUnitCode");

                entity.HasIndex(e => e.JelCreditorNumber, "IX_JournalEntryLines_CreditorNumber");

                entity.HasIndex(e => e.JelInvoiceNumber, "IX_JournalEntryLines_InvoiceNumber");

                entity.HasIndex(e => e.JelLedgerAccount, "IX_JournalEntryLines_LedgerAccount_INCL");

                entity.HasIndex(e => e.JelJournalEntryId, "IX_fin_JournalEntryLines_JournalEntry_Id__INCL");

                entity.Property(e => e.JelId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("JEL_Id");
                entity.Property(e => e.JelCostCenterCode)
                    .HasMaxLength(10)
                    .HasColumnName("JEL_CostCenterCode");
                entity.Property(e => e.JelCostUnitCode)
                    .HasMaxLength(10)
                    .HasColumnName("JEL_CostUnitCode");
                entity.Property(e => e.JelCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("JEL_CreatedBy");
                entity.Property(e => e.JelCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("JEL_CreatedDate");
                entity.Property(e => e.JelCreditValue)
                    .HasColumnType("money")
                    .HasColumnName("JEL_CreditValue");
                entity.Property(e => e.JelCreditorId).HasColumnName("JEL_Creditor_Id");
                entity.Property(e => e.JelCreditorNumber)
                    .HasMaxLength(20)
                    .HasColumnName("JEL_CreditorNumber");
                entity.Property(e => e.JelCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("JEL_CurrencyCode");
                entity.Property(e => e.JelDate)
                    .HasColumnType("date")
                    .HasColumnName("JEL_Date");
                entity.Property(e => e.JelDebitValue)
                    .HasColumnType("money")
                    .HasColumnName("JEL_DebitValue");
                entity.Property(e => e.JelDebtorId).HasColumnName("JEL_Debtor_Id");
                entity.Property(e => e.JelDebtorNumber)
                    .HasMaxLength(20)
                    .HasColumnName("JEL_DebtorNumber");
                entity.Property(e => e.JelDescription)
                    .HasMaxLength(250)
                    .HasColumnName("JEL_Description");
                entity.Property(e => e.JelEntrySubType)
                    .HasMaxLength(1)
                    .HasColumnName("JEL_EntrySubType");
                entity.Property(e => e.JelEntryType)
                    .HasMaxLength(1)
                    .HasColumnName("JEL_EntryType");
                entity.Property(e => e.JelForeignCreditValue)
                    .HasColumnType("money")
                    .HasColumnName("JEL_ForeignCreditValue");
                entity.Property(e => e.JelForeignCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("JEL_ForeignCurrencyCode");
                entity.Property(e => e.JelForeignDebitValue)
                    .HasColumnType("money")
                    .HasColumnName("JEL_ForeignDebitValue");
                entity.Property(e => e.JelForeignTaxValue)
                    .HasColumnType("money")
                    .HasColumnName("JEL_ForeignTaxValue");
                entity.Property(e => e.JelInvoiceNumber)
                    .HasMaxLength(10)
                    .HasColumnName("JEL_InvoiceNumber");
                entity.Property(e => e.JelJournalEntryId).HasColumnName("JEL_JournalEntry_Id");
                entity.Property(e => e.JelLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("JEL_LastModifiedBy");
                entity.Property(e => e.JelLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("JEL_LastModifiedDate");
                entity.Property(e => e.JelLedgerAccount)
                    .HasMaxLength(20)
                    .HasColumnName("JEL_LedgerAccount");
                entity.Property(e => e.JelLinkDate)
                    .HasColumnType("date")
                    .HasColumnName("JEL_LinkDate");
                entity.Property(e => e.JelLinkId).HasColumnName("JEL_LinkId");
                entity.Property(e => e.JelOurReference)
                    .HasMaxLength(50)
                    .HasColumnName("JEL_OurReference");
                entity.Property(e => e.JelSequenceNumber).HasColumnName("JEL_SequenceNumber");
                entity.Property(e => e.JelTaxCode)
                    .HasMaxLength(10)
                    .HasColumnName("JEL_TaxCode");
                entity.Property(e => e.JelTaxValue)
                    .HasColumnType("money")
                    .HasColumnName("JEL_TaxValue");
                entity.Property(e => e.JelTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("JEL_TimeStamp");
                entity.Property(e => e.JelYourReference)
                    .HasMaxLength(50)
                    .HasColumnName("JEL_YourReference");

                entity.HasOne(d => d.JelCreditor).WithMany(p => p.JournalEntryLines)
                    .HasForeignKey(d => d.JelCreditorId)
                    .HasConstraintName("FK_JournalEntryLines_Creditors");

                entity.HasOne(d => d.JelDebtor).WithMany(p => p.JournalEntryLines)
                    .HasForeignKey(d => d.JelDebtorId)
                    .HasConstraintName("FK_JournalEntryLines_Debtors");

                entity.HasOne(d => d.JelJournalEntry).WithMany(p => p.JournalEntryLines)
                    .HasForeignKey(d => d.JelJournalEntryId)
                    .HasConstraintName("FK_JournalEntryLines_JournalEntries");
            });

            modelBuilder.Entity<JournalEntryLinesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("JournalEntryLinesView", "fin");

                entity.Property(e => e.CostCenterCode).HasMaxLength(10);
                entity.Property(e => e.CostUnitCode).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditValue).HasColumnType("money");
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Date).HasColumnType("date");
                entity.Property(e => e.DebitValue).HasColumnType("money");
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.ExactJournal).HasMaxLength(10);
                entity.Property(e => e.ExactLedger).HasMaxLength(10);
                entity.Property(e => e.GeneralLedgerDescription).HasMaxLength(250);
                entity.Property(e => e.GeneralLedgerId).HasMaxLength(20);
                entity.Property(e => e.InvoiceNumber).HasMaxLength(10);
                entity.Property(e => e.JournalDescription).HasMaxLength(250);
                entity.Property(e => e.JournalId).HasMaxLength(20);
                entity.Property(e => e.JournalNumber).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LinkDate).HasColumnType("date");
                entity.Property(e => e.OurReference).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(50);
            });

            modelBuilder.Entity<JournalEntryStatus>(entity =>
            {
                entity.HasKey(e => e.JesId);

                entity.ToTable("JournalEntryStatuses", "fin");

                entity.Property(e => e.JesId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("JES_Id");
                entity.Property(e => e.JesCode)
                    .HasMaxLength(20)
                    .HasColumnName("JES_Code");
                entity.Property(e => e.JesCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("JES_CreatedBy");
                entity.Property(e => e.JesCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("JES_CreatedDate");
                entity.Property(e => e.JesInactive).HasColumnName("JES_Inactive");
                entity.Property(e => e.JesLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("JES_LastModifiedBy");
                entity.Property(e => e.JesLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("JES_LastModifiedDate");
                entity.Property(e => e.JesLocalizableEntryId).HasColumnName("JES_LocalizableEntry_Id");
                entity.Property(e => e.JesLongName)
                    .HasMaxLength(250)
                    .HasColumnName("JES_LongName");
                entity.Property(e => e.JesShortName)
                    .HasMaxLength(30)
                    .HasColumnName("JES_ShortName");
                entity.Property(e => e.JesTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("JES_TimeStamp");

                entity.HasOne(d => d.JesLocalizableEntry).WithMany(p => p.JournalEntryStatuses)
                    .HasForeignKey(d => d.JesLocalizableEntryId)
                    .HasConstraintName("FK_JournalEntryStatuses_LocalizableEntries");
            });

            modelBuilder.Entity<JournalEntryStatusHistory>(entity =>
            {
                entity.HasKey(e => e.JeshId);

                entity.ToTable("JournalEntryStatusHistory", "fin", tb =>
                {
                    tb.HasTrigger("td_JournalEntryStatusHistory");
                    tb.HasTrigger("ti_JournalEntryStatusHistory");
                    tb.HasTrigger("tu_JournalEntryStatusHistory");
                });

                entity.HasIndex(e => e.JeshJournalEntryId, "IX_JournalEntryStatusHistory_JournalEntry_Id");

                entity.Property(e => e.JeshId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("JESH_Id");
                entity.Property(e => e.JeshCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("JESH_CreatedBy");
                entity.Property(e => e.JeshCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("JESH_CreatedDate");
                entity.Property(e => e.JeshEmployeeId).HasColumnName("JESH_Employee_Id");
                entity.Property(e => e.JeshJournalEntryId).HasColumnName("JESH_JournalEntry_Id");
                entity.Property(e => e.JeshJournalEntryStatusId).HasColumnName("JESH_JournalEntryStatus_Id");
                entity.Property(e => e.JeshLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("JESH_LastModifiedBy");
                entity.Property(e => e.JeshLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("JESH_LastModifiedDate");
                entity.Property(e => e.JeshStartDate).HasColumnName("JESH_StartDate");
                entity.Property(e => e.JeshStatusChangeReason).HasColumnName("JESH_StatusChangeReason");
                entity.Property(e => e.JeshStatusSource).HasColumnName("JESH_StatusSource");
                entity.Property(e => e.JeshTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("JESH_TimeStamp");

                entity.HasOne(d => d.JeshEmployee).WithMany(p => p.JournalEntryStatusHistories)
                    .HasForeignKey(d => d.JeshEmployeeId)
                    .HasConstraintName("FK_JournalEntryStatusHistory_Employees");

                entity.HasOne(d => d.JeshJournalEntry).WithMany(p => p.JournalEntryStatusHistories)
                    .HasForeignKey(d => d.JeshJournalEntryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JournalEntryStatusHistory_JournalEntries");

                entity.HasOne(d => d.JeshJournalEntryStatus).WithMany(p => p.JournalEntryStatusHistories)
                    .HasForeignKey(d => d.JeshJournalEntryStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JournalEntryStatusHistory_JournalEntryStatuses");
            });

            modelBuilder.Entity<JournalGeneralLedgerBalancesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("JournalGeneralLedgerBalancesView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.ExactAdministration).HasMaxLength(10);
                entity.Property(e => e.ExactJournal).HasMaxLength(10);
                entity.Property(e => e.ExactJournalDescription).HasMaxLength(250);
                entity.Property(e => e.ExactLedgerAccount).HasMaxLength(10);
                entity.Property(e => e.Gldescription)
                    .HasMaxLength(250)
                    .HasColumnName("GLDescription");
                entity.Property(e => e.GlnumberOfLines).HasColumnName("GLNumberOfLines");
                entity.Property(e => e.GltotalCreditValue)
                    .HasColumnType("money")
                    .HasColumnName("GLTotalCreditValue");
                entity.Property(e => e.GltotalDebitValue)
                    .HasColumnType("money")
                    .HasColumnName("GLTotalDebitValue");
                entity.Property(e => e.Id).HasMaxLength(20);
                entity.Property(e => e.JournalAbbreviation).HasMaxLength(20);
                entity.Property(e => e.JournalDescription).HasMaxLength(250);
                entity.Property(e => e.JournalId).HasMaxLength(20);
                entity.Property(e => e.JournalTotalCreditValue).HasColumnType("money");
                entity.Property(e => e.JournalTotalDebitValue).HasColumnType("money");
                entity.Property(e => e.JournalTypeId).HasMaxLength(10);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<JournalSetting>(entity =>
            {
                entity.HasKey(e => e.JlsId).HasName("PK_JournalSetings");

                entity.ToTable("JournalSettings", "fin");

                entity.Property(e => e.JlsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("JLS_Id");
                entity.Property(e => e.JlsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("JLS_CreatedBy");
                entity.Property(e => e.JlsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("JLS_CreatedDate");
                entity.Property(e => e.JlsEffectiveDate)
                    .HasDefaultValueSql("(getutcdate())")
                    .HasColumnType("date")
                    .HasColumnName("JLS_EffectiveDate");
                entity.Property(e => e.JlsEntrySystem)
                    .HasMaxLength(10)
                    .HasColumnName("JLS_EntrySystem");
                entity.Property(e => e.JlsGeneralLedgerId)
                    .HasMaxLength(20)
                    .HasColumnName("JLS_GeneralLedger_Id");
                entity.Property(e => e.JlsJournalId)
                    .HasMaxLength(20)
                    .HasColumnName("JLS_Journal_Id");
                entity.Property(e => e.JlsJournalSettingTypeId)
                    .HasMaxLength(50)
                    .HasColumnName("JLS_JournalSettingType_Id");
                entity.Property(e => e.JlsLastModifiedBy)
                    .HasMaxLength(200)
                    .HasColumnName("JLS_LastModifiedBy");
                entity.Property(e => e.JlsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("JLS_LastModifiedDate");
                entity.Property(e => e.JlsLegalEntityId).HasColumnName("JLS_LegalEntity_Id");
                entity.Property(e => e.JlsTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("JLS_TerminationDate");
                entity.Property(e => e.JlsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("JLS_TimeStamp");
                entity.Property(e => e.JlsZeroRateForeignTaxCode)
                    .HasMaxLength(10)
                    .HasColumnName("JLS_ZeroRateForeignTaxCode");

                entity.HasOne(d => d.JlsJournal).WithMany(p => p.JournalSettings)
                    .HasForeignKey(d => d.JlsJournalId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JournalSettings_Journals");

                entity.HasOne(d => d.JlsJournalSettingType).WithMany(p => p.JournalSettings)
                    .HasForeignKey(d => d.JlsJournalSettingTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JournalSettings_JournalSettingTypes");

                entity.HasOne(d => d.JlsLegalEntity).WithMany(p => p.JournalSettings)
                    .HasForeignKey(d => d.JlsLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JournalSettings_LegalEntities");
            });

            modelBuilder.Entity<JournalSettingType>(entity =>
            {
                entity.HasKey(e => e.JltId);

                entity.ToTable("JournalSettingTypes", "fin");

                entity.Property(e => e.JltId)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("JLT_Id");
                entity.Property(e => e.JltCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("JLT_CreatedBy");
                entity.Property(e => e.JltCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("JLT_CreatedDate");
                entity.Property(e => e.JltDescription)
                    .HasMaxLength(250)
                    .HasColumnName("JLT_Description");
                entity.Property(e => e.JltInactive).HasColumnName("JLT_Inactive");
                entity.Property(e => e.JltLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("JLT_LastModifiedBy");
                entity.Property(e => e.JltLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("JLT_LastModifiedDate");
                entity.Property(e => e.JltLocalizableEntryId).HasColumnName("JLT_LocalizableEntry_Id");
                entity.Property(e => e.JltTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("JLT_TimeStamp");

                entity.HasOne(d => d.JltLocalizableEntry).WithMany(p => p.JournalSettingTypes)
                    .HasForeignKey(d => d.JltLocalizableEntryId)
                    .HasConstraintName("FK_JournalSettingTypes_LocalizableEntries");
            });

            modelBuilder.Entity<JournalType>(entity =>
            {
                entity.HasKey(e => e.JrtId);

                entity.ToTable("JournalTypes", "fin");

                entity.Property(e => e.JrtId)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("JRT_Id");
                entity.Property(e => e.JrtAbbreviation)
                    .HasMaxLength(20)
                    .HasColumnName("JRT_Abbreviation");
                entity.Property(e => e.JrtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("JRT_CreatedBy");
                entity.Property(e => e.JrtCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("JRT_CreatedDate");
                entity.Property(e => e.JrtDescription)
                    .HasMaxLength(250)
                    .HasColumnName("JRT_Description");
                entity.Property(e => e.JrtExactType).HasColumnName("JRT_ExactType");
                entity.Property(e => e.JrtInactive).HasColumnName("JRT_Inactive");
                entity.Property(e => e.JrtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("JRT_LastModifiedBy");
                entity.Property(e => e.JrtLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("JRT_LastModifiedDate");
                entity.Property(e => e.JrtLocalizableEntryId).HasColumnName("JRT_LocalizableEntry_Id");
                entity.Property(e => e.JrtTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("JRT_TimeStamp");

                entity.HasOne(d => d.JrtLocalizableEntry).WithMany(p => p.JournalTypes)
                    .HasForeignKey(d => d.JrtLocalizableEntryId)
                    .HasConstraintName("FK_JournalTypes_LocalizableEntries");
            });

            modelBuilder.Entity<JournalsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("JournalsView", "fin");

                entity.Property(e => e.Abbreviation).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.ExactAdministration).HasMaxLength(10);
                entity.Property(e => e.ExactJournal).HasMaxLength(10);
                entity.Property(e => e.GeneralLedgerId).HasMaxLength(20);
                entity.Property(e => e.Id).HasMaxLength(20);
                entity.Property(e => e.JournalTypeId).HasMaxLength(10);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<KeyPerformanceIndicatorTrigger>(entity =>
            {
                entity.HasKey(e => e.KpitId);

                entity.ToTable("KeyPerformanceIndicatorTriggers", "kpi");

                entity.Property(e => e.KpitId)
                    .ValueGeneratedNever()
                    .HasColumnName("KPIT_Id");
                entity.Property(e => e.KpitActualTimeKpitook).HasColumnName("KPIT_ActualTimeKPITook");
                entity.Property(e => e.KpitAssignmentId).HasColumnName("KPIT_Assignment_Id");
                entity.Property(e => e.KpitCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("KPIT_CreatedBy");
                entity.Property(e => e.KpitCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("KPIT_CreatedDate");
                entity.Property(e => e.KpitDossierId).HasColumnName("KPIT_Dossier_Id");
                entity.Property(e => e.KpitInactive).HasColumnName("KPIT_Inactive");
                entity.Property(e => e.KpitKpiId).HasColumnName("KPIT_KPI_Id");
                entity.Property(e => e.KpitKpiMet).HasColumnName("KPIT_KPI_Met");
                entity.Property(e => e.KpitKpistartTriggerDate).HasColumnName("KPIT_KPIStartTriggerDate");
                entity.Property(e => e.KpitLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("KPIT_LastModifiedBy");
                entity.Property(e => e.KpitLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("KPIT_LastModifiedDate");
                entity.Property(e => e.KpitProductId).HasColumnName("KPIT_Product_Id");
                entity.Property(e => e.KpitRepetitionNumber).HasColumnName("KPIT_RepetitionNumber");
                entity.Property(e => e.KpitTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("KPIT_TimeStamp");

                entity.HasOne(d => d.KpitAssignment).WithMany(p => p.KeyPerformanceIndicatorTriggers)
                    .HasForeignKey(d => d.KpitAssignmentId)
                    .HasConstraintName("FK_KeyPerformanceIndicatorTriggers_KPIT_Assignment_Id");

                entity.HasOne(d => d.KpitDossier).WithMany(p => p.KeyPerformanceIndicatorTriggers)
                    .HasForeignKey(d => d.KpitDossierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KeyPerformanceIndicatorTriggers_KPIT_Dossier_Id");

                entity.HasOne(d => d.KpitProduct).WithMany(p => p.KeyPerformanceIndicatorTriggers)
                    .HasForeignKey(d => d.KpitProductId)
                    .HasConstraintName("FK_KeyPerformanceIndicatorTriggers_KPIT_Product_Id");
            });

            modelBuilder.Entity<KpiLog>(entity =>
            {
                entity.HasKey(e => e.KdlId);

                entity.ToTable("KpiLog", "kpi");

                entity.Property(e => e.KdlId)
                    .ValueGeneratedNever()
                    .HasColumnName("KDL_Id");
                entity.Property(e => e.KdlAssignmentId).HasColumnName("KDL_AssignmentId");
                entity.Property(e => e.KdlCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("KDL_CreatedBy");
                entity.Property(e => e.KdlCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("KDL_CreatedDate");
                entity.Property(e => e.KdlDossierId).HasColumnName("KDL_DossierId");
                entity.Property(e => e.KdlKpiId).HasColumnName("KDL_KpiId");
                entity.Property(e => e.KdlLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("KDL_LastModifiedBy");
                entity.Property(e => e.KdlLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("KDL_LastModifiedDate");
                entity.Property(e => e.KdlLogMessage).HasColumnName("KDL_LogMessage");
                entity.Property(e => e.KdlTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("KDL_TimeStamp");
            });

            modelBuilder.Entity<LatestBankStatementsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LatestBankStatementsView", "fin");

                entity.Property(e => e.AccountName).HasMaxLength(250);
                entity.Property(e => e.ClosingBalanceDate).HasColumnType("date");
                entity.Property(e => e.ClosingBalanceValue).HasColumnType("money");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.ExactAdministration).HasMaxLength(10);
                entity.Property(e => e.ExactJournal).HasMaxLength(10);
                entity.Property(e => e.Iban)
                    .HasMaxLength(34)
                    .HasColumnName("IBAN");
                entity.Property(e => e.JournalId).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.OpeningBalanceDate).HasColumnType("date");
                entity.Property(e => e.OpeningBalanceValue).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<LcmexpiredPurchaseOrdersView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LCMExpiredPurchaseOrdersView", "fin");

                entity.Property(e => e.OrderNumber).HasMaxLength(10);
            });

            modelBuilder.Entity<LeasingCompany>(entity =>
            {
                entity.HasKey(e => e.LcId);

                entity.ToTable("LeasingCompanies", "mdm");

                entity.Property(e => e.LcId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("LC_Id");
                entity.Property(e => e.LcCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LC_CreatedBy");
                entity.Property(e => e.LcCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("LC_CreatedDate");
                entity.Property(e => e.LcCultureCodePreferredLanguage)
                    .HasMaxLength(10)
                    .HasColumnName("LC_CultureCodePreferredLanguage");
                entity.Property(e => e.LcExternalCode)
                    .HasMaxLength(10)
                    .HasColumnName("LC_ExternalCode");
                entity.Property(e => e.LcInactive).HasColumnName("LC_Inactive");
                entity.Property(e => e.LcLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LC_LastModifiedBy");
                entity.Property(e => e.LcLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("LC_LastModifiedDate");
                entity.Property(e => e.LcTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("LC_TimeStamp");

                entity.HasOne(d => d.Lc).WithOne(p => p.LeasingCompany)
                    .HasForeignKey<LeasingCompany>(d => d.LcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LeasingCompanies_OrganizationUnits");
            });

            modelBuilder.Entity<LeasingCompanyAlarmCenter>(entity =>
            {
                entity.HasKey(e => e.LcaId);

                entity.ToTable("LeasingCompanyAlarmCenters", "mdm");

                entity.Property(e => e.LcaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("LCA_Id");
                entity.Property(e => e.LcaAlarmCenterId).HasColumnName("LCA_AlarmCenter_Id");
                entity.Property(e => e.LcaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LCA_CreatedBy");
                entity.Property(e => e.LcaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("LCA_CreatedDate");
                entity.Property(e => e.LcaInactive).HasColumnName("LCA_Inactive");
                entity.Property(e => e.LcaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LCA_LastModifiedBy");
                entity.Property(e => e.LcaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("LCA_LastModifiedDate");
                entity.Property(e => e.LcaLeasingCompanyId).HasColumnName("LCA_LeasingCompany_Id");
                entity.Property(e => e.LcaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("LCA_TimeStamp");

                entity.HasOne(d => d.LcaAlarmCenter).WithMany(p => p.LeasingCompanyAlarmCenters)
                    .HasForeignKey(d => d.LcaAlarmCenterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LeasingCompanyAlarmCenters_AlarmCenters");

                entity.HasOne(d => d.LcaLeasingCompany).WithMany(p => p.LeasingCompanyAlarmCenters)
                    .HasForeignKey(d => d.LcaLeasingCompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LeasingCompanyAlarmCenters_LeasingCompanies");
            });

            modelBuilder.Entity<LedgerSetting>(entity =>
            {
                entity.HasKey(e => e.GlsId).HasName("PK_LedgerSetings");

                entity.ToTable("LedgerSettings", "fin");

                entity.Property(e => e.GlsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("GLS_Id");
                entity.Property(e => e.GlsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("GLS_CreatedBy");
                entity.Property(e => e.GlsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("GLS_CreatedDate");
                entity.Property(e => e.GlsEffectiveDate)
                    .HasDefaultValueSql("('2010-01-01')")
                    .HasColumnType("date")
                    .HasColumnName("GLS_EffectiveDate");
                entity.Property(e => e.GlsEntrySystem)
                    .HasMaxLength(10)
                    .HasColumnName("GLS_EntrySystem");
                entity.Property(e => e.GlsFundingGeneralLedgerId)
                    .HasMaxLength(20)
                    .HasColumnName("GLS_FundingGeneralLedger_Id");
                entity.Property(e => e.GlsFundingJournalId)
                    .HasMaxLength(20)
                    .HasColumnName("GLS_FundingJournal_Id");
                entity.Property(e => e.GlsLastModifiedBy)
                    .HasMaxLength(200)
                    .HasColumnName("GLS_LastModifiedBy");
                entity.Property(e => e.GlsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("GLS_LastModifiedDate");
                entity.Property(e => e.GlsLegalEntityId).HasColumnName("GLS_LegalEntity_Id");
                entity.Property(e => e.GlsPaymentInTransitCurrency1)
                    .HasMaxLength(20)
                    .HasColumnName("GLS_PaymentInTransitCurrency1");
                entity.Property(e => e.GlsPaymentInTransitCurrency2)
                    .HasMaxLength(20)
                    .HasColumnName("GLS_PaymentInTransitCurrency2");
                entity.Property(e => e.GlsPaymentInTransitCurrency3)
                    .HasMaxLength(20)
                    .HasColumnName("GLS_PaymentInTransitCurrency3");
                entity.Property(e => e.GlsPaymentInTransitCurrency4)
                    .HasMaxLength(20)
                    .HasColumnName("GLS_PaymentInTransitCurrency4");
                entity.Property(e => e.GlsPaymentInTransitExchangeRateDifference)
                    .HasMaxLength(20)
                    .HasColumnName("GLS_PaymentInTransitExchangeRateDifference");
                entity.Property(e => e.GlsPaymentInTransitForeignCurrency)
                    .HasMaxLength(20)
                    .HasColumnName("GLS_PaymentInTransitForeignCurrency");
                entity.Property(e => e.GlsPaymentInTransitLocalCurrency)
                    .HasMaxLength(20)
                    .HasColumnName("GLS_PaymentInTransitLocalCurrency");
                entity.Property(e => e.GlsRecoveryGeneralLedgerId)
                    .HasMaxLength(20)
                    .HasColumnName("GLS_RecoveryGeneralLedger_Id");
                entity.Property(e => e.GlsSalesExchangeRateDifference)
                    .HasMaxLength(20)
                    .HasColumnName("GLS_SalesExchangeRateDifference");
                entity.Property(e => e.GlsTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("GLS_TerminationDate");
                entity.Property(e => e.GlsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("GLS_TimeStamp");

                entity.HasOne(d => d.GlsFundingGeneralLedger).WithMany(p => p.LedgerSettingGlsFundingGeneralLedgers)
                    .HasForeignKey(d => d.GlsFundingGeneralLedgerId)
                    .HasConstraintName("FK_LedgerSettings_FundingGeneralLedgers");

                entity.HasOne(d => d.GlsFundingJournal).WithMany(p => p.LedgerSettings)
                    .HasForeignKey(d => d.GlsFundingJournalId)
                    .HasConstraintName("FK_LedgerSettings_FundingJournals");

                entity.HasOne(d => d.GlsLegalEntity).WithMany(p => p.LedgerSettings)
                    .HasForeignKey(d => d.GlsLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LedgerSettings_LegalEntities");

                entity.HasOne(d => d.GlsPaymentInTransitExchangeRateDifferenceNavigation).WithMany(p => p.LedgerSettingGlsPaymentInTransitExchangeRateDifferenceNavigations)
                    .HasForeignKey(d => d.GlsPaymentInTransitExchangeRateDifference)
                    .HasConstraintName("FK_LedgerSettings_PaymentInTransitExchangeRateDifference");

                entity.HasOne(d => d.GlsPaymentInTransitForeignCurrencyNavigation).WithMany(p => p.LedgerSettingGlsPaymentInTransitForeignCurrencyNavigations)
                    .HasForeignKey(d => d.GlsPaymentInTransitForeignCurrency)
                    .HasConstraintName("FK_LedgerSettings_PaymentInTransitForeignCurrencyGeneralLedgers");

                entity.HasOne(d => d.GlsPaymentInTransitLocalCurrencyNavigation).WithMany(p => p.LedgerSettingGlsPaymentInTransitLocalCurrencyNavigations)
                    .HasForeignKey(d => d.GlsPaymentInTransitLocalCurrency)
                    .HasConstraintName("FK_LedgerSettings_PaymentInTransitLocalCurrencyGeneralLedgers");

                entity.HasOne(d => d.GlsRecoveryGeneralLedger).WithMany(p => p.LedgerSettingGlsRecoveryGeneralLedgers)
                    .HasForeignKey(d => d.GlsRecoveryGeneralLedgerId)
                    .HasConstraintName("FK_LedgerSettings_RecoveryGeneralLedgers");

                entity.HasOne(d => d.GlsSalesExchangeRateDifferenceNavigation).WithMany(p => p.LedgerSettingGlsSalesExchangeRateDifferenceNavigations)
                    .HasForeignKey(d => d.GlsSalesExchangeRateDifference)
                    .HasConstraintName("FK_LedgerSettings_SalesExchangeRateDifference");
            });

            modelBuilder.Entity<LegalEntitiesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LegalEntitiesView", "ced");

                entity.Property(e => e.City).HasMaxLength(250);
                entity.Property(e => e.CountryCode).HasMaxLength(3);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.ExactAdministration).HasMaxLength(10);
                entity.Property(e => e.HouseNo).HasMaxLength(10);
                entity.Property(e => e.HouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityAbbreviation).HasMaxLength(20);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.PostalCode).HasMaxLength(10);
                entity.Property(e => e.Province).HasMaxLength(250);
                entity.Property(e => e.StreetName).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VatNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<LegalEntity>(entity =>
            {
                entity.HasKey(e => e.LeId);

                entity.ToTable("LegalEntities", "ced");

                entity.HasIndex(e => e.LeExactAdministration, "IX_LegalEntities_ExactAdministration");

                entity.Property(e => e.LeId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("LE_Id");
                entity.Property(e => e.LeConsolidationCreditorNumber)
                    .HasMaxLength(20)
                    .HasColumnName("LE_ConsolidationCreditorNumber");
                entity.Property(e => e.LeConsolidationDebtorNumber)
                    .HasMaxLength(20)
                    .HasColumnName("LE_ConsolidationDebtorNumber");
                entity.Property(e => e.LeCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LE_CreatedBy");
                entity.Property(e => e.LeCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("LE_CreatedDate");
                entity.Property(e => e.LeCreditPurchaseJournalId)
                    .HasMaxLength(20)
                    .HasColumnName("LE_CreditPurchaseJournal_Id");
                entity.Property(e => e.LeCreditSalesJournalId)
                    .HasMaxLength(20)
                    .HasColumnName("LE_CreditSalesJournal_Id");
                entity.Property(e => e.LeCurrencyCode)
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('EUR')")
                    .HasColumnName("LE_CurrencyCode");
                entity.Property(e => e.LeDefaultBankAccountId).HasColumnName("LE_DefaultBankAccount_Id");
                entity.Property(e => e.LeDefaultPaymentConditionId).HasColumnName("LE_DefaultPaymentCondition_Id");
                entity.Property(e => e.LeDocumentNamePrefix)
                    .HasMaxLength(10)
                    .HasColumnName("LE_DocumentNamePrefix");
                entity.Property(e => e.LeEqualizationSuspenseAccount)
                    .HasMaxLength(20)
                    .HasColumnName("LE_EqualizationSuspenseAccount");
                entity.Property(e => e.LeExactAdministration)
                    .HasMaxLength(10)
                    .HasColumnName("LE_ExactAdministration");
                entity.Property(e => e.LeFiscalEntityId).HasColumnName("LE_FiscalEntity_Id");
                entity.Property(e => e.LeGeneralDebtorNumberExternal)
                    .HasMaxLength(20)
                    .HasColumnName("LE_GeneralDebtorNumberExternal");
                entity.Property(e => e.LeGeneralDebtorNumberInternal)
                    .HasMaxLength(20)
                    .HasColumnName("LE_GeneralDebtorNumberInternal");
                entity.Property(e => e.LeGeneralSupplierId).HasColumnName("LE_GeneralSupplier_Id");
                entity.Property(e => e.LeLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LE_LastModifiedBy");
                entity.Property(e => e.LeLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("LE_LastModifiedDate");
                entity.Property(e => e.LeLegalEntityTypeId).HasColumnName("LE_LegalEntityType_Id");
                entity.Property(e => e.LePrepaymentSuspenseAccount)
                    .HasMaxLength(20)
                    .HasColumnName("LE_PrepaymentSuspenseAccount");
                entity.Property(e => e.LePurchaseJournalId)
                    .HasMaxLength(20)
                    .HasColumnName("LE_PurchaseJournal_Id");
                entity.Property(e => e.LePurchaseMemorialJournalId)
                    .HasMaxLength(20)
                    .HasColumnName("LE_PurchaseMemorialJournal_Id");
                entity.Property(e => e.LeSalesJournalId)
                    .HasMaxLength(20)
                    .HasColumnName("LE_SalesJournal_Id");
                entity.Property(e => e.LeTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("LE_TimeStamp");

                entity.HasOne(d => d.LeCreditPurchaseJournal).WithMany(p => p.LegalEntityLeCreditPurchaseJournals)
                    .HasForeignKey(d => d.LeCreditPurchaseJournalId)
                    .HasConstraintName("FK_LegalEntities_CreditPurchaseJournals");

                entity.HasOne(d => d.LeCreditSalesJournal).WithMany(p => p.LegalEntityLeCreditSalesJournals)
                    .HasForeignKey(d => d.LeCreditSalesJournalId)
                    .HasConstraintName("FK_LegalEntities_CreditSalesJournals");

                entity.HasOne(d => d.LeDefaultBankAccount).WithMany(p => p.LegalEntities)
                    .HasForeignKey(d => d.LeDefaultBankAccountId)
                    .HasConstraintName("FK_LegalEntities_BankAccounts");

                entity.HasOne(d => d.LeDefaultPaymentCondition).WithMany(p => p.LegalEntities)
                    .HasForeignKey(d => d.LeDefaultPaymentConditionId)
                    .HasConstraintName("FK_LegalEntities_PaymentConditions");

                entity.HasOne(d => d.LeFiscalEntity).WithMany(p => p.LegalEntities)
                    .HasForeignKey(d => d.LeFiscalEntityId)
                    .HasConstraintName("FK_LegalEntities_FiscalEntities");

                entity.HasOne(d => d.LeGeneralSupplier).WithMany(p => p.LegalEntities)
                    .HasForeignKey(d => d.LeGeneralSupplierId)
                    .HasConstraintName("FK_LegalEntities_Suppliers");

                entity.HasOne(d => d.Le).WithOne(p => p.LegalEntity)
                    .HasForeignKey<LegalEntity>(d => d.LeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LegalEntities_OrganizationUnits");

                entity.HasOne(d => d.LeLegalEntityType).WithMany(p => p.LegalEntities)
                    .HasForeignKey(d => d.LeLegalEntityTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LegalEntities_LegalEntityTypes");

                entity.HasOne(d => d.LePurchaseJournal).WithMany(p => p.LegalEntityLePurchaseJournals)
                    .HasForeignKey(d => d.LePurchaseJournalId)
                    .HasConstraintName("FK_LegalEntities_PurchaseJournals");

                entity.HasOne(d => d.LeSalesJournal).WithMany(p => p.LegalEntityLeSalesJournals)
                    .HasForeignKey(d => d.LeSalesJournalId)
                    .HasConstraintName("FK_LegalEntities_SalesJournals");
            });

            modelBuilder.Entity<LegalEntity1>(entity =>
            {
                entity.HasKey(e => e.LeId);

                entity.ToTable("LegalEntities", "stg");

                entity.Property(e => e.LeId)
                    .ValueGeneratedNever()
                    .HasColumnName("LE_Id");
                entity.Property(e => e.LeConsolidationCreditorNumber)
                    .HasMaxLength(20)
                    .HasColumnName("LE_ConsolidationCreditorNumber");
                entity.Property(e => e.LeConsolidationDebtorNumber)
                    .HasMaxLength(20)
                    .HasColumnName("LE_ConsolidationDebtorNumber");
                entity.Property(e => e.LeCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LE_CreatedBy");
                entity.Property(e => e.LeCreatedDate).HasColumnName("LE_CreatedDate");
                entity.Property(e => e.LeCreditPurchaseJournalId)
                    .HasMaxLength(20)
                    .HasColumnName("LE_CreditPurchaseJournal_Id");
                entity.Property(e => e.LeCreditSalesJournalId)
                    .HasMaxLength(20)
                    .HasColumnName("LE_CreditSalesJournal_Id");
                entity.Property(e => e.LeCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("LE_CurrencyCode");
                entity.Property(e => e.LeDefaultBankAccountId).HasColumnName("LE_DefaultBankAccount_Id");
                entity.Property(e => e.LeDefaultPaymentConditionId).HasColumnName("LE_DefaultPaymentCondition_Id");
                entity.Property(e => e.LeDocumentNamePrefix)
                    .HasMaxLength(10)
                    .HasColumnName("LE_DocumentNamePrefix");
                entity.Property(e => e.LeEqualizationSuspenseAccount)
                    .HasMaxLength(20)
                    .HasColumnName("LE_EqualizationSuspenseAccount");
                entity.Property(e => e.LeExactAdministration)
                    .HasMaxLength(10)
                    .HasColumnName("LE_ExactAdministration");
                entity.Property(e => e.LeFiscalEntityId).HasColumnName("LE_FiscalEntity_Id");
                entity.Property(e => e.LeGeneralSupplierId).HasColumnName("LE_GeneralSupplier_Id");
                entity.Property(e => e.LeLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LE_LastModifiedBy");
                entity.Property(e => e.LeLastModifiedDate).HasColumnName("LE_LastModifiedDate");
                entity.Property(e => e.LeLegalEntityTypeId).HasColumnName("LE_LegalEntityType_Id");
                entity.Property(e => e.LePrepaymentSuspenseAccount)
                    .HasMaxLength(20)
                    .HasColumnName("LE_PrepaymentSuspenseAccount");
                entity.Property(e => e.LePurchaseJournalId)
                    .HasMaxLength(20)
                    .HasColumnName("LE_PurchaseJournal_Id");
                entity.Property(e => e.LePurchaseMemorialJournalId)
                    .HasMaxLength(20)
                    .HasColumnName("LE_PurchaseMemorialJournal_Id");
                entity.Property(e => e.LeSalesJournalId)
                    .HasMaxLength(20)
                    .HasColumnName("LE_SalesJournal_Id");
                entity.Property(e => e.LeTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("LE_TimeStamp");
            });

            modelBuilder.Entity<LegalEntityAccount>(entity =>
            {
                entity.HasKey(e => e.LeaId);

                entity.ToTable("LegalEntityAccounts", "ced");

                entity.Property(e => e.LeaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("LEA_Id");
                entity.Property(e => e.LeaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LEA_CreatedBy");
                entity.Property(e => e.LeaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("LEA_CreatedDate");
                entity.Property(e => e.LeaCreditLedgerAccount)
                    .HasMaxLength(20)
                    .HasColumnName("LEA_CreditLedgerAccount");
                entity.Property(e => e.LeaDebitLedgerAccount)
                    .HasMaxLength(20)
                    .HasColumnName("LEA_DebitLedgerAccount");
                entity.Property(e => e.LeaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LEA_LastModifiedBy");
                entity.Property(e => e.LeaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("LEA_LastModifiedDate");
                entity.Property(e => e.LeaLegalEntityId).HasColumnName("LEA_LegalEntity_Id");
                entity.Property(e => e.LeaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("LEA_TimeStamp");

                entity.HasOne(d => d.Lea).WithOne(p => p.LegalEntityAccount)
                    .HasForeignKey<LegalEntityAccount>(d => d.LeaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LegalEntityAccounts_OrganizationAccounts");

                entity.HasOne(d => d.LeaLegalEntity).WithMany(p => p.LegalEntityAccounts)
                    .HasForeignKey(d => d.LeaLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LegalEntityAccounts_LegalEntities");
            });

            modelBuilder.Entity<LegalEntityPaymentMethod>(entity =>
            {
                entity.HasKey(e => e.LpmId);

                entity.ToTable("LegalEntityPaymentMethods", "fin");

                entity.Property(e => e.LpmId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("LPM_Id");
                entity.Property(e => e.LpmCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LPM_CreatedBy");
                entity.Property(e => e.LpmCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("LPM_CreatedDate");
                entity.Property(e => e.LpmExactCode)
                    .HasMaxLength(20)
                    .HasColumnName("LPM_ExactCode");
                entity.Property(e => e.LpmInactive).HasColumnName("LPM_Inactive");
                entity.Property(e => e.LpmLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LPM_LastModifiedBy");
                entity.Property(e => e.LpmLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("LPM_LastModifiedDate");
                entity.Property(e => e.LpmLegalEntityId).HasColumnName("LPM_LegalEntity_Id");
                entity.Property(e => e.LpmPaymentMethodId).HasColumnName("LPM_PaymentMethod_Id");
                entity.Property(e => e.LpmTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("LPM_TimeStamp");

                entity.HasOne(d => d.LpmLegalEntity).WithMany(p => p.LegalEntityPaymentMethods)
                    .HasForeignKey(d => d.LpmLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LegalEntityPaymentMethods_LegalEntities");

                entity.HasOne(d => d.LpmPaymentMethod).WithMany(p => p.LegalEntityPaymentMethods)
                    .HasForeignKey(d => d.LpmPaymentMethodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LegalEntityPaymentMethods_PaymentMethods");
            });

            modelBuilder.Entity<LegalEntityTaxCategory>(entity =>
            {
                entity.HasKey(e => e.LtcId);

                entity.ToTable("LegalEntityTaxCategories", "vat");

                entity.Property(e => e.LtcId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("LTC_Id");
                entity.Property(e => e.LtcCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LTC_CreatedBy");
                entity.Property(e => e.LtcCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("LTC_CreatedDate");
                entity.Property(e => e.LtcEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("LTC_EffectiveDate");
                entity.Property(e => e.LtcIsEuropeanCountry).HasColumnName("LTC_IsEuropeanCountry");
                entity.Property(e => e.LtcLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LTC_LastModifiedBy");
                entity.Property(e => e.LtcLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("LTC_LastModifiedDate");
                entity.Property(e => e.LtcLegalEntityId).HasColumnName("LTC_LegalEntity_Id");
                entity.Property(e => e.LtcTaxCategoryId)
                    .HasMaxLength(20)
                    .HasColumnName("LTC_TaxCategory_Id");
                entity.Property(e => e.LtcTaxCode)
                    .HasMaxLength(10)
                    .HasColumnName("LTC_TaxCode");
                entity.Property(e => e.LtcTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("LTC_TerminationDate");
                entity.Property(e => e.LtcTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("LTC_TimeStamp");

                entity.HasOne(d => d.LtcLegalEntity).WithMany(p => p.LegalEntityTaxCategories)
                    .HasForeignKey(d => d.LtcLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LegalEntityTaxCategories_LegalEntities");

                entity.HasOne(d => d.LtcTaxCategory).WithMany(p => p.LegalEntityTaxCategories)
                    .HasForeignKey(d => d.LtcTaxCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LegalEntityTaxCategories_TaxCategories");
            });

            modelBuilder.Entity<LegalEntityType>(entity =>
            {
                entity.HasKey(e => e.LetId);

                entity.ToTable("LegalEntityTypes", "ced");

                entity.Property(e => e.LetId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("LET_Id");
                entity.Property(e => e.LetCode)
                    .HasMaxLength(10)
                    .HasColumnName("LET_Code");
                entity.Property(e => e.LetCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LET_CreatedBy");
                entity.Property(e => e.LetCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("LET_CreatedDate");
                entity.Property(e => e.LetInactive).HasColumnName("LET_Inactive");
                entity.Property(e => e.LetLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LET_LastModifiedBy");
                entity.Property(e => e.LetLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("LET_LastModifiedDate");
                entity.Property(e => e.LetLongName)
                    .HasMaxLength(250)
                    .HasColumnName("LET_LongName");
                entity.Property(e => e.LetShortName)
                    .HasMaxLength(20)
                    .HasColumnName("LET_ShortName");
                entity.Property(e => e.LetTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("LET_TimeStamp");
            });

            modelBuilder.Entity<LiabilityStatus>(entity =>
            {
                entity.HasKey(e => e.LstId);

                entity.ToTable("LiabilityStatuses", "dos", tb => tb.HasTrigger("th_dos_LiabilityStatuses_TraceHistory"));

                entity.Property(e => e.LstId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("LST_Id");
                entity.Property(e => e.LstCode)
                    .HasMaxLength(10)
                    .HasColumnName("LST_Code");
                entity.Property(e => e.LstCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LST_CreatedBy");
                entity.Property(e => e.LstCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("LST_CreatedDate");
                entity.Property(e => e.LstInactive).HasColumnName("LST_Inactive");
                entity.Property(e => e.LstLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LST_LastModifiedBy");
                entity.Property(e => e.LstLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("LST_LastModifiedDate");
                entity.Property(e => e.LstLocalizableEntryId).HasColumnName("LST_LocalizableEntry_Id");
                entity.Property(e => e.LstLongName)
                    .HasMaxLength(250)
                    .HasColumnName("LST_LongName");
                entity.Property(e => e.LstShortName)
                    .HasMaxLength(50)
                    .HasColumnName("LST_ShortName");
                entity.Property(e => e.LstTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("LST_TimeStamp");

                entity.HasOne(d => d.LstLocalizableEntry).WithMany(p => p.LiabilityStatuses)
                    .HasForeignKey(d => d.LstLocalizableEntryId)
                    .HasConstraintName("FK_LiabilityStatuses_LocalizableEntries");
            });

            modelBuilder.Entity<LiabilityStatusHistory>(entity =>
            {
                entity.HasKey(e => e.LshId);

                entity.ToTable("LiabilityStatusHistory", "dos", tb => tb.HasTrigger("th_dos_LiabilityStatusHistory_TraceHistory"));

                entity.Property(e => e.LshId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("LSH_Id");
                entity.Property(e => e.LshCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LSH_CreatedBy");
                entity.Property(e => e.LshCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("LSH_CreatedDate");
                entity.Property(e => e.LshDossierPartyId).HasColumnName("LSH_DossierParty_Id");
                entity.Property(e => e.LshEmployeeId).HasColumnName("LSH_Employee_Id");
                entity.Property(e => e.LshIsLiabilityConfirmed).HasColumnName("LSH_IsLiabilityConfirmed");
                entity.Property(e => e.LshLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LSH_LastModifiedBy");
                entity.Property(e => e.LshLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("LSH_LastModifiedDate");
                entity.Property(e => e.LshLiabilityStatusId).HasColumnName("LSH_LiabilityStatus_Id");
                entity.Property(e => e.LshStartDate).HasColumnName("LSH_StartDate");
                entity.Property(e => e.LshTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("LSH_TimeStamp");

                entity.HasOne(d => d.LshDossierParty).WithMany(p => p.LiabilityStatusHistories)
                    .HasForeignKey(d => d.LshDossierPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LiabilityStatusHistory_DossierParties");

                entity.HasOne(d => d.LshLiabilityStatus).WithMany(p => p.LiabilityStatusHistories)
                    .HasForeignKey(d => d.LshLiabilityStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LiabilityStatusHistory_LiabilityStatusHistory");
            });

            modelBuilder.Entity<LiabilityStatusHistoryHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_LiabilityStatusHistory_History_ID");

                entity.ToTable("LiabilityStatusHistory_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.LshCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LSH_CreatedBy");
                entity.Property(e => e.LshCreatedDate).HasColumnName("LSH_CreatedDate");
                entity.Property(e => e.LshDossierPartyId).HasColumnName("LSH_DossierParty_Id");
                entity.Property(e => e.LshEmployeeId).HasColumnName("LSH_Employee_Id");
                entity.Property(e => e.LshId).HasColumnName("LSH_Id");
                entity.Property(e => e.LshIsLiabilityConfirmed).HasColumnName("LSH_IsLiabilityConfirmed");
                entity.Property(e => e.LshLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LSH_LastModifiedBy");
                entity.Property(e => e.LshLastModifiedDate).HasColumnName("LSH_LastModifiedDate");
                entity.Property(e => e.LshLiabilityStatusId).HasColumnName("LSH_LiabilityStatus_Id");
                entity.Property(e => e.LshStartDate).HasColumnName("LSH_StartDate");
            });

            modelBuilder.Entity<LiabilityStatusesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_LiabilityStatuses_History_ID");

                entity.ToTable("LiabilityStatuses_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.LstCode)
                    .HasMaxLength(10)
                    .HasColumnName("LST_Code");
                entity.Property(e => e.LstCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LST_CreatedBy");
                entity.Property(e => e.LstCreatedDate).HasColumnName("LST_CreatedDate");
                entity.Property(e => e.LstId).HasColumnName("LST_Id");
                entity.Property(e => e.LstInactive).HasColumnName("LST_Inactive");
                entity.Property(e => e.LstLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LST_LastModifiedBy");
                entity.Property(e => e.LstLastModifiedDate).HasColumnName("LST_LastModifiedDate");
                entity.Property(e => e.LstLocalizableEntryId).HasColumnName("LST_LocalizableEntry_Id");
                entity.Property(e => e.LstLongName)
                    .HasMaxLength(250)
                    .HasColumnName("LST_LongName");
                entity.Property(e => e.LstShortName)
                    .HasMaxLength(50)
                    .HasColumnName("LST_ShortName");
            });

            modelBuilder.Entity<LiablePartiesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_LiableParties_History_ID");

                entity.ToTable("LiableParties_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.LipCode)
                    .HasMaxLength(10)
                    .HasColumnName("LIP_Code");
                entity.Property(e => e.LipCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LIP_CreatedBy");
                entity.Property(e => e.LipCreatedDate).HasColumnName("LIP_CreatedDate");
                entity.Property(e => e.LipId).HasColumnName("LIP_Id");
                entity.Property(e => e.LipInactive).HasColumnName("LIP_Inactive");
                entity.Property(e => e.LipLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LIP_LastModifiedBy");
                entity.Property(e => e.LipLastModifiedDate).HasColumnName("LIP_LastModifiedDate");
                entity.Property(e => e.LipLongName)
                    .HasMaxLength(250)
                    .HasColumnName("LIP_LongName");
                entity.Property(e => e.LipShortName)
                    .HasMaxLength(20)
                    .HasColumnName("LIP_ShortName");
            });

            modelBuilder.Entity<LiableParty>(entity =>
            {
                entity.HasKey(e => e.LipId);

                entity.ToTable("LiableParties", "dos", tb => tb.HasTrigger("th_dos_LiableParties_TraceHistory"));

                entity.Property(e => e.LipId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("LIP_Id");
                entity.Property(e => e.LipCode)
                    .HasMaxLength(10)
                    .HasColumnName("LIP_Code");
                entity.Property(e => e.LipCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LIP_CreatedBy");
                entity.Property(e => e.LipCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("LIP_CreatedDate");
                entity.Property(e => e.LipInactive).HasColumnName("LIP_Inactive");
                entity.Property(e => e.LipLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LIP_LastModifiedBy");
                entity.Property(e => e.LipLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("LIP_LastModifiedDate");
                entity.Property(e => e.LipLongName)
                    .HasMaxLength(250)
                    .HasColumnName("LIP_LongName");
                entity.Property(e => e.LipShortName)
                    .HasMaxLength(20)
                    .HasColumnName("LIP_ShortName");
                entity.Property(e => e.LipTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("LIP_TimeStamp");
            });

            modelBuilder.Entity<LocalizableEntry>(entity =>
            {
                entity.HasKey(e => e.LleId);

                entity.ToTable("LocalizableEntries", "mdm");

                entity.Property(e => e.LleId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("LLE_Id");
                entity.Property(e => e.LleCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LLE_CreatedBy");
                entity.Property(e => e.LleCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("LLE_CreatedDate");
                entity.Property(e => e.LleLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LLE_LastModifiedBy");
                entity.Property(e => e.LleLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("LLE_LastModifiedDate");
                entity.Property(e => e.LleLocalizableTypeId).HasColumnName("LLE_LocalizableType_Id");
                entity.Property(e => e.LleTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("LLE_TimeStamp");

                entity.HasOne(d => d.LleLocalizableType).WithMany(p => p.LocalizableEntries)
                    .HasForeignKey(d => d.LleLocalizableTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocalizableEntries_LocalizableTypes");
            });

            modelBuilder.Entity<LocalizableEntry1>(entity =>
            {
                entity.HasKey(e => e.LleId);

                entity.ToTable("LocalizableEntries", "stg");

                entity.Property(e => e.LleId)
                    .ValueGeneratedNever()
                    .HasColumnName("LLE_Id");
                entity.Property(e => e.LleCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LLE_CreatedBy");
                entity.Property(e => e.LleCreatedDate).HasColumnName("LLE_CreatedDate");
                entity.Property(e => e.LleLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LLE_LastModifiedBy");
                entity.Property(e => e.LleLastModifiedDate).HasColumnName("LLE_LastModifiedDate");
                entity.Property(e => e.LleLocalizableTypeId).HasColumnName("LLE_LocalizableType_Id");
                entity.Property(e => e.LleTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("LLE_TimeStamp");
            });

            modelBuilder.Entity<LocalizableType>(entity =>
            {
                entity.HasKey(e => e.LltId);

                entity.ToTable("LocalizableTypes", "mdm");

                entity.Property(e => e.LltId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("LLT_Id");
                entity.Property(e => e.LltCode)
                    .HasMaxLength(10)
                    .HasColumnName("LLT_Code");
                entity.Property(e => e.LltCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LLT_CreatedBy");
                entity.Property(e => e.LltCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("LLT_CreatedDate");
                entity.Property(e => e.LltInactive).HasColumnName("LLT_Inactive");
                entity.Property(e => e.LltLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LLT_LastModifiedBy");
                entity.Property(e => e.LltLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("LLT_LastModifiedDate");
                entity.Property(e => e.LltLongName)
                    .HasMaxLength(250)
                    .HasColumnName("LLT_LongName");
                entity.Property(e => e.LltShortName)
                    .HasMaxLength(20)
                    .HasColumnName("LLT_ShortName");
                entity.Property(e => e.LltTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("LLT_TimeStamp");
            });

            modelBuilder.Entity<LocalizableType1>(entity =>
            {
                entity.HasKey(e => e.LltId);

                entity.ToTable("LocalizableTypes", "stg");

                entity.Property(e => e.LltId)
                    .ValueGeneratedNever()
                    .HasColumnName("LLT_Id");
                entity.Property(e => e.LltCode)
                    .HasMaxLength(10)
                    .HasColumnName("LLT_Code");
                entity.Property(e => e.LltCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LLT_CreatedBy");
                entity.Property(e => e.LltCreatedDate).HasColumnName("LLT_CreatedDate");
                entity.Property(e => e.LltInactive).HasColumnName("LLT_Inactive");
                entity.Property(e => e.LltLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LLT_LastModifiedBy");
                entity.Property(e => e.LltLastModifiedDate).HasColumnName("LLT_LastModifiedDate");
                entity.Property(e => e.LltLongName)
                    .HasMaxLength(250)
                    .HasColumnName("LLT_LongName");
                entity.Property(e => e.LltShortName)
                    .HasMaxLength(20)
                    .HasColumnName("LLT_ShortName");
                entity.Property(e => e.LltTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("LLT_TimeStamp");
            });

            modelBuilder.Entity<LocalizedEntry>(entity =>
            {
                entity.HasKey(e => e.LlcId);

                entity.ToTable("LocalizedEntries", "mdm");

                entity.HasIndex(e => e.LlcLocalizableEntryId, "IX_LocalizedEntries_LocalizableEntry_Id");

                entity.Property(e => e.LlcId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("LLC_Id");
                entity.Property(e => e.LlcCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LLC_CreatedBy");
                entity.Property(e => e.LlcCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("LLC_CreatedDate");
                entity.Property(e => e.LlcCultureCode)
                    .HasMaxLength(10)
                    .HasColumnName("LLC_CultureCode");
                entity.Property(e => e.LlcLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LLC_LastModifiedBy");
                entity.Property(e => e.LlcLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("LLC_LastModifiedDate");
                entity.Property(e => e.LlcLocalizableEntryId).HasColumnName("LLC_LocalizableEntry_Id");
                entity.Property(e => e.LlcLongTranslation)
                    .HasMaxLength(250)
                    .HasColumnName("LLC_LongTranslation");
                entity.Property(e => e.LlcShortTranslation)
                    .HasMaxLength(20)
                    .HasColumnName("LLC_ShortTranslation");
                entity.Property(e => e.LlcTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("LLC_TimeStamp");

                entity.HasOne(d => d.LlcLocalizableEntry).WithMany(p => p.LocalizedEntries)
                    .HasForeignKey(d => d.LlcLocalizableEntryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocalizedEntries_LocalizableEntries");
            });

            modelBuilder.Entity<LocalizedEntry1>(entity =>
            {
                entity.HasKey(e => e.LlcId);

                entity.ToTable("LocalizedEntries", "stg");

                entity.Property(e => e.LlcId)
                    .ValueGeneratedNever()
                    .HasColumnName("LLC_Id");
                entity.Property(e => e.LlcCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LLC_CreatedBy");
                entity.Property(e => e.LlcCreatedDate).HasColumnName("LLC_CreatedDate");
                entity.Property(e => e.LlcCultureCode)
                    .HasMaxLength(10)
                    .HasColumnName("LLC_CultureCode");
                entity.Property(e => e.LlcLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LLC_LastModifiedBy");
                entity.Property(e => e.LlcLastModifiedDate).HasColumnName("LLC_LastModifiedDate");
                entity.Property(e => e.LlcLocalizableEntryId).HasColumnName("LLC_LocalizableEntry_Id");
                entity.Property(e => e.LlcLongTranslation)
                    .HasMaxLength(250)
                    .HasColumnName("LLC_LongTranslation");
                entity.Property(e => e.LlcShortTranslation)
                    .HasMaxLength(20)
                    .HasColumnName("LLC_ShortTranslation");
                entity.Property(e => e.LlcTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("LLC_TimeStamp");
            });

            modelBuilder.Entity<LocationTaxCode>(entity =>
            {
                entity.HasKey(e => e.TxlId);

                entity.ToTable("LocationTaxCodes", "vat");

                entity.Property(e => e.TxlId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("TXL_Id");
                entity.Property(e => e.TxlAbbreviation)
                    .HasMaxLength(20)
                    .HasColumnName("TXL_Abbreviation");
                entity.Property(e => e.TxlCity)
                    .HasMaxLength(50)
                    .HasColumnName("TXL_City");
                entity.Property(e => e.TxlCountryIso2Code)
                    .HasMaxLength(2)
                    .HasColumnName("TXL_CountryIso2Code");
                entity.Property(e => e.TxlCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TXL_CreatedBy");
                entity.Property(e => e.TxlCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TXL_CreatedDate");
                entity.Property(e => e.TxlDescription)
                    .HasMaxLength(250)
                    .HasColumnName("TXL_Description");
                entity.Property(e => e.TxlLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TXL_LastModifiedBy");
                entity.Property(e => e.TxlLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TXL_LastModifiedDate");
                entity.Property(e => e.TxlLegalEntityId).HasColumnName("TXL_LegalEntity_Id");
                entity.Property(e => e.TxlTaxCodeId)
                    .HasMaxLength(20)
                    .HasColumnName("TXL_TaxCode_Id");
                entity.Property(e => e.TxlTaxTypeId).HasColumnName("TXL_TaxType_Id");
                entity.Property(e => e.TxlTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("TXL_TimeStamp");
                entity.Property(e => e.TxlValidFrom)
                    .HasColumnType("date")
                    .HasColumnName("TXL_ValidFrom");
                entity.Property(e => e.TxlValidUntil)
                    .HasColumnType("date")
                    .HasColumnName("TXL_ValidUntil");

                entity.HasOne(d => d.TxlCountryIso2CodeNavigation).WithMany(p => p.LocationTaxCodes)
                    .HasForeignKey(d => d.TxlCountryIso2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocationTaxCodes_Countries");

                entity.HasOne(d => d.TxlLegalEntity).WithMany(p => p.LocationTaxCodes)
                    .HasForeignKey(d => d.TxlLegalEntityId)
                    .HasConstraintName("FK_LocationTaxCodes_LegalEntities");
            });

            modelBuilder.Entity<LocationTaxRate>(entity =>
            {
                entity.HasKey(e => e.LtrId);

                entity.ToTable("LocationTaxRates", "vat");

                entity.Property(e => e.LtrId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("LTR_Id");
                entity.Property(e => e.LtrCity)
                    .HasMaxLength(50)
                    .HasColumnName("LTR_City");
                entity.Property(e => e.LtrCountryIso2Code)
                    .HasMaxLength(2)
                    .HasColumnName("LTR_CountryIso2Code");
                entity.Property(e => e.LtrCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LTR_CreatedBy");
                entity.Property(e => e.LtrCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("LTR_CreatedDate");
                entity.Property(e => e.LtrDescription)
                    .HasMaxLength(250)
                    .HasColumnName("LTR_Description");
                entity.Property(e => e.LtrEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("LTR_EffectiveDate");
                entity.Property(e => e.LtrIsAllowed)
                    .IsRequired()
                    .HasDefaultValueSql("((1))")
                    .HasColumnName("LTR_IsAllowed");
                entity.Property(e => e.LtrIsSubContractor).HasColumnName("LTR_IsSubContractor");
                entity.Property(e => e.LtrLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LTR_LastModifiedBy");
                entity.Property(e => e.LtrLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("LTR_LastModifiedDate");
                entity.Property(e => e.LtrObjectClassificationsName)
                    .HasMaxLength(250)
                    .HasColumnName("LTR_ObjectClassificationsName");
                entity.Property(e => e.LtrTaxCategoryId)
                    .HasMaxLength(20)
                    .HasColumnName("LTR_TaxCategory_Id");
                entity.Property(e => e.LtrTaxRate).HasColumnName("LTR_TaxRate");
                entity.Property(e => e.LtrTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("LTR_TerminationDate");
                entity.Property(e => e.LtrTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("LTR_TimeStamp");

                entity.HasOne(d => d.LtrCountryIso2CodeNavigation).WithMany(p => p.LocationTaxRates)
                    .HasForeignKey(d => d.LtrCountryIso2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocationTaxRates_Countries");

                entity.HasOne(d => d.LtrTaxCategory).WithMany(p => p.LocationTaxRates)
                    .HasForeignKey(d => d.LtrTaxCategoryId)
                    .HasConstraintName("FK_LocationTaxRates_TaxCategories");
            });

            modelBuilder.Entity<LocationType>(entity =>
            {
                entity.HasKey(e => e.LctId);

                entity.ToTable("LocationTypes", "dos", tb => tb.HasTrigger("th_dos_LocationTypes_TraceHistory"));

                entity.Property(e => e.LctId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("LCT_Id");
                entity.Property(e => e.LctCode)
                    .HasMaxLength(10)
                    .HasColumnName("LCT_Code");
                entity.Property(e => e.LctCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LCT_CreatedBy");
                entity.Property(e => e.LctCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("LCT_CreatedDate");
                entity.Property(e => e.LctInactive).HasColumnName("LCT_Inactive");
                entity.Property(e => e.LctLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LCT_LastModifiedBy");
                entity.Property(e => e.LctLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("LCT_LastModifiedDate");
                entity.Property(e => e.LctLocalizableEntryId).HasColumnName("LCT_LocalizableEntry_Id");
                entity.Property(e => e.LctLongName)
                    .HasMaxLength(250)
                    .HasColumnName("LCT_LongName");
                entity.Property(e => e.LctShortName)
                    .HasMaxLength(20)
                    .HasColumnName("LCT_ShortName");
                entity.Property(e => e.LctTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("LCT_TimeStamp");

                entity.HasOne(d => d.LctLocalizableEntry).WithMany(p => p.LocationTypes)
                    .HasForeignKey(d => d.LctLocalizableEntryId)
                    .HasConstraintName("FK_LocationTypes_LocalizableEntries");
            });

            modelBuilder.Entity<LocationTypesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_LocationTypes_History_ID");

                entity.ToTable("LocationTypes_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.LctCode)
                    .HasMaxLength(10)
                    .HasColumnName("LCT_Code");
                entity.Property(e => e.LctCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LCT_CreatedBy");
                entity.Property(e => e.LctCreatedDate).HasColumnName("LCT_CreatedDate");
                entity.Property(e => e.LctId).HasColumnName("LCT_Id");
                entity.Property(e => e.LctInactive).HasColumnName("LCT_Inactive");
                entity.Property(e => e.LctLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LCT_LastModifiedBy");
                entity.Property(e => e.LctLastModifiedDate).HasColumnName("LCT_LastModifiedDate");
                entity.Property(e => e.LctLocalizableEntryId).HasColumnName("LCT_LocalizableEntry_Id");
                entity.Property(e => e.LctLongName)
                    .HasMaxLength(250)
                    .HasColumnName("LCT_LongName");
                entity.Property(e => e.LctShortName)
                    .HasMaxLength(20)
                    .HasColumnName("LCT_ShortName");
            });

            modelBuilder.Entity<LogHistoryType>(entity =>
            {
                entity.HasKey(e => e.LhtId);

                entity.ToTable("LogHistoryTypes", "dos", tb => tb.HasTrigger("th_dos_LogHistoryTypes_TraceHistory"));

                entity.Property(e => e.LhtId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("LHT_Id");
                entity.Property(e => e.LhtCode)
                    .HasMaxLength(10)
                    .HasColumnName("LHT_Code");
                entity.Property(e => e.LhtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LHT_CreatedBy");
                entity.Property(e => e.LhtCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("LHT_CreatedDate");
                entity.Property(e => e.LhtInactive).HasColumnName("LHT_Inactive");
                entity.Property(e => e.LhtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LHT_LastModifiedBy");
                entity.Property(e => e.LhtLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("LHT_LastModifiedDate");
                entity.Property(e => e.LhtLocalizableEntryId).HasColumnName("LHT_LocalizableEntry_Id");
                entity.Property(e => e.LhtLongName)
                    .HasMaxLength(250)
                    .HasColumnName("LHT_LongName");
                entity.Property(e => e.LhtShortName)
                    .HasMaxLength(20)
                    .HasColumnName("LHT_ShortName");
                entity.Property(e => e.LhtTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("LHT_TimeStamp");

                entity.HasOne(d => d.LhtLocalizableEntry).WithMany(p => p.LogHistoryTypes)
                    .HasForeignKey(d => d.LhtLocalizableEntryId)
                    .HasConstraintName("FK_LogHistoryTypes_LocalizableEntries");
            });

            modelBuilder.Entity<LogHistoryTypesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_LogHistoryTypes_History_ID");

                entity.ToTable("LogHistoryTypes_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.LhtCode)
                    .HasMaxLength(10)
                    .HasColumnName("LHT_Code");
                entity.Property(e => e.LhtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LHT_CreatedBy");
                entity.Property(e => e.LhtCreatedDate).HasColumnName("LHT_CreatedDate");
                entity.Property(e => e.LhtId).HasColumnName("LHT_Id");
                entity.Property(e => e.LhtInactive).HasColumnName("LHT_Inactive");
                entity.Property(e => e.LhtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("LHT_LastModifiedBy");
                entity.Property(e => e.LhtLastModifiedDate).HasColumnName("LHT_LastModifiedDate");
                entity.Property(e => e.LhtLocalizableEntryId).HasColumnName("LHT_LocalizableEntry_Id");
                entity.Property(e => e.LhtLongName)
                    .HasMaxLength(250)
                    .HasColumnName("LHT_LongName");
                entity.Property(e => e.LhtShortName)
                    .HasMaxLength(20)
                    .HasColumnName("LHT_ShortName");
            });

            modelBuilder.Entity<MainContract>(entity =>
            {
                entity.HasKey(e => e.MncId);

                entity.ToTable("MainContract", "mdm");

                entity.Property(e => e.MncId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("MNC_Id");
                entity.Property(e => e.MncClientId).HasColumnName("MNC_Client_Id");
                entity.Property(e => e.MncContractDate)
                    .HasColumnType("date")
                    .HasColumnName("MNC_ContractDate");
                entity.Property(e => e.MncContractNumber)
                    .HasMaxLength(20)
                    .HasColumnName("MNC_ContractNumber");
                entity.Property(e => e.MncCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("MNC_CreatedBy");
                entity.Property(e => e.MncCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("MNC_CreatedDate");
                entity.Property(e => e.MncLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("MNC_LastModifiedBy");
                entity.Property(e => e.MncLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("MNC_LastModifiedDate");
                entity.Property(e => e.MncTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("MNC_TerminationDate");
                entity.Property(e => e.MncTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("MNC_TimeStamp");

                entity.HasOne(d => d.MncClient).WithMany(p => p.MainContracts)
                    .HasForeignKey(d => d.MncClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MainContract_Clients");
            });

            modelBuilder.Entity<Mandate>(entity =>
            {
                entity.HasKey(e => e.MdId);

                entity.ToTable("Mandates", "mdm");

                entity.Property(e => e.MdId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("MD_Id");
                entity.Property(e => e.MdCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("MD_CreatedBy");
                entity.Property(e => e.MdCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("MD_CreatedDate");
                entity.Property(e => e.MdCultureCodePreferredLanguage)
                    .HasMaxLength(10)
                    .HasColumnName("MD_CultureCodePreferredLanguage");
                entity.Property(e => e.MdInactive).HasColumnName("MD_Inactive");
                entity.Property(e => e.MdLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("MD_LastModifiedBy");
                entity.Property(e => e.MdLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("MD_LastModifiedDate");
                entity.Property(e => e.MdTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("MD_TimeStamp");

                entity.HasOne(d => d.Md).WithOne(p => p.Mandate)
                    .HasForeignKey<Mandate>(d => d.MdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Mandates_OrganizationUnits");
            });

            modelBuilder.Entity<Mandate1>(entity =>
            {
                entity.HasKey(e => e.MdId);

                entity.ToTable("Mandates", "stg");

                entity.Property(e => e.MdId)
                    .ValueGeneratedNever()
                    .HasColumnName("MD_Id");
                entity.Property(e => e.MdCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("MD_CreatedBy");
                entity.Property(e => e.MdCreatedDate).HasColumnName("MD_CreatedDate");
                entity.Property(e => e.MdCultureCodePreferredLanguage)
                    .HasMaxLength(10)
                    .HasColumnName("MD_CultureCodePreferredLanguage");
                entity.Property(e => e.MdInactive).HasColumnName("MD_Inactive");
                entity.Property(e => e.MdLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("MD_LastModifiedBy");
                entity.Property(e => e.MdLastModifiedDate).HasColumnName("MD_LastModifiedDate");
                entity.Property(e => e.MdTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("MD_TimeStamp");
            });

            modelBuilder.Entity<MandateAlarmCenter>(entity =>
            {
                entity.HasKey(e => e.MacId);

                entity.ToTable("MandateAlarmCenters", "mdm");

                entity.Property(e => e.MacId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("MAC_Id");
                entity.Property(e => e.MacAlarmCenterId).HasColumnName("MAC_AlarmCenter_Id");
                entity.Property(e => e.MacCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("MAC_CreatedBy");
                entity.Property(e => e.MacCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("MAC_CreatedDate");
                entity.Property(e => e.MacInactive).HasColumnName("MAC_Inactive");
                entity.Property(e => e.MacLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("MAC_LastModifiedBy");
                entity.Property(e => e.MacLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("MAC_LastModifiedDate");
                entity.Property(e => e.MacMandateId).HasColumnName("MAC_Mandate_Id");
                entity.Property(e => e.MacTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("MAC_TimeStamp");

                entity.HasOne(d => d.MacAlarmCenter).WithMany(p => p.MandateAlarmCenters)
                    .HasForeignKey(d => d.MacAlarmCenterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MandateAlarmCenters_AlarmCenters");

                entity.HasOne(d => d.MacMandate).WithMany(p => p.MandateAlarmCenters)
                    .HasForeignKey(d => d.MacMandateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MandateAlarmCenters_Mandates");
            });

            modelBuilder.Entity<MandateAlarmCenter1>(entity =>
            {
                entity.HasKey(e => e.MacId);

                entity.ToTable("MandateAlarmCenters", "stg");

                entity.Property(e => e.MacId)
                    .ValueGeneratedNever()
                    .HasColumnName("MAC_Id");
                entity.Property(e => e.MacAlarmCenterId).HasColumnName("MAC_AlarmCenter_Id");
                entity.Property(e => e.MacCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("MAC_CreatedBy");
                entity.Property(e => e.MacCreatedDate).HasColumnName("MAC_CreatedDate");
                entity.Property(e => e.MacInactive).HasColumnName("MAC_Inactive");
                entity.Property(e => e.MacLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("MAC_LastModifiedBy");
                entity.Property(e => e.MacLastModifiedDate).HasColumnName("MAC_LastModifiedDate");
                entity.Property(e => e.MacMandateId).HasColumnName("MAC_Mandate_Id");
                entity.Property(e => e.MacTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("MAC_TimeStamp");
            });

            modelBuilder.Entity<MandatesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MandatesView", "mdm");

                entity.Property(e => e.Actief)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.Adres).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.Einddatum).HasColumnType("date");
                entity.Property(e => e.Huisnr).HasMaxLength(10);
                entity.Property(e => e.Landcode).HasMaxLength(3);
                entity.Property(e => e.LandcodePostbus)
                    .HasMaxLength(3)
                    .HasColumnName("Landcode postbus");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NaamCpl)
                    .HasMaxLength(756)
                    .HasColumnName("Naam cpl");
                entity.Property(e => e.NaamKort)
                    .HasMaxLength(20)
                    .HasColumnName("Naam kort");
                entity.Property(e => e.NiveauPlekInStructuur)
                    .HasMaxLength(61)
                    .HasColumnName("Niveau (plek in structuur)");
                entity.Property(e => e.OgCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("OG-Code");
                entity.Property(e => e.ParentBovenliggendeType)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("Parent (bovenliggende type)");
                entity.Property(e => e.Porcode).HasMaxLength(10);
                entity.Property(e => e.Postbus).HasMaxLength(10);
                entity.Property(e => e.Postcode).HasMaxLength(10);
                entity.Property(e => e.PostcodePostbus)
                    .HasMaxLength(10)
                    .HasColumnName("Postcode postbus");
                entity.Property(e => e.Provincie).HasMaxLength(250);
                entity.Property(e => e.ProvinciePostbus)
                    .HasMaxLength(250)
                    .HasColumnName("Provincie postbus");
                entity.Property(e => e.Startdatum).HasColumnType("date");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.Toevoeging).HasMaxLength(250);
                entity.Property(e => e.TypeTpVerzOfVolmacht)
                    .HasMaxLength(61)
                    .HasColumnName("Type (tp/verz/of volmacht)");
                entity.Property(e => e.Woonplaats).HasMaxLength(250);
                entity.Property(e => e.WoonplaatsPostbus)
                    .HasMaxLength(250)
                    .HasColumnName("Woonplaats postbus");
            });

            modelBuilder.Entity<MandatesViewWithContactInformation>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MandatesViewWithContactInformation", "mdm");

                entity.Property(e => e.Actief)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.Adres).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.Einddatum).HasColumnType("date");
                entity.Property(e => e.Email).HasMaxLength(250);
                entity.Property(e => e.Huisnr).HasMaxLength(10);
                entity.Property(e => e.Landcode).HasMaxLength(3);
                entity.Property(e => e.LandcodePostbus)
                    .HasMaxLength(3)
                    .HasColumnName("Landcode postbus");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NaamCpl)
                    .HasMaxLength(756)
                    .HasColumnName("Naam cpl");
                entity.Property(e => e.NaamKort)
                    .HasMaxLength(20)
                    .HasColumnName("Naam kort");
                entity.Property(e => e.NiveauPlekInStructuur)
                    .HasMaxLength(61)
                    .HasColumnName("Niveau (plek in structuur)");
                entity.Property(e => e.OgCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("OG-Code");
                entity.Property(e => e.ParentBovenliggendeType)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("Parent (bovenliggende type)");
                entity.Property(e => e.PhoneNumber).HasMaxLength(250);
                entity.Property(e => e.Porcode).HasMaxLength(10);
                entity.Property(e => e.Postbus).HasMaxLength(10);
                entity.Property(e => e.Postcode).HasMaxLength(10);
                entity.Property(e => e.PostcodePostbus)
                    .HasMaxLength(10)
                    .HasColumnName("Postcode postbus");
                entity.Property(e => e.Provincie).HasMaxLength(250);
                entity.Property(e => e.ProvinciePostbus)
                    .HasMaxLength(250)
                    .HasColumnName("Provincie postbus");
                entity.Property(e => e.Startdatum).HasColumnType("date");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.Toevoeging).HasMaxLength(250);
                entity.Property(e => e.Type)
                    .HasMaxLength(7)
                    .IsUnicode(false);
                entity.Property(e => e.TypeTpVerzOfVolmacht)
                    .HasMaxLength(61)
                    .HasColumnName("Type (tp/verz/of volmacht)");
                entity.Property(e => e.Woonplaats).HasMaxLength(250);
                entity.Property(e => e.WoonplaatsPostbus)
                    .HasMaxLength(250)
                    .HasColumnName("Woonplaats postbus");
            });

            modelBuilder.Entity<MappingCostCenter>(entity =>
            {
                entity.HasKey(e => e.OldCostCenterCode).HasName("PK_MappingCostcenters");

                entity.ToTable("MappingCostCenters", "exact");

                entity.Property(e => e.OldCostCenterCode)
                    .HasMaxLength(20)
                    .HasColumnName("Old_CostCenter_Code");
                entity.Property(e => e.NewCostCenterCode)
                    .HasMaxLength(20)
                    .HasColumnName("New_CostCenter_Code");
            });

            modelBuilder.Entity<MappingCostCentersView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MappingCostCentersView", "exact");

                entity.Property(e => e.NewCostCenterCode).HasMaxLength(20);
                entity.Property(e => e.OldCostCenterCode).HasMaxLength(20);
            });

            modelBuilder.Entity<MappingJournal>(entity =>
            {
                entity.HasKey(e => e.OldJournalId);

                entity.ToTable("MappingJournals", "exact");

                entity.Property(e => e.OldJournalId)
                    .HasMaxLength(20)
                    .HasColumnName("Old_Journal_Id");
                entity.Property(e => e.NewJournalId)
                    .HasMaxLength(20)
                    .HasColumnName("New_Journal_Id");
            });

            modelBuilder.Entity<MappingLedger>(entity =>
            {
                entity.HasKey(e => e.OldLedgerId);

                entity.ToTable("MappingLedgers", "exact");

                entity.Property(e => e.OldLedgerId)
                    .HasMaxLength(20)
                    .HasColumnName("Old_Ledger_Id");
                entity.Property(e => e.NewLedgerId)
                    .HasMaxLength(20)
                    .HasColumnName("New_Ledger_Id");
            });

            modelBuilder.Entity<MappingPaymentCondition>(entity =>
            {
                entity.HasKey(e => e.OldPaymentConditionCode);

                entity.ToTable("MappingPaymentConditions", "exact");

                entity.Property(e => e.OldPaymentConditionCode)
                    .HasMaxLength(20)
                    .HasColumnName("Old_PaymentCondition_Code");
                entity.Property(e => e.NewPaymentConditionCode)
                    .HasMaxLength(20)
                    .HasColumnName("New_PaymentCondition_Code");
            });

            modelBuilder.Entity<MappingPaymentConditionsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MappingPaymentConditionsView", "exact");

                entity.Property(e => e.NewPaymentConditionCode).HasMaxLength(20);
                entity.Property(e => e.OldPaymentConditionCode).HasMaxLength(20);
            });

            modelBuilder.Entity<MappingPurchaseLedgerSetting>(entity =>
            {
                entity.HasKey(e => e.OldPurchaseLedgerSettingId);

                entity.ToTable("MappingPurchaseLedgerSettings", "exact");

                entity.Property(e => e.OldPurchaseLedgerSettingId)
                    .ValueGeneratedNever()
                    .HasColumnName("Old_PurchaseLedgerSetting_Id");
                entity.Property(e => e.NewPurchaseLedgerSettingId).HasColumnName("New_PurchaseLedgerSetting_Id");
            });

            modelBuilder.Entity<MedicalDossier>(entity =>
            {
                entity.HasKey(e => e.MedId);

                entity.ToTable("MedicalDossiers", "dos", tb => tb.HasTrigger("th_dos_MedicalDossiers_TraceHistory"));

                entity.Property(e => e.MedId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("MED_Id");
                entity.Property(e => e.MedAssistanceBeforeConfirmation).HasColumnName("MED_AssistanceBeforeConfirmation");
                entity.Property(e => e.MedCause)
                    .HasMaxLength(200)
                    .HasColumnName("MED_Cause");
                entity.Property(e => e.MedCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("MED_CreatedBy");
                entity.Property(e => e.MedCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("MED_CreatedDate");
                entity.Property(e => e.MedExternalComments)
                    .HasMaxLength(500)
                    .HasColumnName("MED_ExternalComments");
                entity.Property(e => e.MedIncidentCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("MED_IncidentCountryCode");
                entity.Property(e => e.MedIncidentDate).HasColumnName("MED_IncidentDate");
                entity.Property(e => e.MedIncidentLocationId).HasColumnName("MED_IncidentLocation_Id");
                entity.Property(e => e.MedIntakeDate).HasColumnName("MED_IntakeDate");
                entity.Property(e => e.MedInternalComments)
                    .HasMaxLength(500)
                    .HasColumnName("MED_InternalComments");
                entity.Property(e => e.MedLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("MED_LastModifiedBy");
                entity.Property(e => e.MedLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("MED_LastModifiedDate");
                entity.Property(e => e.MedNumberOfPassengers).HasColumnName("MED_NumberOfPassengers");
                entity.Property(e => e.MedReason)
                    .HasMaxLength(200)
                    .HasColumnName("MED_Reason");
                entity.Property(e => e.MedReportedAfterwards).HasColumnName("MED_ReportedAfterwards");
                entity.Property(e => e.MedTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("MED_TimeStamp");
                entity.Property(e => e.MedTravellingToAbroad).HasColumnName("MED_TravellingToAbroad");

                entity.HasOne(d => d.Med).WithOne(p => p.MedicalDossier)
                    .HasForeignKey<MedicalDossier>(d => d.MedId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MedicalDossiers_Dossiers");

                entity.HasOne(d => d.MedIncidentLocation).WithMany(p => p.MedicalDossiers)
                    .HasForeignKey(d => d.MedIncidentLocationId)
                    .HasConstraintName("FK_MedicalDossiers_AssistancePlanLocations");
            });

            modelBuilder.Entity<MedicalDossiersHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_MedicalDossiers_History_ID");

                entity.ToTable("MedicalDossiers_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.MedAssistanceBeforeConfirmation).HasColumnName("MED_AssistanceBeforeConfirmation");
                entity.Property(e => e.MedCause)
                    .HasMaxLength(200)
                    .HasColumnName("MED_Cause");
                entity.Property(e => e.MedCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("MED_CreatedBy");
                entity.Property(e => e.MedCreatedDate).HasColumnName("MED_CreatedDate");
                entity.Property(e => e.MedExternalComments)
                    .HasMaxLength(500)
                    .HasColumnName("MED_ExternalComments");
                entity.Property(e => e.MedId).HasColumnName("MED_Id");
                entity.Property(e => e.MedIncidentCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("MED_IncidentCountryCode");
                entity.Property(e => e.MedIncidentDate).HasColumnName("MED_IncidentDate");
                entity.Property(e => e.MedIncidentLocationId).HasColumnName("MED_IncidentLocation_Id");
                entity.Property(e => e.MedIntakeDate).HasColumnName("MED_IntakeDate");
                entity.Property(e => e.MedInternalComments)
                    .HasMaxLength(500)
                    .HasColumnName("MED_InternalComments");
                entity.Property(e => e.MedLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("MED_LastModifiedBy");
                entity.Property(e => e.MedLastModifiedDate).HasColumnName("MED_LastModifiedDate");
                entity.Property(e => e.MedNumberOfPassengers).HasColumnName("MED_NumberOfPassengers");
                entity.Property(e => e.MedReason)
                    .HasMaxLength(200)
                    .HasColumnName("MED_Reason");
                entity.Property(e => e.MedReportedAfterwards).HasColumnName("MED_ReportedAfterwards");
                entity.Property(e => e.MedTravellingToAbroad).HasColumnName("MED_TravellingToAbroad");
            });

            modelBuilder.Entity<MedicalDossiersView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MedicalDossiersView", "dos");

                entity.Property(e => e.AgentCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.AgentName).HasMaxLength(756);
                entity.Property(e => e.ApplicationName).HasMaxLength(255);
                entity.Property(e => e.Cause).HasMaxLength(200);
                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.ContactPersonEmail).HasMaxLength(250);
                entity.Property(e => e.ContactPersonFullName).HasMaxLength(250);
                entity.Property(e => e.ContactPersonMobile).HasMaxLength(20);
                entity.Property(e => e.ContactPersonPhone).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.DepartmentName).HasMaxLength(756);
                entity.Property(e => e.Direction).HasMaxLength(50);
                entity.Property(e => e.DossierHandlerName).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierStatusCode).HasMaxLength(10);
                entity.Property(e => e.DossierStatusName).HasMaxLength(250);
                entity.Property(e => e.DossierTypeCode).HasMaxLength(10);
                entity.Property(e => e.DossierTypeName).HasMaxLength(250);
                entity.Property(e => e.EmployeeEmail).HasMaxLength(250);
                entity.Property(e => e.EmployeeFullName).HasMaxLength(250);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.ExternalComments).HasMaxLength(500);
                entity.Property(e => e.HectometerPostAddition).HasMaxLength(1);
                entity.Property(e => e.IncidentCity).HasMaxLength(250);
                entity.Property(e => e.IncidentCountryCode).HasMaxLength(3);
                entity.Property(e => e.IncidentCountryName).HasMaxLength(250);
                entity.Property(e => e.IncidentHouseNo).HasMaxLength(10);
                entity.Property(e => e.IncidentHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.IncidentLocationRoadNumber).HasMaxLength(10);
                entity.Property(e => e.IncidentLocationRoadTypeId).HasMaxLength(10);
                entity.Property(e => e.IncidentLocationTypeName).HasMaxLength(250);
                entity.Property(e => e.IncidentPostalCode).HasMaxLength(10);
                entity.Property(e => e.IncidentProvince).HasMaxLength(250);
                entity.Property(e => e.IncidentRoadLane).HasMaxLength(1);
                entity.Property(e => e.IncidentStreetName).HasMaxLength(250);
                entity.Property(e => e.InternalComments).HasMaxLength(500);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.MandateCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.MandateName).HasMaxLength(756);
                entity.Property(e => e.ProductCode).HasMaxLength(20);
                entity.Property(e => e.ProductName).HasMaxLength(250);
                entity.Property(e => e.Reason).HasMaxLength(200);
                entity.Property(e => e.RoadName).HasMaxLength(200);
                entity.Property(e => e.RoadSectionId).HasMaxLength(10);
            });

            modelBuilder.Entity<MeterReadingDetermined>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__MeterRea__3214EC075E6EE4D7");

                entity.ToTable("MeterReadingDetermined", "mdm");

                entity.HasIndex(e => e.Code, "UX_mdm_MeterReadingDetermined_Code__Filtered")
                    .IsUnique()
                    .HasFilter("([Inactive]=(0))");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LongName).HasMaxLength(250);
                entity.Property(e => e.ShortName).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.LocalizableEntry).WithMany(p => p.MeterReadingDetermineds)
                    .HasForeignKey(d => d.LocalizableEntryId)
                    .HasConstraintName("FK_MeterReadingDetermined_LocalizableEntries");
            });

            modelBuilder.Entity<MeterReadingQuantity>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__MeterRea__3214EC07105749D5");

                entity.ToTable("MeterReadingQuantities", "mdm");

                entity.HasIndex(e => e.Code, "UX_mdm_MeterReadingQuantities_Code__Filtered")
                    .IsUnique()
                    .HasFilter("([Inactive]=(0))");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LongName).HasMaxLength(250);
                entity.Property(e => e.ShortName).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.LocalizableEntry).WithMany(p => p.MeterReadingQuantities)
                    .HasForeignKey(d => d.LocalizableEntryId)
                    .HasConstraintName("FK_MeterReadingQuantities_LocalizableEntries");
            });

            modelBuilder.Entity<MissingSalesOrderApprovalMessage>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MissingSalesOrderApprovalMessages", "tmp");
            });

            modelBuilder.Entity<Model>(entity =>
            {
                entity.HasKey(e => e.MdlId);

                entity.ToTable("Models", "pdc");

                entity.Property(e => e.MdlId)
                    .ValueGeneratedNever()
                    .HasColumnName("MDL_Id");
                entity.Property(e => e.MdlBrandId).HasColumnName("MDL_Brand_Id");
                entity.Property(e => e.MdlCode)
                    .HasMaxLength(10)
                    .HasColumnName("MDL_Code");
                entity.Property(e => e.MdlCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("MDL_CreatedBy");
                entity.Property(e => e.MdlCreatedDate)
                    .HasDefaultValueSql("(getutcdate())")
                    .HasColumnName("MDL_CreatedDate");
                entity.Property(e => e.MdlInactive).HasColumnName("MDL_Inactive");
                entity.Property(e => e.MdlInsuranceObjectId).HasColumnName("MDL_InsuranceObject_Id");
                entity.Property(e => e.MdlLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("MDL_LastModifiedBy");
                entity.Property(e => e.MdlLastModifiedDate)
                    .HasDefaultValueSql("(getutcdate())")
                    .HasColumnName("MDL_LastModifiedDate");
                entity.Property(e => e.MdlLocalizableEntryId).HasColumnName("MDL_LocalizableEntry_Id");
                entity.Property(e => e.MdlLongName)
                    .HasMaxLength(250)
                    .HasColumnName("MDL_LongName");
                entity.Property(e => e.MdlShortName)
                    .HasMaxLength(20)
                    .HasColumnName("MDL_ShortName");
                entity.Property(e => e.MdlTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("MDL_TimeStamp");

                entity.HasOne(d => d.MdlBrand).WithMany(p => p.Models)
                    .HasForeignKey(d => d.MdlBrandId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Models_Brands");

                entity.HasOne(d => d.MdlInsuranceObject).WithMany(p => p.Models)
                    .HasForeignKey(d => d.MdlInsuranceObjectId)
                    .HasConstraintName("FK_Models_InsuranceObjects");

                entity.HasOne(d => d.MdlLocalizableEntry).WithMany(p => p.Models)
                    .HasForeignKey(d => d.MdlLocalizableEntryId)
                    .HasConstraintName("FK_Models_LocalizableEntries");
            });

            modelBuilder.Entity<ModelProduct>(entity =>
            {
                entity.HasKey(e => e.MdpId);

                entity.ToTable("ModelProducts", "pdc");

                entity.Property(e => e.MdpId)
                    .ValueGeneratedNever()
                    .HasColumnName("MDP_Id");
                entity.Property(e => e.MdpCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("MDP_CreatedBy");
                entity.Property(e => e.MdpCreatedDate)
                    .HasDefaultValueSql("(getutcdate())")
                    .HasColumnName("MDP_CreatedDate");
                entity.Property(e => e.MdpInactive).HasColumnName("MDP_Inactive");
                entity.Property(e => e.MdpLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("MDP_LastModifiedBy");
                entity.Property(e => e.MdpLastModifiedDate)
                    .HasDefaultValueSql("(getutcdate())")
                    .HasColumnName("MDP_LastModifiedDate");
                entity.Property(e => e.MdpModelId).HasColumnName("MDP_Model_Id");
                entity.Property(e => e.MdpProductId).HasColumnName("MDP_Product_Id");
                entity.Property(e => e.MdpTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("MDP_TimeStamp");

                entity.HasOne(d => d.MdpModel).WithMany(p => p.ModelProducts)
                    .HasForeignKey(d => d.MdpModelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ModelProducts_Models");

                entity.HasOne(d => d.MdpProduct).WithMany(p => p.ModelProducts)
                    .HasForeignKey(d => d.MdpProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ModelProducts_Products");
            });

            modelBuilder.Entity<ModelSpecification>(entity =>
            {
                entity.HasKey(e => e.MdsId);

                entity.ToTable("ModelSpecifications", "pdc");

                entity.Property(e => e.MdsId)
                    .ValueGeneratedNever()
                    .HasColumnName("MDS_Id");
                entity.Property(e => e.MdsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("MDS_CreatedBy");
                entity.Property(e => e.MdsCreatedDate)
                    .HasDefaultValueSql("(getutcdate())")
                    .HasColumnName("MDS_CreatedDate");
                entity.Property(e => e.MdsInactive).HasColumnName("MDS_Inactive");
                entity.Property(e => e.MdsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("MDS_LastModifiedBy");
                entity.Property(e => e.MdsLastModifiedDate)
                    .HasDefaultValueSql("(getutcdate())")
                    .HasColumnName("MDS_LastModifiedDate");
                entity.Property(e => e.MdsLocalizableEntryId).HasColumnName("MDS_LocalizableEntry_Id");
                entity.Property(e => e.MdsModelId).HasColumnName("MDS_Model_Id");
                entity.Property(e => e.MdsSpecificationId).HasColumnName("MDS_Specification_Id");
                entity.Property(e => e.MdsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("MDS_TimeStamp");

                entity.HasOne(d => d.MdsLocalizableEntry).WithMany(p => p.ModelSpecifications)
                    .HasForeignKey(d => d.MdsLocalizableEntryId)
                    .HasConstraintName("FK_ModelSpecifications_LocalizableEntries");

                entity.HasOne(d => d.MdsModel).WithMany(p => p.ModelSpecifications)
                    .HasForeignKey(d => d.MdsModelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ModelSpecifications_Models");

                entity.HasOne(d => d.MdsSpecification).WithMany(p => p.ModelSpecifications)
                    .HasForeignKey(d => d.MdsSpecificationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ModelSpecifications_Specifications");
            });

            modelBuilder.Entity<MostCommonReporter>(entity =>
            {
                entity.HasKey(e => e.McrId);

                entity.ToTable("MostCommonReporters", "mdm");

                entity.Property(e => e.McrId)
                    .ValueGeneratedNever()
                    .HasColumnName("MCR_Id");
                entity.Property(e => e.McrCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("MCR_CreatedBy");
                entity.Property(e => e.McrCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("MCR_CreatedDate");
                entity.Property(e => e.McrLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("MCR_LastModifiedBy");
                entity.Property(e => e.McrLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("MCR_LastModifiedDate");
                entity.Property(e => e.McrLogoUrl).HasColumnName("MCR_LogoUrl");
                entity.Property(e => e.McrPosition).HasColumnName("MCR_Position");
                entity.Property(e => e.McrReporterId).HasColumnName("MCR_ReporterId");
                entity.Property(e => e.McrTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("MCR_TimeStamp");
            });

            modelBuilder.Entity<NewTable>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToTable("newTable");

                entity.Property(e => e.ActivityCode).HasMaxLength(10);
                entity.Property(e => e.ActivityName).HasMaxLength(250);
                entity.Property(e => e.ActivityOptionCode).HasMaxLength(20);
                entity.Property(e => e.ActivityOptionName).HasMaxLength(250);
                entity.Property(e => e.CoverageCode).HasMaxLength(10);
                entity.Property(e => e.CoverageName).HasMaxLength(250);
                entity.Property(e => e.DamageReasonCode).HasMaxLength(10);
                entity.Property(e => e.DamageReasonName).HasMaxLength(250);
                entity.Property(e => e.ObjectCode).HasMaxLength(10);
                entity.Property(e => e.ObjectName).HasMaxLength(250);
                entity.Property(e => e.PoductInactive).HasColumnName("Poduct_Inactive");
                entity.Property(e => e.ProductCode).HasMaxLength(20);
                entity.Property(e => e.ProductDamageReasonId).HasColumnName("Product_DamageReason_Id");
                entity.Property(e => e.ProductInsuranceCoverageId).HasColumnName("Product_InsuranceCoverage_Id");
                entity.Property(e => e.ProductInsuranceObjectId).HasColumnName("Product_InsuranceObject_Id");
                entity.Property(e => e.ProductName).HasMaxLength(250);
                entity.Property(e => e.ProductTypeCode).HasMaxLength(10);
                entity.Property(e => e.ProductTypeName).HasMaxLength(20);
                entity.Property(e => e.ProductWorkActivityId).HasColumnName("Product_WorkActivity_Id");
                entity.Property(e => e.ReportingFormCode).HasMaxLength(20);
                entity.Property(e => e.ReportingFormName).HasMaxLength(250);
                entity.Property(e => e.WaInactive).HasColumnName("WA_Inactive");
                entity.Property(e => e.WaIsClientTask).HasColumnName("WA_IsClientTask");
            });

            modelBuilder.Entity<NextNumber>(entity =>
            {
                entity.HasKey(e => e.NexId);

                entity.ToTable("NextNumbers", "ced");

                entity.HasIndex(e => e.NexName, "IX_NextNumbers_Name");

                entity.Property(e => e.NexId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("NEX_Id");
                entity.Property(e => e.NexCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("NEX_CreatedBy");
                entity.Property(e => e.NexCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("NEX_CreatedDate");
                entity.Property(e => e.NexDescription)
                    .HasMaxLength(250)
                    .HasColumnName("NEX_Description");
                entity.Property(e => e.NexEndDate)
                    .HasColumnType("date")
                    .HasColumnName("NEX_EndDate");
                entity.Property(e => e.NexEndRange).HasColumnName("NEX_EndRange");
                entity.Property(e => e.NexLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("NEX_LastModifiedBy");
                entity.Property(e => e.NexLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("NEX_LastModifiedDate");
                entity.Property(e => e.NexName)
                    .HasMaxLength(50)
                    .HasColumnName("NEX_Name");
                entity.Property(e => e.NexNumber).HasColumnName("NEX_Number");
                entity.Property(e => e.NexStartDate)
                    .HasColumnType("date")
                    .HasColumnName("NEX_StartDate");
                entity.Property(e => e.NexStartRange).HasColumnName("NEX_StartRange");
                entity.Property(e => e.NexTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("NEX_TimeStamp");
            });

            modelBuilder.Entity<Nextnumbervalue>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToTable("nextnumbervalue");

                entity.Property(e => e.Number).HasColumnName("number");
            });

            modelBuilder.Entity<NotCreatedPurchaseOrdersView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("NotCreatedPurchaseOrdersView", "dos");

                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.TaskDescription)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.WorkingOrderLineNumber).HasMaxLength(60);
                entity.Property(e => e.WorkingOrderLineStatus).HasMaxLength(10);
                entity.Property(e => e.WorkingOrderNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<NoteType>(entity =>
            {
                entity.HasKey(e => e.NotId);

                entity.ToTable("NoteTypes", "dos", tb => tb.HasTrigger("th_dos_NoteTypes_TraceHistory"));

                entity.Property(e => e.NotId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("NOT_Id");
                entity.Property(e => e.NotCode)
                    .HasMaxLength(10)
                    .HasColumnName("NOT_Code");
                entity.Property(e => e.NotCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("NOT_CreatedBy");
                entity.Property(e => e.NotCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("NOT_CreatedDate");
                entity.Property(e => e.NotInactive).HasColumnName("NOT_Inactive");
                entity.Property(e => e.NotLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("NOT_LastModifiedBy");
                entity.Property(e => e.NotLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("NOT_LastModifiedDate");
                entity.Property(e => e.NotLocalizableEntryId).HasColumnName("NOT_LocalizableEntry_Id");
                entity.Property(e => e.NotLongName)
                    .HasMaxLength(250)
                    .HasColumnName("NOT_LongName");
                entity.Property(e => e.NotShortName)
                    .HasMaxLength(20)
                    .HasColumnName("NOT_ShortName");
                entity.Property(e => e.NotTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("NOT_TimeStamp");

                entity.HasOne(d => d.NotLocalizableEntry).WithMany(p => p.NoteTypes)
                    .HasForeignKey(d => d.NotLocalizableEntryId)
                    .HasConstraintName("FK_NoteTypes_LocalizableEntries");
            });

            modelBuilder.Entity<NoteTypesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_NoteTypes_History_ID");

                entity.ToTable("NoteTypes_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.NotCode)
                    .HasMaxLength(10)
                    .HasColumnName("NOT_Code");
                entity.Property(e => e.NotCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("NOT_CreatedBy");
                entity.Property(e => e.NotCreatedDate).HasColumnName("NOT_CreatedDate");
                entity.Property(e => e.NotId).HasColumnName("NOT_Id");
                entity.Property(e => e.NotInactive).HasColumnName("NOT_Inactive");
                entity.Property(e => e.NotLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("NOT_LastModifiedBy");
                entity.Property(e => e.NotLastModifiedDate).HasColumnName("NOT_LastModifiedDate");
                entity.Property(e => e.NotLocalizableEntryId).HasColumnName("NOT_LocalizableEntry_Id");
                entity.Property(e => e.NotLongName)
                    .HasMaxLength(250)
                    .HasColumnName("NOT_LongName");
                entity.Property(e => e.NotShortName)
                    .HasMaxLength(20)
                    .HasColumnName("NOT_ShortName");
            });

            modelBuilder.Entity<ObjectClassification>(entity =>
            {
                entity.HasKey(e => e.OclId).HasName("PK__ObjectCl__70830F96CFE07188");

                entity.ToTable("ObjectClassifications", "mdm");

                entity.Property(e => e.OclId)
                    .HasMaxLength(20)
                    .HasColumnName("OCL_Id");
                entity.Property(e => e.OclCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OCL_CreatedBy");
                entity.Property(e => e.OclCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OCL_CreatedDate");
                entity.Property(e => e.OclInactive).HasColumnName("OCL_Inactive");
                entity.Property(e => e.OclLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OCL_LastModifiedBy");
                entity.Property(e => e.OclLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OCL_LastModifiedDate");
                entity.Property(e => e.OclLocalizableEntryId).HasColumnName("OCL_LocalizableEntry_Id");
                entity.Property(e => e.OclName)
                    .HasMaxLength(250)
                    .HasColumnName("OCL_Name");
                entity.Property(e => e.OclTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OCL_TimeStamp");

                entity.HasOne(d => d.OclLocalizableEntry).WithMany(p => p.ObjectClassifications)
                    .HasForeignKey(d => d.OclLocalizableEntryId)
                    .HasConstraintName("FK_ObjectClassifications_LocalizableEntries");
            });

            modelBuilder.Entity<ObjectMapping>(entity =>
            {
                entity.HasKey(e => e.OmId);

                entity.ToTable("ObjectMapping", "pros");

                entity.Property(e => e.OmId)
                    .ValueGeneratedNever()
                    .HasColumnName("OM_Id");
                entity.Property(e => e.OmCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OM_CreatedBy");
                entity.Property(e => e.OmCreatedDate).HasColumnName("OM_CreatedDate");
                entity.Property(e => e.OmDefaultEis).HasColumnName("OM_DefaultEIS");
                entity.Property(e => e.OmDefaultProspect).HasColumnName("OM_DefaultProspect");
                entity.Property(e => e.OmEiscode).HasColumnName("OM_EISCode");
                entity.Property(e => e.OmLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OM_LastModifiedBy");
                entity.Property(e => e.OmLastModifiedDate).HasColumnName("OM_LastModifiedDate");
                entity.Property(e => e.OmProspectCode).HasColumnName("OM_ProspectCode");
                entity.Property(e => e.OmTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OM_TimeStamp");
            });

            modelBuilder.Entity<Office>(entity =>
            {
                entity.HasKey(e => e.OfId);

                entity.ToTable("Offices", "ced");

                entity.Property(e => e.OfId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("OF_Id");
                entity.Property(e => e.OfAddressId).HasColumnName("OF_Address_Id");
                entity.Property(e => e.OfCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OF_CreatedBy");
                entity.Property(e => e.OfCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OF_CreatedDate");
                entity.Property(e => e.OfLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OF_LastModifiedBy");
                entity.Property(e => e.OfLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OF_LastModifiedDate");
                entity.Property(e => e.OfLegalEntityId).HasColumnName("OF_LegalEntity_Id");
                entity.Property(e => e.OfName)
                    .HasMaxLength(250)
                    .HasColumnName("OF_Name");
                entity.Property(e => e.OfTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OF_TimeStamp");

                entity.HasOne(d => d.OfAddress).WithMany(p => p.Offices)
                    .HasForeignKey(d => d.OfAddressId)
                    .HasConstraintName("FK_Offices_Addresses");

                entity.HasOne(d => d.OfLegalEntity).WithMany(p => p.Offices)
                    .HasForeignKey(d => d.OfLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Offices_LegalEntities");
            });

            modelBuilder.Entity<OrganizationAccount>(entity =>
            {
                entity.HasKey(e => e.OuaId);

                entity.ToTable("OrganizationAccounts", "mdm");

                entity.HasIndex(e => e.OuaBankAccountId, "IX_mdm_OrganizationAccounts_BankAccount");

                entity.HasIndex(e => new { e.OuaIsApproved, e.OuaCreatedDate }, "IX_mdm_OrganizationAccounts_IsApproved_CreatedDate");

                entity.HasIndex(e => new { e.OuaOrganizationUnitId, e.OuaIsApproved }, "IX_mdm_OrganizationAccounts_OrganizationUnit_Id_IsApproved");

                entity.Property(e => e.OuaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("OUA_Id");
                entity.Property(e => e.OuaAccountCode)
                    .HasMaxLength(10)
                    .HasColumnName("OUA_AccountCode");
                entity.Property(e => e.OuaAccountName)
                    .HasMaxLength(250)
                    .HasColumnName("OUA_AccountName");
                entity.Property(e => e.OuaBankAccountId).HasColumnName("OUA_BankAccount_Id");
                entity.Property(e => e.OuaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OUA_CreatedBy");
                entity.Property(e => e.OuaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OUA_CreatedDate");
                entity.Property(e => e.OuaIsApproved)
                    .HasDefaultValueSql("((0))")
                    .HasColumnName("OUA_IsApproved");
                entity.Property(e => e.OuaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OUA_LastModifiedBy");
                entity.Property(e => e.OuaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OUA_LastModifiedDate");
                entity.Property(e => e.OuaOrganizationUnitId).HasColumnName("OUA_OrganizationUnit_Id");
                entity.Property(e => e.OuaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OUA_TimeStamp");

                entity.HasOne(d => d.OuaBankAccount).WithMany(p => p.OrganizationAccounts)
                    .HasForeignKey(d => d.OuaBankAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationAccounts_BankAccounts");

                entity.HasOne(d => d.OuaOrganizationUnit).WithMany(p => p.OrganizationAccounts)
                    .HasForeignKey(d => d.OuaOrganizationUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationAccounts_OrganizationUnits");
            });

            modelBuilder.Entity<OrganizationAccount1>(entity =>
            {
                entity.HasKey(e => e.OuaId);

                entity.ToTable("OrganizationAccounts", "stg");

                entity.Property(e => e.OuaId)
                    .ValueGeneratedNever()
                    .HasColumnName("OUA_Id");
                entity.Property(e => e.OuaAccountCode)
                    .HasMaxLength(10)
                    .HasColumnName("OUA_AccountCode");
                entity.Property(e => e.OuaAccountName)
                    .HasMaxLength(250)
                    .HasColumnName("OUA_AccountName");
                entity.Property(e => e.OuaBankAccountId).HasColumnName("OUA_BankAccount_Id");
                entity.Property(e => e.OuaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OUA_CreatedBy");
                entity.Property(e => e.OuaCreatedDate).HasColumnName("OUA_CreatedDate");
                entity.Property(e => e.OuaIsApproved).HasColumnName("OUA_IsApproved");
                entity.Property(e => e.OuaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OUA_LastModifiedBy");
                entity.Property(e => e.OuaLastModifiedDate).HasColumnName("OUA_LastModifiedDate");
                entity.Property(e => e.OuaOrganizationUnitId).HasColumnName("OUA_OrganizationUnit_Id");
                entity.Property(e => e.OuaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OUA_TimeStamp");
            });

            modelBuilder.Entity<OrganizationAccountAttachment>(entity =>
            {
                entity.HasKey(e => e.OaaId);

                entity.ToTable("OrganizationAccountAttachments", "mdm");

                entity.Property(e => e.OaaId)
                    .ValueGeneratedNever()
                    .HasColumnName("OAA_Id");
                entity.Property(e => e.OaaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OAA_CreatedBy");
                entity.Property(e => e.OaaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OAA_CreatedDate");
                entity.Property(e => e.OaaDocumentId).HasColumnName("OAA_Document_Id");
                entity.Property(e => e.OaaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OAA_LastModifiedBy");
                entity.Property(e => e.OaaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OAA_LastModifiedDate");
                entity.Property(e => e.OaaOrganizationAccountId).HasColumnName("OAA_OrganizationAccount_Id");
                entity.Property(e => e.OaaSequenceNumber).HasColumnName("OAA_SequenceNumber");
                entity.Property(e => e.OaaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OAA_TimeStamp");

                entity.HasOne(d => d.OaaDocument).WithMany(p => p.OrganizationAccountAttachments)
                    .HasForeignKey(d => d.OaaDocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationAccountAttachments_Documents");

                entity.HasOne(d => d.OaaOrganizationAccount).WithMany(p => p.OrganizationAccountAttachments)
                    .HasForeignKey(d => d.OaaOrganizationAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationAccountAttachments_OrganizationAccounts");
            });

            modelBuilder.Entity<OrganizationAccountValidation>(entity =>
            {
                entity.HasKey(e => e.OavId);

                entity.ToTable("OrganizationAccountValidations", "mdm");

                entity.Property(e => e.OavId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("OAV_Id");
                entity.Property(e => e.OavCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OAV_CreatedBy");
                entity.Property(e => e.OavCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OAV_CreatedDate");
                entity.Property(e => e.OavEmployeeId).HasColumnName("OAV_Employee_Id");
                entity.Property(e => e.OavIsApproved).HasColumnName("OAV_IsApproved");
                entity.Property(e => e.OavLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OAV_LastModifiedBy");
                entity.Property(e => e.OavLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OAV_LastModifiedDate");
                entity.Property(e => e.OavOrganizationAccountAttachmentId).HasColumnName("OAV_OrganizationAccountAttachment_Id");
                entity.Property(e => e.OavOrganizationAccountId).HasColumnName("OAV_OrganizationAccount_Id");
                entity.Property(e => e.OavStartDate).HasColumnName("OAV_StartDate");
                entity.Property(e => e.OavTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OAV_TimeStamp");

                entity.HasOne(d => d.OavEmployee).WithMany(p => p.OrganizationAccountValidations)
                    .HasForeignKey(d => d.OavEmployeeId)
                    .HasConstraintName("FK_OrganizationAccountValidations_Employees");

                entity.HasOne(d => d.OavOrganizationAccountAttachment).WithMany(p => p.OrganizationAccountValidations)
                    .HasForeignKey(d => d.OavOrganizationAccountAttachmentId)
                    .HasConstraintName("FK_OrganizationAccountValidations_OrganizationAccountAttachments");

                entity.HasOne(d => d.OavOrganizationAccount).WithMany(p => p.OrganizationAccountValidations)
                    .HasForeignKey(d => d.OavOrganizationAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationAccountValidations_OrganizationAccounts");
            });

            modelBuilder.Entity<OrganizationAccountsApprovalsCountView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationAccountsApprovalsCountView", "mdm");
            });

            modelBuilder.Entity<OrganizationAddress>(entity =>
            {
                entity.HasKey(e => e.OadId);

                entity.ToTable("OrganizationAddresses", "mdm");

                entity.HasIndex(e => new { e.OadOrganizationUnitId, e.OadAddressId, e.OadPostOfficeBoxId }, "IX_OrganizationAddresses").IsUnique();

                entity.HasIndex(e => e.OadOrganizationUnitId, "IX_OrganizationAddresses_OrganizationUnit_Id");

                entity.Property(e => e.OadId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("OAD_Id");
                entity.Property(e => e.OadAddressId).HasColumnName("OAD_Address_Id");
                entity.Property(e => e.OadAddressTypeId).HasColumnName("OAD_AddressType_Id");
                entity.Property(e => e.OadCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OAD_CreatedBy");
                entity.Property(e => e.OadCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OAD_CreatedDate");
                entity.Property(e => e.OadLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OAD_LastModifiedBy");
                entity.Property(e => e.OadLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OAD_LastModifiedDate");
                entity.Property(e => e.OadOrganizationUnitId).HasColumnName("OAD_OrganizationUnit_Id");
                entity.Property(e => e.OadPostOfficeBoxId).HasColumnName("OAD_PostOfficeBox_Id");
                entity.Property(e => e.OadTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OAD_TimeStamp");

                entity.HasOne(d => d.OadAddress).WithMany(p => p.OrganizationAddresses)
                    .HasForeignKey(d => d.OadAddressId)
                    .HasConstraintName("FK_OrganizationAddresses_Addresses");

                entity.HasOne(d => d.OadAddressType).WithMany(p => p.OrganizationAddresses)
                    .HasForeignKey(d => d.OadAddressTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationAddresses_AddressTypes");

                entity.HasOne(d => d.OadOrganizationUnit).WithMany(p => p.OrganizationAddresses)
                    .HasForeignKey(d => d.OadOrganizationUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationAddresses_OrganizationUnits");

                entity.HasOne(d => d.OadPostOfficeBox).WithMany(p => p.OrganizationAddresses)
                    .HasForeignKey(d => d.OadPostOfficeBoxId)
                    .HasConstraintName("FK_OrganizationAddresses_PostOfficeBox");
            });

            modelBuilder.Entity<OrganizationAddress1>(entity =>
            {
                entity.HasKey(e => e.OadId);

                entity.ToTable("OrganizationAddresses", "stg");

                entity.Property(e => e.OadId)
                    .ValueGeneratedNever()
                    .HasColumnName("OAD_Id");
                entity.Property(e => e.OadAddressId).HasColumnName("OAD_Address_Id");
                entity.Property(e => e.OadAddressTypeId).HasColumnName("OAD_AddressType_Id");
                entity.Property(e => e.OadCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OAD_CreatedBy");
                entity.Property(e => e.OadCreatedDate).HasColumnName("OAD_CreatedDate");
                entity.Property(e => e.OadLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OAD_LastModifiedBy");
                entity.Property(e => e.OadLastModifiedDate).HasColumnName("OAD_LastModifiedDate");
                entity.Property(e => e.OadOrganizationUnitId).HasColumnName("OAD_OrganizationUnit_Id");
                entity.Property(e => e.OadPostOfficeBoxId).HasColumnName("OAD_PostOfficeBox_Id");
                entity.Property(e => e.OadTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OAD_TimeStamp");
            });

            modelBuilder.Entity<OrganizationApplication>(entity =>
            {
                entity.HasKey(e => e.OraId);

                entity.ToTable("OrganizationApplications", "mdm");

                entity.HasIndex(e => new { e.OraApplicationId, e.OraInactive }, "IX_mdm_OrganizationApplications_Application_Id_Inactive__INCL");

                entity.HasIndex(e => new { e.OraOrganizationId, e.OraInactive }, "IX_mdm_OrganizationApplications_Organization_Id_Inactive");

                entity.Property(e => e.OraId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("ORA_Id");
                entity.Property(e => e.OraApplicationId).HasColumnName("ORA_Application_Id");
                entity.Property(e => e.OraCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ORA_CreatedBy");
                entity.Property(e => e.OraCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ORA_CreatedDate");
                entity.Property(e => e.OraInactive).HasColumnName("ORA_Inactive");
                entity.Property(e => e.OraLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ORA_LastModifiedBy");
                entity.Property(e => e.OraLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ORA_LastModifiedDate");
                entity.Property(e => e.OraOrganizationId).HasColumnName("ORA_Organization_Id");
                entity.Property(e => e.OraTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ORA_TimeStamp");

                entity.HasOne(d => d.OraApplication).WithMany(p => p.OrganizationApplications)
                    .HasForeignKey(d => d.OraApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationApplications_Applications");

                entity.HasOne(d => d.OraOrganization).WithMany(p => p.OrganizationApplications)
                    .HasForeignKey(d => d.OraOrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationApplications_OrganizationUnits");
            });

            modelBuilder.Entity<OrganizationApplication1>(entity =>
            {
                entity.HasKey(e => e.OraId);

                entity.ToTable("OrganizationApplications", "stg");

                entity.Property(e => e.OraId)
                    .ValueGeneratedNever()
                    .HasColumnName("ORA_Id");
                entity.Property(e => e.OraApplicationId).HasColumnName("ORA_Application_Id");
                entity.Property(e => e.OraCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ORA_CreatedBy");
                entity.Property(e => e.OraCreatedDate).HasColumnName("ORA_CreatedDate");
                entity.Property(e => e.OraInactive).HasColumnName("ORA_Inactive");
                entity.Property(e => e.OraLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ORA_LastModifiedBy");
                entity.Property(e => e.OraLastModifiedDate).HasColumnName("ORA_LastModifiedDate");
                entity.Property(e => e.OraOrganizationId).HasColumnName("ORA_Organization_Id");
                entity.Property(e => e.OraTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ORA_TimeStamp");
            });

            modelBuilder.Entity<OrganizationBankAccountsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationBankAccountsView", "mdm");

                entity.Property(e => e.AccountAbbreviation).HasMaxLength(20);
                entity.Property(e => e.AccountAddressLine1).HasMaxLength(250);
                entity.Property(e => e.AccountAddressLine2).HasMaxLength(250);
                entity.Property(e => e.AccountIdentifier).HasMaxLength(20);
                entity.Property(e => e.AccountName).HasMaxLength(250);
                entity.Property(e => e.AccountNumber).HasMaxLength(34);
                entity.Property(e => e.BankName).HasMaxLength(250);
                entity.Property(e => e.Bic)
                    .HasMaxLength(11)
                    .HasColumnName("BIC");
                entity.Property(e => e.CountryCode).HasMaxLength(3);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Iban)
                    .HasMaxLength(34)
                    .HasColumnName("IBAN");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.OrganizationUnitCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.OrganizationUnitName).HasMaxLength(756);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<OrganizationCode>(entity =>
            {
                entity.HasKey(e => e.OucId);

                entity.ToTable("OrganizationCodes", "mdm");

                entity.HasIndex(e => e.OucCode, "IX_Code");

                entity.HasIndex(e => e.OucOrganizationUnitId, "IX_OrganizationUnit_Id");

                entity.Property(e => e.OucId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("OUC_Id");
                entity.Property(e => e.OucCode)
                    .HasMaxLength(250)
                    .HasColumnName("OUC_Code");
                entity.Property(e => e.OucCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OUC_CreatedBy");
                entity.Property(e => e.OucCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OUC_CreatedDate");
                entity.Property(e => e.OucLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OUC_LastModifiedBy");
                entity.Property(e => e.OucLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OUC_LastModifiedDate");
                entity.Property(e => e.OucOrganizationCodeTypeId).HasColumnName("OUC_OrganizationCodeType_Id");
                entity.Property(e => e.OucOrganizationUnitId).HasColumnName("OUC_OrganizationUnit_Id");
                entity.Property(e => e.OucTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OUC_TimeStamp");
                entity.Property(e => e.OucValidFromDate)
                    .HasColumnType("date")
                    .HasColumnName("OUC_ValidFromDate");
                entity.Property(e => e.OucValidUntilDate)
                    .HasColumnType("date")
                    .HasColumnName("OUC_ValidUntilDate");

                entity.HasOne(d => d.OucOrganizationCodeType).WithMany(p => p.OrganizationCodes)
                    .HasForeignKey(d => d.OucOrganizationCodeTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationCodes_OrganizationCodeTypes");

                entity.HasOne(d => d.OucOrganizationUnit).WithMany(p => p.OrganizationCodes)
                    .HasForeignKey(d => d.OucOrganizationUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationCodes_OrganizationUnits");
            });

            modelBuilder.Entity<OrganizationCode1>(entity =>
            {
                entity.HasKey(e => e.OucId);

                entity.ToTable("OrganizationCodes", "stg");

                entity.Property(e => e.OucId)
                    .ValueGeneratedNever()
                    .HasColumnName("OUC_Id");
                entity.Property(e => e.OucCode)
                    .HasMaxLength(250)
                    .HasColumnName("OUC_Code");
                entity.Property(e => e.OucCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OUC_CreatedBy");
                entity.Property(e => e.OucCreatedDate).HasColumnName("OUC_CreatedDate");
                entity.Property(e => e.OucLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OUC_LastModifiedBy");
                entity.Property(e => e.OucLastModifiedDate).HasColumnName("OUC_LastModifiedDate");
                entity.Property(e => e.OucOrganizationCodeTypeId).HasColumnName("OUC_OrganizationCodeType_Id");
                entity.Property(e => e.OucOrganizationUnitId).HasColumnName("OUC_OrganizationUnit_Id");
                entity.Property(e => e.OucTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OUC_TimeStamp");
                entity.Property(e => e.OucValidFromDate)
                    .HasColumnType("date")
                    .HasColumnName("OUC_ValidFromDate");
                entity.Property(e => e.OucValidUntilDate)
                    .HasColumnType("date")
                    .HasColumnName("OUC_ValidUntilDate");
            });

            modelBuilder.Entity<OrganizationCodeType>(entity =>
            {
                entity.HasKey(e => e.OctId);

                entity.ToTable("OrganizationCodeTypes", "mdm");

                entity.Property(e => e.OctId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("OCT_Id");
                entity.Property(e => e.OctCode)
                    .HasMaxLength(10)
                    .HasColumnName("OCT_Code");
                entity.Property(e => e.OctCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OCT_CreatedBy");
                entity.Property(e => e.OctCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OCT_CreatedDate");
                entity.Property(e => e.OctInactive).HasColumnName("OCT_Inactive");
                entity.Property(e => e.OctLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OCT_LastModifiedBy");
                entity.Property(e => e.OctLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OCT_LastModifiedDate");
                entity.Property(e => e.OctLocalizableEntryId).HasColumnName("OCT_LocalizableEntry_Id");
                entity.Property(e => e.OctLongName)
                    .HasMaxLength(250)
                    .HasColumnName("OCT_LongName");
                entity.Property(e => e.OctShortName)
                    .HasMaxLength(20)
                    .HasColumnName("OCT_ShortName");
                entity.Property(e => e.OctTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OCT_TimeStamp");

                entity.HasOne(d => d.OctLocalizableEntry).WithMany(p => p.OrganizationCodeTypes)
                    .HasForeignKey(d => d.OctLocalizableEntryId)
                    .HasConstraintName("FK_OrganizationCodeTypes_LocalizableEntries");
            });

            modelBuilder.Entity<OrganizationCodeType1>(entity =>
            {
                entity.HasKey(e => e.OctId);

                entity.ToTable("OrganizationCodeTypes", "stg");

                entity.Property(e => e.OctId)
                    .ValueGeneratedNever()
                    .HasColumnName("OCT_Id");
                entity.Property(e => e.OctCode)
                    .HasMaxLength(10)
                    .HasColumnName("OCT_Code");
                entity.Property(e => e.OctCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OCT_CreatedBy");
                entity.Property(e => e.OctCreatedDate).HasColumnName("OCT_CreatedDate");
                entity.Property(e => e.OctInactive).HasColumnName("OCT_Inactive");
                entity.Property(e => e.OctLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OCT_LastModifiedBy");
                entity.Property(e => e.OctLastModifiedDate).HasColumnName("OCT_LastModifiedDate");
                entity.Property(e => e.OctLocalizableEntryId).HasColumnName("OCT_LocalizableEntry_Id");
                entity.Property(e => e.OctLongName)
                    .HasMaxLength(250)
                    .HasColumnName("OCT_LongName");
                entity.Property(e => e.OctShortName)
                    .HasMaxLength(20)
                    .HasColumnName("OCT_ShortName");
                entity.Property(e => e.OctTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OCT_TimeStamp");
            });

            modelBuilder.Entity<OrganizationContact>(entity =>
            {
                entity.HasKey(e => e.OcsId);

                entity.ToTable("OrganizationContacts", "mdm");

                entity.HasIndex(e => e.OcsOrganizationUnitId, "IX_OrganizationContacts_OrganizationUnit_Id");

                entity.Property(e => e.OcsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("OCS_Id");
                entity.Property(e => e.OcsContactTypeId).HasColumnName("OCS_ContactType_Id");
                entity.Property(e => e.OcsContactValue)
                    .HasMaxLength(250)
                    .HasColumnName("OCS_ContactValue");
                entity.Property(e => e.OcsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OCS_CreatedBy");
                entity.Property(e => e.OcsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OCS_CreatedDate");
                entity.Property(e => e.OcsIsPrimary).HasColumnName("OCS_IsPrimary");
                entity.Property(e => e.OcsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OCS_LastModifiedBy");
                entity.Property(e => e.OcsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OCS_LastModifiedDate");
                entity.Property(e => e.OcsNotes)
                    .HasMaxLength(500)
                    .HasColumnName("OCS_Notes");
                entity.Property(e => e.OcsOrganizationUnitId).HasColumnName("OCS_OrganizationUnit_Id");
                entity.Property(e => e.OcsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OCS_TimeStamp");

                entity.HasOne(d => d.OcsContactType).WithMany(p => p.OrganizationContacts)
                    .HasForeignKey(d => d.OcsContactTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationContacts_ContactTypes");

                entity.HasOne(d => d.OcsOrganizationUnit).WithMany(p => p.OrganizationContacts)
                    .HasForeignKey(d => d.OcsOrganizationUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationContacts_OrganizationUnits");
            });

            modelBuilder.Entity<OrganizationCoverageProduct>(entity =>
            {
                entity.HasKey(e => e.OcpId);

                entity.ToTable("OrganizationCoverageProducts", "mdm");

                entity.HasIndex(e => new { e.OcpCoverageProductId, e.OcpInactive }, "IX_OrganizationCoverageProducts_OCP_CoverageProduct_Id_OCP_Inactive");

                entity.HasIndex(e => e.OcpOrganizationUnitId, "IX_OrganizationCoverageProducts_OCP_OrganizationUnit_Id");

                entity.Property(e => e.OcpId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("OCP_Id");
                entity.Property(e => e.OcpCoverageProductId).HasColumnName("OCP_CoverageProduct_Id");
                entity.Property(e => e.OcpCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OCP_CreatedBy");
                entity.Property(e => e.OcpCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OCP_CreatedDate");
                entity.Property(e => e.OcpDeviantBillingParty)
                    .HasMaxLength(250)
                    .HasColumnName("OCP_DeviantBillingParty");
                entity.Property(e => e.OcpEndDate).HasColumnName("OCP_EndDate");
                entity.Property(e => e.OcpHasCustomCommunication).HasColumnName("OCP_HasCustomCommunication");
                entity.Property(e => e.OcpInactive).HasColumnName("OCP_Inactive");
                entity.Property(e => e.OcpLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OCP_LastModifiedBy");
                entity.Property(e => e.OcpLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OCP_LastModifiedDate");
                entity.Property(e => e.OcpName)
                    .HasMaxLength(250)
                    .HasColumnName("OCP_Name");
                entity.Property(e => e.OcpOrganizationUnitId).HasColumnName("OCP_OrganizationUnit_Id");
                entity.Property(e => e.OcpPolisCheckAlternateTelephone)
                    .HasMaxLength(20)
                    .HasColumnName("OCP_PolisCheckAlternateTelephone");
                entity.Property(e => e.OcpPolisCheckPortalWebsite)
                    .HasMaxLength(250)
                    .HasColumnName("OCP_PolisCheckPortalWebsite");
                entity.Property(e => e.OcpPolisCheckTelephoneNr)
                    .HasMaxLength(20)
                    .HasColumnName("OCP_PolisCheckTelephoneNr");
                entity.Property(e => e.OcpSpecificInformation).HasColumnName("OCP_SpecificInformation");
                entity.Property(e => e.OcpStartDate).HasColumnName("OCP_StartDate");
                entity.Property(e => e.OcpTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OCP_TimeStamp");

                entity.HasOne(d => d.OcpCoverageProduct).WithMany(p => p.OrganizationCoverageProducts)
                    .HasForeignKey(d => d.OcpCoverageProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationCoverageProducts_CoverageProducts");

                entity.HasOne(d => d.OcpOrganizationUnit).WithMany(p => p.OrganizationCoverageProducts)
                    .HasForeignKey(d => d.OcpOrganizationUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationCoverageProducts_OrganizationUnits");
            });

            modelBuilder.Entity<OrganizationCoverageProductsExtension>(entity =>
            {
                entity.HasKey(e => e.OcpeId).HasName("PK_OrganizationUnitCoverProductsExtension");

                entity.ToTable("OrganizationCoverageProductsExtension", "mdm");

                entity.Property(e => e.OcpeId)
                    .ValueGeneratedNever()
                    .HasColumnName("OCPE_Id");
                entity.Property(e => e.OcpeCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OCPE_CreatedBy");
                entity.Property(e => e.OcpeCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OCPE_CreatedDate");
                entity.Property(e => e.OcpeExternalCostInvoiceRecipientId).HasColumnName("OCPE_ExternalCostInvoiceRecipient_Id");
                entity.Property(e => e.OcpeFeeInvoiceRecipientId).HasColumnName("OCPE_FeeInvoiceRecipient_Id");
                entity.Property(e => e.OcpeInactive).HasColumnName("OCPE_Inactive");
                entity.Property(e => e.OcpeLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OCPE_LastModifiedBy");
                entity.Property(e => e.OcpeLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OCPE_LastModifiedDate");
                entity.Property(e => e.OcpeMandateAdministrationChargedExpensesApplicable).HasColumnName("OCPE_MandateAdministrationChargedExpensesApplicable");
                entity.Property(e => e.OcpeMandateAdministrationFeeInvoicesApplicable).HasColumnName("OCPE_MandateAdministrationFeeInvoicesApplicable");
                entity.Property(e => e.OcpeTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OCPE_TimeStamp");

                entity.HasOne(d => d.OcpeExternalCostInvoiceRecipient).WithMany(p => p.OrganizationCoverageProductsExtensionOcpeExternalCostInvoiceRecipients)
                    .HasForeignKey(d => d.OcpeExternalCostInvoiceRecipientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationCoverageProductsExtension_ExternalCostInvoiceRecipient");

                entity.HasOne(d => d.OcpeFeeInvoiceRecipient).WithMany(p => p.OrganizationCoverageProductsExtensionOcpeFeeInvoiceRecipients)
                    .HasForeignKey(d => d.OcpeFeeInvoiceRecipientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationCoverageProductsExtension_FeeInvoiceRecipient");

                entity.HasOne(d => d.Ocpe).WithOne(p => p.OrganizationCoverageProductsExtension)
                    .HasForeignKey<OrganizationCoverageProductsExtension>(d => d.OcpeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationCoverageProductsExtension_OrganizationCoverageProducts");
            });

            modelBuilder.Entity<OrganizationGroup>(entity =>
            {
                entity.HasKey(e => e.OgId);

                entity.ToTable("OrganizationGroups", "mdm");

                entity.HasIndex(e => e.OgCode, "UX_mdm_OrganizationGroups_Code__Filtered")
                    .IsUnique()
                    .HasFilter("([OG_Inactive]=(0))");

                entity.Property(e => e.OgId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("OG_Id");
                entity.Property(e => e.OgCode)
                    .HasMaxLength(10)
                    .HasColumnName("OG_Code");
                entity.Property(e => e.OgCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OG_CreatedBy");
                entity.Property(e => e.OgCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OG_CreatedDate");
                entity.Property(e => e.OgInactive).HasColumnName("OG_Inactive");
                entity.Property(e => e.OgLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OG_LastModifiedBy");
                entity.Property(e => e.OgLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OG_LastModifiedDate");
                entity.Property(e => e.OgLocalizableEntryId).HasColumnName("OG_LocalizableEntry_Id");
                entity.Property(e => e.OgLongName)
                    .HasMaxLength(250)
                    .HasColumnName("OG_LongName");
                entity.Property(e => e.OgShortName)
                    .HasMaxLength(20)
                    .HasColumnName("OG_ShortName");
                entity.Property(e => e.OgTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OG_TimeStamp");

                entity.HasOne(d => d.OgLocalizableEntry).WithMany(p => p.OrganizationGroups)
                    .HasForeignKey(d => d.OgLocalizableEntryId)
                    .HasConstraintName("FK_OrganizationGroups_LocalizableEntries");
            });

            modelBuilder.Entity<OrganizationGroup1>(entity =>
            {
                entity.HasKey(e => e.OgId);

                entity.ToTable("OrganizationGroups", "stg");

                entity.Property(e => e.OgId)
                    .ValueGeneratedNever()
                    .HasColumnName("OG_Id");
                entity.Property(e => e.OgCode)
                    .HasMaxLength(10)
                    .HasColumnName("OG_Code");
                entity.Property(e => e.OgCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OG_CreatedBy");
                entity.Property(e => e.OgCreatedDate).HasColumnName("OG_CreatedDate");
                entity.Property(e => e.OgInactive).HasColumnName("OG_Inactive");
                entity.Property(e => e.OgLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OG_LastModifiedBy");
                entity.Property(e => e.OgLastModifiedDate).HasColumnName("OG_LastModifiedDate");
                entity.Property(e => e.OgLocalizableEntryId).HasColumnName("OG_LocalizableEntry_Id");
                entity.Property(e => e.OgLongName)
                    .HasMaxLength(250)
                    .HasColumnName("OG_LongName");
                entity.Property(e => e.OgShortName)
                    .HasMaxLength(20)
                    .HasColumnName("OG_ShortName");
                entity.Property(e => e.OgTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OG_TimeStamp");
            });

            modelBuilder.Entity<OrganizationHierarchy>(entity =>
            {
                entity.HasKey(e => e.OhId);

                entity.ToTable("OrganizationHierarchy", "mdm");

                entity.Property(e => e.OhId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("OH_Id");
                entity.Property(e => e.OhCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OH_CreatedBy");
                entity.Property(e => e.OhCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OH_CreatedDate");
                entity.Property(e => e.OhEndDate)
                    .HasColumnType("date")
                    .HasColumnName("OH_EndDate");
                entity.Property(e => e.OhLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OH_LastModifiedBy");
                entity.Property(e => e.OhLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OH_LastModifiedDate");
                entity.Property(e => e.OhParentOuId).HasColumnName("OH_ParentOU_Id");
                entity.Property(e => e.OhStartDate)
                    .HasColumnType("date")
                    .HasColumnName("OH_StartDate");
                entity.Property(e => e.OhTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OH_TimeStamp");

                entity.HasOne(d => d.Oh).WithOne(p => p.OrganizationHierarchyOh)
                    .HasForeignKey<OrganizationHierarchy>(d => d.OhId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationHierarchy_OrganizationUnits");

                entity.HasOne(d => d.OhParentOu).WithMany(p => p.OrganizationHierarchyOhParentOus)
                    .HasForeignKey(d => d.OhParentOuId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationHierarchy_ParentOrganizationUnits");
            });

            modelBuilder.Entity<OrganizationHierarchy1>(entity =>
            {
                entity.HasKey(e => e.OhId);

                entity.ToTable("OrganizationHierarchy", "stg");

                entity.Property(e => e.OhId)
                    .ValueGeneratedNever()
                    .HasColumnName("OH_Id");
                entity.Property(e => e.OhCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OH_CreatedBy");
                entity.Property(e => e.OhCreatedDate).HasColumnName("OH_CreatedDate");
                entity.Property(e => e.OhEndDate)
                    .HasColumnType("date")
                    .HasColumnName("OH_EndDate");
                entity.Property(e => e.OhLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OH_LastModifiedBy");
                entity.Property(e => e.OhLastModifiedDate).HasColumnName("OH_LastModifiedDate");
                entity.Property(e => e.OhParentOuId).HasColumnName("OH_ParentOU_Id");
                entity.Property(e => e.OhStartDate)
                    .HasColumnType("date")
                    .HasColumnName("OH_StartDate");
                entity.Property(e => e.OhTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OH_TimeStamp");
            });

            modelBuilder.Entity<OrganizationHierarchyView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationHierarchyView", "mdm");

                entity.Property(e => e.Actief)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.ChildActief)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Child Actief");
                entity.Property(e => e.ChildEinddatum)
                    .HasColumnType("date")
                    .HasColumnName("Child Einddatum");
                entity.Property(e => e.ChildNaamCpl)
                    .HasMaxLength(756)
                    .HasColumnName("Child Naam cpl");
                entity.Property(e => e.ChildNaamKort)
                    .HasMaxLength(20)
                    .HasColumnName("Child Naam kort");
                entity.Property(e => e.ChildNiveauPlekInStructuur)
                    .HasMaxLength(61)
                    .HasColumnName("Child Niveau (plek in structuur)");
                entity.Property(e => e.ChildOgCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("Child OG-Code");
                entity.Property(e => e.ChildParentBovenliggendeType)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("Child Parent (bovenliggende type)");
                entity.Property(e => e.ChildStartdatum)
                    .HasColumnType("date")
                    .HasColumnName("Child Startdatum");
                entity.Property(e => e.ChildTypeTpVerzOfVolmacht)
                    .HasMaxLength(61)
                    .HasColumnName("Child Type (tp/verz/of volmacht)");
                entity.Property(e => e.Einddatum).HasColumnType("date");
                entity.Property(e => e.NaamCpl)
                    .HasMaxLength(756)
                    .HasColumnName("Naam cpl");
                entity.Property(e => e.NaamKort)
                    .HasMaxLength(20)
                    .HasColumnName("Naam kort");
                entity.Property(e => e.NiveauPlekInStructuur)
                    .HasMaxLength(61)
                    .HasColumnName("Niveau (plek in structuur)");
                entity.Property(e => e.OgCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("OG-Code");
                entity.Property(e => e.OrderPath)
                    .HasMaxLength(1000)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ParentBovenliggendeType)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("Parent (bovenliggende type)");
                entity.Property(e => e.Startdatum).HasColumnType("date");
                entity.Property(e => e.TypeTpVerzOfVolmacht)
                    .HasMaxLength(61)
                    .HasColumnName("Type (tp/verz/of volmacht)");
            });

            modelBuilder.Entity<OrganizationLabel>(entity =>
            {
                entity.HasKey(e => e.OulId);

                entity.ToTable("OrganizationLabels", "mdm");

                entity.Property(e => e.OulId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("OUL_Id");
                entity.Property(e => e.OulCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OUL_CreatedBy");
                entity.Property(e => e.OulCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OUL_CreatedDate");
                entity.Property(e => e.OulLabel)
                    .HasMaxLength(20)
                    .HasColumnName("OUL_Label");
                entity.Property(e => e.OulLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OUL_LastModifiedBy");
                entity.Property(e => e.OulLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OUL_LastModifiedDate");
                entity.Property(e => e.OulOrganizationLabelTypeId).HasColumnName("OUL_OrganizationLabelType_Id");
                entity.Property(e => e.OulOrganizationUnitId).HasColumnName("OUL_OrganizationUnit_Id");
                entity.Property(e => e.OulTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OUL_TimeStamp");
                entity.Property(e => e.OulValidFromDate)
                    .HasColumnType("date")
                    .HasColumnName("OUL_ValidFromDate");
                entity.Property(e => e.OulValidUntilDate)
                    .HasColumnType("date")
                    .HasColumnName("OUL_ValidUntilDate");

                entity.HasOne(d => d.OulOrganizationLabelType).WithMany(p => p.OrganizationLabels)
                    .HasForeignKey(d => d.OulOrganizationLabelTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationLabels_OrganizationLabelTypes");

                entity.HasOne(d => d.OulOrganizationUnit).WithMany(p => p.OrganizationLabels)
                    .HasForeignKey(d => d.OulOrganizationUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationLabels_OrganizationUnits");
            });

            modelBuilder.Entity<OrganizationLabel1>(entity =>
            {
                entity.HasKey(e => e.OulId);

                entity.ToTable("OrganizationLabels", "stg");

                entity.Property(e => e.OulId)
                    .ValueGeneratedNever()
                    .HasColumnName("OUL_Id");
                entity.Property(e => e.OulCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OUL_CreatedBy");
                entity.Property(e => e.OulCreatedDate).HasColumnName("OUL_CreatedDate");
                entity.Property(e => e.OulLabel)
                    .HasMaxLength(20)
                    .HasColumnName("OUL_Label");
                entity.Property(e => e.OulLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OUL_LastModifiedBy");
                entity.Property(e => e.OulLastModifiedDate).HasColumnName("OUL_LastModifiedDate");
                entity.Property(e => e.OulOrganizationLabelTypeId).HasColumnName("OUL_OrganizationLabelType_Id");
                entity.Property(e => e.OulOrganizationUnitId).HasColumnName("OUL_OrganizationUnit_Id");
                entity.Property(e => e.OulTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OUL_TimeStamp");
                entity.Property(e => e.OulValidFromDate)
                    .HasColumnType("date")
                    .HasColumnName("OUL_ValidFromDate");
                entity.Property(e => e.OulValidUntilDate)
                    .HasColumnType("date")
                    .HasColumnName("OUL_ValidUntilDate");
            });

            modelBuilder.Entity<OrganizationLabelType>(entity =>
            {
                entity.HasKey(e => e.OltId);

                entity.ToTable("OrganizationLabelTypes", "mdm");

                entity.HasIndex(e => e.OltCode, "UX_mdm_OrganizationLabelTypes_Code__Filtered")
                    .IsUnique()
                    .HasFilter("([OLT_Inactive]=(0))");

                entity.Property(e => e.OltId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("OLT_Id");
                entity.Property(e => e.OltCode)
                    .HasMaxLength(10)
                    .HasColumnName("OLT_Code");
                entity.Property(e => e.OltCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OLT_CreatedBy");
                entity.Property(e => e.OltCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OLT_CreatedDate");
                entity.Property(e => e.OltInactive).HasColumnName("OLT_Inactive");
                entity.Property(e => e.OltLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OLT_LastModifiedBy");
                entity.Property(e => e.OltLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OLT_LastModifiedDate");
                entity.Property(e => e.OltLocalizableEntryId).HasColumnName("OLT_LocalizableEntry_Id");
                entity.Property(e => e.OltLongName)
                    .HasMaxLength(250)
                    .HasColumnName("OLT_LongName");
                entity.Property(e => e.OltShortName)
                    .HasMaxLength(20)
                    .HasColumnName("OLT_ShortName");
                entity.Property(e => e.OltTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OLT_TimeStamp");

                entity.HasOne(d => d.OltLocalizableEntry).WithMany(p => p.OrganizationLabelTypes)
                    .HasForeignKey(d => d.OltLocalizableEntryId)
                    .HasConstraintName("FK_OrganizationLabelTypes_LocalizableEntries");
            });

            modelBuilder.Entity<OrganizationLabelType1>(entity =>
            {
                entity.HasKey(e => e.OltId);

                entity.ToTable("OrganizationLabelTypes", "stg");

                entity.Property(e => e.OltId)
                    .ValueGeneratedNever()
                    .HasColumnName("OLT_Id");
                entity.Property(e => e.OltCode)
                    .HasMaxLength(10)
                    .HasColumnName("OLT_Code");
                entity.Property(e => e.OltCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OLT_CreatedBy");
                entity.Property(e => e.OltCreatedDate).HasColumnName("OLT_CreatedDate");
                entity.Property(e => e.OltInactive).HasColumnName("OLT_Inactive");
                entity.Property(e => e.OltLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OLT_LastModifiedBy");
                entity.Property(e => e.OltLastModifiedDate).HasColumnName("OLT_LastModifiedDate");
                entity.Property(e => e.OltLocalizableEntryId).HasColumnName("OLT_LocalizableEntry_Id");
                entity.Property(e => e.OltLongName)
                    .HasMaxLength(250)
                    .HasColumnName("OLT_LongName");
                entity.Property(e => e.OltShortName)
                    .HasMaxLength(20)
                    .HasColumnName("OLT_ShortName");
                entity.Property(e => e.OltTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OLT_TimeStamp");
            });

            modelBuilder.Entity<OrganizationNote>(entity =>
            {
                entity.HasKey(e => e.OnoId);

                entity.ToTable("OrganizationNotes", "mdm");

                entity.HasIndex(e => e.OnoOrganizationUnitId, "IX_mdm_OrganizationNotes_OrganizationUnit_Id__INCL");

                entity.Property(e => e.OnoId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("ONO_Id");
                entity.Property(e => e.OnoCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ONO_CreatedBy");
                entity.Property(e => e.OnoCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ONO_CreatedDate");
                entity.Property(e => e.OnoLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ONO_LastModifiedBy");
                entity.Property(e => e.OnoLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ONO_LastModifiedDate");
                entity.Property(e => e.OnoNoteTitle)
                    .HasMaxLength(250)
                    .HasColumnName("ONO_NoteTitle");
                entity.Property(e => e.OnoNotes).HasColumnName("ONO_Notes");
                entity.Property(e => e.OnoOrganizationUnitId).HasColumnName("ONO_OrganizationUnit_Id");
                entity.Property(e => e.OnoTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ONO_TimeStamp");

                entity.HasOne(d => d.OnoOrganizationUnit).WithMany(p => p.OrganizationNotes)
                    .HasForeignKey(d => d.OnoOrganizationUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationNotes_OrganizationUnits");
            });

            modelBuilder.Entity<OrganizationNote1>(entity =>
            {
                entity.HasKey(e => e.OnoId);

                entity.ToTable("OrganizationNotes", "stg");

                entity.Property(e => e.OnoId)
                    .ValueGeneratedNever()
                    .HasColumnName("ONO_Id");
                entity.Property(e => e.OnoCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ONO_CreatedBy");
                entity.Property(e => e.OnoCreatedDate).HasColumnName("ONO_CreatedDate");
                entity.Property(e => e.OnoLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ONO_LastModifiedBy");
                entity.Property(e => e.OnoLastModifiedDate).HasColumnName("ONO_LastModifiedDate");
                entity.Property(e => e.OnoNotes).HasColumnName("ONO_Notes");
                entity.Property(e => e.OnoOrganizationUnitId).HasColumnName("ONO_OrganizationUnit_Id");
                entity.Property(e => e.OnoTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ONO_TimeStamp");
            });

            modelBuilder.Entity<OrganizationPaymentCondition>(entity =>
            {
                entity.HasKey(e => e.OpcId);

                entity.ToTable("OrganizationPaymentConditions", "mdm");

                entity.Property(e => e.OpcId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("OPC_Id");
                entity.Property(e => e.OpcCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OPC_CreatedBy");
                entity.Property(e => e.OpcCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OPC_CreatedDate");
                entity.Property(e => e.OpcEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("OPC_EffectiveDate");
                entity.Property(e => e.OpcLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OPC_LastModifiedBy");
                entity.Property(e => e.OpcLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OPC_LastModifiedDate");
                entity.Property(e => e.OpcOrganizationUnitId).HasColumnName("OPC_OrganizationUnit_Id");
                entity.Property(e => e.OpcPaymentConditionId).HasColumnName("OPC_PaymentCondition_Id");
                entity.Property(e => e.OpcTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("OPC_TerminationDate");
                entity.Property(e => e.OpcTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OPC_TimeStamp");

                entity.HasOne(d => d.OpcOrganizationUnit).WithMany(p => p.OrganizationPaymentConditions)
                    .HasForeignKey(d => d.OpcOrganizationUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationPaymentConditions_OrganizationUnits");

                entity.HasOne(d => d.OpcPaymentCondition).WithMany(p => p.OrganizationPaymentConditions)
                    .HasForeignKey(d => d.OpcPaymentConditionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationPaymentConditions_PaymentConditions");
            });

            modelBuilder.Entity<OrganizationPaymentMethod>(entity =>
            {
                entity.HasKey(e => e.OpmId);

                entity.ToTable("OrganizationPaymentMethods", "mdm");

                entity.Property(e => e.OpmId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("OPM_Id");
                entity.Property(e => e.OpmCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OPM_CreatedBy");
                entity.Property(e => e.OpmCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OPM_CreatedDate");
                entity.Property(e => e.OpmEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("OPM_EffectiveDate");
                entity.Property(e => e.OpmLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OPM_LastModifiedBy");
                entity.Property(e => e.OpmLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OPM_LastModifiedDate");
                entity.Property(e => e.OpmLegalEntityId).HasColumnName("OPM_LegalEntity_Id");
                entity.Property(e => e.OpmOrganizationUnitId).HasColumnName("OPM_OrganizationUnit_Id");
                entity.Property(e => e.OpmPaymentMethodId).HasColumnName("OPM_PaymentMethod_Id");
                entity.Property(e => e.OpmTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("OPM_TerminationDate");
                entity.Property(e => e.OpmTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OPM_TimeStamp");

                entity.HasOne(d => d.OpmLegalEntity).WithMany(p => p.OrganizationPaymentMethods)
                    .HasForeignKey(d => d.OpmLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationPaymentMethods_LegalEntities");

                entity.HasOne(d => d.OpmOrganizationUnit).WithMany(p => p.OrganizationPaymentMethods)
                    .HasForeignKey(d => d.OpmOrganizationUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationPaymentMethods_OrganizationUnits");

                entity.HasOne(d => d.OpmPaymentMethod).WithMany(p => p.OrganizationPaymentMethods)
                    .HasForeignKey(d => d.OpmPaymentMethodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationPaymentMethods_PaymentMethods");
            });

            modelBuilder.Entity<OrganizationTaxCode>(entity =>
            {
                entity.HasKey(e => e.OtcId);

                entity.ToTable("OrganizationTaxCodes", "vat");

                entity.Property(e => e.OtcId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("OTC_Id");
                entity.Property(e => e.OtcCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OTC_CreatedBy");
                entity.Property(e => e.OtcCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OTC_CreatedDate");
                entity.Property(e => e.OtcEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("OTC_EffectiveDate");
                entity.Property(e => e.OtcLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OTC_LastModifiedBy");
                entity.Property(e => e.OtcLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OTC_LastModifiedDate");
                entity.Property(e => e.OtcLegalEntityId).HasColumnName("OTC_LegalEntity_Id");
                entity.Property(e => e.OtcOrganizationUnitId).HasColumnName("OTC_OrganizationUnit_Id");
                entity.Property(e => e.OtcTaxCodeId)
                    .HasMaxLength(20)
                    .HasColumnName("OTC_TaxCode_Id");
                entity.Property(e => e.OtcTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("OTC_TerminationDate");
                entity.Property(e => e.OtcTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OTC_TimeStamp");

                entity.HasOne(d => d.OtcLegalEntity).WithMany(p => p.OrganizationTaxCodes)
                    .HasForeignKey(d => d.OtcLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationTaxCodes_LegalEntities");

                entity.HasOne(d => d.OtcOrganizationUnit).WithMany(p => p.OrganizationTaxCodes)
                    .HasForeignKey(d => d.OtcOrganizationUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationTaxCodes_OrganizationUnits");
            });

            modelBuilder.Entity<OrganizationType>(entity =>
            {
                entity.HasKey(e => e.OtId);

                entity.ToTable("OrganizationTypes", "mdm");

                entity.Property(e => e.OtId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("OT_Id");
                entity.Property(e => e.OtCode)
                    .HasMaxLength(10)
                    .HasColumnName("OT_Code");
                entity.Property(e => e.OtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OT_CreatedBy");
                entity.Property(e => e.OtCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OT_CreatedDate");
                entity.Property(e => e.OtInactive).HasColumnName("OT_Inactive");
                entity.Property(e => e.OtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OT_LastModifiedBy");
                entity.Property(e => e.OtLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OT_LastModifiedDate");
                entity.Property(e => e.OtLocalizableEntryId).HasColumnName("OT_LocalizableEntry_Id");
                entity.Property(e => e.OtLongName)
                    .HasMaxLength(50)
                    .HasColumnName("OT_LongName");
                entity.Property(e => e.OtShortName)
                    .HasMaxLength(20)
                    .HasColumnName("OT_ShortName");
                entity.Property(e => e.OtTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OT_TimeStamp");

                entity.HasOne(d => d.OtLocalizableEntry).WithMany(p => p.OrganizationTypes)
                    .HasForeignKey(d => d.OtLocalizableEntryId)
                    .HasConstraintName("FK_OrganizationTypes_LocalizableEntries");
            });

            modelBuilder.Entity<OrganizationType1>(entity =>
            {
                entity.HasKey(e => e.OtId);

                entity.ToTable("OrganizationTypes", "stg");

                entity.Property(e => e.OtId)
                    .ValueGeneratedNever()
                    .HasColumnName("OT_Id");
                entity.Property(e => e.OtCode)
                    .HasMaxLength(10)
                    .HasColumnName("OT_Code");
                entity.Property(e => e.OtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OT_CreatedBy");
                entity.Property(e => e.OtCreatedDate).HasColumnName("OT_CreatedDate");
                entity.Property(e => e.OtInactive).HasColumnName("OT_Inactive");
                entity.Property(e => e.OtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OT_LastModifiedBy");
                entity.Property(e => e.OtLastModifiedDate).HasColumnName("OT_LastModifiedDate");
                entity.Property(e => e.OtLocalizableEntryId).HasColumnName("OT_LocalizableEntry_Id");
                entity.Property(e => e.OtLongName)
                    .HasMaxLength(50)
                    .HasColumnName("OT_LongName");
                entity.Property(e => e.OtShortName)
                    .HasMaxLength(20)
                    .HasColumnName("OT_ShortName");
                entity.Property(e => e.OtTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OT_TimeStamp");
            });

            modelBuilder.Entity<OrganizationUnit>(entity =>
            {
                entity.HasKey(e => e.OuId);

                entity.ToTable("OrganizationUnits", "mdm", tb => tb.HasTrigger("tu_mdm_OrganizationUnit_Inactive"));

                entity.HasIndex(e => e.OuChamberOfCommerceNumber, "IX_OrganizationUnits_ChamberOfCommerceNumber");

                entity.HasIndex(e => e.OuEmail, "IX_OrganizationUnits_Email");

                entity.HasIndex(e => e.OuInactive, "IX_OrganizationUnits_Inactive");

                entity.HasIndex(e => e.OuLongName, "IX_OrganizationUnits_LongName");

                entity.HasIndex(e => e.OuCode, "IX_OrganizationUnits_OU_Code");

                entity.HasIndex(e => e.OuPhone, "IX_OrganizationUnits_Phone");

                entity.HasIndex(e => e.OuPorCode, "IX_OrganizationUnits_PorCode");

                entity.HasIndex(e => e.OuSalesTaxCodeId, "IX_OrganizationUnits_SalesTaxCode_Id");

                entity.HasIndex(e => e.OuShortName, "IX_OrganizationUnits_ShortName");

                entity.HasIndex(e => e.OuVatNumber, "IX_OrganizationUnits_VatNumber");

                entity.HasIndex(e => e.OuWebsite, "IX_OrganizationUnits_Website");

                entity.Property(e => e.OuId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("OU_Id");
                entity.Property(e => e.OuAddressId).HasColumnName("OU_Address_Id");
                entity.Property(e => e.OuChamberOfCommerceNumber)
                    .HasMaxLength(50)
                    .HasColumnName("OU_ChamberOfCommerceNumber");
                entity.Property(e => e.OuCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("OU_Code");
                entity.Property(e => e.OuCollectionCodeId).HasColumnName("OU_CollectionCode_Id");
                entity.Property(e => e.OuCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OU_CreatedBy");
                entity.Property(e => e.OuCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OU_CreatedDate");
                entity.Property(e => e.OuEmail)
                    .HasMaxLength(250)
                    .HasColumnName("OU_Email");
                entity.Property(e => e.OuEndDate)
                    .HasColumnType("date")
                    .HasColumnName("OU_EndDate");
                entity.Property(e => e.OuFax)
                    .HasMaxLength(20)
                    .HasColumnName("OU_Fax");
                entity.Property(e => e.OuHierarchyTypeId).HasColumnName("OU_HierarchyType_Id");
                entity.Property(e => e.OuInactive).HasColumnName("OU_Inactive");
                entity.Property(e => e.OuIsNotCompany).HasColumnName("OU_IsNotCompany");
                entity.Property(e => e.OuIsTaxExempted).HasColumnName("OU_IsTaxExempted");
                entity.Property(e => e.OuLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OU_LastModifiedBy");
                entity.Property(e => e.OuLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OU_LastModifiedDate");
                entity.Property(e => e.OuLongName)
                    .HasMaxLength(250)
                    .HasColumnName("OU_LongName");
                entity.Property(e => e.OuLongName2)
                    .HasMaxLength(250)
                    .HasColumnName("OU_LongName2");
                entity.Property(e => e.OuLongName3)
                    .HasMaxLength(250)
                    .HasColumnName("OU_LongName3");
                entity.Property(e => e.OuNoVatNumber).HasColumnName("OU_NoVatNumber");
                entity.Property(e => e.OuOrganizationGroupId).HasColumnName("OU_OrganizationGroup_Id");
                entity.Property(e => e.OuOrganizationTypeId).HasColumnName("OU_OrganizationType_Id");
                entity.Property(e => e.OuPhone)
                    .HasMaxLength(20)
                    .HasColumnName("OU_Phone");
                entity.Property(e => e.OuPorCode)
                    .HasMaxLength(10)
                    .HasColumnName("OU_PorCode");
                entity.Property(e => e.OuPostOfficeBoxId).HasColumnName("OU_PostOfficeBox_Id");
                entity.Property(e => e.OuPurchaseTaxCodeId)
                    .HasMaxLength(20)
                    .HasColumnName("OU_PurchaseTaxCode_Id");
                entity.Property(e => e.OuSalesTaxCodeId)
                    .HasMaxLength(20)
                    .HasColumnName("OU_SalesTaxCode_Id");
                entity.Property(e => e.OuShortName)
                    .HasMaxLength(20)
                    .HasColumnName("OU_ShortName");
                entity.Property(e => e.OuStartDate)
                    .HasColumnType("date")
                    .HasColumnName("OU_StartDate");
                entity.Property(e => e.OuTaxExemptNumber)
                    .HasMaxLength(20)
                    .HasColumnName("OU_TaxExemptNumber");
                entity.Property(e => e.OuTenantId).HasColumnName("OU_Tenant_Id");
                entity.Property(e => e.OuTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OU_TimeStamp");
                entity.Property(e => e.OuVatCountryCode)
                    .HasMaxLength(3)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                    .HasColumnName("OU_VatCountryCode");
                entity.Property(e => e.OuVatNumber)
                    .HasMaxLength(50)
                    .HasColumnName("OU_VatNumber");
                entity.Property(e => e.OuWebsite)
                    .HasMaxLength(250)
                    .HasColumnName("OU_Website");

                entity.HasOne(d => d.OuAddress).WithMany(p => p.OrganizationUnits)
                    .HasForeignKey(d => d.OuAddressId)
                    .HasConstraintName("FK_OrganizationUnits_Addresses");

                entity.HasOne(d => d.OuCollectionCode).WithMany(p => p.OrganizationUnits)
                    .HasForeignKey(d => d.OuCollectionCodeId)
                    .HasConstraintName("FK_OrganizationUnits_CollectionCodes");

                entity.HasOne(d => d.OuHierarchyType).WithMany(p => p.OrganizationUnits)
                    .HasForeignKey(d => d.OuHierarchyTypeId)
                    .HasConstraintName("FK_OrganizationUnits_HierarchyTypes");

                entity.HasOne(d => d.OuOrganizationGroup).WithMany(p => p.OrganizationUnits)
                    .HasForeignKey(d => d.OuOrganizationGroupId)
                    .HasConstraintName("FK_OrganizationUnits_OrganizationGroups");

                entity.HasOne(d => d.OuOrganizationType).WithMany(p => p.OrganizationUnits)
                    .HasForeignKey(d => d.OuOrganizationTypeId)
                    .HasConstraintName("FK_OrganizationUnits_OrganizationTypes");

                entity.HasOne(d => d.OuPostOfficeBox).WithMany(p => p.OrganizationUnits)
                    .HasForeignKey(d => d.OuPostOfficeBoxId)
                    .HasConstraintName("FK_OrganizationUnits_PostOfficeBox");

                entity.HasOne(d => d.OuTenant).WithMany(p => p.OrganizationUnits)
                    .HasForeignKey(d => d.OuTenantId)
                    .HasConstraintName("FK_OrganizationUnits_Tenants");
            });

            modelBuilder.Entity<OrganizationUnit1>(entity =>
            {
                entity.HasKey(e => e.OuId);

                entity.ToTable("OrganizationUnits", "stg");

                entity.Property(e => e.OuId)
                    .ValueGeneratedNever()
                    .HasColumnName("OU_Id");
                entity.Property(e => e.OuAddressId).HasColumnName("OU_Address_Id");
                entity.Property(e => e.OuChamberOfCommerceNumber)
                    .HasMaxLength(50)
                    .HasColumnName("OU_ChamberOfCommerceNumber");
                entity.Property(e => e.OuCode)
                    .HasMaxLength(10)
                    .HasColumnName("OU_Code");
                entity.Property(e => e.OuCollectionCodeId).HasColumnName("OU_CollectionCode_Id");
                entity.Property(e => e.OuCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OU_CreatedBy");
                entity.Property(e => e.OuCreatedDate).HasColumnName("OU_CreatedDate");
                entity.Property(e => e.OuEmail)
                    .HasMaxLength(250)
                    .HasColumnName("OU_Email");
                entity.Property(e => e.OuEndDate)
                    .HasColumnType("date")
                    .HasColumnName("OU_EndDate");
                entity.Property(e => e.OuFax)
                    .HasMaxLength(20)
                    .HasColumnName("OU_Fax");
                entity.Property(e => e.OuHierarchyTypeId).HasColumnName("OU_HierarchyType_Id");
                entity.Property(e => e.OuInactive).HasColumnName("OU_Inactive");
                entity.Property(e => e.OuLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OU_LastModifiedBy");
                entity.Property(e => e.OuLastModifiedDate).HasColumnName("OU_LastModifiedDate");
                entity.Property(e => e.OuLongName)
                    .HasMaxLength(250)
                    .HasColumnName("OU_LongName");
                entity.Property(e => e.OuLongName2)
                    .HasMaxLength(250)
                    .HasColumnName("OU_LongName2");
                entity.Property(e => e.OuLongName3)
                    .HasMaxLength(250)
                    .HasColumnName("OU_LongName3");
                entity.Property(e => e.OuNoVatNumber).HasColumnName("OU_NoVatNumber");
                entity.Property(e => e.OuOrganizationGroupId).HasColumnName("OU_OrganizationGroup_Id");
                entity.Property(e => e.OuOrganizationTypeId).HasColumnName("OU_OrganizationType_Id");
                entity.Property(e => e.OuPhone)
                    .HasMaxLength(20)
                    .HasColumnName("OU_Phone");
                entity.Property(e => e.OuPorCode)
                    .HasMaxLength(10)
                    .HasColumnName("OU_PorCode");
                entity.Property(e => e.OuPostOfficeBoxId).HasColumnName("OU_PostOfficeBox_Id");
                entity.Property(e => e.OuPurchaseTaxCodeId)
                    .HasMaxLength(20)
                    .HasColumnName("OU_PurchaseTaxCode_Id");
                entity.Property(e => e.OuSalesTaxCodeId)
                    .HasMaxLength(20)
                    .HasColumnName("OU_SalesTaxCode_Id");
                entity.Property(e => e.OuShortName)
                    .HasMaxLength(20)
                    .HasColumnName("OU_ShortName");
                entity.Property(e => e.OuStartDate)
                    .HasColumnType("date")
                    .HasColumnName("OU_StartDate");
                entity.Property(e => e.OuTenantId).HasColumnName("OU_Tenant_Id");
                entity.Property(e => e.OuTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OU_TimeStamp");
                entity.Property(e => e.OuVatNumber)
                    .HasMaxLength(50)
                    .HasColumnName("OU_VatNumber");
                entity.Property(e => e.OuWebsite)
                    .HasMaxLength(250)
                    .HasColumnName("OU_Website");
            });

            modelBuilder.Entity<OrganizationUnitValidationStatus>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__Organiza__3214EC071D948933");

                entity.ToTable("OrganizationUnitValidationStatuses", "mdm");

                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
                entity.Property(e => e.Code).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedDate).HasDefaultValueSql("(getdate())");
                entity.Property(e => e.LongName).HasMaxLength(250);
                entity.Property(e => e.ShortName).HasMaxLength(20);
            });

            modelBuilder.Entity<OrganizationUnitValidationStatus1>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__Organiza__3214EC071D948933");

                entity.ToTable("OrganizationUnitValidationStatuses", "stg");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LongName).HasMaxLength(250);
                entity.Property(e => e.ShortName).HasMaxLength(20);
            });

            modelBuilder.Entity<OrganizationUnitValidationStatusHistory>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__Organiza__3214EC070ED5F53B");

                entity.ToTable("OrganizationUnitValidationStatusHistory", "mdm");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedDate).HasDefaultValueSql("(getdate())");
                entity.Property(e => e.Reason).HasMaxLength(2000);
                entity.Property(e => e.Timestamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.OrganizationUnitValidationStatusHistories)
                    .HasForeignKey(d => d.OrganizationUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationUnitValidationStatusHistory_OrganizationUnits");

                entity.HasOne(d => d.ValidationStatus).WithMany(p => p.OrganizationUnitValidationStatusHistories)
                    .HasForeignKey(d => d.ValidationStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationUnitValidationStatusHistory_OrganizationUnitValidationStatuses");
            });

            modelBuilder.Entity<OrganizationUnitValidationStatusHistory1>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__Organiza__3214EC070ED5F53B");

                entity.ToTable("OrganizationUnitValidationStatusHistory", "stg");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.Reason).HasMaxLength(2000);
                entity.Property(e => e.Timestamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<OrganizationUnitsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationUnitsView", "mdm");

                entity.Property(e => e.Actief)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.Adres).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.Einddatum).HasColumnType("date");
                entity.Property(e => e.ExterneCode).HasColumnName("Externe code");
                entity.Property(e => e.Huisnr).HasMaxLength(10);
                entity.Property(e => e.Landcode).HasMaxLength(3);
                entity.Property(e => e.LandcodePostbus)
                    .HasMaxLength(3)
                    .HasColumnName("Landcode postbus");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NaamCpl)
                    .HasMaxLength(756)
                    .HasColumnName("Naam cpl");
                entity.Property(e => e.NaamKort)
                    .HasMaxLength(20)
                    .HasColumnName("Naam kort");
                entity.Property(e => e.NiveauPlekInStructuur)
                    .HasMaxLength(61)
                    .HasColumnName("Niveau (plek in structuur)");
                entity.Property(e => e.OgCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("OG-Code");
                entity.Property(e => e.ParentBovenliggendeType)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("Parent (bovenliggende type)");
                entity.Property(e => e.Porcode).HasMaxLength(10);
                entity.Property(e => e.Postbus).HasMaxLength(10);
                entity.Property(e => e.Postcode).HasMaxLength(10);
                entity.Property(e => e.PostcodePostbus)
                    .HasMaxLength(10)
                    .HasColumnName("Postcode postbus");
                entity.Property(e => e.Provincie).HasMaxLength(250);
                entity.Property(e => e.ProvinciePostbus)
                    .HasMaxLength(250)
                    .HasColumnName("Provincie postbus");
                entity.Property(e => e.Startdatum).HasColumnType("date");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.Toevoeging).HasMaxLength(250);
                entity.Property(e => e.TypeTpVerzOfVolmacht)
                    .HasMaxLength(61)
                    .HasColumnName("Type (tp/verz/of volmacht)");
                entity.Property(e => e.Woonplaats).HasMaxLength(250);
                entity.Property(e => e.WoonplaatsPostbus)
                    .HasMaxLength(250)
                    .HasColumnName("Woonplaats postbus");
            });

            modelBuilder.Entity<OrganizationUnitsViewWithContactInformation>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationUnitsViewWithContactInformation", "mdm");

                entity.Property(e => e.Actief)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.Adres).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.Einddatum).HasColumnType("date");
                entity.Property(e => e.Email).HasMaxLength(250);
                entity.Property(e => e.ExterneCode).HasColumnName("Externe code");
                entity.Property(e => e.Huisnr).HasMaxLength(10);
                entity.Property(e => e.Landcode).HasMaxLength(3);
                entity.Property(e => e.LandcodePostbus)
                    .HasMaxLength(3)
                    .HasColumnName("Landcode postbus");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NaamCpl)
                    .HasMaxLength(756)
                    .HasColumnName("Naam cpl");
                entity.Property(e => e.NaamKort)
                    .HasMaxLength(20)
                    .HasColumnName("Naam kort");
                entity.Property(e => e.NiveauPlekInStructuur)
                    .HasMaxLength(61)
                    .HasColumnName("Niveau (plek in structuur)");
                entity.Property(e => e.OgCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("OG-Code");
                entity.Property(e => e.ParentBovenliggendeType)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("Parent (bovenliggende type)");
                entity.Property(e => e.PhoneNumber).HasMaxLength(250);
                entity.Property(e => e.Porcode).HasMaxLength(10);
                entity.Property(e => e.Postbus).HasMaxLength(10);
                entity.Property(e => e.Postcode).HasMaxLength(10);
                entity.Property(e => e.PostcodePostbus)
                    .HasMaxLength(10)
                    .HasColumnName("Postcode postbus");
                entity.Property(e => e.Provincie).HasMaxLength(250);
                entity.Property(e => e.ProvinciePostbus)
                    .HasMaxLength(250)
                    .HasColumnName("Provincie postbus");
                entity.Property(e => e.Startdatum).HasColumnType("date");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.Toevoeging).HasMaxLength(250);
                entity.Property(e => e.TypeTpVerzOfVolmacht)
                    .HasMaxLength(61)
                    .HasColumnName("Type (tp/verz/of volmacht)");
                entity.Property(e => e.Woonplaats).HasMaxLength(250);
                entity.Property(e => e.WoonplaatsPostbus)
                    .HasMaxLength(250)
                    .HasColumnName("Woonplaats postbus");
            });

            modelBuilder.Entity<OrganizationUnitsWithCurrentStatus>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationUnitsWithCurrentStatus", "mdm");

                entity.Property(e => e.ListOfApplications).HasMaxLength(4000);
                entity.Property(e => e.OuAddressId).HasColumnName("OU_Address_Id");
                entity.Property(e => e.OuChamberOfCommerceNumber)
                    .HasMaxLength(50)
                    .HasColumnName("OU_ChamberOfCommerceNumber");
                entity.Property(e => e.OuCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("OU_Code");
                entity.Property(e => e.OuCollectionCodeId).HasColumnName("OU_CollectionCode_Id");
                entity.Property(e => e.OuCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OU_CreatedBy");
                entity.Property(e => e.OuCreatedDate).HasColumnName("OU_CreatedDate");
                entity.Property(e => e.OuEmail)
                    .HasMaxLength(250)
                    .HasColumnName("OU_Email");
                entity.Property(e => e.OuEndDate)
                    .HasColumnType("date")
                    .HasColumnName("OU_EndDate");
                entity.Property(e => e.OuFax)
                    .HasMaxLength(20)
                    .HasColumnName("OU_Fax");
                entity.Property(e => e.OuHierarchyTypeId).HasColumnName("OU_HierarchyType_Id");
                entity.Property(e => e.OuId).HasColumnName("OU_Id");
                entity.Property(e => e.OuInactive).HasColumnName("OU_Inactive");
                entity.Property(e => e.OuLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OU_LastModifiedBy");
                entity.Property(e => e.OuLastModifiedDate).HasColumnName("OU_LastModifiedDate");
                entity.Property(e => e.OuLongName)
                    .HasMaxLength(250)
                    .HasColumnName("OU_LongName");
                entity.Property(e => e.OuLongName2)
                    .HasMaxLength(250)
                    .HasColumnName("OU_LongName2");
                entity.Property(e => e.OuLongName3)
                    .HasMaxLength(250)
                    .HasColumnName("OU_LongName3");
                entity.Property(e => e.OuOrganizationGroupId).HasColumnName("OU_OrganizationGroup_Id");
                entity.Property(e => e.OuOrganizationTypeId).HasColumnName("OU_OrganizationType_Id");
                entity.Property(e => e.OuPhone)
                    .HasMaxLength(20)
                    .HasColumnName("OU_Phone");
                entity.Property(e => e.OuPorCode)
                    .HasMaxLength(10)
                    .HasColumnName("OU_PorCode");
                entity.Property(e => e.OuPostOfficeBoxId).HasColumnName("OU_PostOfficeBox_Id");
                entity.Property(e => e.OuPurchaseTaxCodeId)
                    .HasMaxLength(20)
                    .HasColumnName("OU_PurchaseTaxCode_Id");
                entity.Property(e => e.OuSalesTaxCodeId)
                    .HasMaxLength(20)
                    .HasColumnName("OU_SalesTaxCode_Id");
                entity.Property(e => e.OuShortName)
                    .HasMaxLength(20)
                    .HasColumnName("OU_ShortName");
                entity.Property(e => e.OuStartDate)
                    .HasColumnType("date")
                    .HasColumnName("OU_StartDate");
                entity.Property(e => e.OuTenantId).HasColumnName("OU_Tenant_Id");
                entity.Property(e => e.OuTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OU_TimeStamp");
                entity.Property(e => e.OuVatNumber)
                    .HasMaxLength(50)
                    .HasColumnName("OU_VatNumber");
                entity.Property(e => e.OuWebsite)
                    .HasMaxLength(250)
                    .HasColumnName("OU_Website");
                entity.Property(e => e.ValidationStatusId).HasMaxLength(50);
            });

            modelBuilder.Entity<OrganizationUnitsWithCurrentStatusInnerSelect>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationUnitsWithCurrentStatus_InnerSelect", "mdm");

                entity.Property(e => e.Listvalues).HasColumnName("listvalues");
                entity.Property(e => e.OuAddressId).HasColumnName("OU_Address_Id");
                entity.Property(e => e.OuChamberOfCommerceNumber)
                    .HasMaxLength(50)
                    .HasColumnName("OU_ChamberOfCommerceNumber");
                entity.Property(e => e.OuCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("OU_Code");
                entity.Property(e => e.OuCollectionCodeId).HasColumnName("OU_CollectionCode_Id");
                entity.Property(e => e.OuCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OU_CreatedBy");
                entity.Property(e => e.OuCreatedDate).HasColumnName("OU_CreatedDate");
                entity.Property(e => e.OuEmail)
                    .HasMaxLength(250)
                    .HasColumnName("OU_Email");
                entity.Property(e => e.OuEndDate)
                    .HasColumnType("date")
                    .HasColumnName("OU_EndDate");
                entity.Property(e => e.OuFax)
                    .HasMaxLength(20)
                    .HasColumnName("OU_Fax");
                entity.Property(e => e.OuHierarchyTypeId).HasColumnName("OU_HierarchyType_Id");
                entity.Property(e => e.OuId).HasColumnName("OU_Id");
                entity.Property(e => e.OuInactive).HasColumnName("OU_Inactive");
                entity.Property(e => e.OuIsNotCompany).HasColumnName("OU_IsNotCompany");
                entity.Property(e => e.OuIsTaxExempted).HasColumnName("OU_IsTaxExempted");
                entity.Property(e => e.OuLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OU_LastModifiedBy");
                entity.Property(e => e.OuLastModifiedDate).HasColumnName("OU_LastModifiedDate");
                entity.Property(e => e.OuLongName)
                    .HasMaxLength(250)
                    .HasColumnName("OU_LongName");
                entity.Property(e => e.OuLongName2)
                    .HasMaxLength(250)
                    .HasColumnName("OU_LongName2");
                entity.Property(e => e.OuLongName3)
                    .HasMaxLength(250)
                    .HasColumnName("OU_LongName3");
                entity.Property(e => e.OuNoVatNumber).HasColumnName("OU_NoVatNumber");
                entity.Property(e => e.OuOrganizationGroupId).HasColumnName("OU_OrganizationGroup_Id");
                entity.Property(e => e.OuOrganizationTypeId).HasColumnName("OU_OrganizationType_Id");
                entity.Property(e => e.OuPhone)
                    .HasMaxLength(20)
                    .HasColumnName("OU_Phone");
                entity.Property(e => e.OuPorCode)
                    .HasMaxLength(10)
                    .HasColumnName("OU_PorCode");
                entity.Property(e => e.OuPostOfficeBoxId).HasColumnName("OU_PostOfficeBox_Id");
                entity.Property(e => e.OuPurchaseTaxCodeId)
                    .HasMaxLength(20)
                    .HasColumnName("OU_PurchaseTaxCode_Id");
                entity.Property(e => e.OuSalesTaxCodeId)
                    .HasMaxLength(20)
                    .HasColumnName("OU_SalesTaxCode_Id");
                entity.Property(e => e.OuShortName)
                    .HasMaxLength(20)
                    .HasColumnName("OU_ShortName");
                entity.Property(e => e.OuStartDate)
                    .HasColumnType("date")
                    .HasColumnName("OU_StartDate");
                entity.Property(e => e.OuTaxExemptNumber)
                    .HasMaxLength(20)
                    .HasColumnName("OU_TaxExemptNumber");
                entity.Property(e => e.OuTenantId).HasColumnName("OU_Tenant_Id");
                entity.Property(e => e.OuTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OU_TimeStamp");
                entity.Property(e => e.OuVatCountryCode)
                    .HasMaxLength(3)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                    .HasColumnName("OU_VatCountryCode");
                entity.Property(e => e.OuVatNumber)
                    .HasMaxLength(50)
                    .HasColumnName("OU_VatNumber");
                entity.Property(e => e.OuWebsite)
                    .HasMaxLength(250)
                    .HasColumnName("OU_Website");
                entity.Property(e => e.ValidationStatusId).HasMaxLength(50);
            });

            modelBuilder.Entity<OrganizationUnitsWithCurrentStatusOuterApply>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationUnitsWithCurrentStatus_OuterApply", "mdm");

                entity.Property(e => e.OuAddressId).HasColumnName("OU_Address_Id");
                entity.Property(e => e.OuChamberOfCommerceNumber)
                    .HasMaxLength(50)
                    .HasColumnName("OU_ChamberOfCommerceNumber");
                entity.Property(e => e.OuCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("OU_Code");
                entity.Property(e => e.OuCollectionCodeId).HasColumnName("OU_CollectionCode_Id");
                entity.Property(e => e.OuCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OU_CreatedBy");
                entity.Property(e => e.OuCreatedDate).HasColumnName("OU_CreatedDate");
                entity.Property(e => e.OuEmail)
                    .HasMaxLength(250)
                    .HasColumnName("OU_Email");
                entity.Property(e => e.OuEndDate)
                    .HasColumnType("date")
                    .HasColumnName("OU_EndDate");
                entity.Property(e => e.OuFax)
                    .HasMaxLength(20)
                    .HasColumnName("OU_Fax");
                entity.Property(e => e.OuHierarchyTypeId).HasColumnName("OU_HierarchyType_Id");
                entity.Property(e => e.OuId).HasColumnName("OU_Id");
                entity.Property(e => e.OuInactive).HasColumnName("OU_Inactive");
                entity.Property(e => e.OuIsNotCompany).HasColumnName("OU_IsNotCompany");
                entity.Property(e => e.OuIsTaxExempted).HasColumnName("OU_IsTaxExempted");
                entity.Property(e => e.OuLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OU_LastModifiedBy");
                entity.Property(e => e.OuLastModifiedDate).HasColumnName("OU_LastModifiedDate");
                entity.Property(e => e.OuLongName)
                    .HasMaxLength(250)
                    .HasColumnName("OU_LongName");
                entity.Property(e => e.OuLongName2)
                    .HasMaxLength(250)
                    .HasColumnName("OU_LongName2");
                entity.Property(e => e.OuLongName3)
                    .HasMaxLength(250)
                    .HasColumnName("OU_LongName3");
                entity.Property(e => e.OuNoVatNumber).HasColumnName("OU_NoVatNumber");
                entity.Property(e => e.OuOrganizationGroupId).HasColumnName("OU_OrganizationGroup_Id");
                entity.Property(e => e.OuOrganizationTypeId).HasColumnName("OU_OrganizationType_Id");
                entity.Property(e => e.OuPhone)
                    .HasMaxLength(20)
                    .HasColumnName("OU_Phone");
                entity.Property(e => e.OuPorCode)
                    .HasMaxLength(10)
                    .HasColumnName("OU_PorCode");
                entity.Property(e => e.OuPostOfficeBoxId).HasColumnName("OU_PostOfficeBox_Id");
                entity.Property(e => e.OuPurchaseTaxCodeId)
                    .HasMaxLength(20)
                    .HasColumnName("OU_PurchaseTaxCode_Id");
                entity.Property(e => e.OuSalesTaxCodeId)
                    .HasMaxLength(20)
                    .HasColumnName("OU_SalesTaxCode_Id");
                entity.Property(e => e.OuShortName)
                    .HasMaxLength(20)
                    .HasColumnName("OU_ShortName");
                entity.Property(e => e.OuStartDate)
                    .HasColumnType("date")
                    .HasColumnName("OU_StartDate");
                entity.Property(e => e.OuTaxExemptNumber)
                    .HasMaxLength(20)
                    .HasColumnName("OU_TaxExemptNumber");
                entity.Property(e => e.OuTenantId).HasColumnName("OU_Tenant_Id");
                entity.Property(e => e.OuTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OU_TimeStamp");
                entity.Property(e => e.OuVatCountryCode)
                    .HasMaxLength(3)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                    .HasColumnName("OU_VatCountryCode");
                entity.Property(e => e.OuVatNumber)
                    .HasMaxLength(50)
                    .HasColumnName("OU_VatNumber");
                entity.Property(e => e.OuWebsite)
                    .HasMaxLength(250)
                    .HasColumnName("OU_Website");
                entity.Property(e => e.ValidationStatusId).HasMaxLength(50);
            });

            modelBuilder.Entity<OrganizationVatRegistration>(entity =>
            {
                entity.HasKey(e => e.OvrId);

                entity.ToTable("OrganizationVatRegistrations", "mdm");

                entity.Property(e => e.OvrId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("OVR_Id");
                entity.Property(e => e.OvrCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OVR_CreatedBy");
                entity.Property(e => e.OvrCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OVR_CreatedDate");
                entity.Property(e => e.OvrEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("OVR_EffectiveDate");
                entity.Property(e => e.OvrLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OVR_LastModifiedBy");
                entity.Property(e => e.OvrLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OVR_LastModifiedDate");
                entity.Property(e => e.OvrOrganizationUnitId).HasColumnName("OVR_OrganizationUnit_Id");
                entity.Property(e => e.OvrTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("OVR_TerminationDate");
                entity.Property(e => e.OvrTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OVR_TimeStamp");
                entity.Property(e => e.OvrVatRegistrationId).HasColumnName("OVR_VatRegistration_Id");

                entity.HasOne(d => d.OvrOrganizationUnit).WithMany(p => p.OrganizationVatRegistrations)
                    .HasForeignKey(d => d.OvrOrganizationUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationVatRegistrations_OrganizationUnits");

                entity.HasOne(d => d.OvrVatRegistration).WithMany(p => p.OrganizationVatRegistrations)
                    .HasForeignKey(d => d.OvrVatRegistrationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationVatRegistrations_VatRegistrations");
            });

            modelBuilder.Entity<OrganizationVatValidation>(entity =>
            {
                entity.HasKey(e => e.OavId);

                entity.ToTable("OrganizationVatValidations", "mdm");

                entity.Property(e => e.OavId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("OAV_Id");
                entity.Property(e => e.OavCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OAV_CreatedBy");
                entity.Property(e => e.OavCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OAV_CreatedDate");
                entity.Property(e => e.OavEmployeeId).HasColumnName("OAV_Employee_Id");
                entity.Property(e => e.OavIsValid).HasColumnName("OAV_IsValid");
                entity.Property(e => e.OavLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OAV_LastModifiedBy");
                entity.Property(e => e.OavLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OAV_LastModifiedDate");
                entity.Property(e => e.OavOrganizationUnitId).HasColumnName("OAV_OrganizationUnit_Id");
                entity.Property(e => e.OavStartDate).HasColumnName("OAV_StartDate");
                entity.Property(e => e.OavTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OAV_TimeStamp");

                entity.HasOne(d => d.OavEmployee).WithMany(p => p.OrganizationVatValidations)
                    .HasForeignKey(d => d.OavEmployeeId)
                    .HasConstraintName("FK_OrganizationVatValidations_Employees");

                entity.HasOne(d => d.OavOrganizationUnit).WithMany(p => p.OrganizationVatValidations)
                    .HasForeignKey(d => d.OavOrganizationUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationVatValidations_OrganizationUnits");
            });

            modelBuilder.Entity<Origin>(entity =>
            {
                entity.HasKey(e => e.OrId);

                entity.ToTable("Origins", "dos", tb => tb.HasTrigger("th_dos_Origins_TraceHistory"));

                entity.Property(e => e.OrId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("OR_Id");
                entity.Property(e => e.OrCode)
                    .HasMaxLength(10)
                    .HasColumnName("OR_Code");
                entity.Property(e => e.OrCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OR_CreatedBy");
                entity.Property(e => e.OrCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OR_CreatedDate");
                entity.Property(e => e.OrInactive).HasColumnName("OR_Inactive");
                entity.Property(e => e.OrLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OR_LastModifiedBy");
                entity.Property(e => e.OrLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OR_LastModifiedDate");
                entity.Property(e => e.OrLongName)
                    .HasMaxLength(250)
                    .HasColumnName("OR_LongName");
                entity.Property(e => e.OrShortName)
                    .HasMaxLength(20)
                    .HasColumnName("OR_ShortName");
                entity.Property(e => e.OrTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OR_TimeStamp");
            });

            modelBuilder.Entity<OriginsHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_Origins_History_ID");

                entity.ToTable("Origins_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.OrCode)
                    .HasMaxLength(10)
                    .HasColumnName("OR_Code");
                entity.Property(e => e.OrCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OR_CreatedBy");
                entity.Property(e => e.OrCreatedDate).HasColumnName("OR_CreatedDate");
                entity.Property(e => e.OrId).HasColumnName("OR_Id");
                entity.Property(e => e.OrInactive).HasColumnName("OR_Inactive");
                entity.Property(e => e.OrLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OR_LastModifiedBy");
                entity.Property(e => e.OrLastModifiedDate).HasColumnName("OR_LastModifiedDate");
                entity.Property(e => e.OrLongName)
                    .HasMaxLength(250)
                    .HasColumnName("OR_LongName");
                entity.Property(e => e.OrShortName)
                    .HasMaxLength(20)
                    .HasColumnName("OR_ShortName");
            });

            modelBuilder.Entity<OvsCode>(entity =>
            {
                entity.HasKey(e => e.OcoId);

                entity.ToTable("OvsCodes", "ovs");

                entity.Property(e => e.OcoId)
                    .HasMaxLength(1)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("OCO_Id");
                entity.Property(e => e.OcoCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OCO_CreatedBy");
                entity.Property(e => e.OcoCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OCO_CreatedDate");
                entity.Property(e => e.OcoInactive).HasColumnName("OCO_Inactive");
                entity.Property(e => e.OcoLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OCO_LastModifiedBy");
                entity.Property(e => e.OcoLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OCO_LastModifiedDate");
                entity.Property(e => e.OcoLongName)
                    .HasMaxLength(250)
                    .HasColumnName("OCO_LongName");
                entity.Property(e => e.OcoShortName)
                    .HasMaxLength(20)
                    .HasColumnName("OCO_ShortName");
                entity.Property(e => e.OcoTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OCO_TimeStamp");
            });

            modelBuilder.Entity<OvsDeregistrationReason>(entity =>
            {
                entity.HasKey(e => e.OdrId);

                entity.ToTable("OvsDeregistrationReasons", "ovs");

                entity.Property(e => e.OdrId)
                    .HasMaxLength(1)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("ODR_Id");
                entity.Property(e => e.OdrCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ODR_CreatedBy");
                entity.Property(e => e.OdrCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ODR_CreatedDate");
                entity.Property(e => e.OdrInactive).HasColumnName("ODR_Inactive");
                entity.Property(e => e.OdrLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ODR_LastModifiedBy");
                entity.Property(e => e.OdrLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ODR_LastModifiedDate");
                entity.Property(e => e.OdrLongName)
                    .HasMaxLength(250)
                    .HasColumnName("ODR_LongName");
                entity.Property(e => e.OdrShortName)
                    .HasMaxLength(20)
                    .HasColumnName("ODR_ShortName");
                entity.Property(e => e.OdrTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ODR_TimeStamp");
            });

            modelBuilder.Entity<OvsLiabilityPercentage>(entity =>
            {
                entity.HasKey(e => e.OlpId);

                entity.ToTable("OvsLiabilityPercentages", "ovs");

                entity.Property(e => e.OlpId)
                    .HasMaxLength(3)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("OLP_Id");
                entity.Property(e => e.OlpCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OLP_CreatedBy");
                entity.Property(e => e.OlpCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OLP_CreatedDate");
                entity.Property(e => e.OlpInactive).HasColumnName("OLP_Inactive");
                entity.Property(e => e.OlpLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OLP_LastModifiedBy");
                entity.Property(e => e.OlpLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OLP_LastModifiedDate");
                entity.Property(e => e.OlpLongName)
                    .HasMaxLength(250)
                    .HasColumnName("OLP_LongName");
                entity.Property(e => e.OlpPercentage).HasColumnName("OLP_Percentage");
                entity.Property(e => e.OlpShortName)
                    .HasMaxLength(20)
                    .HasColumnName("OLP_ShortName");
                entity.Property(e => e.OlpTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OLP_TimeStamp");
            });

            modelBuilder.Entity<OvsMessageIncoming>(entity =>
            {
                entity.HasKey(e => e.OmiId);

                entity.ToTable("OvsMessageIncoming", "ovs");

                entity.Property(e => e.OmiId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("OMI_Id");
                entity.Property(e => e.OmiCounterPartyOvsCodeId)
                    .HasMaxLength(1)
                    .HasColumnName("OMI_CounterPartyOvsCode_Id");
                entity.Property(e => e.OmiCrcommunityAdress)
                    .HasMaxLength(8)
                    .HasColumnName("OMI_CRCommunityAdress");
                entity.Property(e => e.OmiCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OMI_CreatedBy");
                entity.Property(e => e.OmiCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OMI_CreatedDate");
                entity.Property(e => e.OmiErrorCode)
                    .HasMaxLength(20)
                    .HasColumnName("OMI_ErrorCode");
                entity.Property(e => e.OmiErrorMessage)
                    .HasMaxLength(250)
                    .HasColumnName("OMI_ErrorMessage");
                entity.Property(e => e.OmiLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OMI_LastModifiedBy");
                entity.Property(e => e.OmiLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OMI_LastModifiedDate");
                entity.Property(e => e.OmiLicensePlateCounterParty)
                    .HasMaxLength(8)
                    .HasColumnName("OMI_LicensePlateCounterParty");
                entity.Property(e => e.OmiLicensePlateInsured)
                    .HasMaxLength(8)
                    .HasColumnName("OMI_LicensePlateInsured");
                entity.Property(e => e.OmiOvsDeregistrationReasonId)
                    .HasMaxLength(1)
                    .HasColumnName("OMI_OvsDeregistrationReason_Id");
                entity.Property(e => e.OmiOvsLiabilityPercentageId)
                    .HasMaxLength(3)
                    .HasColumnName("OMI_OvsLiabilityPercentage_Id");
                entity.Property(e => e.OmiOvsMessageStatusId).HasColumnName("OMI_OvsMessageStatus_Id");
                entity.Property(e => e.OmiOvsMessageTypeId)
                    .HasMaxLength(5)
                    .HasColumnName("OMI_OvsMessageType_Id");
                entity.Property(e => e.OmiOvsRegresId).HasColumnName("OMI_OvsRegres_Id");
                entity.Property(e => e.OmiReceivedDate).HasColumnName("OMI_ReceivedDate");
                entity.Property(e => e.OmiReferenceNumberCounterParty)
                    .HasMaxLength(20)
                    .HasColumnName("OMI_ReferenceNumberCounterParty");
                entity.Property(e => e.OmiTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OMI_TimeStamp");

                entity.HasOne(d => d.OmiCounterPartyOvsCode).WithMany(p => p.OvsMessageIncomings)
                    .HasForeignKey(d => d.OmiCounterPartyOvsCodeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OvsMessageIncoming_OvsCodes");

                entity.HasOne(d => d.OmiOvsDeregistrationReason).WithMany(p => p.OvsMessageIncomings)
                    .HasForeignKey(d => d.OmiOvsDeregistrationReasonId)
                    .HasConstraintName("FK_OvsMessageIncoming_OvsDeregistrationReasons");

                entity.HasOne(d => d.OmiOvsLiabilityPercentage).WithMany(p => p.OvsMessageIncomings)
                    .HasForeignKey(d => d.OmiOvsLiabilityPercentageId)
                    .HasConstraintName("FK_OvsMessageIncoming_OvsLiabilityPercentages");

                entity.HasOne(d => d.OmiOvsMessageStatus).WithMany(p => p.OvsMessageIncomings)
                    .HasForeignKey(d => d.OmiOvsMessageStatusId)
                    .HasConstraintName("FK_OvsMessageIncoming_OvsMessageStatuses");

                entity.HasOne(d => d.OmiOvsMessageType).WithMany(p => p.OvsMessageIncomings)
                    .HasForeignKey(d => d.OmiOvsMessageTypeId)
                    .HasConstraintName("FK_OvsMessageIncoming_OvsMessageTypes");

                entity.HasOne(d => d.OmiOvsRegres).WithMany(p => p.OvsMessageIncomings)
                    .HasForeignKey(d => d.OmiOvsRegresId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OvsMessageIncoming_OvsRegres");
            });

            modelBuilder.Entity<OvsMessageOutgoing>(entity =>
            {
                entity.HasKey(e => e.OmoId);

                entity.ToTable("OvsMessageOutgoing", "ovs");

                entity.Property(e => e.OmoId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("OMO_Id");
                entity.Property(e => e.OmoCrcommunityAdress)
                    .HasMaxLength(8)
                    .HasColumnName("OMO_CRCommunityAdress");
                entity.Property(e => e.OmoCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OMO_CreatedBy");
                entity.Property(e => e.OmoCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OMO_CreatedDate");
                entity.Property(e => e.OmoErrorCode)
                    .HasMaxLength(20)
                    .HasColumnName("OMO_ErrorCode");
                entity.Property(e => e.OmoErrorMessage)
                    .HasMaxLength(250)
                    .HasColumnName("OMO_ErrorMessage");
                entity.Property(e => e.OmoInsuredOvsCodeId)
                    .HasMaxLength(1)
                    .HasColumnName("OMO_InsuredOvsCode_Id");
                entity.Property(e => e.OmoLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OMO_LastModifiedBy");
                entity.Property(e => e.OmoLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OMO_LastModifiedDate");
                entity.Property(e => e.OmoLicensePlateCounterParty)
                    .HasMaxLength(8)
                    .HasColumnName("OMO_LicensePlateCounterParty");
                entity.Property(e => e.OmoLicensePlateInsured)
                    .HasMaxLength(8)
                    .HasColumnName("OMO_LicensePlateInsured");
                entity.Property(e => e.OmoOvsLiabilityPercentageId)
                    .HasMaxLength(3)
                    .HasColumnName("OMO_OvsLiabilityPercentage_Id");
                entity.Property(e => e.OmoOvsMessageStatusId).HasColumnName("OMO_OvsMessageStatus_Id");
                entity.Property(e => e.OmoOvsMessageTypeId)
                    .HasMaxLength(5)
                    .HasColumnName("OMO_OvsMessageType_Id");
                entity.Property(e => e.OmoOvsRegresId).HasColumnName("OMO_OvsRegres_Id");
                entity.Property(e => e.OmoSendDate).HasColumnName("OMO_SendDate");
                entity.Property(e => e.OmoTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OMO_TimeStamp");

                entity.HasOne(d => d.OmoInsuredOvsCode).WithMany(p => p.OvsMessageOutgoings)
                    .HasForeignKey(d => d.OmoInsuredOvsCodeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OvsMessageOutgoing_OvsCodes");

                entity.HasOne(d => d.OmoOvsLiabilityPercentage).WithMany(p => p.OvsMessageOutgoings)
                    .HasForeignKey(d => d.OmoOvsLiabilityPercentageId)
                    .HasConstraintName("FK_OvsMessageOutgoing_OvsLiabilityPercentages");

                entity.HasOne(d => d.OmoOvsMessageStatus).WithMany(p => p.OvsMessageOutgoings)
                    .HasForeignKey(d => d.OmoOvsMessageStatusId)
                    .HasConstraintName("FK_OvsMessageOutgoing_OvsMessageStatuses");

                entity.HasOne(d => d.OmoOvsMessageType).WithMany(p => p.OvsMessageOutgoings)
                    .HasForeignKey(d => d.OmoOvsMessageTypeId)
                    .HasConstraintName("FK_OvsMessageOutgoing_OvsMessageTypes");

                entity.HasOne(d => d.OmoOvsRegres).WithMany(p => p.OvsMessageOutgoings)
                    .HasForeignKey(d => d.OmoOvsRegresId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OvsMessageOutgoing_OvsRegres");
            });

            modelBuilder.Entity<OvsMessageStatus>(entity =>
            {
                entity.HasKey(e => e.OmsId);

                entity.ToTable("OvsMessageStatuses", "ovs");

                entity.Property(e => e.OmsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("OMS_Id");
                entity.Property(e => e.OmsCode)
                    .HasMaxLength(11)
                    .HasColumnName("OMS_Code");
                entity.Property(e => e.OmsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OMS_CreatedBy");
                entity.Property(e => e.OmsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OMS_CreatedDate");
                entity.Property(e => e.OmsInactive).HasColumnName("OMS_Inactive");
                entity.Property(e => e.OmsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OMS_LastModifiedBy");
                entity.Property(e => e.OmsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OMS_LastModifiedDate");
                entity.Property(e => e.OmsLongName)
                    .HasMaxLength(250)
                    .HasColumnName("OMS_LongName");
                entity.Property(e => e.OmsShortName)
                    .HasMaxLength(20)
                    .HasColumnName("OMS_ShortName");
                entity.Property(e => e.OmsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OMS_TimeStamp");
            });

            modelBuilder.Entity<OvsMessageType>(entity =>
            {
                entity.HasKey(e => e.OmtId);

                entity.ToTable("OvsMessageTypes", "ovs");

                entity.Property(e => e.OmtId)
                    .HasMaxLength(5)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("OMT_Id");
                entity.Property(e => e.OmtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OMT_CreatedBy");
                entity.Property(e => e.OmtCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OMT_CreatedDate");
                entity.Property(e => e.OmtInactive).HasColumnName("OMT_Inactive");
                entity.Property(e => e.OmtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OMT_LastModifiedBy");
                entity.Property(e => e.OmtLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OMT_LastModifiedDate");
                entity.Property(e => e.OmtLongName)
                    .HasMaxLength(250)
                    .HasColumnName("OMT_LongName");
                entity.Property(e => e.OmtShortName)
                    .HasMaxLength(20)
                    .HasColumnName("OMT_ShortName");
                entity.Property(e => e.OmtTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OMT_TimeStamp");
            });

            modelBuilder.Entity<OvsPayment>(entity =>
            {
                entity.HasKey(e => e.OpaId);

                entity.ToTable("OvsPayments", "ovs");

                entity.Property(e => e.OpaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("OPA_Id");
                entity.Property(e => e.OpaAmountPayment)
                    .HasColumnType("money")
                    .HasColumnName("OPA_AmountPayment");
                entity.Property(e => e.OpaCostTypeId).HasColumnName("OPA_CostType_Id");
                entity.Property(e => e.OpaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OPA_CreatedBy");
                entity.Property(e => e.OpaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OPA_CreatedDate");
                entity.Property(e => e.OpaIsOwnAmount)
                    .HasDefaultValueSql("((0))")
                    .HasColumnName("OPA_IsOwnAmount");
                entity.Property(e => e.OpaIsSebsequentMessage).HasColumnName("OPA_IsSebsequentMessage");
                entity.Property(e => e.OpaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OPA_LastModifiedBy");
                entity.Property(e => e.OpaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OPA_LastModifiedDate");
                entity.Property(e => e.OpaOvsMessageIncomingId).HasColumnName("OPA_OvsMessageIncoming_Id");
                entity.Property(e => e.OpaOvsMessageOutgoingId).HasColumnName("OPA_OvsMessageOutgoing_Id");
                entity.Property(e => e.OpaOvsRegresId).HasColumnName("OPA_OvsRegres_Id");
                entity.Property(e => e.OpaSequenceNumber).HasColumnName("OPA_SequenceNumber");
                entity.Property(e => e.OpaSettlementNumber).HasColumnName("OPA_SettlementNumber");
                entity.Property(e => e.OpaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OPA_TimeStamp");

                entity.HasOne(d => d.OpaCostType).WithMany(p => p.OvsPayments)
                    .HasForeignKey(d => d.OpaCostTypeId)
                    .HasConstraintName("FK_OvsPayments_CostTypes");

                entity.HasOne(d => d.OpaOvsMessageIncoming).WithMany(p => p.OvsPayments)
                    .HasForeignKey(d => d.OpaOvsMessageIncomingId)
                    .HasConstraintName("FK_OvsPayments_OvsMessageIncoming");

                entity.HasOne(d => d.OpaOvsMessageOutgoing).WithMany(p => p.OvsPayments)
                    .HasForeignKey(d => d.OpaOvsMessageOutgoingId)
                    .HasConstraintName("FK_OvsPayments_OvsMessageOutgoing");

                entity.HasOne(d => d.OpaOvsRegres).WithMany(p => p.OvsPayments)
                    .HasForeignKey(d => d.OpaOvsRegresId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OvsPayments_OvsRegres");
            });

            modelBuilder.Entity<OvsRegre>(entity =>
            {
                entity.HasKey(e => e.OvsId);

                entity.ToTable("OvsRegres", "ovs");

                entity.Property(e => e.OvsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("OVS_Id");
                entity.Property(e => e.OvsCrcommunityAdress)
                    .HasMaxLength(8)
                    .HasColumnName("OVS_CRCommunityAdress");
                entity.Property(e => e.OvsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OVS_CreatedBy");
                entity.Property(e => e.OvsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OVS_CreatedDate");
                entity.Property(e => e.OvsDossierNumberCounterParty)
                    .HasMaxLength(20)
                    .HasColumnName("OVS_DossierNumberCounterParty");
                entity.Property(e => e.OvsDossierPartyId).HasColumnName("OVS_DossierParty_Id");
                entity.Property(e => e.OvsEndDateMatching).HasColumnName("OVS_EndDateMatching");
                entity.Property(e => e.OvsEndDateRegres).HasColumnName("OVS_EndDateRegres");
                entity.Property(e => e.OvsIncidentAmountCounterParty)
                    .HasColumnType("money")
                    .HasColumnName("OVS_IncidentAmountCounterParty");
                entity.Property(e => e.OvsIncidentDateCounterParty).HasColumnName("OVS_IncidentDateCounterParty");
                entity.Property(e => e.OvsIsMatchingPossible).HasColumnName("OVS_IsMatchingPossible");
                entity.Property(e => e.OvsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OVS_LastModifiedBy");
                entity.Property(e => e.OvsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OVS_LastModifiedDate");
                entity.Property(e => e.OvsLicensePlateCounterParty)
                    .HasMaxLength(15)
                    .HasColumnName("OVS_LicensePlateCounterParty");
                entity.Property(e => e.OvsPolicyNumberCounterParty)
                    .HasMaxLength(20)
                    .HasColumnName("OVS_PolicyNumberCounterParty");
                entity.Property(e => e.OvsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OVS_TimeStamp");

                entity.HasOne(d => d.OvsDossierParty).WithMany(p => p.OvsRegres)
                    .HasForeignKey(d => d.OvsDossierPartyId)
                    .HasConstraintName("FK_OvsRegres_DossierParties");
            });

            modelBuilder.Entity<OvsRegresStatus>(entity =>
            {
                entity.HasKey(e => e.OrsId);

                entity.ToTable("OvsRegresStatus", "ovs");

                entity.Property(e => e.OrsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("ORS_Id");
                entity.Property(e => e.OrsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ORS_CreatedBy");
                entity.Property(e => e.OrsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ORS_CreatedDate");
                entity.Property(e => e.OrsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ORS_LastModifiedBy");
                entity.Property(e => e.OrsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ORS_LastModifiedDate");
                entity.Property(e => e.OrsOvsRegresId).HasColumnName("ORS_OvsRegres_Id");
                entity.Property(e => e.OrsOvsStatusId).HasColumnName("ORS_OvsStatus_Id");
                entity.Property(e => e.OrsRegistrationDate).HasColumnName("ORS_RegistrationDate");
                entity.Property(e => e.OrsSequenceNumber)
                    .HasDefaultValueSql("((0))")
                    .HasColumnName("ORS_SequenceNumber");
                entity.Property(e => e.OrsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ORS_TimeStamp");

                entity.HasOne(d => d.OrsOvsRegres).WithMany(p => p.OvsRegresStatuses)
                    .HasForeignKey(d => d.OrsOvsRegresId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OvsRegresStatus_OvsRegres");

                entity.HasOne(d => d.OrsOvsStatus).WithMany(p => p.OvsRegresStatuses)
                    .HasForeignKey(d => d.OrsOvsStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OvsRegresStatus_OvsStatuses");
            });

            modelBuilder.Entity<OvsStatus>(entity =>
            {
                entity.HasKey(e => e.OstId);

                entity.ToTable("OvsStatuses", "ovs");

                entity.Property(e => e.OstId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("OST_Id");
                entity.Property(e => e.OstCode)
                    .HasMaxLength(10)
                    .HasColumnName("OST_Code");
                entity.Property(e => e.OstCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OST_CreatedBy");
                entity.Property(e => e.OstCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OST_CreatedDate");
                entity.Property(e => e.OstInactive).HasColumnName("OST_Inactive");
                entity.Property(e => e.OstLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("OST_LastModifiedBy");
                entity.Property(e => e.OstLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("OST_LastModifiedDate");
                entity.Property(e => e.OstLongName)
                    .HasMaxLength(250)
                    .HasColumnName("OST_LongName");
                entity.Property(e => e.OstShortName)
                    .HasMaxLength(20)
                    .HasColumnName("OST_ShortName");
                entity.Property(e => e.OstTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("OST_TimeStamp");
            });

            modelBuilder.Entity<PacxHistoryView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PacxHistoryView", "mdm");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.PacxCode).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.ValidFromDate).HasColumnType("date");
                entity.Property(e => e.ValidUntilDate).HasColumnType("date");
            });

            modelBuilder.Entity<PacxView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PacxView", "mdm");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.PacxCode).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PaintType>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__PaintTyp__3214EC07B74693E2");

                entity.ToTable("PaintTypes", "mdm");

                entity.HasIndex(e => e.Code, "UX_mdm_PaintTypes_Code__Filtered")
                    .IsUnique()
                    .HasFilter("([Inactive]=(0))");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LongName).HasMaxLength(250);
                entity.Property(e => e.ShortName).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.LocalizableEntry).WithMany(p => p.PaintTypes)
                    .HasForeignKey(d => d.LocalizableEntryId)
                    .HasConstraintName("FK_PaintType_LocalizableEntries");
            });

            modelBuilder.Entity<Partner>(entity =>
            {
                entity.HasKey(e => e.ParId);

                entity.ToTable("Partners", "mdm");

                entity.Property(e => e.ParId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PAR_Id");
                entity.Property(e => e.ParCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PAR_CreatedBy");
                entity.Property(e => e.ParCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PAR_CreatedDate");
                entity.Property(e => e.ParCultureCodePreferredLanguage)
                    .HasMaxLength(10)
                    .HasColumnName("PAR_CultureCodePreferredLanguage");
                entity.Property(e => e.ParExternalCode)
                    .HasMaxLength(10)
                    .HasColumnName("PAR_ExternalCode");
                entity.Property(e => e.ParInactive).HasColumnName("PAR_Inactive");
                entity.Property(e => e.ParLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PAR_LastModifiedBy");
                entity.Property(e => e.ParLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PAR_LastModifiedDate");
                entity.Property(e => e.ParTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PAR_TimeStamp");

                entity.HasOne(d => d.Par).WithOne(p => p.Partner)
                    .HasForeignKey<Partner>(d => d.ParId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Partners_OrganizationUnits");
            });

            modelBuilder.Entity<Partner1>(entity =>
            {
                entity.HasKey(e => e.ParId);

                entity.ToTable("Partners", "stg");

                entity.Property(e => e.ParId)
                    .ValueGeneratedNever()
                    .HasColumnName("PAR_Id");
                entity.Property(e => e.ParCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PAR_CreatedBy");
                entity.Property(e => e.ParCreatedDate).HasColumnName("PAR_CreatedDate");
                entity.Property(e => e.ParCultureCodePreferredLanguage)
                    .HasMaxLength(10)
                    .HasColumnName("PAR_CultureCodePreferredLanguage");
                entity.Property(e => e.ParExternalCode)
                    .HasMaxLength(10)
                    .HasColumnName("PAR_ExternalCode");
                entity.Property(e => e.ParInactive).HasColumnName("PAR_Inactive");
                entity.Property(e => e.ParLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PAR_LastModifiedBy");
                entity.Property(e => e.ParLastModifiedDate).HasColumnName("PAR_LastModifiedDate");
                entity.Property(e => e.ParTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PAR_TimeStamp");
            });

            modelBuilder.Entity<PartyRoleMapping>(entity =>
            {
                entity.HasKey(e => e.PrmId);

                entity.ToTable("PartyRoleMapping", "pros");

                entity.Property(e => e.PrmId)
                    .ValueGeneratedNever()
                    .HasColumnName("PRM_Id");
                entity.Property(e => e.PrmCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PRM_CreatedBy");
                entity.Property(e => e.PrmCreatedDate).HasColumnName("PRM_CreatedDate");
                entity.Property(e => e.PrmEiscode)
                    .HasMaxLength(100)
                    .HasColumnName("PRM_EISCode");
                entity.Property(e => e.PrmLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PRM_LastModifiedBy");
                entity.Property(e => e.PrmLastModifiedDate).HasColumnName("PRM_LastModifiedDate");
                entity.Property(e => e.PrmProspectCode)
                    .HasMaxLength(100)
                    .HasColumnName("PRM_ProspectCode");
                entity.Property(e => e.PrmTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PRM_TimeStamp");
            });

            modelBuilder.Entity<Payment>(entity =>
            {
                entity.HasKey(e => e.PayId);

                entity.ToTable("Payments", "dos", tb => tb.HasTrigger("th_dos_Payments_TraceHistory"));

                entity.HasIndex(e => e.PayDossierPartyId, "IX_dos_Payments_DossierParty");

                entity.Property(e => e.PayId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PAY_Id");
                entity.Property(e => e.PayCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PAY_CreatedBy");
                entity.Property(e => e.PayCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PAY_CreatedDate");
                entity.Property(e => e.PayCurrencyCode)
                    .HasMaxLength(10)
                    .HasColumnName("PAY_CurrencyCode");
                entity.Property(e => e.PayCurrentStatusCode)
                    .HasMaxLength(10)
                    .HasColumnName("PAY_CurrentStatusCode");
                entity.Property(e => e.PayCurrentStatusHistoryId).HasColumnName("PAY_CurrentStatusHistory_Id");
                entity.Property(e => e.PayCurrentStatusHistoryStartDate).HasColumnName("PAY_CurrentStatusHistoryStartDate");
                entity.Property(e => e.PayDivergentRecoveryValue)
                    .HasColumnType("money")
                    .HasColumnName("PAY_DivergentRecoveryValue");
                entity.Property(e => e.PayDossierPartyId).HasColumnName("PAY_DossierParty_Id");
                entity.Property(e => e.PayEmployeeId).HasColumnName("PAY_Employee_Id");
                entity.Property(e => e.PayIban)
                    .HasMaxLength(34)
                    .HasColumnName("PAY_IBAN");
                entity.Property(e => e.PayInvolvedCoverageId).HasColumnName("PAY_InvolvedCoverage_Id");
                entity.Property(e => e.PayIsSentToClearingHouse).HasColumnName("PAY_IsSentToClearingHouse");
                entity.Property(e => e.PayIsTotalLoss).HasColumnName("PAY_IsTotalLoss");
                entity.Property(e => e.PayLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PAY_LastModifiedBy");
                entity.Property(e => e.PayLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PAY_LastModifiedDate");
                entity.Property(e => e.PayPaymentDate)
                    .HasColumnType("date")
                    .HasColumnName("PAY_PaymentDate");
                entity.Property(e => e.PayPaymentMethod)
                    .HasMaxLength(200)
                    .HasColumnName("PAY_PaymentMethod");
                entity.Property(e => e.PayPaymentSource)
                    .HasMaxLength(200)
                    .HasColumnName("PAY_PaymentSource");
                entity.Property(e => e.PayPaymentStatus)
                    .HasMaxLength(200)
                    .HasColumnName("PAY_PaymentStatus");
                entity.Property(e => e.PayPaymentType)
                    .HasMaxLength(200)
                    .HasColumnName("PAY_PaymentType");
                entity.Property(e => e.PayPaymentValue)
                    .HasColumnType("money")
                    .HasColumnName("PAY_PaymentValue");
                entity.Property(e => e.PayReference)
                    .HasMaxLength(200)
                    .HasColumnName("PAY_Reference");
                entity.Property(e => e.PaySequenceNumber).HasColumnName("PAY_SequenceNumber");
                entity.Property(e => e.PayTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PAY_TimeStamp");

                entity.HasOne(d => d.PayDossierParty).WithMany(p => p.Payments)
                    .HasForeignKey(d => d.PayDossierPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Payments_DossierParties");

                entity.HasOne(d => d.PayEmployee).WithMany(p => p.Payments)
                    .HasForeignKey(d => d.PayEmployeeId)
                    .HasConstraintName("FK_Payments_Employees");

                entity.HasOne(d => d.PayInvolvedCoverage).WithMany(p => p.Payments)
                    .HasForeignKey(d => d.PayInvolvedCoverageId)
                    .HasConstraintName("FK_Payments_InvolvedCoverages");
            });

            modelBuilder.Entity<PaymentBatch>(entity =>
            {
                entity.HasKey(e => e.PybId).HasName("PK_PaymentBatch");

                entity.ToTable("PaymentBatches", "fin");

                entity.HasIndex(e => e.PybBatchNumber, "IX_PaymentBatch_BatchNumber");

                entity.Property(e => e.PybId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PYB_Id");
                entity.Property(e => e.PybBatchNumber)
                    .HasMaxLength(20)
                    .HasColumnName("PYB_BatchNumber");
                entity.Property(e => e.PybCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PYB_CreatedBy");
                entity.Property(e => e.PybCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PYB_CreatedDate");
                entity.Property(e => e.PybLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PYB_LastModifiedBy");
                entity.Property(e => e.PybLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PYB_LastModifiedDate");
                entity.Property(e => e.PybOrganizationAccountId).HasColumnName("PYB_OrganizationAccount_Id");
                entity.Property(e => e.PybPaymentDateUntil)
                    .HasColumnType("date")
                    .HasColumnName("PYB_PaymentDateUntil");
                entity.Property(e => e.PybTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PYB_TimeStamp");

                entity.HasOne(d => d.PybOrganizationAccount).WithMany(p => p.PaymentBatches)
                    .HasForeignKey(d => d.PybOrganizationAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PaymentBatches_OrganizationAccounts");
            });

            modelBuilder.Entity<PaymentBatchCreditorsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PaymentBatchCreditorsView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditAmount).HasColumnType("money");
                entity.Property(e => e.CreditTransferNumber).HasMaxLength(20);
                entity.Property(e => e.CreditorName).HasMaxLength(756);
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.EmailAddress).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.PaymentBatchNumber).HasMaxLength(20);
                entity.Property(e => e.RemittanceInformation).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PaymentBatchLine>(entity =>
            {
                entity.HasKey(e => e.PblId).HasName("PK_PaymentBatchLine");

                entity.ToTable("PaymentBatchLines", "fin");

                entity.HasIndex(e => e.PblCreditTransferId, "IX_PaymentBatchLines_CreditTransfers");

                entity.HasIndex(e => e.PblPaymentBatchId, "IX_fin_PaymentBatchLines_PaymentBatch_Id__INCL");

                entity.Property(e => e.PblId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PBL_Id");
                entity.Property(e => e.PblCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PBL_CreatedBy");
                entity.Property(e => e.PblCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PBL_CreatedDate");
                entity.Property(e => e.PblCreditTransferId).HasColumnName("PBL_CreditTransfer_Id");
                entity.Property(e => e.PblLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PBL_LastModifiedBy");
                entity.Property(e => e.PblLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PBL_LastModifiedDate");
                entity.Property(e => e.PblPaymentBatchId).HasColumnName("PBL_PaymentBatch_Id");
                entity.Property(e => e.PblSequenceNumber).HasColumnName("PBL_SequenceNumber");
                entity.Property(e => e.PblTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PBL_TimeStamp");

                entity.HasOne(d => d.PblCreditTransfer).WithMany(p => p.PaymentBatchLines)
                    .HasForeignKey(d => d.PblCreditTransferId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PaymentBatchLines_CreditTransfers");

                entity.HasOne(d => d.PblPaymentBatch).WithMany(p => p.PaymentBatchLines)
                    .HasForeignKey(d => d.PblPaymentBatchId)
                    .HasConstraintName("FK_PaymentBatchLines_PaymentBatches");
            });

            modelBuilder.Entity<PaymentBatchLinesReconciliationsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PaymentBatchLinesReconciliationsView", "fin");

                entity.Property(e => e.AccountAddressLine1).HasMaxLength(250);
                entity.Property(e => e.AccountAddressLine2).HasMaxLength(250);
                entity.Property(e => e.AccountHolderName).HasMaxLength(250);
                entity.Property(e => e.AccountNumber).HasMaxLength(34);
                entity.Property(e => e.ActionTypeName).HasMaxLength(250);
                entity.Property(e => e.BankName).HasMaxLength(250);
                entity.Property(e => e.Bic)
                    .HasMaxLength(11)
                    .HasColumnName("BIC");
                entity.Property(e => e.CostCenterCode).HasMaxLength(20);
                entity.Property(e => e.CostUnitCode).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditAmount).HasColumnType("money");
                entity.Property(e => e.CreditorNumber).HasMaxLength(10);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DebtorNumber).HasMaxLength(10);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.ExecutionDate).HasColumnType("date");
                entity.Property(e => e.Iban)
                    .HasMaxLength(34)
                    .HasColumnName("IBAN");
                entity.Property(e => e.InvoiceNumber).HasMaxLength(10);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LedgerAccount).HasMaxLength(20);
                entity.Property(e => e.MatchValue).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.OurReference).HasMaxLength(50);
                entity.Property(e => e.PaymentBatchNumber).HasMaxLength(20);
                entity.Property(e => e.RemittanceInformation).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(50);
            });

            modelBuilder.Entity<PaymentBatchLinesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PaymentBatchLinesView", "fin");

                entity.Property(e => e.AccountAddressLine1).HasMaxLength(250);
                entity.Property(e => e.AccountAddressLine2).HasMaxLength(250);
                entity.Property(e => e.AccountHolderName).HasMaxLength(250);
                entity.Property(e => e.AccountNumber).HasMaxLength(34);
                entity.Property(e => e.BankName).HasMaxLength(250);
                entity.Property(e => e.Bic)
                    .HasMaxLength(11)
                    .HasColumnName("BIC");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditAmount).HasColumnType("money");
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.ExecutionDate).HasColumnType("date");
                entity.Property(e => e.Iban)
                    .HasMaxLength(34)
                    .HasColumnName("IBAN");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.PaymentBatchNumber).HasMaxLength(20);
                entity.Property(e => e.RemittanceInformation).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PaymentBatchSuppliersView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PaymentBatchSuppliersView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditAmount).HasColumnType("money");
                entity.Property(e => e.CreditTransferNumber).HasMaxLength(20);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.EmailAddress).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.PaymentBatchNumber).HasMaxLength(20);
                entity.Property(e => e.RemittanceInformation).HasMaxLength(250);
                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PaymentBatchesPendingJournalEntryView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PaymentBatchesPendingJournalEntryView", "fin");

                entity.Property(e => e.BatchNumber).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PaymentBatchesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PaymentBatchesView", "fin");

                entity.Property(e => e.BankAccountAbbreviation).HasMaxLength(20);
                entity.Property(e => e.BankAccountCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.BankAccountIban)
                    .HasMaxLength(34)
                    .HasColumnName("BankAccountIBAN");
                entity.Property(e => e.BankAccountName).HasMaxLength(250);
                entity.Property(e => e.BankStatementDate).HasColumnType("date");
                entity.Property(e => e.BatchNumber).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditAmount).HasColumnType("money");
                entity.Property(e => e.ExactAdministration).HasMaxLength(10);
                entity.Property(e => e.ExactJournal).HasMaxLength(10);
                entity.Property(e => e.JournalCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.JournalId).HasMaxLength(20);
                entity.Property(e => e.JournalName).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.PaymentDateUntil).HasColumnType("date");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PaymentCondition>(entity =>
            {
                entity.HasKey(e => e.PycId);

                entity.ToTable("PaymentConditions", "fin");

                entity.HasIndex(e => new { e.PycCode, e.PvcLegalEntityId }, "IX_PaymentConditions_Code_LegalEntity");

                entity.Property(e => e.PycId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PYC_Id");
                entity.Property(e => e.PvcLegalEntityId).HasColumnName("PVC_LegalEntity_Id");
                entity.Property(e => e.PycCode)
                    .HasMaxLength(10)
                    .HasColumnName("PYC_Code");
                entity.Property(e => e.PycCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PYC_CreatedBy");
                entity.Property(e => e.PycCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PYC_CreatedDate");
                entity.Property(e => e.PycDueDays).HasColumnName("PYC_DueDays");
                entity.Property(e => e.PycInactive).HasColumnName("PYC_Inactive");
                entity.Property(e => e.PycIsCreditorDefault).HasColumnName("PYC_IsCreditorDefault");
                entity.Property(e => e.PycIsDebtorDefault).HasColumnName("PYC_IsDebtorDefault");
                entity.Property(e => e.PycIsDueDateUntilEndOfMonth).HasColumnName("PYC_IsDueDateUntilEndOfMonth");
                entity.Property(e => e.PycLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PYC_LastModifiedBy");
                entity.Property(e => e.PycLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PYC_LastModifiedDate");
                entity.Property(e => e.PycLongName)
                    .HasMaxLength(250)
                    .HasColumnName("PYC_LongName");
                entity.Property(e => e.PycShortName)
                    .HasMaxLength(20)
                    .HasColumnName("PYC_ShortName");
                entity.Property(e => e.PycTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PYC_TimeStamp");

                entity.HasOne(d => d.PvcLegalEntity).WithMany(p => p.PaymentConditions)
                    .HasForeignKey(d => d.PvcLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PaymentConditions_LegalEntities");
            });

            modelBuilder.Entity<PaymentConditionsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PaymentConditionsView", "fin");

                entity.Property(e => e.Code).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.ExactAdministration).HasMaxLength(10);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.LongName).HasMaxLength(250);
                entity.Property(e => e.ShortName).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PaymentCurrency>(entity =>
            {
                entity.HasKey(e => e.PcuId);

                entity.ToTable("PaymentCurrencies", "fin");

                entity.Property(e => e.PcuId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PCU_Id");
                entity.Property(e => e.PcuCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PCU_CreatedBy");
                entity.Property(e => e.PcuCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PCU_CreatedDate");
                entity.Property(e => e.PcuEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("PCU_EffectiveDate");
                entity.Property(e => e.PcuForeignCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("PCU_ForeignCurrencyCode");
                entity.Property(e => e.PcuLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PCU_LastModifiedBy");
                entity.Property(e => e.PcuLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PCU_LastModifiedDate");
                entity.Property(e => e.PcuLegalEntityId).HasColumnName("PCU_LegalEntity_Id");
                entity.Property(e => e.PcuPaymentCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("PCU_PaymentCurrencyCode");
                entity.Property(e => e.PcuTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("PCU_TerminationDate");
                entity.Property(e => e.PcuTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PCU_TimeStamp");

                entity.HasOne(d => d.PcuLegalEntity).WithMany(p => p.PaymentCurrencies)
                    .HasForeignKey(d => d.PcuLegalEntityId)
                    .HasConstraintName("FK_PaymentCurrencies_LegalEntities");
            });

            modelBuilder.Entity<PaymentMethod>(entity =>
            {
                entity.HasKey(e => e.PmtId);

                entity.ToTable("PaymentMethods", "fin");

                entity.HasIndex(e => e.PmtCode, "IX_PaymentMethods_Code").IsUnique();

                entity.Property(e => e.PmtId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PMT_Id");
                entity.Property(e => e.PmtCode)
                    .HasMaxLength(10)
                    .HasColumnName("PMT_Code");
                entity.Property(e => e.PmtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PMT_CreatedBy");
                entity.Property(e => e.PmtCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PMT_CreatedDate");
                entity.Property(e => e.PmtInactive).HasColumnName("PMT_Inactive");
                entity.Property(e => e.PmtIsCreditorDefault).HasColumnName("PMT_IsCreditorDefault");
                entity.Property(e => e.PmtIsDebtorDefault).HasColumnName("PMT_IsDebtorDefault");
                entity.Property(e => e.PmtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PMT_LastModifiedBy");
                entity.Property(e => e.PmtLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PMT_LastModifiedDate");
                entity.Property(e => e.PmtLocalizableEntryId).HasColumnName("PMT_LocalizableEntry_Id");
                entity.Property(e => e.PmtLongName)
                    .HasMaxLength(250)
                    .HasColumnName("PMT_LongName");
                entity.Property(e => e.PmtShortName)
                    .HasMaxLength(20)
                    .HasColumnName("PMT_ShortName");
                entity.Property(e => e.PmtTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PMT_TimeStamp");

                entity.HasOne(d => d.PmtLocalizableEntry).WithMany(p => p.PaymentMethods)
                    .HasForeignKey(d => d.PmtLocalizableEntryId)
                    .HasConstraintName("FK_PaymentMethods_LocalizableEntries");
            });

            modelBuilder.Entity<PaymentMethodsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PaymentMethodsView", "fin");

                entity.Property(e => e.Code).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.LongName).HasMaxLength(250);
                entity.Property(e => e.ShortName).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PaymentStatus>(entity =>
            {
                entity.HasKey(e => e.PstId);

                entity.ToTable("PaymentStatuses", "dos", tb => tb.HasTrigger("th_dos_PaymentStatuses_TraceHistory"));

                entity.Property(e => e.PstId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PST_Id");
                entity.Property(e => e.PstCode)
                    .HasMaxLength(10)
                    .HasColumnName("PST_Code");
                entity.Property(e => e.PstCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PST_CreatedBy");
                entity.Property(e => e.PstCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PST_CreatedDate");
                entity.Property(e => e.PstInactive).HasColumnName("PST_Inactive");
                entity.Property(e => e.PstLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PST_LastModifiedBy");
                entity.Property(e => e.PstLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PST_LastModifiedDate");
                entity.Property(e => e.PstLocalizableEntryId).HasColumnName("PST_LocalizableEntry_Id");
                entity.Property(e => e.PstLongName)
                    .HasMaxLength(250)
                    .HasColumnName("PST_LongName");
                entity.Property(e => e.PstShortName)
                    .HasMaxLength(20)
                    .HasColumnName("PST_ShortName");
                entity.Property(e => e.PstTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PST_TimeStamp");

                entity.HasOne(d => d.PstLocalizableEntry).WithMany(p => p.PaymentStatuses)
                    .HasForeignKey(d => d.PstLocalizableEntryId)
                    .HasConstraintName("FK_PaymentStatuses_LocalizableEntries");
            });

            modelBuilder.Entity<PaymentStatusHistory>(entity =>
            {
                entity.HasKey(e => e.PshId);

                entity.ToTable("PaymentStatusHistory", "dos", tb =>
                {
                    tb.HasTrigger("td_PaymentStatusHistory");
                    tb.HasTrigger("th_dos_PaymentStatusHistory_TraceHistory");
                    tb.HasTrigger("tr_PaymentStatusHistory");
                });

                entity.HasIndex(e => new { e.PshPaymentId, e.PshStartDate }, "IX_PaymentStatusHistory_Payment_StartDate_INCL");

                entity.Property(e => e.PshId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PSH_Id");
                entity.Property(e => e.PshCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PSH_CreatedBy");
                entity.Property(e => e.PshCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PSH_CreatedDate");
                entity.Property(e => e.PshLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PSH_LastModifiedBy");
                entity.Property(e => e.PshLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PSH_LastModifiedDate");
                entity.Property(e => e.PshPaymentId).HasColumnName("PSH_Payment_Id");
                entity.Property(e => e.PshPaymentStatusId).HasColumnName("PSH_PaymentStatus_Id");
                entity.Property(e => e.PshStartDate)
                    .HasColumnType("date")
                    .HasColumnName("PSH_StartDate");
                entity.Property(e => e.PshTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PSH_TimeStamp");

                entity.HasOne(d => d.PshPayment).WithMany(p => p.PaymentStatusHistories)
                    .HasForeignKey(d => d.PshPaymentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PaymentStatusHistory_Payments");

                entity.HasOne(d => d.PshPaymentStatus).WithMany(p => p.PaymentStatusHistories)
                    .HasForeignKey(d => d.PshPaymentStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PaymentStatusHistory_PaymentStatuses");
            });

            modelBuilder.Entity<PaymentStatusHistoryHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_PaymentStatusHistory_History_ID");

                entity.ToTable("PaymentStatusHistory_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.PshCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PSH_CreatedBy");
                entity.Property(e => e.PshCreatedDate).HasColumnName("PSH_CreatedDate");
                entity.Property(e => e.PshId).HasColumnName("PSH_Id");
                entity.Property(e => e.PshLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PSH_LastModifiedBy");
                entity.Property(e => e.PshLastModifiedDate).HasColumnName("PSH_LastModifiedDate");
                entity.Property(e => e.PshPaymentId).HasColumnName("PSH_Payment_Id");
                entity.Property(e => e.PshPaymentStatusId).HasColumnName("PSH_PaymentStatus_Id");
                entity.Property(e => e.PshStartDate)
                    .HasColumnType("date")
                    .HasColumnName("PSH_StartDate");
            });

            modelBuilder.Entity<PaymentStatusesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_PaymentStatuses_History_ID");

                entity.ToTable("PaymentStatuses_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.PstCode)
                    .HasMaxLength(10)
                    .HasColumnName("PST_Code");
                entity.Property(e => e.PstCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PST_CreatedBy");
                entity.Property(e => e.PstCreatedDate).HasColumnName("PST_CreatedDate");
                entity.Property(e => e.PstId).HasColumnName("PST_Id");
                entity.Property(e => e.PstInactive).HasColumnName("PST_Inactive");
                entity.Property(e => e.PstLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PST_LastModifiedBy");
                entity.Property(e => e.PstLastModifiedDate).HasColumnName("PST_LastModifiedDate");
                entity.Property(e => e.PstLocalizableEntryId).HasColumnName("PST_LocalizableEntry_Id");
                entity.Property(e => e.PstLongName)
                    .HasMaxLength(250)
                    .HasColumnName("PST_LongName");
                entity.Property(e => e.PstShortName)
                    .HasMaxLength(20)
                    .HasColumnName("PST_ShortName");
            });

            modelBuilder.Entity<PaymentTransferReport>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PaymentTransferReport", "fin");

                entity.Property(e => e.AccountHolderName).HasMaxLength(250);
                entity.Property(e => e.BankAccount).HasMaxLength(34);
                entity.Property(e => e.BankstatementDate).HasColumnType("date");
                entity.Property(e => e.CreditAmount).HasColumnType("money");
                entity.Property(e => e.Iban)
                    .HasMaxLength(34)
                    .HasColumnName("IBAN");
                entity.Property(e => e.Journal).HasMaxLength(20);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(250);
                entity.Property(e => e.RemittanceInformation).HasMaxLength(250);
                entity.Property(e => e.TransferType)
                    .HasMaxLength(8)
                    .IsUnicode(false);
                entity.Property(e => e.YourRef)
                    .HasMaxLength(7)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PaymentsHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_Payments_History_ID");

                entity.ToTable("Payments_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.PayCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PAY_CreatedBy");
                entity.Property(e => e.PayCreatedDate).HasColumnName("PAY_CreatedDate");
                entity.Property(e => e.PayCurrencyCode)
                    .HasMaxLength(10)
                    .HasColumnName("PAY_CurrencyCode");
                entity.Property(e => e.PayCurrentStatusCode)
                    .HasMaxLength(10)
                    .HasColumnName("PAY_CurrentStatusCode");
                entity.Property(e => e.PayCurrentStatusHistoryId).HasColumnName("PAY_CurrentStatusHistory_Id");
                entity.Property(e => e.PayCurrentStatusHistoryStartDate).HasColumnName("PAY_CurrentStatusHistoryStartDate");
                entity.Property(e => e.PayDivergentRecoveryValue)
                    .HasColumnType("money")
                    .HasColumnName("PAY_DivergentRecoveryValue");
                entity.Property(e => e.PayDossierPartyId).HasColumnName("PAY_DossierParty_Id");
                entity.Property(e => e.PayEmployeeId).HasColumnName("PAY_Employee_Id");
                entity.Property(e => e.PayIban)
                    .HasMaxLength(34)
                    .HasColumnName("PAY_IBAN");
                entity.Property(e => e.PayId).HasColumnName("PAY_Id");
                entity.Property(e => e.PayInvolvedCoverageId).HasColumnName("PAY_InvolvedCoverage_Id");
                entity.Property(e => e.PayIsSentToClearingHouse).HasColumnName("PAY_IsSentToClearingHouse");
                entity.Property(e => e.PayIsTotalLoss).HasColumnName("PAY_IsTotalLoss");
                entity.Property(e => e.PayLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PAY_LastModifiedBy");
                entity.Property(e => e.PayLastModifiedDate).HasColumnName("PAY_LastModifiedDate");
                entity.Property(e => e.PayPaymentDate)
                    .HasColumnType("date")
                    .HasColumnName("PAY_PaymentDate");
                entity.Property(e => e.PayPaymentMethod)
                    .HasMaxLength(200)
                    .HasColumnName("PAY_PaymentMethod");
                entity.Property(e => e.PayPaymentSource)
                    .HasMaxLength(200)
                    .HasColumnName("PAY_PaymentSource");
                entity.Property(e => e.PayPaymentStatus)
                    .HasMaxLength(200)
                    .HasColumnName("PAY_PaymentStatus");
                entity.Property(e => e.PayPaymentType)
                    .HasMaxLength(200)
                    .HasColumnName("PAY_PaymentType");
                entity.Property(e => e.PayPaymentValue)
                    .HasColumnType("money")
                    .HasColumnName("PAY_PaymentValue");
                entity.Property(e => e.PayReference)
                    .HasMaxLength(200)
                    .HasColumnName("PAY_Reference");
                entity.Property(e => e.PaySequenceNumber).HasColumnName("PAY_SequenceNumber");
            });

            modelBuilder.Entity<PayorType>(entity =>
            {
                entity.HasKey(e => e.PotId);

                entity.ToTable("PayorTypes", "fin");

                entity.Property(e => e.PotId)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("POT_Id");
                entity.Property(e => e.PotCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("POT_CreatedBy");
                entity.Property(e => e.PotCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("POT_CreatedDate");
                entity.Property(e => e.PotDescription)
                    .HasMaxLength(250)
                    .HasColumnName("POT_Description");
                entity.Property(e => e.PotInactive).HasColumnName("POT_Inactive");
                entity.Property(e => e.PotLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("POT_LastModifiedBy");
                entity.Property(e => e.PotLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("POT_LastModifiedDate");
                entity.Property(e => e.PotLocalizableEntryId).HasColumnName("POT_LocalizableEntry_Id");
                entity.Property(e => e.PotTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("POT_TimeStamp");

                entity.HasOne(d => d.PotLocalizableEntry).WithMany(p => p.PayorTypes)
                    .HasForeignKey(d => d.PotLocalizableEntryId)
                    .HasConstraintName("FK_PayorTypes_LocalizableEntries");
            });

            modelBuilder.Entity<Person>(entity =>
            {
                entity.HasKey(e => e.PerId);

                entity.ToTable("Persons", "dos");

                entity.Property(e => e.PerId)
                    .ValueGeneratedNever()
                    .HasColumnName("PER_Id");
                entity.Property(e => e.PerCity)
                    .HasMaxLength(200)
                    .HasColumnName("PER_City");
                entity.Property(e => e.PerCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("PER_Country_Code");
                entity.Property(e => e.PerCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PER_CreatedBy");
                entity.Property(e => e.PerCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PER_CreatedDate");
                entity.Property(e => e.PerDateOfBirth)
                    .HasColumnType("date")
                    .HasColumnName("PER_DateOfBirth");
                entity.Property(e => e.PerEmail)
                    .HasMaxLength(250)
                    .HasColumnName("PER_Email");
                entity.Property(e => e.PerFirstName)
                    .HasMaxLength(200)
                    .HasColumnName("PER_FirstName");
                entity.Property(e => e.PerFullAddress)
                    .HasMaxLength(200)
                    .HasColumnName("PER_FullAddress");
                entity.Property(e => e.PerFullName)
                    .HasMaxLength(200)
                    .HasColumnName("PER_FullName");
                entity.Property(e => e.PerGenderId).HasColumnName("PER_Gender_Id");
                entity.Property(e => e.PerHouseNumber)
                    .HasMaxLength(50)
                    .HasColumnName("PER_HouseNumber");
                entity.Property(e => e.PerHouseNumberAddition)
                    .HasMaxLength(200)
                    .HasColumnName("PER_HouseNumberAddition");
                entity.Property(e => e.PerInitials)
                    .HasMaxLength(20)
                    .HasColumnName("PER_Initials");
                entity.Property(e => e.PerLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PER_LastModifiedBy");
                entity.Property(e => e.PerLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PER_LastModifiedDate");
                entity.Property(e => e.PerLastName)
                    .HasMaxLength(200)
                    .HasColumnName("PER_LastName");
                entity.Property(e => e.PerPersonNumber)
                    .HasMaxLength(20)
                    .HasColumnName("PER_PersonNumber");
                entity.Property(e => e.PerPhoneNumber)
                    .HasMaxLength(20)
                    .HasColumnName("PER_PhoneNumber");
                entity.Property(e => e.PerPhoneNumber2)
                    .HasMaxLength(20)
                    .HasColumnName("PER_PhoneNumber2");
                entity.Property(e => e.PerPhoneNumber3)
                    .HasMaxLength(20)
                    .HasColumnName("PER_PhoneNumber3");
                entity.Property(e => e.PerPostalCode)
                    .HasMaxLength(10)
                    .HasColumnName("PER_PostalCode");
                entity.Property(e => e.PerPrefixLastName)
                    .HasMaxLength(200)
                    .HasColumnName("PER_PrefixLastName");
                entity.Property(e => e.PerProvince)
                    .HasMaxLength(200)
                    .HasColumnName("PER_Province");
                entity.Property(e => e.PerSalutationId).HasColumnName("PER_Salutation_Id");
                entity.Property(e => e.PerStreetName)
                    .HasMaxLength(200)
                    .HasColumnName("PER_StreetName");
                entity.Property(e => e.PerTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PER_TimeStamp");

                entity.HasOne(d => d.Per).WithOne(p => p.Person)
                    .HasForeignKey<Person>(d => d.PerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Persons_InvolvedObjects");

                entity.HasOne(d => d.PerSalutation).WithMany(p => p.People)
                    .HasForeignKey(d => d.PerSalutationId)
                    .HasConstraintName("FK_Persons_Salutations");
            });

            modelBuilder.Entity<PhotoSheetSetting>(entity =>
            {
                entity.HasKey(e => e.PssId);

                entity.ToTable("PhotoSheetSettings", "dos");

                entity.Property(e => e.PssId)
                    .ValueGeneratedNever()
                    .HasColumnName("PSS_Id");
                entity.Property(e => e.PssCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PSS_CreatedBy");
                entity.Property(e => e.PssCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PSS_CreatedDate");
                entity.Property(e => e.PssDocumentId)
                    .HasMaxLength(200)
                    .HasColumnName("PSS_Document_Id");
                entity.Property(e => e.PssDossierId).HasColumnName("PSS_Dossier_Id");
                entity.Property(e => e.PssLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PSS_LastModifiedBy");
                entity.Property(e => e.PssLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PSS_LastModifiedDate");
                entity.Property(e => e.PssSequence).HasColumnName("PSS_Sequence");
                entity.Property(e => e.PssTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PSS_TimeStamp");

                entity.HasOne(d => d.PssDossier).WithMany(p => p.PhotoSheetSettings)
                    .HasForeignKey(d => d.PssDossierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PhotoSheetSettings_PSS_Dossier_Id");
            });

            modelBuilder.Entity<PossibleMatch>(entity =>
            {
                entity.HasKey(e => e.PsmId);

                entity.ToTable("PossibleMatches", "fin");

                entity.Property(e => e.PsmId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PSM_Id");
                entity.Property(e => e.PsmAliases).HasColumnName("PSM_Aliases");
                entity.Property(e => e.PsmBlacklist)
                    .HasMaxLength(100)
                    .HasColumnName("PSM_Blacklist");
                entity.Property(e => e.PsmBlacklistCheckResultId).HasColumnName("PSM_BlacklistCheckResult_Id");
                entity.Property(e => e.PsmCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PSM_CreatedBy");
                entity.Property(e => e.PsmCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PSM_CreatedDate");
                entity.Property(e => e.PsmFollowUp)
                    .HasMaxLength(500)
                    .HasColumnName("PSM_FollowUp");
                entity.Property(e => e.PsmImageUri)
                    .HasMaxLength(2000)
                    .HasColumnName("PSM_ImageUri");
                entity.Property(e => e.PsmLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PSM_LastModifiedBy");
                entity.Property(e => e.PsmLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PSM_LastModifiedDate");
                entity.Property(e => e.PsmName)
                    .HasMaxLength(250)
                    .HasColumnName("PSM_Name");
                entity.Property(e => e.PsmNotes).HasColumnName("PSM_Notes");
                entity.Property(e => e.PsmTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PSM_TimeStamp");
                entity.Property(e => e.PsmTitle)
                    .HasMaxLength(100)
                    .HasColumnName("PSM_Title");

                entity.HasOne(d => d.PsmBlacklistCheckResult).WithMany(p => p.PossibleMatches)
                    .HasForeignKey(d => d.PsmBlacklistCheckResultId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PossibleMatches_BlacklistCheckResults");
            });

            modelBuilder.Entity<Post>(entity =>
            {
                entity.ToTable("Post", "post");

                entity.Property(e => e.PostId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("POST_Id");
                entity.Property(e => e.PostComments).HasColumnName("POST_Comments");
                entity.Property(e => e.PostCommunicationTypeId).HasColumnName("POST_CommunicationType_Id");
                entity.Property(e => e.PostCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("POST_CreatedBy");
                entity.Property(e => e.PostCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("POST_CreatedDate");
                entity.Property(e => e.PostDepartmentId).HasColumnName("POST_Department_Id");
                entity.Property(e => e.PostDossierAssignmentId).HasColumnName("POST_DossierAssignment_Id");
                entity.Property(e => e.PostDossierId).HasColumnName("POST_Dossier_Id");
                entity.Property(e => e.PostDossierPartyId).HasColumnName("POST_DossierParty_Id");
                entity.Property(e => e.PostEmailCc).HasColumnName("POST_EmailCC");
                entity.Property(e => e.PostEmailFrom)
                    .HasMaxLength(500)
                    .HasColumnName("POST_EmailFrom");
                entity.Property(e => e.PostEmailMessage).HasColumnName("POST_EmailMessage");
                entity.Property(e => e.PostEmailSubject)
                    .HasMaxLength(1000)
                    .HasColumnName("POST_EmailSubject");
                entity.Property(e => e.PostEmailTo).HasColumnName("POST_EmailTo");
                entity.Property(e => e.PostEmployeeId).HasColumnName("POST_Employee_Id");
                entity.Property(e => e.PostInactive).HasColumnName("POST_Inactive");
                entity.Property(e => e.PostIndexingArchiveId)
                    .HasMaxLength(40)
                    .HasColumnName("POST_IndexingArchive_Id");
                entity.Property(e => e.PostIndexingDate).HasColumnName("POST_IndexingDate");
                entity.Property(e => e.PostIsBodilyInjury).HasColumnName("POST_IsBodilyInjury");
                entity.Property(e => e.PostLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("POST_LastModifiedBy");
                entity.Property(e => e.PostLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("POST_LastModifiedDate");
                entity.Property(e => e.PostLegalEntityId).HasColumnName("POST_LegalEntity_Id");
                entity.Property(e => e.PostOriginalDocumentId).HasColumnName("POST_OriginalDocument_Id");
                entity.Property(e => e.PostPostDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("POST_PostDate");
                entity.Property(e => e.PostPostHandlingPriorityId).HasColumnName("POST_PostHandlingPriority_Id");
                entity.Property(e => e.PostPostNumber)
                    .HasMaxLength(20)
                    .HasColumnName("POST_PostNumber");
                entity.Property(e => e.PostPostReference)
                    .HasMaxLength(50)
                    .HasColumnName("POST_PostReference");
                entity.Property(e => e.PostReceiveDate).HasColumnName("POST_ReceiveDate");
                entity.Property(e => e.PostSendDate).HasColumnName("POST_SendDate");
                entity.Property(e => e.PostTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("POST_TimeStamp");

                entity.HasOne(d => d.PostCommunicationType).WithMany(p => p.Posts)
                    .HasForeignKey(d => d.PostCommunicationTypeId)
                    .HasConstraintName("FK_Post_CommunicationTypes");

                entity.HasOne(d => d.PostDepartment).WithMany(p => p.Posts)
                    .HasForeignKey(d => d.PostDepartmentId)
                    .HasConstraintName("FK_Post_Departments");

                entity.HasOne(d => d.PostDossierAssignment).WithMany(p => p.Posts)
                    .HasForeignKey(d => d.PostDossierAssignmentId)
                    .HasConstraintName("FK_Post_DossierAssignments");

                entity.HasOne(d => d.PostDossier).WithMany(p => p.Posts)
                    .HasForeignKey(d => d.PostDossierId)
                    .HasConstraintName("FK_Post_Dossiers");

                entity.HasOne(d => d.PostDossierParty).WithMany(p => p.Posts)
                    .HasForeignKey(d => d.PostDossierPartyId)
                    .HasConstraintName("FK_Post_DossierParties");

                entity.HasOne(d => d.PostEmployee).WithMany(p => p.Posts)
                    .HasForeignKey(d => d.PostEmployeeId)
                    .HasConstraintName("FK_Post_Employees");

                entity.HasOne(d => d.PostLegalEntity).WithMany(p => p.Posts)
                    .HasForeignKey(d => d.PostLegalEntityId)
                    .HasConstraintName("FK_Post_LegalEntities");

                entity.HasOne(d => d.PostOriginalDocument).WithMany(p => p.Posts)
                    .HasForeignKey(d => d.PostOriginalDocumentId)
                    .HasConstraintName("FK_Post_Documents");

                entity.HasOne(d => d.PostPostHandlingPriority).WithMany(p => p.Posts)
                    .HasForeignKey(d => d.PostPostHandlingPriorityId)
                    .HasConstraintName("FK_Post_PostHandlingPriorities");
            });

            modelBuilder.Entity<PostAttachment>(entity =>
            {
                entity.HasKey(e => e.PstaId);

                entity.ToTable("PostAttachments", "post");

                entity.Property(e => e.PstaId)
                    .ValueGeneratedNever()
                    .HasColumnName("PSTA_Id");
                entity.Property(e => e.PstaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PSTA_CreatedBy");
                entity.Property(e => e.PstaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PSTA_CreatedDate");
                entity.Property(e => e.PstaDocumentPageId).HasColumnName("PSTA_DocumentPage_Id");
                entity.Property(e => e.PstaIsInternalDocument).HasColumnName("PSTA_IsInternalDocument");
                entity.Property(e => e.PstaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PSTA_LastModifiedBy");
                entity.Property(e => e.PstaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PSTA_LastModifiedDate");
                entity.Property(e => e.PstaLineNumber).HasColumnName("PSTA_LineNumber");
                entity.Property(e => e.PstaPostId).HasColumnName("PSTA_Post_Id");
                entity.Property(e => e.PstaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PSTA_TimeStamp");

                entity.HasOne(d => d.PstaDocumentPage).WithMany(p => p.PostAttachments)
                    .HasForeignKey(d => d.PstaDocumentPageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PostAttachments_DocumentPages");

                entity.HasOne(d => d.PstaPost).WithMany(p => p.PostAttachments)
                    .HasForeignKey(d => d.PstaPostId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PostAttachments_Post");
            });

            modelBuilder.Entity<PostCurrentStatus>(entity =>
            {
                entity.HasKey(e => e.PtcsId);

                entity.ToTable("PostCurrentStatus", "post");

                entity.Property(e => e.PtcsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PTCS_Id");
                entity.Property(e => e.PtcsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PTCS_CreatedBy");
                entity.Property(e => e.PtcsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PTCS_CreatedDate");
                entity.Property(e => e.PtcsCurrentStatusCode)
                    .HasMaxLength(10)
                    .HasColumnName("PTCS_CurrentStatusCode");
                entity.Property(e => e.PtcsCurrentStatusHistoryId).HasColumnName("PTCS_CurrentStatusHistory_Id");
                entity.Property(e => e.PtcsCurrentStatusHistoryStartDate).HasColumnName("PTCS_CurrentStatusHistoryStartDate");
                entity.Property(e => e.PtcsCurrentStatusName)
                    .HasMaxLength(250)
                    .HasColumnName("PTCS_CurrentStatusName");
                entity.Property(e => e.PtcsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PTCS_LastModifiedBy");
                entity.Property(e => e.PtcsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PTCS_LastModifiedDate");
                entity.Property(e => e.PtcsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PTCS_TimeStamp");

                entity.HasOne(d => d.PtcsCurrentStatusHistory).WithMany(p => p.PostCurrentStatuses)
                    .HasForeignKey(d => d.PtcsCurrentStatusHistoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PostCurrentStatus_PostStatusHistory");

                entity.HasOne(d => d.Ptcs).WithOne(p => p.PostCurrentStatus)
                    .HasForeignKey<PostCurrentStatus>(d => d.PtcsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PostCurrentStatus_Post");
            });

            modelBuilder.Entity<PostHandlingPriority>(entity =>
            {
                entity.HasKey(e => e.PhpId);

                entity.ToTable("PostHandlingPriorities", "mdm");

                entity.Property(e => e.PhpId)
                    .ValueGeneratedNever()
                    .HasColumnName("PHP_Id");
                entity.Property(e => e.PhpCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PHP_CreatedBy");
                entity.Property(e => e.PhpCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PHP_CreatedDate");
                entity.Property(e => e.PhpInactive).HasColumnName("PHP_Inactive");
                entity.Property(e => e.PhpLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PHP_LastModifiedBy");
                entity.Property(e => e.PhpLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PHP_LastModifiedDate");
                entity.Property(e => e.PhpLocalizableEntryId).HasColumnName("PHP_LocalizableEntry_Id");
                entity.Property(e => e.PhpName)
                    .HasMaxLength(250)
                    .HasColumnName("PHP_Name");
                entity.Property(e => e.PhpPriority).HasColumnName("PHP_Priority");
                entity.Property(e => e.PhpTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PHP_TimeStamp");

                entity.HasOne(d => d.PhpLocalizableEntry).WithMany(p => p.PostHandlingPriorities)
                    .HasForeignKey(d => d.PhpLocalizableEntryId)
                    .HasConstraintName("FK_PostHandlingPriorities_LocalizableEntries");
            });

            modelBuilder.Entity<PostOfficeBox>(entity =>
            {
                entity.HasKey(e => e.PobId).HasName("PK_Postofficebox");

                entity.ToTable("PostOfficeBox", "mdm");

                entity.Property(e => e.PobId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("POB_Id");
                entity.Property(e => e.PobBoxNo)
                    .HasMaxLength(10)
                    .HasColumnName("POB_BoxNo");
                entity.Property(e => e.PobCity)
                    .HasMaxLength(250)
                    .HasColumnName("POB_City");
                entity.Property(e => e.PobCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("POB_Country_Code");
                entity.Property(e => e.PobCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("POB_CreatedBy");
                entity.Property(e => e.PobCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("POB_CreatedDate");
                entity.Property(e => e.PobLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("POB_LastModifiedBy");
                entity.Property(e => e.PobLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("POB_LastModifiedDate");
                entity.Property(e => e.PobLocalizedName)
                    .HasMaxLength(50)
                    .HasColumnName("POB_LocalizedName");
                entity.Property(e => e.PobPostalCode)
                    .HasMaxLength(10)
                    .HasColumnName("POB_PostalCode");
                entity.Property(e => e.PobProvince)
                    .HasMaxLength(250)
                    .HasColumnName("POB_Province");
                entity.Property(e => e.PobTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("POB_TimeStamp");
            });

            modelBuilder.Entity<PostOfficeBox1>(entity =>
            {
                entity.HasKey(e => e.PobId).HasName("PK_Postofficebox");

                entity.ToTable("PostOfficeBox", "stg");

                entity.Property(e => e.PobId)
                    .ValueGeneratedNever()
                    .HasColumnName("POB_Id");
                entity.Property(e => e.PobBoxNo)
                    .HasMaxLength(10)
                    .HasColumnName("POB_BoxNo");
                entity.Property(e => e.PobCity)
                    .HasMaxLength(250)
                    .HasColumnName("POB_City");
                entity.Property(e => e.PobCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("POB_Country_Code");
                entity.Property(e => e.PobCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("POB_CreatedBy");
                entity.Property(e => e.PobCreatedDate).HasColumnName("POB_CreatedDate");
                entity.Property(e => e.PobLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("POB_LastModifiedBy");
                entity.Property(e => e.PobLastModifiedDate).HasColumnName("POB_LastModifiedDate");
                entity.Property(e => e.PobLocalizedName)
                    .HasMaxLength(50)
                    .HasColumnName("POB_LocalizedName");
                entity.Property(e => e.PobPostalCode)
                    .HasMaxLength(10)
                    .HasColumnName("POB_PostalCode");
                entity.Property(e => e.PobProvince)
                    .HasMaxLength(250)
                    .HasColumnName("POB_Province");
                entity.Property(e => e.PobTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("POB_TimeStamp");
            });

            modelBuilder.Entity<PostStatus>(entity =>
            {
                entity.HasKey(e => e.PtstId);

                entity.ToTable("PostStatuses", "post");

                entity.Property(e => e.PtstId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PTST_Id");
                entity.Property(e => e.PtstCode)
                    .HasMaxLength(10)
                    .HasColumnName("PTST_Code");
                entity.Property(e => e.PtstCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PTST_CreatedBy");
                entity.Property(e => e.PtstCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PTST_CreatedDate");
                entity.Property(e => e.PtstInactive).HasColumnName("PTST_Inactive");
                entity.Property(e => e.PtstLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PTST_LastModifiedBy");
                entity.Property(e => e.PtstLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PTST_LastModifiedDate");
                entity.Property(e => e.PtstLocalizableEntryId).HasColumnName("PTST_LocalizableEntry_Id");
                entity.Property(e => e.PtstLongName)
                    .HasMaxLength(250)
                    .HasColumnName("PTST_LongName");
                entity.Property(e => e.PtstShortName)
                    .HasMaxLength(50)
                    .HasColumnName("PTST_ShortName");
                entity.Property(e => e.PtstTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PTST_TimeStamp");

                entity.HasOne(d => d.PtstLocalizableEntry).WithMany(p => p.PostStatuses)
                    .HasForeignKey(d => d.PtstLocalizableEntryId)
                    .HasConstraintName("FK_PostStatuses_LocalizableEntries");
            });

            modelBuilder.Entity<PostStatusHistory>(entity =>
            {
                entity.HasKey(e => e.PtshId);

                entity.ToTable("PostStatusHistory", "post", tb => tb.HasTrigger("tr_PostStatusHistory"));

                entity.Property(e => e.PtshId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PTSH_Id");
                entity.Property(e => e.PtshCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PTSH_CreatedBy");
                entity.Property(e => e.PtshCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PTSH_CreatedDate");
                entity.Property(e => e.PtshEmployeeId).HasColumnName("PTSH_Employee_Id");
                entity.Property(e => e.PtshLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PTSH_LastModifiedBy");
                entity.Property(e => e.PtshLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PTSH_LastModifiedDate");
                entity.Property(e => e.PtshPostId).HasColumnName("PTSH_Post_Id");
                entity.Property(e => e.PtshPostStatusId).HasColumnName("PTSH_PostStatus_Id");
                entity.Property(e => e.PtshReason)
                    .HasMaxLength(250)
                    .HasColumnName("PTSH_Reason");
                entity.Property(e => e.PtshStartDate).HasColumnName("PTSH_StartDate");
                entity.Property(e => e.PtshTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PTSH_TimeStamp");

                entity.HasOne(d => d.PtshPost).WithMany(p => p.PostStatusHistories)
                    .HasForeignKey(d => d.PtshPostId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PostStatusHistory_Post");

                entity.HasOne(d => d.PtshPostStatus).WithMany(p => p.PostStatusHistories)
                    .HasForeignKey(d => d.PtshPostStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PostStatusHistory_PostStatuses");
            });

            modelBuilder.Entity<PostTag>(entity =>
            {
                entity.HasKey(e => e.PstaId);

                entity.ToTable("PostTags", "post");

                entity.Property(e => e.PstaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PSTA_Id");
                entity.Property(e => e.PstaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PSTA_CreatedBy");
                entity.Property(e => e.PstaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PSTA_CreatedDate");
                entity.Property(e => e.PstaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PSTA_LastModifiedBy");
                entity.Property(e => e.PstaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PSTA_LastModifiedDate");
                entity.Property(e => e.PstaPostId).HasColumnName("PSTA_Post_Id");
                entity.Property(e => e.PstaTag)
                    .HasMaxLength(250)
                    .HasColumnName("PSTA_Tag");
                entity.Property(e => e.PstaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PSTA_TimeStamp");

                entity.HasOne(d => d.PstaPost).WithMany(p => p.PostTags)
                    .HasForeignKey(d => d.PstaPostId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PostTags_Post");
            });

            modelBuilder.Entity<PreferredLanguage>(entity =>
            {
                entity.HasKey(e => e.PlId);

                entity.ToTable("PreferredLanguage", "mdm");

                entity.Property(e => e.PlId)
                    .HasMaxLength(10)
                    .HasColumnName("PL_Id");
                entity.Property(e => e.PlCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PL_CreatedBy");
                entity.Property(e => e.PlCreatedDate).HasColumnName("PL_CreatedDate");
                entity.Property(e => e.PlInactive).HasColumnName("PL_Inactive");
                entity.Property(e => e.PlLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PL_LastModifiedBy");
                entity.Property(e => e.PlLastModifiedDate).HasColumnName("PL_LastModifiedDate");
                entity.Property(e => e.PlName)
                    .HasMaxLength(250)
                    .HasColumnName("PL_Name");
                entity.Property(e => e.PlTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PL_TimeStamp");
            });

            modelBuilder.Entity<PreferredLanguage1>(entity =>
            {
                entity.HasKey(e => e.PlId);

                entity.ToTable("PreferredLanguage", "stg");

                entity.Property(e => e.PlId)
                    .HasMaxLength(10)
                    .HasColumnName("PL_Id");
                entity.Property(e => e.PlCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PL_CreatedBy");
                entity.Property(e => e.PlCreatedDate).HasColumnName("PL_CreatedDate");
                entity.Property(e => e.PlInactive).HasColumnName("PL_Inactive");
                entity.Property(e => e.PlLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PL_LastModifiedBy");
                entity.Property(e => e.PlLastModifiedDate).HasColumnName("PL_LastModifiedDate");
                entity.Property(e => e.PlName)
                    .HasMaxLength(250)
                    .HasColumnName("PL_Name");
                entity.Property(e => e.PlTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PL_TimeStamp");
            });

            modelBuilder.Entity<ProcessedFailedQueueMessagesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ProcessedFailedQueueMessagesView");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.QueueSettingName).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.TopicSettingName).HasMaxLength(20);
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.HasKey(e => e.PrdId);

                entity.ToTable("Products", "pdc", tb => tb.HasTrigger("Products_TaxCode"));

                entity.Property(e => e.PrdId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PRD_Id");
                entity.Property(e => e.PrdCode)
                    .HasMaxLength(20)
                    .HasColumnName("PRD_Code");
                entity.Property(e => e.PrdConsolidationCreditorNumber)
                    .HasMaxLength(20)
                    .HasColumnName("PRD_ConsolidationCreditorNumber");
                entity.Property(e => e.PrdCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PRD_CreatedBy");
                entity.Property(e => e.PrdCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PRD_CreatedDate");
                entity.Property(e => e.PrdDepartmentId).HasColumnName("PRD_Department_Id");
                entity.Property(e => e.PrdEffectiveDate).HasColumnName("PRD_EffectiveDate");
                entity.Property(e => e.PrdInactive).HasColumnName("PRD_Inactive");
                entity.Property(e => e.PrdIsGeneric).HasColumnName("PRD_IsGeneric");
                entity.Property(e => e.PrdIsTransitoryItem).HasColumnName("PRD_IsTransitoryItem");
                entity.Property(e => e.PrdLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PRD_LastModifiedBy");
                entity.Property(e => e.PrdLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PRD_LastModifiedDate");
                entity.Property(e => e.PrdLedgerAccount)
                    .HasMaxLength(20)
                    .HasColumnName("PRD_LedgerAccount");
                entity.Property(e => e.PrdLocalizableEntryId).HasColumnName("PRD_LocalizableEntry_Id");
                entity.Property(e => e.PrdLongName)
                    .HasMaxLength(250)
                    .HasColumnName("PRD_LongName");
                entity.Property(e => e.PrdProductClassificationId).HasColumnName("PRD_ProductClassification_Id");
                entity.Property(e => e.PrdProductGroupId).HasColumnName("PRD_ProductGroup_Id");
                entity.Property(e => e.PrdProductTypeId).HasColumnName("PRD_ProductType_Id");
                entity.Property(e => e.PrdPurchaseLedgerAccount)
                    .HasMaxLength(20)
                    .HasColumnName("PRD_PurchaseLedgerAccount");
                entity.Property(e => e.PrdPurchaseTaxApplicable).HasColumnName("PRD_PurchaseTaxApplicable");
                entity.Property(e => e.PrdPurchaseTaxCodeId)
                    .HasMaxLength(20)
                    .HasColumnName("PRD_PurchaseTaxCode_Id");
                entity.Property(e => e.PrdPurchaseTaxIncluded).HasColumnName("PRD_PurchaseTaxIncluded");
                entity.Property(e => e.PrdSalesLedgerAccount)
                    .HasMaxLength(20)
                    .HasColumnName("PRD_SalesLedgerAccount");
                entity.Property(e => e.PrdSalesTaxCodeId)
                    .HasMaxLength(20)
                    .HasColumnName("PRD_SalesTaxCode_Id");
                entity.Property(e => e.PrdShortName)
                    .HasMaxLength(20)
                    .HasColumnName("PRD_ShortName");
                entity.Property(e => e.PrdTerminationDate).HasColumnName("PRD_TerminationDate");
                entity.Property(e => e.PrdTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PRD_TimeStamp");

                entity.HasOne(d => d.PrdDepartment).WithMany(p => p.Products)
                    .HasForeignKey(d => d.PrdDepartmentId)
                    .HasConstraintName("FK_Products_Departments");

                entity.HasOne(d => d.PrdLocalizableEntry).WithMany(p => p.Products)
                    .HasForeignKey(d => d.PrdLocalizableEntryId)
                    .HasConstraintName("FK_Products_LocalizableEntries");

                entity.HasOne(d => d.PrdProductClassification).WithMany(p => p.Products)
                    .HasForeignKey(d => d.PrdProductClassificationId)
                    .HasConstraintName("FK_Products_ProductClassifications");

                entity.HasOne(d => d.PrdProductGroup).WithMany(p => p.Products)
                    .HasForeignKey(d => d.PrdProductGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Products_ProductGroups");

                entity.HasOne(d => d.PrdProductType).WithMany(p => p.Products)
                    .HasForeignKey(d => d.PrdProductTypeId)
                    .HasConstraintName("FK_Products_ProductType");
            });

            modelBuilder.Entity<ProductActivityOption>(entity =>
            {
                entity.HasKey(e => e.PaoId);

                entity.ToTable("ProductActivityOptions", "pdc");

                entity.Property(e => e.PaoId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PAO_Id");
                entity.Property(e => e.PaoActivityOptionId).HasColumnName("PAO_ActivityOption_Id");
                entity.Property(e => e.PaoCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PAO_CreatedBy");
                entity.Property(e => e.PaoCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PAO_CreatedDate");
                entity.Property(e => e.PaoInactive).HasColumnName("PAO_Inactive");
                entity.Property(e => e.PaoLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PAO_LastModifiedBy");
                entity.Property(e => e.PaoLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PAO_LastModifiedDate");
                entity.Property(e => e.PaoProductId).HasColumnName("PAO_Product_Id");
                entity.Property(e => e.PaoTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PAO_TimeStamp");

                entity.HasOne(d => d.PaoActivityOption).WithMany(p => p.ProductActivityOptions)
                    .HasForeignKey(d => d.PaoActivityOptionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductActivityOptions_ActivityOptions");

                entity.HasOne(d => d.PaoProduct).WithMany(p => p.ProductActivityOptions)
                    .HasForeignKey(d => d.PaoProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductActivityOptions_Products");
            });

            modelBuilder.Entity<ProductApplication>(entity =>
            {
                entity.HasKey(e => e.PraId);

                entity.ToTable("ProductApplications", "pdc");

                entity.Property(e => e.PraId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PRA_Id");
                entity.Property(e => e.PraApplicationId).HasColumnName("PRA_Application_Id");
                entity.Property(e => e.PraCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PRA_CreatedBy");
                entity.Property(e => e.PraCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PRA_CreatedDate");
                entity.Property(e => e.PraInactive).HasColumnName("PRA_Inactive");
                entity.Property(e => e.PraLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PRA_LastModifiedBy");
                entity.Property(e => e.PraLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PRA_LastModifiedDate");
                entity.Property(e => e.PraProductId).HasColumnName("PRA_Product_Id");
                entity.Property(e => e.PraTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PRA_TimeStamp");

                entity.HasOne(d => d.PraApplication).WithMany(p => p.ProductApplications)
                    .HasForeignKey(d => d.PraApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductApplications_Applications");

                entity.HasOne(d => d.PraProduct).WithMany(p => p.ProductApplications)
                    .HasForeignKey(d => d.PraProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductApplications_Products");
            });

            modelBuilder.Entity<ProductCatalogViewProspect>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ProductCatalogView_Prospect", "pdc");

                entity.Property(e => e.ActivityCode).HasMaxLength(10);
                entity.Property(e => e.ActivityName).HasMaxLength(250);
                entity.Property(e => e.CoverageCode).HasMaxLength(10);
                entity.Property(e => e.CoverageName).HasMaxLength(250);
                entity.Property(e => e.DamageReasonCode).HasMaxLength(10);
                entity.Property(e => e.DamageReasonName).HasMaxLength(250);
                entity.Property(e => e.Department)
                    .HasMaxLength(767)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ObjectCode).HasMaxLength(10);
                entity.Property(e => e.ObjectName).HasMaxLength(250);
                entity.Property(e => e.ProductCode).HasMaxLength(20);
                entity.Property(e => e.ProductGroupCode).HasMaxLength(10);
                entity.Property(e => e.ProductGroupName).HasMaxLength(250);
                entity.Property(e => e.ProductName).HasMaxLength(250);
                entity.Property(e => e.ProductTypeCode).HasMaxLength(10);
                entity.Property(e => e.ProductTypeName).HasMaxLength(20);
            });

            modelBuilder.Entity<ProductCatalogViewProspectTest>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ProductCatalogView_Prospect_TEST", "pdc");

                entity.Property(e => e.ActivityCode).HasMaxLength(10);
                entity.Property(e => e.ActivityName).HasMaxLength(250);
                entity.Property(e => e.CoverageCode).HasMaxLength(10);
                entity.Property(e => e.CoverageName).HasMaxLength(250);
                entity.Property(e => e.DamageReasonCode).HasMaxLength(10);
                entity.Property(e => e.DamageReasonName).HasMaxLength(250);
                entity.Property(e => e.Department)
                    .HasMaxLength(767)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ObjectCode).HasMaxLength(10);
                entity.Property(e => e.ObjectName).HasMaxLength(250);
                entity.Property(e => e.ProductCode).HasMaxLength(20);
                entity.Property(e => e.ProductGroupCode).HasMaxLength(10);
                entity.Property(e => e.ProductGroupName).HasMaxLength(250);
                entity.Property(e => e.ProductName).HasMaxLength(250);
                entity.Property(e => e.SubActivityCode).HasMaxLength(10);
                entity.Property(e => e.SubActivityName).HasMaxLength(250);
                entity.Property(e => e.TerActivityCode).HasMaxLength(10);
                entity.Property(e => e.TerActivityName).HasMaxLength(250);
            });

            modelBuilder.Entity<ProductCatalogueView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ProductCatalogueView", "pdc");

                entity.Property(e => e.Afdeling)
                    .HasMaxLength(767)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.Dekking).HasMaxLength(261);
                entity.Property(e => e.Object).HasMaxLength(261);
                entity.Property(e => e.Oorzaak).HasMaxLength(261);
                entity.Property(e => e.Product).HasMaxLength(271);
                entity.Property(e => e.Werkzaamheid).HasMaxLength(261);
            });

            modelBuilder.Entity<ProductClassification>(entity =>
            {
                entity.HasKey(e => e.PrdcId);

                entity.ToTable("ProductClassifications", "pdc");

                entity.Property(e => e.PrdcId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PRDC_Id");
                entity.Property(e => e.PrdcCode)
                    .HasMaxLength(10)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                    .HasColumnName("PRDC_Code");
                entity.Property(e => e.PrdcCreatedBy)
                    .HasMaxLength(250)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                    .HasColumnName("PRDC_CreatedBy");
                entity.Property(e => e.PrdcCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PRDC_CreatedDate");
                entity.Property(e => e.PrdcInactive).HasColumnName("PRDC_Inactive");
                entity.Property(e => e.PrdcLastModifiedBy)
                    .HasMaxLength(250)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                    .HasColumnName("PRDC_LastModifiedBy");
                entity.Property(e => e.PrdcLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PRDC_LastModifiedDate");
                entity.Property(e => e.PrdcLocalizableEntryId).HasColumnName("PRDC_LocalizableEntry_Id");
                entity.Property(e => e.PrdcName)
                    .HasMaxLength(250)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                    .HasColumnName("PRDC_Name");
                entity.Property(e => e.PrdcTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PRDC_TimeStamp");

                entity.HasOne(d => d.PrdcLocalizableEntry).WithMany(p => p.ProductClassifications)
                    .HasForeignKey(d => d.PrdcLocalizableEntryId)
                    .HasConstraintName("FK_ProductClassifications_LocalizableEntries");
            });

            modelBuilder.Entity<ProductDamageReason>(entity =>
            {
                entity.HasKey(e => e.PdrId);

                entity.ToTable("ProductDamageReasons", "pdc");

                entity.Property(e => e.PdrId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PDR_Id");
                entity.Property(e => e.PdrCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PDR_CreatedBy");
                entity.Property(e => e.PdrCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PDR_CreatedDate");
                entity.Property(e => e.PdrDamageReasonId).HasColumnName("PDR_DamageReason_Id");
                entity.Property(e => e.PdrInactive).HasColumnName("PDR_Inactive");
                entity.Property(e => e.PdrLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PDR_LastModifiedBy");
                entity.Property(e => e.PdrLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PDR_LastModifiedDate");
                entity.Property(e => e.PdrProductId).HasColumnName("PDR_Product_Id");
                entity.Property(e => e.PdrTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PDR_TimeStamp");

                entity.HasOne(d => d.PdrDamageReason).WithMany(p => p.ProductDamageReasons)
                    .HasForeignKey(d => d.PdrDamageReasonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDamageReasons_DamageReasons");

                entity.HasOne(d => d.PdrProduct).WithMany(p => p.ProductDamageReasons)
                    .HasForeignKey(d => d.PdrProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDamageReasons_Products");
            });

            modelBuilder.Entity<ProductDamageReasonsHierarchyView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ProductDamageReasonsHierarchyView", "pdc");

                entity.Property(e => e.MainReasonCode).HasMaxLength(10);
                entity.Property(e => e.MainReasonName).HasMaxLength(20);
                entity.Property(e => e.ProductCode).HasMaxLength(20);
                entity.Property(e => e.ProductName).HasMaxLength(20);
                entity.Property(e => e.ProductTypeCode).HasMaxLength(10);
                entity.Property(e => e.ProductTypeName).HasMaxLength(20);
                entity.Property(e => e.SubReasonCode).HasMaxLength(10);
                entity.Property(e => e.SubReasonName).HasMaxLength(20);
                entity.Property(e => e.TertiaryReasonCode).HasMaxLength(10);
                entity.Property(e => e.TertiaryReasonName).HasMaxLength(20);
            });

            modelBuilder.Entity<ProductDeliveryMethod>(entity =>
            {
                entity.HasKey(e => e.PdmId);

                entity.ToTable("ProductDeliveryMethods", "pdc");

                entity.Property(e => e.PdmId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PDM_Id");
                entity.Property(e => e.PdmCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PDM_CreatedBy");
                entity.Property(e => e.PdmCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PDM_CreatedDate");
                entity.Property(e => e.PdmDeliveryMethodId).HasColumnName("PDM_DeliveryMethod_Id");
                entity.Property(e => e.PdmInactive).HasColumnName("PDM_Inactive");
                entity.Property(e => e.PdmLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PDM_LastModifiedBy");
                entity.Property(e => e.PdmLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PDM_LastModifiedDate");
                entity.Property(e => e.PdmProductId).HasColumnName("PDM_Product_Id");
                entity.Property(e => e.PdmTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PDM_TimeStamp");

                entity.HasOne(d => d.PdmDeliveryMethod).WithMany(p => p.ProductDeliveryMethods)
                    .HasForeignKey(d => d.PdmDeliveryMethodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_productDeliveryMethods_DeliveryMethods");

                entity.HasOne(d => d.PdmProduct).WithMany(p => p.ProductDeliveryMethods)
                    .HasForeignKey(d => d.PdmProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDeliveryMethods_Products");
            });

            modelBuilder.Entity<ProductDepartment>(entity =>
            {
                entity.HasKey(e => e.PdpId);

                entity.ToTable("ProductDepartments", "pdc");

                entity.Property(e => e.PdpId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PDP_Id");
                entity.Property(e => e.PdpCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PDP_CreatedBy");
                entity.Property(e => e.PdpCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PDP_CreatedDate");
                entity.Property(e => e.PdpDepartmentId).HasColumnName("PDP_Department_Id");
                entity.Property(e => e.PdpEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("PDP_EffectiveDate");
                entity.Property(e => e.PdpLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PDP_LastModifiedBy");
                entity.Property(e => e.PdpLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PDP_LastModifiedDate");
                entity.Property(e => e.PdpProductId).HasColumnName("PDP_Product_Id");
                entity.Property(e => e.PdpTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("PDP_TerminationDate");
                entity.Property(e => e.PdpTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PDP_TimeStamp");

                entity.HasOne(d => d.PdpDepartment).WithMany(p => p.ProductDepartments)
                    .HasForeignKey(d => d.PdpDepartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDepartments_Departments");

                entity.HasOne(d => d.PdpProduct).WithMany(p => p.ProductDepartments)
                    .HasForeignKey(d => d.PdpProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductDepartments_Products");
            });

            modelBuilder.Entity<ProductExclusion>(entity =>
            {
                entity.HasKey(e => e.PexId);

                entity.ToTable("ProductExclusions", "pdc");

                entity.Property(e => e.PexId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PEX_Id");
                entity.Property(e => e.PexActivityExecutionId).HasColumnName("PEX_ActivityExecution_Id");
                entity.Property(e => e.PexActivityOptionId).HasColumnName("PEX_ActivityOption_Id");
                entity.Property(e => e.PexCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PEX_CreatedBy");
                entity.Property(e => e.PexCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PEX_CreatedDate");
                entity.Property(e => e.PexDamageReasonId).HasColumnName("PEX_DamageReason_Id");
                entity.Property(e => e.PexInactive).HasColumnName("PEX_Inactive");
                entity.Property(e => e.PexInsuranceCoverageId).HasColumnName("PEX_InsuranceCoverage_Id");
                entity.Property(e => e.PexInsuranceObjectId).HasColumnName("PEX_InsuranceObject_Id");
                entity.Property(e => e.PexIsBusiness).HasColumnName("PEX_IsBusiness");
                entity.Property(e => e.PexIsPrivate).HasColumnName("PEX_IsPrivate");
                entity.Property(e => e.PexLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PEX_LastModifiedBy");
                entity.Property(e => e.PexLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PEX_LastModifiedDate");
                entity.Property(e => e.PexProductId).HasColumnName("PEX_Product_Id");
                entity.Property(e => e.PexReportingFormActivityOptionId).HasColumnName("PEX_ReportingFormActivityOption_Id");
                entity.Property(e => e.PexReportingFormId).HasColumnName("PEX_ReportingForm_Id");
                entity.Property(e => e.PexTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PEX_TimeStamp");
                entity.Property(e => e.PexWorkActivityId).HasColumnName("PEX_WorkActivity_Id");

                entity.HasOne(d => d.PexActivityExecution).WithMany(p => p.ProductExclusions)
                    .HasForeignKey(d => d.PexActivityExecutionId)
                    .HasConstraintName("FK_ProductExclusions_ActivityExecutions");

                entity.HasOne(d => d.PexActivityOption).WithMany(p => p.ProductExclusionPexActivityOptions)
                    .HasForeignKey(d => d.PexActivityOptionId)
                    .HasConstraintName("FK_ProductExclusions_ActivityOptions");

                entity.HasOne(d => d.PexDamageReason).WithMany(p => p.ProductExclusions)
                    .HasForeignKey(d => d.PexDamageReasonId)
                    .HasConstraintName("FK_ProductExclusions_DamageReasons");

                entity.HasOne(d => d.PexInsuranceCoverage).WithMany(p => p.ProductExclusions)
                    .HasForeignKey(d => d.PexInsuranceCoverageId)
                    .HasConstraintName("FK_ProductExclusions_InsuranceCoverages");

                entity.HasOne(d => d.PexInsuranceObject).WithMany(p => p.ProductExclusions)
                    .HasForeignKey(d => d.PexInsuranceObjectId)
                    .HasConstraintName("FK_ProductExclusions_InsuranceObjects");

                entity.HasOne(d => d.PexProduct).WithMany(p => p.ProductExclusions)
                    .HasForeignKey(d => d.PexProductId)
                    .HasConstraintName("FK_ProductExclusions_Products");

                entity.HasOne(d => d.PexReportingFormActivityOption).WithMany(p => p.ProductExclusionPexReportingFormActivityOptions)
                    .HasForeignKey(d => d.PexReportingFormActivityOptionId)
                    .HasConstraintName("FK_ProductExclusions_ReportingFormActivityOptions");

                entity.HasOne(d => d.PexReportingForm).WithMany(p => p.ProductExclusions)
                    .HasForeignKey(d => d.PexReportingFormId)
                    .HasConstraintName("FK_ProductExclusions_ReportingForms");

                entity.HasOne(d => d.PexWorkActivity).WithMany(p => p.ProductExclusions)
                    .HasForeignKey(d => d.PexWorkActivityId)
                    .HasConstraintName("FK_ProductExclusions_WorkActivities");
            });

            modelBuilder.Entity<ProductExclusionOption>(entity =>
            {
                entity.HasKey(e => e.PeoId);

                entity.ToTable("ProductExclusionOptions", "pdc");

                entity.Property(e => e.PeoId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PEO_Id");
                entity.Property(e => e.PeoActivityExecutionId).HasColumnName("PEO_ActivityExecution_Id");
                entity.Property(e => e.PeoCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PEO_CreatedBy");
                entity.Property(e => e.PeoCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PEO_CreatedDate");
                entity.Property(e => e.PeoInactive).HasColumnName("PEO_Inactive");
                entity.Property(e => e.PeoIsBusiness).HasColumnName("PEO_IsBusiness");
                entity.Property(e => e.PeoIsPrivate).HasColumnName("PEO_IsPrivate");
                entity.Property(e => e.PeoLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PEO_LastModifiedBy");
                entity.Property(e => e.PeoLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PEO_LastModifiedDate");
                entity.Property(e => e.PeoProductId).HasColumnName("PEO_Product_Id");
                entity.Property(e => e.PeoReportingFormId).HasColumnName("PEO_ReportingForm_Id");
                entity.Property(e => e.PeoTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PEO_TimeStamp");

                entity.HasOne(d => d.PeoActivityExecution).WithMany(p => p.ProductExclusionOptions)
                    .HasForeignKey(d => d.PeoActivityExecutionId)
                    .HasConstraintName("FK_ProductExclusionOptions_ActivityExecutions");

                entity.HasOne(d => d.PeoReportingForm).WithMany(p => p.ProductExclusionOptions)
                    .HasForeignKey(d => d.PeoReportingFormId)
                    .HasConstraintName("FK_ProductExclusionOptions_ReportingForm");
            });

            modelBuilder.Entity<ProductGroup>(entity =>
            {
                entity.HasKey(e => e.PrgId);

                entity.ToTable("ProductGroups", "pdc");

                entity.Property(e => e.PrgId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PRG_Id");
                entity.Property(e => e.PrgCode)
                    .HasMaxLength(10)
                    .HasColumnName("PRG_Code");
                entity.Property(e => e.PrgCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PRG_CreatedBy");
                entity.Property(e => e.PrgCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PRG_CreatedDate");
                entity.Property(e => e.PrgInactive).HasColumnName("PRG_Inactive");
                entity.Property(e => e.PrgLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PRG_LastModifiedBy");
                entity.Property(e => e.PrgLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PRG_LastModifiedDate");
                entity.Property(e => e.PrgLocalizableEntryId).HasColumnName("PRG_LocalizableEntry_Id");
                entity.Property(e => e.PrgLongName)
                    .HasMaxLength(250)
                    .HasColumnName("PRG_LongName");
                entity.Property(e => e.PrgShortName)
                    .HasMaxLength(20)
                    .HasColumnName("PRG_ShortName");
                entity.Property(e => e.PrgTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PRG_TimeStamp");

                entity.HasOne(d => d.PrgLocalizableEntry).WithMany(p => p.ProductGroups)
                    .HasForeignKey(d => d.PrgLocalizableEntryId)
                    .HasConstraintName("FK_ProductGroups_LocalizableEntries");
            });

            modelBuilder.Entity<ProductHierarchy>(entity =>
            {
                entity.HasKey(e => e.PrhId);

                entity.ToTable("ProductHierarchy", "pdc");

                entity.Property(e => e.PrhId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PRH_Id");
                entity.Property(e => e.PrhChildProductId).HasColumnName("PRH_ChildProduct_Id");
                entity.Property(e => e.PrhCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PRH_CreatedBy");
                entity.Property(e => e.PrhCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PRH_CreatedDate");
                entity.Property(e => e.PrhEndDate)
                    .HasColumnType("date")
                    .HasColumnName("PRH_EndDate");
                entity.Property(e => e.PrhLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PRH_LastModifiedBy");
                entity.Property(e => e.PrhLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PRH_LastModifiedDate");
                entity.Property(e => e.PrhParentProductId).HasColumnName("PRH_ParentProduct_Id");
                entity.Property(e => e.PrhStartDate)
                    .HasColumnType("date")
                    .HasColumnName("PRH_StartDate");
                entity.Property(e => e.PrhTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PRH_TimeStamp");

                entity.HasOne(d => d.PrhChildProduct).WithMany(p => p.ProductHierarchyPrhChildProducts)
                    .HasForeignKey(d => d.PrhChildProductId)
                    .HasConstraintName("FK_ProductHierarchy_ChildProducts");

                entity.HasOne(d => d.PrhParentProduct).WithMany(p => p.ProductHierarchyPrhParentProducts)
                    .HasForeignKey(d => d.PrhParentProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductHierarchy_Products");
            });

            modelBuilder.Entity<ProductInsuranceCoverage>(entity =>
            {
                entity.HasKey(e => e.PicId);

                entity.ToTable("ProductInsuranceCoverages", "pdc");

                entity.Property(e => e.PicId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PIC_Id");
                entity.Property(e => e.PicCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PIC_CreatedBy");
                entity.Property(e => e.PicCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PIC_CreatedDate");
                entity.Property(e => e.PicInactive).HasColumnName("PIC_Inactive");
                entity.Property(e => e.PicInsuranceCoverageId).HasColumnName("PIC_InsuranceCoverage_Id");
                entity.Property(e => e.PicLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PIC_LastModifiedBy");
                entity.Property(e => e.PicLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PIC_LastModifiedDate");
                entity.Property(e => e.PicProductId).HasColumnName("PIC_Product_Id");
                entity.Property(e => e.PicTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PIC_TimeStamp");

                entity.HasOne(d => d.PicInsuranceCoverage).WithMany(p => p.ProductInsuranceCoverages)
                    .HasForeignKey(d => d.PicInsuranceCoverageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductInsuranceCoverages_InsuranceCoverages");

                entity.HasOne(d => d.PicProduct).WithMany(p => p.ProductInsuranceCoverages)
                    .HasForeignKey(d => d.PicProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductInsuranceCoverages_Products");
            });

            modelBuilder.Entity<ProductInsuranceCoveragesHierarchyView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ProductInsuranceCoveragesHierarchyView", "pdc");

                entity.Property(e => e.MainCoverageCode).HasMaxLength(10);
                entity.Property(e => e.MainCoverageName).HasMaxLength(20);
                entity.Property(e => e.ProductCode).HasMaxLength(20);
                entity.Property(e => e.ProductShortName).HasMaxLength(20);
                entity.Property(e => e.SubCoverageCode).HasMaxLength(10);
                entity.Property(e => e.SubCoverageName).HasMaxLength(20);
            });

            modelBuilder.Entity<ProductInsuranceObject>(entity =>
            {
                entity.HasKey(e => e.PioId);

                entity.ToTable("ProductInsuranceObjects", "pdc");

                entity.Property(e => e.PioId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PIO_Id");
                entity.Property(e => e.PioCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PIO_CreatedBy");
                entity.Property(e => e.PioCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PIO_CreatedDate");
                entity.Property(e => e.PioInactive).HasColumnName("PIO_Inactive");
                entity.Property(e => e.PioInsuranceObjectId).HasColumnName("PIO_InsuranceObject_Id");
                entity.Property(e => e.PioLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PIO_LastModifiedBy");
                entity.Property(e => e.PioLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PIO_LastModifiedDate");
                entity.Property(e => e.PioProductId).HasColumnName("PIO_Product_Id");
                entity.Property(e => e.PioTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PIO_TimeStamp");

                entity.HasOne(d => d.PioInsuranceObject).WithMany(p => p.ProductInsuranceObjects)
                    .HasForeignKey(d => d.PioInsuranceObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductInsuranceObjects_InsuranceObjects");

                entity.HasOne(d => d.PioProduct).WithMany(p => p.ProductInsuranceObjects)
                    .HasForeignKey(d => d.PioProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductInsuranceObjects_Products");
            });

            modelBuilder.Entity<ProductInsuranceObjectsHierarchyView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ProductInsuranceObjectsHierarchyView", "pdc");

                entity.Property(e => e.MainObjectCode).HasMaxLength(10);
                entity.Property(e => e.MainObjectName).HasMaxLength(20);
                entity.Property(e => e.ProductCode).HasMaxLength(20);
                entity.Property(e => e.ProductName).HasMaxLength(20);
                entity.Property(e => e.ProductTypeCode).HasMaxLength(10);
                entity.Property(e => e.ProductTypeName).HasMaxLength(20);
                entity.Property(e => e.SecondObjectCode).HasMaxLength(10);
                entity.Property(e => e.SecondObjectName).HasMaxLength(20);
                entity.Property(e => e.ThirdObjectCode).HasMaxLength(10);
                entity.Property(e => e.ThirdObjectName).HasMaxLength(20);
            });

            modelBuilder.Entity<ProductLine>(entity =>
            {
                entity.HasKey(e => e.PlnId);

                entity.ToTable("ProductLines", "ced");

                entity.Property(e => e.PlnId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PLN_Id");
                entity.Property(e => e.PlnCode)
                    .HasMaxLength(10)
                    .HasColumnName("PLN_Code");
                entity.Property(e => e.PlnCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PLN_CreatedBy");
                entity.Property(e => e.PlnCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PLN_CreatedDate");
                entity.Property(e => e.PlnInactive).HasColumnName("PLN_Inactive");
                entity.Property(e => e.PlnLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PLN_LastModifiedBy");
                entity.Property(e => e.PlnLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PLN_LastModifiedDate");
                entity.Property(e => e.PlnLongName)
                    .HasMaxLength(250)
                    .HasColumnName("PLN_LongName");
                entity.Property(e => e.PlnShortName)
                    .HasMaxLength(20)
                    .HasColumnName("PLN_ShortName");
                entity.Property(e => e.PlnTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PLN_TimeStamp");
            });

            modelBuilder.Entity<ProductMapping>(entity =>
            {
                entity.HasKey(e => e.PmId);

                entity.ToTable("ProductMapping", "pros");

                entity.Property(e => e.PmId)
                    .ValueGeneratedNever()
                    .HasColumnName("PM_Id");
                entity.Property(e => e.PmCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PM_CreatedBy");
                entity.Property(e => e.PmCreatedDate).HasColumnName("PM_CreatedDate");
                entity.Property(e => e.PmDefaultEis).HasColumnName("PM_DefaultEIS");
                entity.Property(e => e.PmDefaultProspect).HasColumnName("PM_DefaultProspect");
                entity.Property(e => e.PmEiscode)
                    .HasMaxLength(100)
                    .HasColumnName("PM_EISCode");
                entity.Property(e => e.PmLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PM_LastModifiedBy");
                entity.Property(e => e.PmLastModifiedDate).HasColumnName("PM_LastModifiedDate");
                entity.Property(e => e.PmProspectCode)
                    .HasMaxLength(100)
                    .HasColumnName("PM_ProspectCode");
                entity.Property(e => e.PmTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PM_TimeStamp");
            });

            modelBuilder.Entity<ProductProperty>(entity =>
            {
                entity.HasKey(e => e.PrpId);

                entity.ToTable("ProductProperties", "pdc");

                entity.Property(e => e.PrpId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PRP_Id");
                entity.Property(e => e.PrpCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PRP_CreatedBy");
                entity.Property(e => e.PrpCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PRP_CreatedDate");
                entity.Property(e => e.PrpEnumPropertyId)
                    .HasMaxLength(50)
                    .HasColumnName("PRP_EnumProperty_Id");
                entity.Property(e => e.PrpLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PRP_LastModifiedBy");
                entity.Property(e => e.PrpLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PRP_LastModifiedDate");
                entity.Property(e => e.PrpProductId).HasColumnName("PRP_Product_Id");
                entity.Property(e => e.PrpTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PRP_TimeStamp");
            });

            modelBuilder.Entity<ProductType>(entity =>
            {
                entity.HasKey(e => e.PrtId).HasName("PK_DossierPriorities");

                entity.ToTable("ProductTypes", "pdc");

                entity.Property(e => e.PrtId)
                    .ValueGeneratedNever()
                    .HasColumnName("PRT_Id");
                entity.Property(e => e.PrtCode)
                    .HasMaxLength(10)
                    .HasColumnName("PRT_Code");
                entity.Property(e => e.PrtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PRT_CreatedBy");
                entity.Property(e => e.PrtCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PRT_CreatedDate");
                entity.Property(e => e.PrtInactive).HasColumnName("PRT_Inactive");
                entity.Property(e => e.PrtIsDamageType).HasColumnName("PRT_IsDamageType");
                entity.Property(e => e.PrtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PRT_LastModifiedBy");
                entity.Property(e => e.PrtLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PRT_LastModifiedDate");
                entity.Property(e => e.PrtLongName)
                    .HasMaxLength(250)
                    .HasColumnName("PRT_LongName");
                entity.Property(e => e.PrtShortName)
                    .HasMaxLength(20)
                    .HasColumnName("PRT_ShortName");
                entity.Property(e => e.PrtTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PRT_TimeStamp");
            });

            modelBuilder.Entity<ProductWorkActivitiesHierarchyView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ProductWorkActivitiesHierarchyView", "pdc");

                entity.Property(e => e.MainActivityCode).HasMaxLength(10);
                entity.Property(e => e.MainActivityName).HasMaxLength(20);
                entity.Property(e => e.ProductCode).HasMaxLength(20);
                entity.Property(e => e.ProductName).HasMaxLength(20);
                entity.Property(e => e.ProductTypeCode).HasMaxLength(10);
                entity.Property(e => e.ProductTypeName).HasMaxLength(20);
                entity.Property(e => e.SubActivityCode).HasMaxLength(10);
                entity.Property(e => e.SubActivityName).HasMaxLength(20);
                entity.Property(e => e.TertiaryActivityCode).HasMaxLength(10);
                entity.Property(e => e.TertiaryActivityName).HasMaxLength(20);
            });

            modelBuilder.Entity<ProductWorkActivity>(entity =>
            {
                entity.HasKey(e => e.PwaId);

                entity.ToTable("ProductWorkActivities", "pdc");

                entity.Property(e => e.PwaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PWA_Id");
                entity.Property(e => e.PwaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PWA_CreatedBy");
                entity.Property(e => e.PwaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PWA_CreatedDate");
                entity.Property(e => e.PwaInactive).HasColumnName("PWA_Inactive");
                entity.Property(e => e.PwaIsIncluded).HasColumnName("PWA_IsIncluded");
                entity.Property(e => e.PwaIsMain).HasColumnName("PWA_IsMain");
                entity.Property(e => e.PwaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PWA_LastModifiedBy");
                entity.Property(e => e.PwaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PWA_LastModifiedDate");
                entity.Property(e => e.PwaProductId).HasColumnName("PWA_Product_Id");
                entity.Property(e => e.PwaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PWA_TimeStamp");
                entity.Property(e => e.PwaWorkActivityId).HasColumnName("PWA_WorkActivity_Id");

                entity.HasOne(d => d.PwaProduct).WithMany(p => p.ProductWorkActivities)
                    .HasForeignKey(d => d.PwaProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductWorkActivities_Products");

                entity.HasOne(d => d.PwaWorkActivity).WithMany(p => p.ProductWorkActivities)
                    .HasForeignKey(d => d.PwaWorkActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductWorkActivities_WorkActivities");
            });

            modelBuilder.Entity<ProductsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ProductsView", "pdc");

                entity.Property(e => e.Actief)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.Afd)
                    .HasMaxLength(767)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("AFD");
                entity.Property(e => e.Bu)
                    .HasMaxLength(767)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("BU");
                entity.Property(e => e.NaamCpl)
                    .HasMaxLength(250)
                    .HasColumnName("Naam cpl");
                entity.Property(e => e.NaamKort)
                    .HasMaxLength(20)
                    .HasColumnName("Naam kort");
                entity.Property(e => e.PrdCode)
                    .HasMaxLength(20)
                    .HasColumnName("PRD-Code");
                entity.Property(e => e.Prdgr)
                    .HasMaxLength(261)
                    .HasColumnName("PRDGR");
            });

            modelBuilder.Entity<PropertiesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_Properties_History_ID");

                entity.ToTable("Properties_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.PrpBuildingUse)
                    .HasMaxLength(64)
                    .HasColumnName("PRP_BuildingUse");
                entity.Property(e => e.PrpCondition)
                    .HasMaxLength(64)
                    .HasColumnName("PRP_Condition");
                entity.Property(e => e.PrpConstructionYear).HasColumnName("PRP_ConstructionYear");
                entity.Property(e => e.PrpCountry)
                    .HasMaxLength(64)
                    .HasColumnName("PRP_Country");
                entity.Property(e => e.PrpCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PRP_CreatedBy");
                entity.Property(e => e.PrpCreatedDate).HasColumnName("PRP_CreatedDate");
                entity.Property(e => e.PrpDamageAmount)
                    .HasColumnType("money")
                    .HasColumnName("PRP_DamageAmount");
                entity.Property(e => e.PrpDamageCity)
                    .HasMaxLength(128)
                    .HasColumnName("PRP_DamageCity");
                entity.Property(e => e.PrpDamageStreet)
                    .HasMaxLength(128)
                    .HasColumnName("PRP_DamageStreet");
                entity.Property(e => e.PrpDeductibleExcess)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("PRP_DeductibleExcess");
                entity.Property(e => e.PrpDeedOfAssignment)
                    .HasMaxLength(64)
                    .HasColumnName("PRP_DeedOfAssignment");
                entity.Property(e => e.PrpExVat).HasColumnName("PRP_ExVat");
                entity.Property(e => e.PrpExternalMaterialId).HasColumnName("PRP_ExternalMaterial_Id");
                entity.Property(e => e.PrpGuaranteeAgainstUnderinsurance).HasColumnName("PRP_GuaranteeAgainstUnderinsurance");
                entity.Property(e => e.PrpHouseNumber)
                    .HasMaxLength(64)
                    .HasColumnName("PRP_HouseNumber");
                entity.Property(e => e.PrpHouseNumberAddition)
                    .HasMaxLength(64)
                    .HasColumnName("PRP_HouseNumberAddition");
                entity.Property(e => e.PrpId).HasColumnName("PRP_Id");
                entity.Property(e => e.PrpInc).HasColumnName("PRP_Inc");
                entity.Property(e => e.PrpInsuredAmount)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("PRP_InsuredAmount");
                entity.Property(e => e.PrpInsuredAmountHasToBeDetermined).HasColumnName("PRP_InsuredAmountHasToBeDetermined");
                entity.Property(e => e.PrpLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PRP_LastModifiedBy");
                entity.Property(e => e.PrpLastModifiedDate).HasColumnName("PRP_LastModifiedDate");
                entity.Property(e => e.PrpNumberOfDamagedObjects).HasColumnName("PRP_NumberOfDamagedObjects");
                entity.Property(e => e.PrpPolicyConditions)
                    .HasMaxLength(255)
                    .HasColumnName("PRP_PolicyConditions");
                entity.Property(e => e.PrpPolicyNumber)
                    .HasMaxLength(28)
                    .HasColumnName("PRP_PolicyNumber");
                entity.Property(e => e.PrpPostalCode)
                    .HasMaxLength(10)
                    .HasColumnName("PRP_PostalCode");
                entity.Property(e => e.PrpRoofCoveringId).HasColumnName("PRP_RoofCovering_Id");
            });

            modelBuilder.Entity<Property>(entity =>
            {
                entity.HasKey(e => e.PrpId);

                entity.ToTable("Properties", "dos", tb => tb.HasTrigger("th_dos_Properties_TraceHistory"));

                entity.Property(e => e.PrpId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PRP_Id");
                entity.Property(e => e.PrpBuildingUse)
                    .HasMaxLength(64)
                    .HasColumnName("PRP_BuildingUse");
                entity.Property(e => e.PrpCondition)
                    .HasMaxLength(64)
                    .HasColumnName("PRP_Condition");
                entity.Property(e => e.PrpConstructionYear).HasColumnName("PRP_ConstructionYear");
                entity.Property(e => e.PrpCountry)
                    .HasMaxLength(64)
                    .HasColumnName("PRP_Country");
                entity.Property(e => e.PrpCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PRP_CreatedBy");
                entity.Property(e => e.PrpCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PRP_CreatedDate");
                entity.Property(e => e.PrpDamageAmount)
                    .HasColumnType("money")
                    .HasColumnName("PRP_DamageAmount");
                entity.Property(e => e.PrpDamageCity)
                    .HasMaxLength(128)
                    .HasColumnName("PRP_DamageCity");
                entity.Property(e => e.PrpDamageStreet)
                    .HasMaxLength(128)
                    .HasColumnName("PRP_DamageStreet");
                entity.Property(e => e.PrpDeductibleExcess)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("PRP_DeductibleExcess");
                entity.Property(e => e.PrpDeedOfAssignment)
                    .HasMaxLength(64)
                    .HasColumnName("PRP_DeedOfAssignment");
                entity.Property(e => e.PrpExVat).HasColumnName("PRP_ExVat");
                entity.Property(e => e.PrpExternalMaterialId).HasColumnName("PRP_ExternalMaterial_Id");
                entity.Property(e => e.PrpGuaranteeAgainstUnderinsurance).HasColumnName("PRP_GuaranteeAgainstUnderinsurance");
                entity.Property(e => e.PrpHouseNumber)
                    .HasMaxLength(64)
                    .HasColumnName("PRP_HouseNumber");
                entity.Property(e => e.PrpHouseNumberAddition)
                    .HasMaxLength(64)
                    .HasColumnName("PRP_HouseNumberAddition");
                entity.Property(e => e.PrpInc).HasColumnName("PRP_Inc");
                entity.Property(e => e.PrpInsuredAmount)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("PRP_InsuredAmount");
                entity.Property(e => e.PrpInsuredAmountHasToBeDetermined).HasColumnName("PRP_InsuredAmountHasToBeDetermined");
                entity.Property(e => e.PrpLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PRP_LastModifiedBy");
                entity.Property(e => e.PrpLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PRP_LastModifiedDate");
                entity.Property(e => e.PrpNumberOfDamagedObjects).HasColumnName("PRP_NumberOfDamagedObjects");
                entity.Property(e => e.PrpPolicyConditions)
                    .HasMaxLength(255)
                    .HasColumnName("PRP_PolicyConditions");
                entity.Property(e => e.PrpPolicyNumber)
                    .HasMaxLength(28)
                    .HasColumnName("PRP_PolicyNumber");
                entity.Property(e => e.PrpPostalCode)
                    .HasMaxLength(10)
                    .HasColumnName("PRP_PostalCode");
                entity.Property(e => e.PrpRoofCoveringId).HasColumnName("PRP_RoofCovering_Id");
                entity.Property(e => e.PrpTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PRP_TimeStamp");

                entity.HasOne(d => d.PrpExternalMaterial).WithMany(p => p.Properties)
                    .HasForeignKey(d => d.PrpExternalMaterialId)
                    .HasConstraintName("FK_Properties_ExternalMaterials");

                entity.HasOne(d => d.Prp).WithOne(p => p.Property)
                    .HasForeignKey<Property>(d => d.PrpId)
                    .HasConstraintName("FK_Properties_InvolvedObjects");

                entity.HasOne(d => d.PrpRoofCovering).WithMany(p => p.Properties)
                    .HasForeignKey(d => d.PrpRoofCoveringId)
                    .HasConstraintName("FK_Properties_RoofCoverings");
            });

            modelBuilder.Entity<PurchaseAuthorizationLimit>(entity =>
            {
                entity.HasKey(e => e.PalId);

                entity.ToTable("PurchaseAuthorizationLimits", "fin");

                entity.HasIndex(e => e.PalAuthorizationRoleId, "IX_PurchaseAuthorizationLimits_AuthorizationRole");

                entity.HasIndex(e => e.PalLegalEntityId, "IX_PurchaseAuthorizationLimits_LegalEntity");

                entity.Property(e => e.PalId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PAL_Id");
                entity.Property(e => e.PalAuthorizationRoleId)
                    .HasMaxLength(50)
                    .HasColumnName("PAL_AuthorizationRole_Id");
                entity.Property(e => e.PalCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PAL_CreatedBy");
                entity.Property(e => e.PalCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PAL_CreatedDate");
                entity.Property(e => e.PalEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("PAL_EffectiveDate");
                entity.Property(e => e.PalEntrySystem)
                    .HasMaxLength(10)
                    .HasColumnName("PAL_EntrySystem");
                entity.Property(e => e.PalLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PAL_LastModifiedBy");
                entity.Property(e => e.PalLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PAL_LastModifiedDate");
                entity.Property(e => e.PalLegalEntityId).HasColumnName("PAL_LegalEntity_Id");
                entity.Property(e => e.PalTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("PAL_TerminationDate");
                entity.Property(e => e.PalTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PAL_TimeStamp");

                entity.HasOne(d => d.PalAuthorizationRole).WithMany(p => p.PurchaseAuthorizationLimits)
                    .HasForeignKey(d => d.PalAuthorizationRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseAuthorizationLimits_AuthorizationRoles");

                entity.HasOne(d => d.PalLegalEntity).WithMany(p => p.PurchaseAuthorizationLimits)
                    .HasForeignKey(d => d.PalLegalEntityId)
                    .HasConstraintName("FK_PurchaseAuthorizationLimits_LegalEntities");
            });

            modelBuilder.Entity<PurchaseBacklog>(entity =>
            {
                entity.HasKey(e => e.PbgId);

                entity.ToTable("PurchaseBacklogs", "fin");

                entity.HasIndex(e => e.PbgSupplierInvoiceNumber, "IX_PurchaseBacklogs_PBG_SupplierInvoiceNumber");

                entity.HasIndex(e => e.PbgSupplierId, "IX_PurchaseBacklogs_PBG_Supplier_Id");

                entity.HasIndex(e => e.PbgCreatedDate, "IX_fin_PurchaseBacklogs_CreatedDate__INCL");

                entity.HasIndex(e => new { e.PbgCurrentStatusCode, e.PbgCurrentStatusHistoryStartDate }, "IX_fin_PurchaseBacklogs_CurrentStatusCode_CurrentStatusHistoryStartDate__INCL");

                entity.HasIndex(e => new { e.PbgCurrentStatusCode, e.PbgInUseBy }, "IX_fin_PurchaseBacklogs_CurrentStatusCode_InUseBy__INCL");

                entity.HasIndex(e => new { e.PbgCurrentStatusCode, e.PbgSourceFrom }, "IX_fin_PurchaseBacklogs_CurrentStatusCode_SourceFrom__INCL");

                entity.HasIndex(e => new { e.PbgDossierId, e.PbgEntrySystem }, "IX_fin_PurchaseBacklogs_Dossier_EntrySystem");

                entity.HasIndex(e => e.PbgEntrySystem, "IX_fin_PurchaseBacklogs_EntrySystem");

                entity.HasIndex(e => e.PbgSourceReceivedDate, "IX_fin_PurchaseBacklogs_SourceReceivedDate__INCL");

                entity.HasIndex(e => new { e.PbgSourceTypeId, e.PbgCurrentStatusCode }, "IX_fin_PurchaseBacklogs_SourceType_CurrentStatusCode__INCL");

                entity.HasIndex(e => e.PbgSupplierInvoiceDate, "IX_fin_PurchaseBacklogs_SupplierInvoiceDate__INCL");

                entity.Property(e => e.PbgId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PBG_Id");
                entity.Property(e => e.PbgAssistancePlanNumber)
                    .HasMaxLength(20)
                    .HasColumnName("PBG_AssistancePlanNumber");
                entity.Property(e => e.PbgAssitancePlanId).HasColumnName("PBG_AssitancePlan_Id");
                entity.Property(e => e.PbgBacklogsDate).HasColumnName("PBG_BacklogsDate");
                entity.Property(e => e.PbgBacklogsNumber)
                    .HasMaxLength(20)
                    .HasColumnName("PBG_BacklogsNumber");
                entity.Property(e => e.PbgBlockedAmount)
                    .HasColumnType("money")
                    .HasColumnName("PBG_BlockedAmount");
                entity.Property(e => e.PbgBlockedBankAccountId).HasColumnName("PBG_BlockedBankAccount_Id");
                entity.Property(e => e.PbgCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PBG_CreatedBy");
                entity.Property(e => e.PbgCreatedDate).HasColumnName("PBG_CreatedDate");
                entity.Property(e => e.PbgCultureCode)
                    .HasMaxLength(10)
                    .HasColumnName("PBG_CultureCode");
                entity.Property(e => e.PbgCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("PBG_CurrencyCode");
                entity.Property(e => e.PbgCurrentStatusCode)
                    .HasMaxLength(20)
                    .HasColumnName("PBG_CurrentStatusCode");
                entity.Property(e => e.PbgCurrentStatusHistoryId).HasColumnName("PBG_CurrentStatusHistory_Id");
                entity.Property(e => e.PbgCurrentStatusHistoryStartDate).HasColumnName("PBG_CurrentStatusHistoryStartDate");
                entity.Property(e => e.PbgDiscount)
                    .HasColumnType("money")
                    .HasColumnName("PBG_Discount");
                entity.Property(e => e.PbgDossierAssignmentId).HasColumnName("PBG_DossierAssignment_Id");
                entity.Property(e => e.PbgDossierAssignmentNumber)
                    .HasMaxLength(20)
                    .HasColumnName("PBG_DossierAssignmentNumber");
                entity.Property(e => e.PbgDossierId).HasColumnName("PBG_Dossier_Id");
                entity.Property(e => e.PbgDossierNumber)
                    .HasMaxLength(20)
                    .HasColumnName("PBG_DossierNumber");
                entity.Property(e => e.PbgDueDate).HasColumnName("PBG_DueDate");
                entity.Property(e => e.PbgEmployeeId).HasColumnName("PBG_Employee_Id");
                entity.Property(e => e.PbgEntryNumber)
                    .HasMaxLength(36)
                    .HasColumnName("PBG_EntryNumber");
                entity.Property(e => e.PbgEntrySystem)
                    .HasMaxLength(10)
                    .HasColumnName("PBG_EntrySystem");
                entity.Property(e => e.PbgGrossAmount)
                    .HasColumnType("money")
                    .HasColumnName("PBG_GrossAmount");
                entity.Property(e => e.PbgInUseBy)
                    .HasMaxLength(250)
                    .HasColumnName("PBG_InUseBy");
                entity.Property(e => e.PbgInvestigationDueDate).HasColumnName("PBG_InvestigationDueDate");
                entity.Property(e => e.PbgInvoicePriorityTypeId).HasColumnName("PBG_InvoicePriorityType_Id");
                entity.Property(e => e.PbgIsCredit).HasColumnName("PBG_IsCredit");
                entity.Property(e => e.PbgIsIncorrectInvoiceFollowedUp).HasColumnName("PBG_IsIncorrectInvoiceFollowedUp");
                entity.Property(e => e.PbgIsIntercompany).HasColumnName("PBG_IsIntercompany");
                entity.Property(e => e.PbgIsInvoice).HasColumnName("PBG_IsInvoice");
                entity.Property(e => e.PbgIsRecipientLegalEntity).HasColumnName("PBG_IsRecipientLegalEntity");
                entity.Property(e => e.PbgJsonEntryForm).HasColumnName("PBG_JsonEntryForm");
                entity.Property(e => e.PbgLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PBG_LastModifiedBy");
                entity.Property(e => e.PbgLastModifiedDate).HasColumnName("PBG_LastModifiedDate");
                entity.Property(e => e.PbgLegalEntityId).HasColumnName("PBG_LegalEntity_Id");
                entity.Property(e => e.PbgNetAmount)
                    .HasColumnType("money")
                    .HasColumnName("PBG_NetAmount");
                entity.Property(e => e.PbgPayeeAddressId).HasColumnName("PBG_PayeeAddress_Id");
                entity.Property(e => e.PbgPayeeBankAccountId).HasColumnName("PBG_PayeeBankAccount_Id");
                entity.Property(e => e.PbgPayeeName)
                    .HasMaxLength(250)
                    .HasColumnName("PBG_PayeeName");
                entity.Property(e => e.PbgPaymentConditionId).HasColumnName("PBG_PaymentCondition_Id");
                entity.Property(e => e.PbgPaymentMethodId).HasColumnName("PBG_PaymentMethod_Id");
                entity.Property(e => e.PbgPaymentReference)
                    .HasMaxLength(250)
                    .HasColumnName("PBG_PaymentReference");
                entity.Property(e => e.PbgRecipientName)
                    .HasMaxLength(250)
                    .HasColumnName("PBG_RecipientName");
                entity.Property(e => e.PbgSourceFrom)
                    .HasMaxLength(250)
                    .HasColumnName("PBG_SourceFrom");
                entity.Property(e => e.PbgSourceReceivedDate).HasColumnName("PBG_SourceReceivedDate");
                entity.Property(e => e.PbgSourceSubject)
                    .HasMaxLength(250)
                    .HasColumnName("PBG_SourceSubject");
                entity.Property(e => e.PbgSourceTo)
                    .HasMaxLength(250)
                    .HasColumnName("PBG_SourceTo");
                entity.Property(e => e.PbgSourceTypeId)
                    .HasMaxLength(20)
                    .HasColumnName("PBG_SourceType_Id");
                entity.Property(e => e.PbgSupplierId).HasColumnName("PBG_Supplier_Id");
                entity.Property(e => e.PbgSupplierInvoiceDate)
                    .HasColumnType("date")
                    .HasColumnName("PBG_SupplierInvoiceDate");
                entity.Property(e => e.PbgSupplierInvoiceNumber)
                    .HasMaxLength(20)
                    .HasColumnName("PBG_SupplierInvoiceNumber");
                entity.Property(e => e.PbgTaxAmount)
                    .HasColumnType("money")
                    .HasColumnName("PBG_TaxAmount");
                entity.Property(e => e.PbgTaxCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("PBG_TaxCountryCode");
                entity.Property(e => e.PbgTaxExemptedAmount)
                    .HasColumnType("money")
                    .HasColumnName("PBG_TaxExemptedAmount");
                entity.Property(e => e.PbgTaxImportAmount)
                    .HasColumnType("money")
                    .HasColumnName("PBG_TaxImportAmount");
                entity.Property(e => e.PbgTaxResversedChargeAmount)
                    .HasColumnType("money")
                    .HasColumnName("PBG_TaxResversedChargeAmount");
                entity.Property(e => e.PbgTenantId).HasColumnName("PBG_Tenant_Id");
                entity.Property(e => e.PbgTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PBG_TimeStamp");
                entity.Property(e => e.PbgWorkingOrderId).HasColumnName("PBG_WorkingOrder_Id");
                entity.Property(e => e.PbgWorkingOrderNumber)
                    .HasMaxLength(20)
                    .HasColumnName("PBG_WorkingOrderNumber");

                entity.HasOne(d => d.PbgAssitancePlan).WithMany(p => p.PurchaseBacklogs)
                    .HasForeignKey(d => d.PbgAssitancePlanId)
                    .HasConstraintName("FK_PurchaseBacklogs_AssistancePlans");

                entity.HasOne(d => d.PbgBlockedBankAccount).WithMany(p => p.PurchaseBacklogPbgBlockedBankAccounts)
                    .HasForeignKey(d => d.PbgBlockedBankAccountId)
                    .HasConstraintName("FK_PurchaseBacklogs_BlockedBankAccounts");

                entity.HasOne(d => d.PbgDossierAssignment).WithMany(p => p.PurchaseBacklogs)
                    .HasForeignKey(d => d.PbgDossierAssignmentId)
                    .HasConstraintName("FK_PurchaseBacklogs_DossierAssignments");

                entity.HasOne(d => d.PbgDossier).WithMany(p => p.PurchaseBacklogs)
                    .HasForeignKey(d => d.PbgDossierId)
                    .HasConstraintName("FK_PurchaseBacklogs_Dossiers");

                entity.HasOne(d => d.PbgEmployee).WithMany(p => p.PurchaseBacklogs)
                    .HasForeignKey(d => d.PbgEmployeeId)
                    .HasConstraintName("FK_PurchaseBacklogs_Employees");

                entity.HasOne(d => d.PbgInvoicePriorityType).WithMany(p => p.PurchaseBacklogs)
                    .HasForeignKey(d => d.PbgInvoicePriorityTypeId)
                    .HasConstraintName("FK_PurchaseBacklogs_InvoicePriorityTypes");

                entity.HasOne(d => d.PbgLegalEntity).WithMany(p => p.PurchaseBacklogs)
                    .HasForeignKey(d => d.PbgLegalEntityId)
                    .HasConstraintName("FK_PurchaseBacklogs_LegalEntities");

                entity.HasOne(d => d.PbgPayeeAddress).WithMany(p => p.PurchaseBacklogs)
                    .HasForeignKey(d => d.PbgPayeeAddressId)
                    .HasConstraintName("FK_PurchaseBacklogs_Addresses");

                entity.HasOne(d => d.PbgPayeeBankAccount).WithMany(p => p.PurchaseBacklogPbgPayeeBankAccounts)
                    .HasForeignKey(d => d.PbgPayeeBankAccountId)
                    .HasConstraintName("FK_PurchaseBacklogs_BankAccounts");

                entity.HasOne(d => d.PbgPaymentCondition).WithMany(p => p.PurchaseBacklogs)
                    .HasForeignKey(d => d.PbgPaymentConditionId)
                    .HasConstraintName("FK_PurchaseBacklogs_PaymentConditions");

                entity.HasOne(d => d.PbgPaymentMethod).WithMany(p => p.PurchaseBacklogs)
                    .HasForeignKey(d => d.PbgPaymentMethodId)
                    .HasConstraintName("FK_PurchaseBacklogs_PaymentMethods");

                entity.HasOne(d => d.PbgSourceType).WithMany(p => p.PurchaseBacklogs)
                    .HasForeignKey(d => d.PbgSourceTypeId)
                    .HasConstraintName("FK_PurchaseBacklogs_PurchaseBacklogSourceTypes");

                entity.HasOne(d => d.PbgSupplier).WithMany(p => p.PurchaseBacklogs)
                    .HasForeignKey(d => d.PbgSupplierId)
                    .HasConstraintName("FK_PurchaseBacklogs_Suppliers");

                entity.HasOne(d => d.PbgTenant).WithMany(p => p.PurchaseBacklogs)
                    .HasForeignKey(d => d.PbgTenantId)
                    .HasConstraintName("FK_PurchaseBacklogs_Tenants");

                entity.HasOne(d => d.PbgWorkingOrder).WithMany(p => p.PurchaseBacklogs)
                    .HasForeignKey(d => d.PbgWorkingOrderId)
                    .HasConstraintName("FK_PurchaseBacklogs_WorkingOrders");
            });

            modelBuilder.Entity<PurchaseBacklogAssistancePlan>(entity =>
            {
                entity.HasKey(e => e.PbapId);

                entity.ToTable("PurchaseBacklogAssistancePlans", "fin");

                entity.HasIndex(e => e.PbapAssistancePlanId, "IX_fin_PurchaseBacklogAssistancePlans_AssistancePlan_Id");

                entity.HasIndex(e => new { e.PbapPurchaseBacklogId, e.PbapInactive }, "IX_fin_PurchaseBacklogAssistancePlans_PurchaseBacklog_Inactive");

                entity.Property(e => e.PbapId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PBAP_Id");
                entity.Property(e => e.PbapAssistancePlanId).HasColumnName("PBAP_AssistancePlan_Id");
                entity.Property(e => e.PbapCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PBAP_CreatedBy");
                entity.Property(e => e.PbapCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PBAP_CreatedDate");
                entity.Property(e => e.PbapInactive).HasColumnName("PBAP_Inactive");
                entity.Property(e => e.PbapLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PBAP_LastModifiedBy");
                entity.Property(e => e.PbapLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PBAP_LastModifiedDate");
                entity.Property(e => e.PbapPurchaseBacklogId).HasColumnName("PBAP_PurchaseBacklog_Id");
                entity.Property(e => e.PbapTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PBAP_TimeStamp");

                entity.HasOne(d => d.PbapAssistancePlan).WithMany(p => p.PurchaseBacklogAssistancePlans)
                    .HasForeignKey(d => d.PbapAssistancePlanId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseBacklogAssistancePlans_AssistancePlans");

                entity.HasOne(d => d.PbapPurchaseBacklog).WithMany(p => p.PurchaseBacklogAssistancePlans)
                    .HasForeignKey(d => d.PbapPurchaseBacklogId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseBacklogAssistancePlans_PurchaseBacklogs");
            });

            modelBuilder.Entity<PurchaseBacklogAttachment>(entity =>
            {
                entity.HasKey(e => e.PbaId);

                entity.ToTable("PurchaseBacklogAttachments", "fin");

                entity.HasIndex(e => e.PbaDocumentId, "IX_fin_PurchaseBacklogAttachments_Document");

                entity.HasIndex(e => e.PbaPurchaseBacklogId, "IX_fin_PurchaseBacklogAttachments_PurchaseBacklog");

                entity.Property(e => e.PbaId)
                    .ValueGeneratedNever()
                    .HasColumnName("PBA_Id");
                entity.Property(e => e.PbaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PBA_CreatedBy");
                entity.Property(e => e.PbaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PBA_CreatedDate");
                entity.Property(e => e.PbaDocumentId).HasColumnName("PBA_Document_Id");
                entity.Property(e => e.PbaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PBA_LastModifiedBy");
                entity.Property(e => e.PbaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PBA_LastModifiedDate");
                entity.Property(e => e.PbaPurchaseBacklogId).HasColumnName("PBA_PurchaseBacklog_Id");
                entity.Property(e => e.PbaSequenceNumber).HasColumnName("PBA_SequenceNumber");
                entity.Property(e => e.PbaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PBA_TimeStamp");

                entity.HasOne(d => d.PbaDocument).WithMany(p => p.PurchaseBacklogAttachments)
                    .HasForeignKey(d => d.PbaDocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseBacklogAttachments_Documents");

                entity.HasOne(d => d.PbaPurchaseBacklog).WithMany(p => p.PurchaseBacklogAttachments)
                    .HasForeignKey(d => d.PbaPurchaseBacklogId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseBacklogAttachments_PurchaseBacklogs");
            });

            modelBuilder.Entity<PurchaseBacklogAttachmentsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseBacklogAttachmentsView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.Description).HasMaxLength(500);
                entity.Property(e => e.DocumentDate).HasColumnType("date");
                entity.Property(e => e.DocumentNumber).HasMaxLength(20);
                entity.Property(e => e.DocumentTypeCode).HasMaxLength(10);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.SignatureDate).HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PurchaseBacklogLine>(entity =>
            {
                entity.HasKey(e => e.PglId);

                entity.ToTable("PurchaseBacklogLines", "fin");

                entity.Property(e => e.PglId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PGL_Id");
                entity.Property(e => e.PglAssistancePlanId).HasColumnName("PGL_AssistancePlan_Id");
                entity.Property(e => e.PglCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PGL_CreatedBy");
                entity.Property(e => e.PglCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PGL_CreatedDate");
                entity.Property(e => e.PglDebitPurchaseBacklogLineId).HasColumnName("PGL_DebitPurchaseBacklogLine_Id");
                entity.Property(e => e.PglDeliveryDate).HasColumnName("PGL_DeliveryDate");
                entity.Property(e => e.PglDescription)
                    .HasMaxLength(250)
                    .HasColumnName("PGL_Description");
                entity.Property(e => e.PglDiscount)
                    .HasColumnType("money")
                    .HasColumnName("PGL_Discount");
                entity.Property(e => e.PglDossierAssignmentId).HasColumnName("PGL_DossierAssignment_Id");
                entity.Property(e => e.PglDossierId).HasColumnName("PGL_Dossier_Id");
                entity.Property(e => e.PglDossierNumber)
                    .HasMaxLength(20)
                    .HasColumnName("PGL_DossierNumber");
                entity.Property(e => e.PglDossierPartyId).HasColumnName("PGL_DossierParty_Id");
                entity.Property(e => e.PglGrossAmount)
                    .HasColumnType("money")
                    .HasColumnName("PGL_GrossAmount");
                entity.Property(e => e.PglIsContinuousPost).HasColumnName("PGL_IsContinuousPost");
                entity.Property(e => e.PglIsCredit)
                    .HasDefaultValueSql("((0))")
                    .HasColumnName("PGL_IsCredit");
                entity.Property(e => e.PglIsTaxBeforeDiscount)
                    .HasDefaultValueSql("((0))")
                    .HasColumnName("PGL_IsTaxBeforeDiscount");
                entity.Property(e => e.PglLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PGL_LastModifiedBy");
                entity.Property(e => e.PglLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PGL_LastModifiedDate");
                entity.Property(e => e.PglLineNumber).HasColumnName("PGL_LineNumber");
                entity.Property(e => e.PglNetAmount)
                    .HasColumnType("money")
                    .HasColumnName("PGL_NetAmount");
                entity.Property(e => e.PglOurReference)
                    .HasMaxLength(250)
                    .HasColumnName("PGL_OurReference");
                entity.Property(e => e.PglProductCode)
                    .HasMaxLength(10)
                    .HasColumnName("PGL_ProductCode");
                entity.Property(e => e.PglPurchaseBacklogId).HasColumnName("PGL_PurchaseBacklog_Id");
                entity.Property(e => e.PglQuantity).HasColumnName("PGL_Quantity");
                entity.Property(e => e.PglServiceId).HasColumnName("PGL_Service_Id");
                entity.Property(e => e.PglTaxAmount)
                    .HasColumnType("money")
                    .HasColumnName("PGL_TaxAmount");
                entity.Property(e => e.PglTaxBase)
                    .HasColumnType("money")
                    .HasColumnName("PGL_TaxBase");
                entity.Property(e => e.PglTaxCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("PGL_TaxCountryCode");
                entity.Property(e => e.PglTaxExempted)
                    .HasDefaultValueSql("((0))")
                    .HasColumnName("PGL_TaxExempted");
                entity.Property(e => e.PglTaxImport)
                    .HasDefaultValueSql("((0))")
                    .HasColumnName("PGL_TaxImport");
                entity.Property(e => e.PglTaxRate).HasColumnName("PGL_TaxRate");
                entity.Property(e => e.PglTaxReversedCharge)
                    .HasDefaultValueSql("((0))")
                    .HasColumnName("PGL_TaxReversedCharge");
                entity.Property(e => e.PglTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PGL_TimeStamp");
                entity.Property(e => e.PglUnitOfMeasureId)
                    .HasMaxLength(20)
                    .HasColumnName("PGL_UnitOfMeasure_Id");
                entity.Property(e => e.PglUnitPrice)
                    .HasColumnType("money")
                    .HasColumnName("PGL_UnitPrice");
                entity.Property(e => e.PglWorkingOrderId).HasColumnName("PGL_WorkingOrder_Id");
                entity.Property(e => e.PglYourReference)
                    .HasMaxLength(250)
                    .HasColumnName("PGL_YourReference");

                entity.HasOne(d => d.PglAssistancePlan).WithMany(p => p.PurchaseBacklogLines)
                    .HasForeignKey(d => d.PglAssistancePlanId)
                    .HasConstraintName("FK_PurchaseBacklogLines_AssistancePlans");

                entity.HasOne(d => d.PglDebitPurchaseBacklogLine).WithMany(p => p.InversePglDebitPurchaseBacklogLine)
                    .HasForeignKey(d => d.PglDebitPurchaseBacklogLineId)
                    .HasConstraintName("FK_PurchaseBacklogLines_DebitPurchaseBacklogLines");

                entity.HasOne(d => d.PglDossierAssignment).WithMany(p => p.PurchaseBacklogLines)
                    .HasForeignKey(d => d.PglDossierAssignmentId)
                    .HasConstraintName("FK_PurchaseBacklogLines_DossierAssignments");

                entity.HasOne(d => d.PglDossier).WithMany(p => p.PurchaseBacklogLines)
                    .HasForeignKey(d => d.PglDossierId)
                    .HasConstraintName("FK_PurchaseBacklogLines_Dossiers");

                entity.HasOne(d => d.PglDossierParty).WithMany(p => p.PurchaseBacklogLines)
                    .HasForeignKey(d => d.PglDossierPartyId)
                    .HasConstraintName("FK_PurchaseBacklogLines_DossierParties");

                entity.HasOne(d => d.PglPurchaseBacklog).WithMany(p => p.PurchaseBacklogLines)
                    .HasForeignKey(d => d.PglPurchaseBacklogId)
                    .HasConstraintName("FK_PurchaseBacklogLines_PurchaseBacklogs");

                entity.HasOne(d => d.PglService).WithMany(p => p.PurchaseBacklogLines)
                    .HasForeignKey(d => d.PglServiceId)
                    .HasConstraintName("FK_PurchaseBacklogLines_Services");

                entity.HasOne(d => d.PglUnitOfMeasure).WithMany(p => p.PurchaseBacklogLines)
                    .HasForeignKey(d => d.PglUnitOfMeasureId)
                    .HasConstraintName("FK_PurchaseBacklogLines_UnitOfMeasures");

                entity.HasOne(d => d.PglWorkingOrder).WithMany(p => p.PurchaseBacklogLines)
                    .HasForeignKey(d => d.PglWorkingOrderId)
                    .HasConstraintName("FK_PurchaseBacklogLines_WorkingOrders");
            });

            modelBuilder.Entity<PurchaseBacklogNote>(entity =>
            {
                entity.HasKey(e => e.PbnId);

                entity.ToTable("PurchaseBacklogNotes", "fin");

                entity.HasIndex(e => e.PbnPurchaseBacklogId, "IX_PurchaseBacklogNotes_PBN_PurchaseBacklog_Id");

                entity.Property(e => e.PbnId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PBN_Id");
                entity.Property(e => e.PbnCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PBN_CreatedBy");
                entity.Property(e => e.PbnCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PBN_CreatedDate");
                entity.Property(e => e.PbnLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PBN_LastModifiedBy");
                entity.Property(e => e.PbnLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PBN_LastModifiedDate");
                entity.Property(e => e.PbnNotes).HasColumnName("PBN_Notes");
                entity.Property(e => e.PbnPurchaseBacklogId).HasColumnName("PBN_PurchaseBacklog_Id");
                entity.Property(e => e.PbnTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PBN_TimeStamp");

                entity.HasOne(d => d.PbnPurchaseBacklog).WithMany(p => p.PurchaseBacklogNotes)
                    .HasForeignKey(d => d.PbnPurchaseBacklogId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseBacklogNotes_PurchaseBacklog");
            });

            modelBuilder.Entity<PurchaseBacklogNotesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseBacklogNotesView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PurchaseBacklogSourceType>(entity =>
            {
                entity.HasKey(e => e.PbtId);

                entity.ToTable("PurchaseBacklogSourceTypes", "fin");

                entity.Property(e => e.PbtId)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PBT_Id");
                entity.Property(e => e.PbtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PBT_CreatedBy");
                entity.Property(e => e.PbtCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PBT_CreatedDate");
                entity.Property(e => e.PbtDescription)
                    .HasMaxLength(250)
                    .HasColumnName("PBT_Description");
                entity.Property(e => e.PbtInactive).HasColumnName("PBT_Inactive");
                entity.Property(e => e.PbtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PBT_LastModifiedBy");
                entity.Property(e => e.PbtLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PBT_LastModifiedDate");
                entity.Property(e => e.PbtLocalizableEntryId).HasColumnName("PBT_LocalizableEntry_Id");
                entity.Property(e => e.PbtTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PBT_TimeStamp");

                entity.HasOne(d => d.PbtLocalizableEntry).WithMany(p => p.PurchaseBacklogSourceTypes)
                    .HasForeignKey(d => d.PbtLocalizableEntryId)
                    .HasConstraintName("FK_PurchaseBacklogSourceTypes_LocalizableEntries");
            });

            modelBuilder.Entity<PurchaseBacklogStatus>(entity =>
            {
                entity.HasKey(e => e.PbsId);

                entity.ToTable("PurchaseBacklogStatuses", "fin");

                entity.Property(e => e.PbsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PBS_Id");
                entity.Property(e => e.PbsCode)
                    .HasMaxLength(10)
                    .HasColumnName("PBS_Code");
                entity.Property(e => e.PbsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PBS_CreatedBy");
                entity.Property(e => e.PbsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PBS_CreatedDate");
                entity.Property(e => e.PbsInactive).HasColumnName("PBS_Inactive");
                entity.Property(e => e.PbsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PBS_LastModifiedBy");
                entity.Property(e => e.PbsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PBS_LastModifiedDate");
                entity.Property(e => e.PbsLocalizableEntryId).HasColumnName("PBS_LocalizableEntry_Id");
                entity.Property(e => e.PbsLongName)
                    .HasMaxLength(250)
                    .HasColumnName("PBS_LongName");
                entity.Property(e => e.PbsShortName)
                    .HasMaxLength(20)
                    .HasColumnName("PBS_ShortName");
                entity.Property(e => e.PbsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PBS_TimeStamp");

                entity.HasOne(d => d.PbsLocalizableEntry).WithMany(p => p.PurchaseBacklogStatuses)
                    .HasForeignKey(d => d.PbsLocalizableEntryId)
                    .HasConstraintName("FK_PurchaseBacklogStatuses_LocalizableEntries");
            });

            modelBuilder.Entity<PurchaseBacklogStatusHistory>(entity =>
            {
                entity.HasKey(e => e.PbshId);

                entity.ToTable("PurchaseBacklogStatusHistory", "fin", tb =>
                {
                    tb.HasTrigger("td_PurchaseBacklogStatusHistory");
                    tb.HasTrigger("ti_PurchaseBacklogStatusHistory");
                    tb.HasTrigger("tu_PurchaseBacklogStatusHistory");
                });

                entity.HasIndex(e => new { e.PbshPurchaseBacklogId, e.PbshPurchaseBacklogStatusId }, "IX_PurchaseBacklogStatusHistory_PurchaseBacklog_PurchaseBacklogStatus_INCL");

                entity.HasIndex(e => new { e.PbshPurchaseBacklogId, e.PbshPurchaseBacklogStatusId, e.PbshStartDate }, "IX_PurchaseBacklogStatusHistory_PurchaseBacklog_PurchaseBacklogStatus_StartDate").IsDescending(false, false, true);

                entity.Property(e => e.PbshId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PBSH_Id");
                entity.Property(e => e.PbshCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PBSH_CreatedBy");
                entity.Property(e => e.PbshCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PBSH_CreatedDate");
                entity.Property(e => e.PbshEmployeeId).HasColumnName("PBSH_Employee_Id");
                entity.Property(e => e.PbshLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PBSH_LastModifiedBy");
                entity.Property(e => e.PbshLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PBSH_LastModifiedDate");
                entity.Property(e => e.PbshPurchaseBacklogId).HasColumnName("PBSH_PurchaseBacklog_Id");
                entity.Property(e => e.PbshPurchaseBacklogStatusId).HasColumnName("PBSH_PurchaseBacklogStatus_Id");
                entity.Property(e => e.PbshStartDate).HasColumnName("PBSH_StartDate");
                entity.Property(e => e.PbshTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PBSH_TimeStamp");

                entity.HasOne(d => d.PbshEmployee).WithMany(p => p.PurchaseBacklogStatusHistories)
                    .HasForeignKey(d => d.PbshEmployeeId)
                    .HasConstraintName("FK_PurchaseBacklogStatusHistory_Employees");

                entity.HasOne(d => d.PbshPurchaseBacklog).WithMany(p => p.PurchaseBacklogStatusHistories)
                    .HasForeignKey(d => d.PbshPurchaseBacklogId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseBacklogStatusHistory_PurchaseBacklogs");

                entity.HasOne(d => d.PbshPurchaseBacklogStatus).WithMany(p => p.PurchaseBacklogStatusHistories)
                    .HasForeignKey(d => d.PbshPurchaseBacklogStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseBacklogStatusHistory_PurchaseBacklogStatuses");
            });

            modelBuilder.Entity<PurchaseBacklogSummariesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseBacklogSummariesView", "fin");

                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DossierAssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.PaymentReference).HasMaxLength(250);
                entity.Property(e => e.PurchaseBacklogStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseBacklogStatusName).HasMaxLength(250);
                entity.Property(e => e.SourceTypeId).HasMaxLength(250);
                entity.Property(e => e.SupplierCity).HasMaxLength(250);
                entity.Property(e => e.SupplierInvoiceDate).HasColumnType("date");
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.SupplierNumber)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SupplierPostalCode).HasMaxLength(10);
                entity.Property(e => e.SupplierVatNumber).HasMaxLength(50);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.WorkingOrderNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<PurchaseBacklogValidation>(entity =>
            {
                entity.HasKey(e => e.PbvId);

                entity.ToTable("PurchaseBacklogValidations", "fin");

                entity.HasIndex(e => e.PbvPurchaseBacklogId, "IX_fin_PurchaseBacklogValidations_PBV_PurchaseBacklog_Id");

                entity.Property(e => e.PbvId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PBV_Id");
                entity.Property(e => e.PbvCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PBV_CreatedBy");
                entity.Property(e => e.PbvCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PBV_CreatedDate");
                entity.Property(e => e.PbvIsValid).HasColumnName("PBV_IsValid");
                entity.Property(e => e.PbvLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PBV_LastModifiedBy");
                entity.Property(e => e.PbvLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PBV_LastModifiedDate");
                entity.Property(e => e.PbvPurchaseBacklogId).HasColumnName("PBV_PurchaseBacklog_Id");
                entity.Property(e => e.PbvTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PBV_TimeStamp");

                entity.HasOne(d => d.PbvPurchaseBacklog).WithMany(p => p.PurchaseBacklogValidations)
                    .HasForeignKey(d => d.PbvPurchaseBacklogId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseBacklogValidations_PurchaseBacklog");
            });

            modelBuilder.Entity<PurchaseBacklogValidationLine>(entity =>
            {
                entity.HasKey(e => e.PvlId);

                entity.ToTable("PurchaseBacklogValidationLine", "fin");

                entity.HasIndex(e => e.PvlPurchaseBacklogValidationId, "IX_fin_PurchaseBacklogValidationLine_PurchaseBacklogValidation");

                entity.Property(e => e.PvlId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PVL_Id");
                entity.Property(e => e.PvlCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PVL_CreatedBy");
                entity.Property(e => e.PvlCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PVL_CreatedDate");
                entity.Property(e => e.PvlIsValid).HasColumnName("PVL_IsValid");
                entity.Property(e => e.PvlLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PVL_LastModifiedBy");
                entity.Property(e => e.PvlLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PVL_LastModifiedDate");
                entity.Property(e => e.PvlLineNumber).HasColumnName("PVL_LineNumber");
                entity.Property(e => e.PvlMessage).HasColumnName("PVL_Message");
                entity.Property(e => e.PvlPurchaseBacklogValidationId).HasColumnName("PVL_PurchaseBacklogValidation_Id");
                entity.Property(e => e.PvlRuleType).HasColumnName("PVL_RuleType");
                entity.Property(e => e.PvlTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PVL_TimeStamp");

                entity.HasOne(d => d.PvlPurchaseBacklogValidation).WithMany(p => p.PurchaseBacklogValidationLines)
                    .HasForeignKey(d => d.PvlPurchaseBacklogValidationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseBacklogValidationLine_PurchaseBacklogValidation");
            });

            modelBuilder.Entity<PurchaseBacklogWorkingOrder>(entity =>
            {
                entity.HasKey(e => e.PbwoId);

                entity.ToTable("PurchaseBacklogWorkingOrders", "fin");

                entity.Property(e => e.PbwoId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PBWO_Id");
                entity.Property(e => e.PbwoCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PBWO_CreatedBy");
                entity.Property(e => e.PbwoCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PBWO_CreatedDate");
                entity.Property(e => e.PbwoInactive).HasColumnName("PBWO_Inactive");
                entity.Property(e => e.PbwoLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PBWO_LastModifiedBy");
                entity.Property(e => e.PbwoLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PBWO_LastModifiedDate");
                entity.Property(e => e.PbwoPurchaseBacklogId).HasColumnName("PBWO_PurchaseBacklog_Id");
                entity.Property(e => e.PbwoTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PBWO_TimeStamp");
                entity.Property(e => e.PbwoWorkingOrderId).HasColumnName("PBWO_WorkingOrder_Id");

                entity.HasOne(d => d.PbwoPurchaseBacklog).WithMany(p => p.PurchaseBacklogWorkingOrders)
                    .HasForeignKey(d => d.PbwoPurchaseBacklogId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseBacklogWorkingOrders_PurchaseBacklogs");

                entity.HasOne(d => d.PbwoWorkingOrder).WithMany(p => p.PurchaseBacklogWorkingOrders)
                    .HasForeignKey(d => d.PbwoWorkingOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseBacklogWorkingOrders_WorkingOrders");
            });

            modelBuilder.Entity<PurchaseBacklogWorkingOrderLineCost>(entity =>
            {
                entity.HasKey(e => e.PbwoId);

                entity.ToTable("PurchaseBacklogWorkingOrderLineCosts", "fin");

                entity.Property(e => e.PbwoId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PBWO_Id");
                entity.Property(e => e.PbwoCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PBWO_CreatedBy");
                entity.Property(e => e.PbwoCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PBWO_CreatedDate");
                entity.Property(e => e.PbwoInactive).HasColumnName("PBWO_Inactive");
                entity.Property(e => e.PbwoLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PBWO_LastModifiedBy");
                entity.Property(e => e.PbwoLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PBWO_LastModifiedDate");
                entity.Property(e => e.PbwoPurchaseBacklogId).HasColumnName("PBWO_PurchaseBacklog_Id");
                entity.Property(e => e.PbwoTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PBWO_TimeStamp");
                entity.Property(e => e.PbwoWorkingOrderLineCostId).HasColumnName("PBWO_WorkingOrderLineCost_Id");

                entity.HasOne(d => d.PbwoPurchaseBacklog).WithMany(p => p.PurchaseBacklogWorkingOrderLineCosts)
                    .HasForeignKey(d => d.PbwoPurchaseBacklogId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseBacklogWorkingOrderLineCosts_PurchaseBacklogs");

                entity.HasOne(d => d.PbwoWorkingOrderLineCost).WithMany(p => p.PurchaseBacklogWorkingOrderLineCosts)
                    .HasForeignKey(d => d.PbwoWorkingOrderLineCostId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseBacklogWorkingOrderLineCosts_WorkingOrderLineCosts");
            });

            modelBuilder.Entity<PurchaseBacklogsCancelledView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseBacklogsCancelledView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DossierAssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SupplierInvoiceDate).HasColumnType("date");
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PurchaseBacklogsIncorrectCountView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseBacklogsIncorrectCountView", "fin");

                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.Id).HasColumnName("ID");
            });

            modelBuilder.Entity<PurchaseBacklogsIncorrectView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseBacklogsIncorrectView", "fin");

                entity.Property(e => e.AssistancePlanIds)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(20);
                entity.Property(e => e.AssistancePlanNumbers).HasMaxLength(4000);
                entity.Property(e => e.BacklogsNumber).HasMaxLength(20);
                entity.Property(e => e.BlockedAmount).HasColumnType("money");
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CultureCode).HasMaxLength(10);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DossierAssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierTypeCode).HasMaxLength(10);
                entity.Property(e => e.DossierTypeName).HasMaxLength(250);
                entity.Property(e => e.EmployeeName).HasMaxLength(250);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InUseBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.PayeeAccountHolderName).HasMaxLength(250);
                entity.Property(e => e.PayeeAccountNumber).HasMaxLength(34);
                entity.Property(e => e.PayeeBankName).HasMaxLength(250);
                entity.Property(e => e.PayeeBic)
                    .HasMaxLength(11)
                    .HasColumnName("PayeeBIC");
                entity.Property(e => e.PayeeCity).HasMaxLength(250);
                entity.Property(e => e.PayeeCountryCode).HasMaxLength(3);
                entity.Property(e => e.PayeeHouseNo).HasMaxLength(10);
                entity.Property(e => e.PayeeHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.PayeeIban)
                    .HasMaxLength(34)
                    .HasColumnName("PayeeIBAN");
                entity.Property(e => e.PayeeName).HasMaxLength(250);
                entity.Property(e => e.PayeePostalCode).HasMaxLength(10);
                entity.Property(e => e.PayeeProvince).HasMaxLength(250);
                entity.Property(e => e.PayeeStreetName).HasMaxLength(250);
                entity.Property(e => e.PaymentConditionCode).HasMaxLength(10);
                entity.Property(e => e.PaymentConditionName).HasMaxLength(250);
                entity.Property(e => e.PaymentMethodCode).HasMaxLength(10);
                entity.Property(e => e.PaymentMethodName).HasMaxLength(250);
                entity.Property(e => e.PaymentReference).HasMaxLength(250);
                entity.Property(e => e.PurchaseBacklogStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseBacklogStatusName).HasMaxLength(250);
                entity.Property(e => e.RecipientName).HasMaxLength(250);
                entity.Property(e => e.SourceFrom).HasMaxLength(250);
                entity.Property(e => e.SourceSubject).HasMaxLength(250);
                entity.Property(e => e.SourceTo).HasMaxLength(250);
                entity.Property(e => e.SourceTypeId).HasMaxLength(20);
                entity.Property(e => e.SupplierAccountNumber).HasMaxLength(34);
                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SupplierIban)
                    .HasMaxLength(34)
                    .HasColumnName("SupplierIBAN");
                entity.Property(e => e.SupplierInvoiceDate).HasColumnType("date");
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxExemptedAmount).HasColumnType("money");
                entity.Property(e => e.TaxImportAmount).HasColumnType("money");
                entity.Property(e => e.TaxReversedChargeAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.WorkingOrderIds)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
                entity.Property(e => e.WorkingOrderNumber).HasMaxLength(20);
                entity.Property(e => e.WorkingOrderNumbers).HasMaxLength(4000);
            });

            modelBuilder.Entity<PurchaseBacklogsNewView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseBacklogsNewView", "fin");

                entity.Property(e => e.AssistancePlanIds)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(20);
                entity.Property(e => e.AssistancePlanNumbers).HasMaxLength(4000);
                entity.Property(e => e.BacklogsNumber).HasMaxLength(20);
                entity.Property(e => e.BlockedAmount).HasColumnType("money");
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CultureCode).HasMaxLength(10);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DossierAssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierTypeCode).HasMaxLength(10);
                entity.Property(e => e.DossierTypeName).HasMaxLength(250);
                entity.Property(e => e.EmployeeName).HasMaxLength(250);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InUseBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.PayeeAccountHolderName).HasMaxLength(250);
                entity.Property(e => e.PayeeAccountNumber).HasMaxLength(34);
                entity.Property(e => e.PayeeBankName).HasMaxLength(250);
                entity.Property(e => e.PayeeBic)
                    .HasMaxLength(11)
                    .HasColumnName("PayeeBIC");
                entity.Property(e => e.PayeeCity).HasMaxLength(250);
                entity.Property(e => e.PayeeCountryCode).HasMaxLength(3);
                entity.Property(e => e.PayeeHouseNo).HasMaxLength(10);
                entity.Property(e => e.PayeeHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.PayeeIban)
                    .HasMaxLength(34)
                    .HasColumnName("PayeeIBAN");
                entity.Property(e => e.PayeeName).HasMaxLength(250);
                entity.Property(e => e.PayeePostalCode).HasMaxLength(10);
                entity.Property(e => e.PayeeProvince).HasMaxLength(250);
                entity.Property(e => e.PayeeStreetName).HasMaxLength(250);
                entity.Property(e => e.PaymentConditionCode).HasMaxLength(10);
                entity.Property(e => e.PaymentConditionName).HasMaxLength(250);
                entity.Property(e => e.PaymentMethodCode).HasMaxLength(10);
                entity.Property(e => e.PaymentMethodName).HasMaxLength(250);
                entity.Property(e => e.PaymentReference).HasMaxLength(250);
                entity.Property(e => e.PurchaseBacklogStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseBacklogStatusName).HasMaxLength(250);
                entity.Property(e => e.RecipientName).HasMaxLength(250);
                entity.Property(e => e.SourceFrom).HasMaxLength(250);
                entity.Property(e => e.SourceSubject).HasMaxLength(250);
                entity.Property(e => e.SourceTo).HasMaxLength(250);
                entity.Property(e => e.SourceTypeId).HasMaxLength(20);
                entity.Property(e => e.SupplierAccountNumber).HasMaxLength(34);
                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SupplierIban)
                    .HasMaxLength(34)
                    .HasColumnName("SupplierIBAN");
                entity.Property(e => e.SupplierInvoiceDate).HasColumnType("date");
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxExemptedAmount).HasColumnType("money");
                entity.Property(e => e.TaxImportAmount).HasColumnType("money");
                entity.Property(e => e.TaxReversedChargeAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.WorkingOrderIds)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
                entity.Property(e => e.WorkingOrderNumber).HasMaxLength(20);
                entity.Property(e => e.WorkingOrderNumbers).HasMaxLength(4000);
            });

            modelBuilder.Entity<PurchaseBacklogsNextToProcessView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseBacklogsNextToProcessView", "fin");

                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.InUseBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.PurchaseBacklogStatusCode).HasMaxLength(20);
            });

            modelBuilder.Entity<PurchaseBacklogsPendingEntryCountView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseBacklogsPendingEntryCountView", "fin");

                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.Id).HasColumnName("ID");
            });

            modelBuilder.Entity<PurchaseBacklogsPendingEntryView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseBacklogsPendingEntryView", "fin");

                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(20);
                entity.Property(e => e.BacklogsNumber).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DossierAssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InUseBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.PayeeName).HasMaxLength(250);
                entity.Property(e => e.PaymentReference).HasMaxLength(250);
                entity.Property(e => e.PurchaseBacklogStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseBacklogStatusName).HasMaxLength(250);
                entity.Property(e => e.SourceFrom).HasMaxLength(250);
                entity.Property(e => e.SourceSubject).HasMaxLength(250);
                entity.Property(e => e.SourceTo).HasMaxLength(250);
                entity.Property(e => e.SourceTypeId).HasMaxLength(20);
                entity.Property(e => e.SupplierAccountNumber).HasMaxLength(34);
                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SupplierIban)
                    .HasMaxLength(34)
                    .HasColumnName("SupplierIBAN");
                entity.Property(e => e.SupplierInvoiceDate).HasColumnType("date");
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.WorkingOrderNumbers).HasMaxLength(20);
            });

            modelBuilder.Entity<PurchaseBacklogsPendingIndexCountView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseBacklogsPendingIndexCountView", "fin");

                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.Id).HasColumnName("ID");
            });

            modelBuilder.Entity<PurchaseBacklogsPendingIndexView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseBacklogsPendingIndexView", "fin");

                entity.Property(e => e.AssistancePlanIds)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(20);
                entity.Property(e => e.AssistancePlanNumbers).HasMaxLength(4000);
                entity.Property(e => e.BacklogsNumber).HasMaxLength(20);
                entity.Property(e => e.BlockedAmount).HasColumnType("money");
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CultureCode).HasMaxLength(10);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DossierAssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierTypeCode).HasMaxLength(10);
                entity.Property(e => e.DossierTypeName).HasMaxLength(250);
                entity.Property(e => e.EmployeeName).HasMaxLength(250);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InUseBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.PayeeAccountHolderName).HasMaxLength(250);
                entity.Property(e => e.PayeeAccountNumber).HasMaxLength(34);
                entity.Property(e => e.PayeeBankName).HasMaxLength(250);
                entity.Property(e => e.PayeeBic)
                    .HasMaxLength(11)
                    .HasColumnName("PayeeBIC");
                entity.Property(e => e.PayeeCity).HasMaxLength(250);
                entity.Property(e => e.PayeeCountryCode).HasMaxLength(3);
                entity.Property(e => e.PayeeHouseNo).HasMaxLength(10);
                entity.Property(e => e.PayeeHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.PayeeIban)
                    .HasMaxLength(34)
                    .HasColumnName("PayeeIBAN");
                entity.Property(e => e.PayeeName).HasMaxLength(250);
                entity.Property(e => e.PayeePostalCode).HasMaxLength(10);
                entity.Property(e => e.PayeeProvince).HasMaxLength(250);
                entity.Property(e => e.PayeeStreetName).HasMaxLength(250);
                entity.Property(e => e.PaymentConditionCode).HasMaxLength(10);
                entity.Property(e => e.PaymentConditionName).HasMaxLength(250);
                entity.Property(e => e.PaymentMethodCode).HasMaxLength(10);
                entity.Property(e => e.PaymentMethodName).HasMaxLength(250);
                entity.Property(e => e.PaymentReference).HasMaxLength(250);
                entity.Property(e => e.PurchaseBacklogStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseBacklogStatusName).HasMaxLength(250);
                entity.Property(e => e.RecipientName).HasMaxLength(250);
                entity.Property(e => e.SourceFrom).HasMaxLength(250);
                entity.Property(e => e.SourceSubject).HasMaxLength(250);
                entity.Property(e => e.SourceTo).HasMaxLength(250);
                entity.Property(e => e.SourceTypeId).HasMaxLength(20);
                entity.Property(e => e.SupplierAccountNumber).HasMaxLength(34);
                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SupplierIban)
                    .HasMaxLength(34)
                    .HasColumnName("SupplierIBAN");
                entity.Property(e => e.SupplierInvoiceDate).HasColumnType("date");
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxExemptedAmount).HasColumnType("money");
                entity.Property(e => e.TaxImportAmount).HasColumnType("money");
                entity.Property(e => e.TaxReversedChargeAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.WorkingOrderIds)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
                entity.Property(e => e.WorkingOrderNumber).HasMaxLength(20);
                entity.Property(e => e.WorkingOrderNumbers).HasMaxLength(4000);
            });

            modelBuilder.Entity<PurchaseBacklogsPendingInvestigationCountView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseBacklogsPendingInvestigationCountView", "fin");

                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.Id).HasColumnName("ID");
            });

            modelBuilder.Entity<PurchaseBacklogsPendingInvestigationView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseBacklogsPendingInvestigationView", "fin");

                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(20);
                entity.Property(e => e.BacklogsNumber).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DossierAssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InUseBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.PayeeName).HasMaxLength(250);
                entity.Property(e => e.PaymentReference).HasMaxLength(250);
                entity.Property(e => e.PurchaseBacklogStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseBacklogStatusName).HasMaxLength(250);
                entity.Property(e => e.SourceFrom).HasMaxLength(250);
                entity.Property(e => e.SourceSubject).HasMaxLength(250);
                entity.Property(e => e.SourceTo).HasMaxLength(250);
                entity.Property(e => e.SourceTypeId).HasMaxLength(20);
                entity.Property(e => e.SupplierAccountNumber).HasMaxLength(34);
                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SupplierIban)
                    .HasMaxLength(34)
                    .HasColumnName("SupplierIBAN");
                entity.Property(e => e.SupplierInvoiceDate).HasColumnType("date");
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.WorkingOrderNumbers).HasMaxLength(20);
            });

            modelBuilder.Entity<PurchaseBacklogsPendingRegistrationView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseBacklogsPendingRegistrationView", "fin");

                entity.Property(e => e.AssistancePlanIds)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(20);
                entity.Property(e => e.AssistancePlanNumbers).HasMaxLength(4000);
                entity.Property(e => e.BacklogsNumber).HasMaxLength(20);
                entity.Property(e => e.BlockedAmount).HasColumnType("money");
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CultureCode).HasMaxLength(10);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DossierAssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierTypeCode).HasMaxLength(10);
                entity.Property(e => e.DossierTypeName).HasMaxLength(250);
                entity.Property(e => e.EmployeeName).HasMaxLength(250);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InUseBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.PayeeAccountHolderName).HasMaxLength(250);
                entity.Property(e => e.PayeeAccountNumber).HasMaxLength(34);
                entity.Property(e => e.PayeeBankName).HasMaxLength(250);
                entity.Property(e => e.PayeeBic)
                    .HasMaxLength(11)
                    .HasColumnName("PayeeBIC");
                entity.Property(e => e.PayeeCity).HasMaxLength(250);
                entity.Property(e => e.PayeeCountryCode).HasMaxLength(3);
                entity.Property(e => e.PayeeHouseNo).HasMaxLength(10);
                entity.Property(e => e.PayeeHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.PayeeIban)
                    .HasMaxLength(34)
                    .HasColumnName("PayeeIBAN");
                entity.Property(e => e.PayeeName).HasMaxLength(250);
                entity.Property(e => e.PayeePostalCode).HasMaxLength(10);
                entity.Property(e => e.PayeeProvince).HasMaxLength(250);
                entity.Property(e => e.PayeeStreetName).HasMaxLength(250);
                entity.Property(e => e.PaymentConditionCode).HasMaxLength(10);
                entity.Property(e => e.PaymentConditionName).HasMaxLength(250);
                entity.Property(e => e.PaymentMethodCode).HasMaxLength(10);
                entity.Property(e => e.PaymentMethodName).HasMaxLength(250);
                entity.Property(e => e.PaymentReference).HasMaxLength(250);
                entity.Property(e => e.PurchaseBacklogStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseBacklogStatusName).HasMaxLength(250);
                entity.Property(e => e.RecipientName).HasMaxLength(250);
                entity.Property(e => e.SourceFrom).HasMaxLength(250);
                entity.Property(e => e.SourceSubject).HasMaxLength(250);
                entity.Property(e => e.SourceTo).HasMaxLength(250);
                entity.Property(e => e.SourceTypeId).HasMaxLength(250);
                entity.Property(e => e.SupplierAccountNumber).HasMaxLength(34);
                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SupplierIban)
                    .HasMaxLength(34)
                    .HasColumnName("SupplierIBAN");
                entity.Property(e => e.SupplierInvoiceDate).HasColumnType("date");
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxExemptedAmount).HasColumnType("money");
                entity.Property(e => e.TaxImportAmount).HasColumnType("money");
                entity.Property(e => e.TaxReversedChargeAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.WorkingOrderIds).HasMaxLength(4000);
                entity.Property(e => e.WorkingOrderNumber).HasMaxLength(20);
                entity.Property(e => e.WorkingOrderNumbers).HasMaxLength(4000);
            });

            modelBuilder.Entity<PurchaseBacklogsProcessedView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseBacklogsProcessedView", "fin");

                entity.Property(e => e.AssistancePlanIds)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(20);
                entity.Property(e => e.AssistancePlanNumbers).HasMaxLength(4000);
                entity.Property(e => e.BacklogsNumber).HasMaxLength(20);
                entity.Property(e => e.BlockedAmount).HasColumnType("money");
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CultureCode).HasMaxLength(10);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DossierAssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierTypeCode).HasMaxLength(10);
                entity.Property(e => e.DossierTypeName).HasMaxLength(250);
                entity.Property(e => e.EmployeeName).HasMaxLength(250);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InUseBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.PayeeAccountHolderName).HasMaxLength(250);
                entity.Property(e => e.PayeeAccountNumber).HasMaxLength(34);
                entity.Property(e => e.PayeeBankName).HasMaxLength(250);
                entity.Property(e => e.PayeeBic)
                    .HasMaxLength(11)
                    .HasColumnName("PayeeBIC");
                entity.Property(e => e.PayeeCity).HasMaxLength(250);
                entity.Property(e => e.PayeeCountryCode).HasMaxLength(3);
                entity.Property(e => e.PayeeHouseNo).HasMaxLength(10);
                entity.Property(e => e.PayeeHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.PayeeIban)
                    .HasMaxLength(34)
                    .HasColumnName("PayeeIBAN");
                entity.Property(e => e.PayeeName).HasMaxLength(250);
                entity.Property(e => e.PayeePostalCode).HasMaxLength(10);
                entity.Property(e => e.PayeeProvince).HasMaxLength(250);
                entity.Property(e => e.PayeeStreetName).HasMaxLength(250);
                entity.Property(e => e.PaymentConditionCode).HasMaxLength(10);
                entity.Property(e => e.PaymentConditionName).HasMaxLength(250);
                entity.Property(e => e.PaymentMethodCode).HasMaxLength(10);
                entity.Property(e => e.PaymentMethodName).HasMaxLength(250);
                entity.Property(e => e.PaymentReference).HasMaxLength(250);
                entity.Property(e => e.PurchaseBacklogStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseBacklogStatusName).HasMaxLength(250);
                entity.Property(e => e.RecipientName).HasMaxLength(250);
                entity.Property(e => e.SourceFrom).HasMaxLength(250);
                entity.Property(e => e.SourceSubject).HasMaxLength(250);
                entity.Property(e => e.SourceTo).HasMaxLength(250);
                entity.Property(e => e.SourceTypeId).HasMaxLength(20);
                entity.Property(e => e.SupplierAccountNumber).HasMaxLength(34);
                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SupplierIban)
                    .HasMaxLength(34)
                    .HasColumnName("SupplierIBAN");
                entity.Property(e => e.SupplierInvoiceDate).HasColumnType("date");
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxCountryCode).HasMaxLength(3);
                entity.Property(e => e.TaxExemptedAmount).HasColumnType("money");
                entity.Property(e => e.TaxImportAmount).HasColumnType("money");
                entity.Property(e => e.TaxReversedChargeAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.WorkingOrderIds)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
                entity.Property(e => e.WorkingOrderNumber).HasMaxLength(20);
                entity.Property(e => e.WorkingOrderNumbers).HasMaxLength(4000);
            });

            modelBuilder.Entity<PurchaseBacklogsUnprocessedReportsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseBacklogsUnprocessedReportsView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.PaymentReference).HasMaxLength(250);
                entity.Property(e => e.PurchaseBacklogStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseBacklogStatusName).HasMaxLength(250);
                entity.Property(e => e.SupplierInvoiceDate).HasColumnType("date");
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.SupplierNumber)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PurchaseBacklogsUnprocessedView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseBacklogsUnprocessedView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.PaymentReference).HasMaxLength(250);
                entity.Property(e => e.PurchaseBacklogStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseBacklogStatusName).HasMaxLength(250);
                entity.Property(e => e.SupplierInvoiceDate).HasColumnType("date");
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.SupplierNumber)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PurchaseBacklogsUnprocessedWithPurchaseInvoicesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseBacklogsUnprocessedWithPurchaseInvoicesView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.StatusCode).HasMaxLength(20);
                entity.Property(e => e.StatusName).HasMaxLength(250);
                entity.Property(e => e.SupplierInvoiceDate).HasColumnType("date");
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.SupplierNumber)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PurchaseBacklogsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseBacklogsView", "fin");

                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(20);
                entity.Property(e => e.BacklogsNumber).HasMaxLength(20);
                entity.Property(e => e.BlockedAmount).HasColumnType("money");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CultureCode).HasMaxLength(10);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DossierAssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InUseBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PayeeName).HasMaxLength(250);
                entity.Property(e => e.PaymentReference).HasMaxLength(250);
                entity.Property(e => e.PurchaseBacklogStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseBacklogStatusName).HasMaxLength(250);
                entity.Property(e => e.RecipientName).HasMaxLength(250);
                entity.Property(e => e.SourceFrom).HasMaxLength(250);
                entity.Property(e => e.SourceSubject).HasMaxLength(250);
                entity.Property(e => e.SourceTo).HasMaxLength(250);
                entity.Property(e => e.SourceTypeId).HasMaxLength(20);
                entity.Property(e => e.SupplierAccountNumber).HasMaxLength(34);
                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SupplierIban)
                    .HasMaxLength(34)
                    .HasColumnName("SupplierIBAN");
                entity.Property(e => e.SupplierInvoiceDate).HasColumnType("date");
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxExemptedAmount).HasColumnType("money");
                entity.Property(e => e.TaxImportAmount).HasColumnType("money");
                entity.Property(e => e.TaxReversedChargeAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PurchaseInvoice>(entity =>
            {
                entity.HasKey(e => e.PivId);

                entity.ToTable("PurchaseInvoices", "fin");

                entity.HasIndex(e => e.PivAssistancePlanId, "IX_PurchaseInvoices_PIV_AssistancePlan_Id");

                entity.HasIndex(e => new { e.PivDossierId, e.PivLegalEntityId }, "IX_PurchaseInvoices_PIV_Dossier_Id_PIV_LegalEntity_Id");

                entity.HasIndex(e => e.PivCreatedDate, "IX_fin_PurchaseInvoices_CreatedDate__INCL");

                entity.HasIndex(e => new { e.PivCurrentStatusCode, e.PivIsMarkedForReallocation }, "IX_fin_PurchaseInvoices_CurrentStatusCode_IsMarkedForReallocation_INCL");

                entity.HasIndex(e => new { e.PivCurrentStatusCode, e.PivOpenAmount }, "IX_fin_PurchaseInvoices_CurrentStatusCode_OpenAmount__INCL");

                entity.HasIndex(e => e.PivDebitPurchaseInvoiceId, "IX_fin_PurchaseInvoices_DebitPurchaseInvoice__INCL");

                entity.HasIndex(e => new { e.PivEntryNumber, e.PivEntrySystem, e.PivGrossAmount }, "IX_fin_PurchaseInvoices_EntryNumber_EntrySystem_GrossAmount");

                entity.HasIndex(e => new { e.PivEntrySystem, e.PivCreatedDate }, "IX_fin_PurchaseInvoices_EntrySystem_CreatedDate__INCL");

                entity.HasIndex(e => new { e.PivEntrySystem, e.PivCurrentStatusCode, e.PivOpenAmount }, "IX_fin_PurchaseInvoices_EntrySystem_CurrentStatusCode_OpenAmount__INCL");

                entity.HasIndex(e => new { e.PivEntrySystem, e.PivLegalEntityId, e.PivCreditorId, e.PivYourReference }, "IX_fin_PurchaseInvoices_EntrySystem_LegalEntity_Creditor_YourReference__INCL");

                entity.HasIndex(e => new { e.PivEntrySystem, e.PivLegalEntityId, e.PivIsMarkedForReallocation, e.PivCurrentStatusCode }, "IX_fin_PurchaseInvoices_EntrySystem_LegalEntity_Id_IsMarkedForReallocation_CurrentStatusCode__INCL");

                entity.HasIndex(e => new { e.PivEntrySystem, e.PivLegalEntityId, e.PivIsMarkedForReallocation, e.PivCreatedDate }, "IX_fin_PurchaseInvoices_EntrySystem_LegalEntity_IsMarkedForReallocation_CreatedDate__INCL");

                entity.HasIndex(e => new { e.PivEntrySystem, e.PivLegalEntityId, e.PivOpenAmount }, "IX_fin_PurchaseInvoices_EntrySystem_LegalEntity_OpenAmount__INCL");

                entity.HasIndex(e => new { e.PivEntrySystem, e.PivLegalEntityId, e.PivYourReference }, "IX_fin_PurchaseInvoices_EntrySystem_LegalEntity_YourReference__INCL");

                entity.HasIndex(e => new { e.PivInvoiceTypeId, e.PivCreatedDate }, "IX_fin_PurchaseInvoices_InvoiceType_CreatedDate__INCL");

                entity.HasIndex(e => new { e.PivIsCredit, e.PivDebitPurchaseInvoiceId }, "IX_fin_PurchaseInvoices_IsCredit_DebitPurchaseInvoice__INCL");

                entity.HasIndex(e => new { e.PivLegalEntityId, e.PivCurrentStatusCode, e.PivOpenAmount }, "IX_fin_PurchaseInvoices_LegalEntity_Id_CurrentStatusCode_OpenAmount__INCL");

                entity.HasIndex(e => new { e.PivLegalEntityId, e.PivIsMarkedForReallocation, e.PivCreatedDate }, "IX_fin_PurchaseInvoices_LegalEntity_IsMarkedForReallocation_CreatedDate__INCL");

                entity.HasIndex(e => new { e.PivLegalEntityId, e.PivOpenAmount }, "IX_fin_PurchaseInvoices_LegalEntity_OpenAmount__INCL");

                entity.HasIndex(e => e.PivNumber, "IX_fin_PurchaseInvoices_Number");

                entity.HasIndex(e => e.PivOpenAmount, "IX_fin_PurchaseInvoices_OpenAmount__INCL");

                entity.HasIndex(e => e.PivPurchaseBacklogId, "IX_fin_PurchaseInvoices_PurchaseBacklog__INCL");

                entity.HasIndex(e => e.PivSupplierId, "IX_fin_PurchaseInvoices_Supplier");

                entity.HasIndex(e => new { e.PivSupplierInvoiceNumber, e.PivSupplierId }, "IX_fin_PurchaseInvoices_SupplierInvoiceNumber_PIV_Supplier");

                entity.Property(e => e.PivId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PIV_Id");
                entity.Property(e => e.PivAssistancePlanId).HasColumnName("PIV_AssistancePlan_Id");
                entity.Property(e => e.PivBlockedAmount)
                    .HasColumnType("money")
                    .HasColumnName("PIV_BlockedAmount");
                entity.Property(e => e.PivBlockedBankAccountId).HasColumnName("PIV_BlockedBankAccount_Id");
                entity.Property(e => e.PivBookingDate)
                    .HasColumnType("date")
                    .HasColumnName("PIV_BookingDate");
                entity.Property(e => e.PivBookingNumber)
                    .HasMaxLength(10)
                    .HasColumnName("PIV_BookingNumber");
                entity.Property(e => e.PivCostCenterId).HasColumnName("PIV_CostCenter_Id");
                entity.Property(e => e.PivCostUnitId).HasColumnName("PIV_CostUnit_Id");
                entity.Property(e => e.PivCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PIV_CreatedBy");
                entity.Property(e => e.PivCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PIV_CreatedDate");
                entity.Property(e => e.PivCreditReason)
                    .HasMaxLength(250)
                    .HasColumnName("PIV_CreditReason");
                entity.Property(e => e.PivCreditorId).HasColumnName("PIV_Creditor_Id");
                entity.Property(e => e.PivCultureCode)
                    .HasMaxLength(10)
                    .HasColumnName("PIV_CultureCode");
                entity.Property(e => e.PivCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("PIV_CurrencyCode");
                entity.Property(e => e.PivCurrentStatusCode)
                    .HasMaxLength(20)
                    .HasColumnName("PIV_CurrentStatusCode");
                entity.Property(e => e.PivCurrentStatusHistoryId).HasColumnName("PIV_CurrentStatusHistory_Id");
                entity.Property(e => e.PivCurrentStatusHistoryStartDate).HasColumnName("PIV_CurrentStatusHistoryStartDate");
                entity.Property(e => e.PivDebitEntryNumber)
                    .HasMaxLength(36)
                    .HasColumnName("PIV_DebitEntryNumber");
                entity.Property(e => e.PivDebitPurchaseInvoiceId).HasColumnName("PIV_DebitPurchaseInvoice_Id");
                entity.Property(e => e.PivDescription)
                    .HasMaxLength(250)
                    .HasColumnName("PIV_Description");
                entity.Property(e => e.PivDossierAssignmentId).HasColumnName("PIV_DossierAssignment_Id");
                entity.Property(e => e.PivDossierAssignmentNumber)
                    .HasMaxLength(20)
                    .HasColumnName("PIV_DossierAssignmentNumber");
                entity.Property(e => e.PivDossierId).HasColumnName("PIV_Dossier_Id");
                entity.Property(e => e.PivDossierNumber)
                    .HasMaxLength(20)
                    .HasColumnName("PIV_DossierNumber");
                entity.Property(e => e.PivDossierPartyId).HasColumnName("PIV_DossierParty_Id");
                entity.Property(e => e.PivDueDate).HasColumnName("PIV_DueDate");
                entity.Property(e => e.PivEmployeeId).HasColumnName("PIV_Employee_Id");
                entity.Property(e => e.PivEntryBatch)
                    .HasMaxLength(36)
                    .HasColumnName("PIV_EntryBatch");
                entity.Property(e => e.PivEntryNumber)
                    .HasMaxLength(36)
                    .HasColumnName("PIV_EntryNumber");
                entity.Property(e => e.PivEntrySystem)
                    .HasMaxLength(10)
                    .HasColumnName("PIV_EntrySystem");
                entity.Property(e => e.PivExchangeRate).HasColumnName("PIV_ExchangeRate");
                entity.Property(e => e.PivExchangeRateId).HasColumnName("PIV_ExchangeRate_Id");
                entity.Property(e => e.PivFinancialBookingPeriodId).HasColumnName("PIV_FinancialBookingPeriod_Id");
                entity.Property(e => e.PivForeignToPaymentExchangeRate).HasColumnName("PIV_ForeignToPaymentExchangeRate");
                entity.Property(e => e.PivForeignToPaymentExchangeRateId).HasColumnName("PIV_ForeignToPaymentExchangeRate_Id");
                entity.Property(e => e.PivGrossAmount)
                    .HasColumnType("money")
                    .HasColumnName("PIV_GrossAmount");
                entity.Property(e => e.PivInvoiceDate).HasColumnName("PIV_InvoiceDate");
                entity.Property(e => e.PivInvoicePriorityTypeId).HasColumnName("PIV_InvoicePriorityType_Id");
                entity.Property(e => e.PivInvoiceTypeId).HasColumnName("PIV_InvoiceType_Id");
                entity.Property(e => e.PivIsCredit).HasColumnName("PIV_IsCredit");
                entity.Property(e => e.PivIsImported).HasColumnName("PIV_IsImported");
                entity.Property(e => e.PivIsIntercompany).HasColumnName("PIV_IsIntercompany");
                entity.Property(e => e.PivIsInvoice)
                    .IsRequired()
                    .HasDefaultValueSql("((1))")
                    .HasColumnName("PIV_IsInvoice");
                entity.Property(e => e.PivIsMarkedForReallocation).HasColumnName("PIV_IsMarkedForReallocation");
                entity.Property(e => e.PivIsPrinted).HasColumnName("PIV_IsPrinted");
                entity.Property(e => e.PivIsRecipientLegalEntity).HasColumnName("PIV_IsRecipientLegalEntity");
                entity.Property(e => e.PivJournalId)
                    .HasMaxLength(20)
                    .HasColumnName("PIV_Journal_Id");
                entity.Property(e => e.PivJsonEntryForm).HasColumnName("PIV_JsonEntryForm");
                entity.Property(e => e.PivLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PIV_LastModifiedBy");
                entity.Property(e => e.PivLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PIV_LastModifiedDate");
                entity.Property(e => e.PivLeadCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("PIV_LeadCurrencyCode");
                entity.Property(e => e.PivLegalEntityId).HasColumnName("PIV_LegalEntity_Id");
                entity.Property(e => e.PivNetAmount)
                    .HasColumnType("money")
                    .HasColumnName("PIV_NetAmount");
                entity.Property(e => e.PivNumber)
                    .HasMaxLength(20)
                    .HasColumnName("PIV_Number");
                entity.Property(e => e.PivOpenAmount)
                    .HasColumnType("money")
                    .HasColumnName("PIV_OpenAmount");
                entity.Property(e => e.PivOrganizationUnitId).HasColumnName("PIV_OrganizationUnit_Id");
                entity.Property(e => e.PivOurReference)
                    .HasMaxLength(250)
                    .HasColumnName("PIV_OurReference");
                entity.Property(e => e.PivPayeeAddressId).HasColumnName("PIV_PayeeAddress_Id");
                entity.Property(e => e.PivPayeeBankAccountId).HasColumnName("PIV_PayeeBankAccount_Id");
                entity.Property(e => e.PivPayeeName)
                    .HasMaxLength(250)
                    .HasColumnName("PIV_PayeeName");
                entity.Property(e => e.PivPaymentConditionId).HasColumnName("PIV_PaymentCondition_Id");
                entity.Property(e => e.PivPaymentCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("PIV_PaymentCurrencyCode");
                entity.Property(e => e.PivPaymentExchangeRate).HasColumnName("PIV_PaymentExchangeRate");
                entity.Property(e => e.PivPaymentExchangeRateId).HasColumnName("PIV_PaymentExchangeRate_Id");
                entity.Property(e => e.PivPaymentMethodId).HasColumnName("PIV_PaymentMethod_Id");
                entity.Property(e => e.PivPaymentReference)
                    .HasMaxLength(250)
                    .HasColumnName("PIV_PaymentReference");
                entity.Property(e => e.PivPaymentToLeadExchangeRate).HasColumnName("PIV_PaymentToLeadExchangeRate");
                entity.Property(e => e.PivPaymentToLeadExchangeRateId).HasColumnName("PIV_PaymentToLeadExchangeRate_Id");
                entity.Property(e => e.PivPayorIsDossierParty).HasColumnName("PIV_PayorIsDossierParty");
                entity.Property(e => e.PivPurchaseBacklogId).HasColumnName("PIV_PurchaseBacklog_Id");
                entity.Property(e => e.PivRecipientName)
                    .HasMaxLength(250)
                    .HasColumnName("PIV_RecipientName");
                entity.Property(e => e.PivSupplierId).HasColumnName("PIV_Supplier_Id");
                entity.Property(e => e.PivSupplierInvoiceDate)
                    .HasColumnType("date")
                    .HasColumnName("PIV_SupplierInvoiceDate");
                entity.Property(e => e.PivSupplierInvoiceNumber)
                    .HasMaxLength(20)
                    .HasColumnName("PIV_SupplierInvoiceNumber");
                entity.Property(e => e.PivTaxAmount)
                    .HasColumnType("money")
                    .HasColumnName("PIV_TaxAmount");
                entity.Property(e => e.PivTaxCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("PIV_TaxCountryCode");
                entity.Property(e => e.PivTaxExemptedAmount)
                    .HasColumnType("money")
                    .HasColumnName("PIV_TaxExemptedAmount");
                entity.Property(e => e.PivTaxImportAmount)
                    .HasColumnType("money")
                    .HasColumnName("PIV_TaxImportAmount");
                entity.Property(e => e.PivTaxResversedChargeAmount)
                    .HasColumnType("money")
                    .HasColumnName("PIV_TaxResversedChargeAmount");
                entity.Property(e => e.PivTenantId).HasColumnName("PIV_Tenant_Id");
                entity.Property(e => e.PivTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PIV_TimeStamp");
                entity.Property(e => e.PivWorkingOrderId).HasColumnName("PIV_WorkingOrder_Id");
                entity.Property(e => e.PivYourReference)
                    .HasMaxLength(250)
                    .HasColumnName("PIV_YourReference");

                entity.HasOne(d => d.PivAssistancePlan).WithMany(p => p.PurchaseInvoices)
                    .HasForeignKey(d => d.PivAssistancePlanId)
                    .HasConstraintName("FK_PurchaseInvoices_AssistancePlans");

                entity.HasOne(d => d.PivBlockedBankAccount).WithMany(p => p.PurchaseInvoicePivBlockedBankAccounts)
                    .HasForeignKey(d => d.PivBlockedBankAccountId)
                    .HasConstraintName("FK_PurchaseInvoices_BlockedBankAccounts");

                entity.HasOne(d => d.PivCostCenter).WithMany(p => p.PurchaseInvoices)
                    .HasForeignKey(d => d.PivCostCenterId)
                    .HasConstraintName("FK_PurchaseInvoices_CostCenters");

                entity.HasOne(d => d.PivCostUnit).WithMany(p => p.PurchaseInvoices)
                    .HasForeignKey(d => d.PivCostUnitId)
                    .HasConstraintName("FK_PurchaseInvoices_CostUnits");

                entity.HasOne(d => d.PivCreditor).WithMany(p => p.PurchaseInvoices)
                    .HasForeignKey(d => d.PivCreditorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseInvoices_Creditors");

                entity.HasOne(d => d.PivDebitPurchaseInvoice).WithMany(p => p.InversePivDebitPurchaseInvoice)
                    .HasForeignKey(d => d.PivDebitPurchaseInvoiceId)
                    .HasConstraintName("FK_PurchaseInvoices_DebitPurchaseInvoices");

                entity.HasOne(d => d.PivDossierAssignment).WithMany(p => p.PurchaseInvoices)
                    .HasForeignKey(d => d.PivDossierAssignmentId)
                    .HasConstraintName("FK_PurchaseInvoices_DossierAssignments");

                entity.HasOne(d => d.PivDossier).WithMany(p => p.PurchaseInvoices)
                    .HasForeignKey(d => d.PivDossierId)
                    .HasConstraintName("FK_PurchaseInvoices_Dossiers");

                entity.HasOne(d => d.PivDossierParty).WithMany(p => p.PurchaseInvoices)
                    .HasForeignKey(d => d.PivDossierPartyId)
                    .HasConstraintName("FK_PurchaseInvoices_DossierParties");

                entity.HasOne(d => d.PivEmployee).WithMany(p => p.PurchaseInvoices)
                    .HasForeignKey(d => d.PivEmployeeId)
                    .HasConstraintName("FK_PurchaseInvoices_Employees");

                entity.HasOne(d => d.PivExchangeRateNavigation).WithMany(p => p.PurchaseInvoicePivExchangeRateNavigations)
                    .HasForeignKey(d => d.PivExchangeRateId)
                    .HasConstraintName("FK_PurchaseInvoices_ExchangeRates");

                entity.HasOne(d => d.PivFinancialBookingPeriod).WithMany(p => p.PurchaseInvoices)
                    .HasForeignKey(d => d.PivFinancialBookingPeriodId)
                    .HasConstraintName("FK_PurchaseInvoices_FinancialBookingPeriods");

                entity.HasOne(d => d.PivForeignToPaymentExchangeRateNavigation).WithMany(p => p.PurchaseInvoicePivForeignToPaymentExchangeRateNavigations)
                    .HasForeignKey(d => d.PivForeignToPaymentExchangeRateId)
                    .HasConstraintName("FK_PurchaseInvoices_ForeignToPaymentExchangeRates");

                entity.HasOne(d => d.PivInvoicePriorityType).WithMany(p => p.PurchaseInvoices)
                    .HasForeignKey(d => d.PivInvoicePriorityTypeId)
                    .HasConstraintName("FK_PurchaseInvoices_InvoicePriorityTypes");

                entity.HasOne(d => d.PivInvoiceType).WithMany(p => p.PurchaseInvoices)
                    .HasForeignKey(d => d.PivInvoiceTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseInvoices_InvoiceTypes");

                entity.HasOne(d => d.PivJournal).WithMany(p => p.PurchaseInvoices)
                    .HasForeignKey(d => d.PivJournalId)
                    .HasConstraintName("FK_PurchaseInvoices_Journals");

                entity.HasOne(d => d.PivLegalEntity).WithMany(p => p.PurchaseInvoices)
                    .HasForeignKey(d => d.PivLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseInvoices_LegalEntities");

                entity.HasOne(d => d.PivOrganizationUnit).WithMany(p => p.PurchaseInvoices)
                    .HasForeignKey(d => d.PivOrganizationUnitId)
                    .HasConstraintName("FK_PurchaseInvoices_OrganizationUnits");

                entity.HasOne(d => d.PivPayeeAddress).WithMany(p => p.PurchaseInvoices)
                    .HasForeignKey(d => d.PivPayeeAddressId)
                    .HasConstraintName("FK_PurchaseInvoices_Addresses");

                entity.HasOne(d => d.PivPayeeBankAccount).WithMany(p => p.PurchaseInvoicePivPayeeBankAccounts)
                    .HasForeignKey(d => d.PivPayeeBankAccountId)
                    .HasConstraintName("FK_PurchaseInvoices_BankAccounts");

                entity.HasOne(d => d.PivPaymentCondition).WithMany(p => p.PurchaseInvoices)
                    .HasForeignKey(d => d.PivPaymentConditionId)
                    .HasConstraintName("FK_PurchaseInvoices_PaymentConditions");

                entity.HasOne(d => d.PivPaymentExchangeRateNavigation).WithMany(p => p.PurchaseInvoicePivPaymentExchangeRateNavigations)
                    .HasForeignKey(d => d.PivPaymentExchangeRateId)
                    .HasConstraintName("FK_PurchaseInvoices_PaymentExchangeRates");

                entity.HasOne(d => d.PivPaymentMethod).WithMany(p => p.PurchaseInvoices)
                    .HasForeignKey(d => d.PivPaymentMethodId)
                    .HasConstraintName("FK_PurchaseInvoices_PaymentMethods");

                entity.HasOne(d => d.PivPaymentToLeadExchangeRateNavigation).WithMany(p => p.PurchaseInvoicePivPaymentToLeadExchangeRateNavigations)
                    .HasForeignKey(d => d.PivPaymentToLeadExchangeRateId)
                    .HasConstraintName("FK_PurchaseInvoices_PaymentToLeadExchangeRates");

                entity.HasOne(d => d.PivPurchaseBacklog).WithMany(p => p.PurchaseInvoices)
                    .HasForeignKey(d => d.PivPurchaseBacklogId)
                    .HasConstraintName("FK_PurchaseInvoices_PurchaseBacklogs");

                entity.HasOne(d => d.PivSupplier).WithMany(p => p.PurchaseInvoices)
                    .HasForeignKey(d => d.PivSupplierId)
                    .HasConstraintName("FK_PurchaseInvoices_Suppliers");

                entity.HasOne(d => d.PivTenant).WithMany(p => p.PurchaseInvoices)
                    .HasForeignKey(d => d.PivTenantId)
                    .HasConstraintName("FK_PurchaseInvoices_Tenants");

                entity.HasOne(d => d.PivWorkingOrder).WithMany(p => p.PurchaseInvoices)
                    .HasForeignKey(d => d.PivWorkingOrderId)
                    .HasConstraintName("FK_PurchaseInvoices_WorkingOrders");
            });

            modelBuilder.Entity<PurchaseInvoiceApproval>(entity =>
            {
                entity.HasKey(e => e.PapId);

                entity.ToTable("PurchaseInvoiceApprovals", "fin");

                entity.HasIndex(e => new { e.PapIsApproved, e.PapExecutionDate, e.PapCurrencyCode }, "IX_PurchaseInvoiceApprovals_IsApproved_ExecutionDate_CurrencyCode_INCL");

                entity.HasIndex(e => new { e.PapPurchaseInvoiceAuthorizationId, e.PapApprovalDate }, "IX_fin_PurchaseInvoiceApprovals_PurchaseInvoiceAuthorization_ApprovalDate__INCL");

                entity.Property(e => e.PapId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PAP_Id");
                entity.Property(e => e.PapAccountAddressLine1)
                    .HasMaxLength(250)
                    .HasColumnName("PAP_AccountAddressLine1");
                entity.Property(e => e.PapAccountAddressLine2)
                    .HasMaxLength(250)
                    .HasColumnName("PAP_AccountAddressLine2");
                entity.Property(e => e.PapAccountHolderName)
                    .HasMaxLength(250)
                    .HasColumnName("PAP_AccountHolderName");
                entity.Property(e => e.PapAccountNumber)
                    .HasMaxLength(34)
                    .HasColumnName("PAP_AccountNumber");
                entity.Property(e => e.PapApprovalDate).HasColumnName("PAP_ApprovalDate");
                entity.Property(e => e.PapAutorizationRoleId)
                    .HasMaxLength(50)
                    .HasColumnName("PAP_AutorizationRole_Id");
                entity.Property(e => e.PapBankAccountId).HasColumnName("PAP_BankAccount_Id");
                entity.Property(e => e.PapBankId).HasColumnName("PAP_Bank_Id");
                entity.Property(e => e.PapBankName)
                    .HasMaxLength(250)
                    .HasColumnName("PAP_BankName");
                entity.Property(e => e.PapBic)
                    .HasMaxLength(11)
                    .HasColumnName("PAP_BIC");
                entity.Property(e => e.PapComment)
                    .HasMaxLength(250)
                    .HasColumnName("PAP_Comment");
                entity.Property(e => e.PapCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("PAP_CountryCode");
                entity.Property(e => e.PapCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PAP_CreatedBy");
                entity.Property(e => e.PapCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PAP_CreatedDate");
                entity.Property(e => e.PapCreditAmount)
                    .HasDefaultValueSql("((0))")
                    .HasColumnType("money")
                    .HasColumnName("PAP_CreditAmount");
                entity.Property(e => e.PapCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("PAP_CurrencyCode");
                entity.Property(e => e.PapEmployeeId).HasColumnName("PAP_Employee_Id");
                entity.Property(e => e.PapExecutionDate)
                    .HasColumnType("date")
                    .HasColumnName("PAP_ExecutionDate");
                entity.Property(e => e.PapIban)
                    .HasMaxLength(34)
                    .HasColumnName("PAP_IBAN");
                entity.Property(e => e.PapIsApproved).HasColumnName("PAP_IsApproved");
                entity.Property(e => e.PapLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PAP_LastModifiedBy");
                entity.Property(e => e.PapLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PAP_LastModifiedDate");
                entity.Property(e => e.PapPurchaseInvoiceAuthorizationId).HasColumnName("PAP_PurchaseInvoiceAuthorization_Id");
                entity.Property(e => e.PapRemittanceInformation)
                    .HasMaxLength(250)
                    .HasColumnName("PAP_RemittanceInformation");
                entity.Property(e => e.PapTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PAP_TimeStamp");
                entity.Property(e => e.PapUrgentTransfer)
                    .HasDefaultValueSql("((0))")
                    .HasColumnName("PAP_UrgentTransfer");

                entity.HasOne(d => d.PapAutorizationRole).WithMany(p => p.PurchaseInvoiceApprovals)
                    .HasForeignKey(d => d.PapAutorizationRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseInvoiceApprovals_AuthorizationRoles");

                entity.HasOne(d => d.PapBankAccount).WithMany(p => p.PurchaseInvoiceApprovals)
                    .HasForeignKey(d => d.PapBankAccountId)
                    .HasConstraintName("FK_PurchaseInvoiceApprovals_BankAccounts");

                entity.HasOne(d => d.PapBank).WithMany(p => p.PurchaseInvoiceApprovals)
                    .HasForeignKey(d => d.PapBankId)
                    .HasConstraintName("FK_PurchaseInvoiceApprovals_Banks");

                entity.HasOne(d => d.PapEmployee).WithMany(p => p.PurchaseInvoiceApprovals)
                    .HasForeignKey(d => d.PapEmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseInvoiceApprovals_Employees");

                entity.HasOne(d => d.PapPurchaseInvoiceAuthorization).WithMany(p => p.PurchaseInvoiceApprovals)
                    .HasForeignKey(d => d.PapPurchaseInvoiceAuthorizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseInvoiceApprovals_PurchaseInvoiceAuthorizations");
            });

            modelBuilder.Entity<PurchaseInvoiceApprovalsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoiceApprovalsView", "fin");

                entity.Property(e => e.ClientAbbreviation).HasMaxLength(20);
                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditorAccountName).HasMaxLength(250);
                entity.Property(e => e.CreditorIban).HasMaxLength(34);
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.InvoiceDate).HasColumnType("date");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.OpenAmount).HasColumnType("money");
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PaymentConditionCode).HasMaxLength(10);
                entity.Property(e => e.PaymentConditionName).HasMaxLength(250);
                entity.Property(e => e.PaymentDate).HasColumnType("date");
                entity.Property(e => e.PaymentMethodCode).HasMaxLength(10);
                entity.Property(e => e.PaymentMethodName).HasMaxLength(250);
                entity.Property(e => e.RecipientName).HasMaxLength(250);
                entity.Property(e => e.SupplierInvoiceDate).HasColumnType("date");
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SupplierName).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchaseInvoiceApprovalsWithoutCreditTransfersView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoiceApprovalsWithoutCreditTransfersView", "fin");

                entity.Property(e => e.AccountAddressLine1).HasMaxLength(250);
                entity.Property(e => e.AccountAddressLine2).HasMaxLength(250);
                entity.Property(e => e.AccountHolderName).HasMaxLength(250);
                entity.Property(e => e.AccountNumber).HasMaxLength(34);
                entity.Property(e => e.BankName).HasMaxLength(250);
                entity.Property(e => e.Bic)
                    .HasMaxLength(11)
                    .HasColumnName("BIC");
                entity.Property(e => e.CanceledCreditTransferId).HasColumnName("CanceledCreditTransfer_Id");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditAmount).HasColumnType("money");
                entity.Property(e => e.CreditTransferNumber).HasMaxLength(20);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.EntrySystem)
                    .HasMaxLength(2)
                    .IsUnicode(false);
                entity.Property(e => e.ExecutionDate).HasColumnType("date");
                entity.Property(e => e.Iban)
                    .HasMaxLength(34)
                    .HasColumnName("IBAN");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.RemittanceInformation).HasMaxLength(292);
                entity.Property(e => e.TenantId).HasColumnName("Tenant_Id");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PurchaseInvoiceAssistancePlan>(entity =>
            {
                entity.HasKey(e => e.PaplId);

                entity.ToTable("PurchaseInvoiceAssistancePlans", "fin");

                entity.HasIndex(e => new { e.PaplAssistancePlanLineId, e.PaplInactive }, "IX_fin_PurchaseInvoiceAssistancePlans_AssistancePlanLine_Inactive__INCL");

                entity.HasIndex(e => e.PaplInactive, "IX_fin_PurchaseInvoiceAssistancePlans_Inactive__INCL");

                entity.HasIndex(e => new { e.PaplPurchaseInvoiceLineId, e.PaplInactive }, "PurchaseInvoiceAssistancePlans_PurchaseInvoiceLine_Id_Inactive_INCL");

                entity.Property(e => e.PaplId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PAPL_Id");
                entity.Property(e => e.PaplAssistancePlanLineId).HasColumnName("PAPL_AssistancePlanLine_Id");
                entity.Property(e => e.PaplCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PAPL_CreatedBy");
                entity.Property(e => e.PaplCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PAPL_CreatedDate");
                entity.Property(e => e.PaplInactive).HasColumnName("PAPL_Inactive");
                entity.Property(e => e.PaplLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PAPL_LastModifiedBy");
                entity.Property(e => e.PaplLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PAPL_LastModifiedDate");
                entity.Property(e => e.PaplPurchaseInvoiceLineId).HasColumnName("PAPL_PurchaseInvoiceLine_Id");
                entity.Property(e => e.PaplTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PAPL_TimeStamp");

                entity.HasOne(d => d.PaplAssistancePlanLine).WithMany(p => p.PurchaseInvoiceAssistancePlans)
                    .HasForeignKey(d => d.PaplAssistancePlanLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseInvoiceAssistancePlans_AssistancePlanLines");

                entity.HasOne(d => d.PaplPurchaseInvoiceLine).WithMany(p => p.PurchaseInvoiceAssistancePlans)
                    .HasForeignKey(d => d.PaplPurchaseInvoiceLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseInvoiceAssistancePlans_PurchaseInvoiceLines");
            });

            modelBuilder.Entity<PurchaseInvoiceAttachment>(entity =>
            {
                entity.HasKey(e => e.PuaId);

                entity.ToTable("PurchaseInvoiceAttachments", "fin");

                entity.HasIndex(e => e.PuaPurchaseInvoiceId, "IX_fin_PurchaseInvoiceAttachments_PurchaseInvoice__INCL");

                entity.Property(e => e.PuaId)
                    .ValueGeneratedNever()
                    .HasColumnName("PUA_Id");
                entity.Property(e => e.PuaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PUA_CreatedBy");
                entity.Property(e => e.PuaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PUA_CreatedDate");
                entity.Property(e => e.PuaDocumentId).HasColumnName("PUA_Document_Id");
                entity.Property(e => e.PuaIsInternalDocument).HasColumnName("PUA_IsInternalDocument");
                entity.Property(e => e.PuaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PUA_LastModifiedBy");
                entity.Property(e => e.PuaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PUA_LastModifiedDate");
                entity.Property(e => e.PuaPurchaseInvoiceId).HasColumnName("PUA_PurchaseInvoice_Id");
                entity.Property(e => e.PuaSequenceNumber).HasColumnName("PUA_SequenceNumber");
                entity.Property(e => e.PuaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PUA_TimeStamp");

                entity.HasOne(d => d.PuaDocument).WithMany(p => p.PurchaseInvoiceAttachments)
                    .HasForeignKey(d => d.PuaDocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseInvoiceAttachments_Documents");

                entity.HasOne(d => d.PuaPurchaseInvoice).WithMany(p => p.PurchaseInvoiceAttachments)
                    .HasForeignKey(d => d.PuaPurchaseInvoiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseInvoiceAttachments_PurchaseInvoices");
            });

            modelBuilder.Entity<PurchaseInvoiceAttachmentsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoiceAttachmentsView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditorEmail).HasMaxLength(250);
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(500);
                entity.Property(e => e.DocumentNumber).HasMaxLength(20);
                entity.Property(e => e.DocumentTypeCode).HasMaxLength(10);
                entity.Property(e => e.InvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityIban).HasMaxLength(34);
                entity.Property(e => e.LegalEntityName).HasMaxLength(250);
                entity.Property(e => e.SignatureDate).HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PurchaseInvoiceAttribute>(entity =>
            {
                entity.HasKey(e => e.PvaId);

                entity.ToTable("PurchaseInvoiceAttributes", "fin");

                entity.Property(e => e.PvaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PVA_Id");
                entity.Property(e => e.PvaAttributeContent)
                    .HasMaxLength(250)
                    .HasColumnName("PVA_AttributeContent");
                entity.Property(e => e.PvaAttributeName)
                    .HasMaxLength(50)
                    .HasColumnName("PVA_AttributeName");
                entity.Property(e => e.PvaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PVA_CreatedBy");
                entity.Property(e => e.PvaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PVA_CreatedDate");
                entity.Property(e => e.PvaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PVA_LastModifiedBy");
                entity.Property(e => e.PvaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PVA_LastModifiedDate");
                entity.Property(e => e.PvaPurchaseInvoiceId).HasColumnName("PVA_PurchaseInvoice_Id");
                entity.Property(e => e.PvaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PVA_TimeStamp");

                entity.HasOne(d => d.PvaPurchaseInvoice).WithMany(p => p.PurchaseInvoiceAttributes)
                    .HasForeignKey(d => d.PvaPurchaseInvoiceId)
                    .HasConstraintName("FK_PurchaseInvoiceAttributes_PurchaseInvoices");
            });

            modelBuilder.Entity<PurchaseInvoiceAuthorization>(entity =>
            {
                entity.HasKey(e => e.PiaId);

                entity.ToTable("PurchaseInvoiceAuthorizations", "fin");

                entity.HasIndex(e => e.PiaPurchaseInvoiceId, "IX_fin_PurchaseInvoiceAuthorizations_PurchaseInvoice");

                entity.Property(e => e.PiaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PIA_Id");
                entity.Property(e => e.PiaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PIA_CreatedBy");
                entity.Property(e => e.PiaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PIA_CreatedDate");
                entity.Property(e => e.PiaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PIA_LastModifiedBy");
                entity.Property(e => e.PiaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PIA_LastModifiedDate");
                entity.Property(e => e.PiaPurchaseInvoiceId).HasColumnName("PIA_PurchaseInvoice_Id");
                entity.Property(e => e.PiaRequiredAutorizationRoleId)
                    .HasMaxLength(50)
                    .HasColumnName("PIA_RequiredAutorizationRole_Id");
                entity.Property(e => e.PiaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PIA_TimeStamp");

                entity.HasOne(d => d.PiaPurchaseInvoice).WithMany(p => p.PurchaseInvoiceAuthorizations)
                    .HasForeignKey(d => d.PiaPurchaseInvoiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseInvoiceAuthorizations_PurchaseInvoices");

                entity.HasOne(d => d.PiaRequiredAutorizationRole).WithMany(p => p.PurchaseInvoiceAuthorizations)
                    .HasForeignKey(d => d.PiaRequiredAutorizationRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseInvoiceAuthorizations_AuthorizationRoles");
            });

            modelBuilder.Entity<PurchaseInvoiceAuthorizationsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoiceAuthorizationsView", "fin");

                entity.Property(e => e.ApprovalComment).HasMaxLength(250);
                entity.Property(e => e.ClientAbbreviation).HasMaxLength(20);
                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientName).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditorAccountName).HasMaxLength(250);
                entity.Property(e => e.CreditorIban).HasMaxLength(34);
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DocumentArchiveId).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.InvoiceDate).HasColumnType("date");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.OpenAmount).HasColumnType("money");
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PaymentConditionCode).HasMaxLength(10);
                entity.Property(e => e.PaymentConditionName).HasMaxLength(250);
                entity.Property(e => e.PaymentDate).HasColumnType("date");
                entity.Property(e => e.PaymentMethodCode).HasMaxLength(10);
                entity.Property(e => e.PaymentMethodName).HasMaxLength(250);
                entity.Property(e => e.RecipientName).HasMaxLength(250);
                entity.Property(e => e.SelectedBy).HasMaxLength(250);
                entity.Property(e => e.SupplierInvoiceDate).HasColumnType("date");
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SupplierName).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchaseInvoiceAuthorizationsWithoutApprovalsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoiceAuthorizationsWithoutApprovalsView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PurchaseInvoiceClaimReservesInfo>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoiceClaimReservesInfo", "ux");

                entity.Property(e => e.ChargedExpensesInvoiceRecipientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ChargedExpensesInvoiceRecipientName).HasMaxLength(752);
                entity.Property(e => e.ClaimReserveNumber).HasMaxLength(10);
                entity.Property(e => e.ClaimReserveTypeCode).HasMaxLength(10);
                entity.Property(e => e.ClaimReserveTypeName).HasMaxLength(250);
                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientName).HasMaxLength(752);
                entity.Property(e => e.CoverageNumber).HasMaxLength(50);
                entity.Property(e => e.CoverageProductCode).HasMaxLength(10);
                entity.Property(e => e.CoverageProductCommercialName).HasMaxLength(250);
                entity.Property(e => e.CoverageProductName).HasMaxLength(250);
                entity.Property(e => e.OpenAmount).HasColumnType("money");
            });

            modelBuilder.Entity<PurchaseInvoiceCreditableSalesOrdersView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoiceCreditableSalesOrdersView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PurchaseInvoiceDossierAssignment>(entity =>
            {
                entity.HasKey(e => e.PidaId);

                entity.ToTable("PurchaseInvoiceDossierAssignments", "fin");

                entity.Property(e => e.PidaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PIDA_Id");
                entity.Property(e => e.PidaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PIDA_CreatedBy");
                entity.Property(e => e.PidaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PIDA_CreatedDate");
                entity.Property(e => e.PidaDossierAssignmentId).HasColumnName("PIDA_DossierAssignment_Id");
                entity.Property(e => e.PidaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PIDA_LastModifiedBy");
                entity.Property(e => e.PidaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PIDA_LastModifiedDate");
                entity.Property(e => e.PidaPurchaseInvoiceLineId).HasColumnName("PIDA_PurchaseInvoiceLine_Id");
                entity.Property(e => e.PidaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PIDA_TimeStamp");

                entity.HasOne(d => d.PidaDossierAssignment).WithMany(p => p.PurchaseInvoiceDossierAssignments)
                    .HasForeignKey(d => d.PidaDossierAssignmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseInvoiceDossierAssignments_DossierAssignments");

                entity.HasOne(d => d.PidaPurchaseInvoiceLine).WithMany(p => p.PurchaseInvoiceDossierAssignments)
                    .HasForeignKey(d => d.PidaPurchaseInvoiceLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseInvoiceDossierAssignments_PurchaseInvoiceLines");
            });

            modelBuilder.Entity<PurchaseInvoiceFinancesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoiceFinancesView", "fin");

                entity.Property(e => e.CostOfSalesAmount).HasColumnType("money");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.PurchaseInvoiceStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseInvoiceStatusName).HasMaxLength(250);
                entity.Property(e => e.RemainingNetAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderNetAmount).HasColumnType("money");
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PurchaseInvoiceLine>(entity =>
            {
                entity.HasKey(e => e.PilId);

                entity.ToTable("PurchaseInvoiceLines", "fin");

                entity.HasIndex(e => e.PilAssistancePlanId, "IX_PurchaseInvoiceLines_PIL_AssistancePlan_Id");

                entity.HasIndex(e => e.PilDossierId, "IX_fin_PurchaseInvoiceLines_Dossier");

                entity.HasIndex(e => e.PilLineNumber, "IX_fin_PurchaseInvoiceLines_LineNumber__INCL");

                entity.HasIndex(e => e.PilPurchaseInvoiceId, "IX_fin_PurchaseInvoiceLines_PurchaseInvoice__INCL");

                entity.HasIndex(e => new { e.PilServiceId, e.PilPurchaseInvoiceId }, "IX_fin_PurchaseInvoiceLines_Service_PurchaseInvoice");

                entity.Property(e => e.PilId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PIL_Id");
                entity.Property(e => e.PilAssistancePlanId).HasColumnName("PIL_AssistancePlan_Id");
                entity.Property(e => e.PilCostCenterId).HasColumnName("PIL_CostCenter_Id");
                entity.Property(e => e.PilCostUnitId).HasColumnName("PIL_CostUnit_Id");
                entity.Property(e => e.PilCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PIL_CreatedBy");
                entity.Property(e => e.PilCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PIL_CreatedDate");
                entity.Property(e => e.PilDebitLineNumber)
                    .HasMaxLength(36)
                    .HasColumnName("PIL_DebitLineNumber");
                entity.Property(e => e.PilDeliveryDate).HasColumnName("PIL_DeliveryDate");
                entity.Property(e => e.PilDeliveryWeek).HasColumnName("PIL_DeliveryWeek");
                entity.Property(e => e.PilDescription)
                    .HasMaxLength(250)
                    .HasColumnName("PIL_Description");
                entity.Property(e => e.PilDiscount)
                    .HasColumnType("money")
                    .HasColumnName("PIL_Discount");
                entity.Property(e => e.PilDossierAssignmentId).HasColumnName("PIL_DossierAssignment_Id");
                entity.Property(e => e.PilDossierAssignmentNumber)
                    .HasMaxLength(20)
                    .HasColumnName("PIL_DossierAssignmentNumber");
                entity.Property(e => e.PilDossierId).HasColumnName("PIL_Dossier_Id");
                entity.Property(e => e.PilDossierNumber)
                    .HasMaxLength(20)
                    .HasColumnName("PIL_DossierNumber");
                entity.Property(e => e.PilDossierPartyId).HasColumnName("PIL_DossierParty_Id");
                entity.Property(e => e.PilGrossAmount)
                    .HasColumnType("money")
                    .HasColumnName("PIL_GrossAmount");
                entity.Property(e => e.PilIsContinuousPost).HasColumnName("PIL_IsContinuousPost");
                entity.Property(e => e.PilIsCredit).HasColumnName("PIL_IsCredit");
                entity.Property(e => e.PilIsTaxBeforeDiscount).HasColumnName("PIL_IsTaxBeforeDiscount");
                entity.Property(e => e.PilJournalId)
                    .HasMaxLength(20)
                    .HasColumnName("PIL_Journal_Id");
                entity.Property(e => e.PilLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PIL_LastModifiedBy");
                entity.Property(e => e.PilLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PIL_LastModifiedDate");
                entity.Property(e => e.PilLedgerAccount)
                    .HasMaxLength(20)
                    .HasColumnName("PIL_LedgerAccount");
                entity.Property(e => e.PilLineNumber).HasColumnName("PIL_LineNumber");
                entity.Property(e => e.PilNetAmount)
                    .HasColumnType("money")
                    .HasColumnName("PIL_NetAmount");
                entity.Property(e => e.PilOurReference)
                    .HasMaxLength(250)
                    .HasColumnName("PIL_OurReference");
                entity.Property(e => e.PilProductCode)
                    .HasMaxLength(10)
                    .HasColumnName("PIL_ProductCode");
                entity.Property(e => e.PilPurchaseInvoiceId).HasColumnName("PIL_PurchaseInvoice_Id");
                entity.Property(e => e.PilPurchaseLedgerSettingId).HasColumnName("PIL_PurchaseLedgerSetting_Id");
                entity.Property(e => e.PilQuantity).HasColumnName("PIL_Quantity");
                entity.Property(e => e.PilServiceId).HasColumnName("PIL_Service_Id");
                entity.Property(e => e.PilTaxAmount)
                    .HasColumnType("money")
                    .HasColumnName("PIL_TaxAmount");
                entity.Property(e => e.PilTaxBase)
                    .HasColumnType("money")
                    .HasColumnName("PIL_TaxBase");
                entity.Property(e => e.PilTaxCode)
                    .HasMaxLength(20)
                    .HasColumnName("PIL_TaxCode");
                entity.Property(e => e.PilTaxCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("PIL_TaxCountryCode");
                entity.Property(e => e.PilTaxExempted).HasColumnName("PIL_TaxExempted");
                entity.Property(e => e.PilTaxImport).HasColumnName("PIL_TaxImport");
                entity.Property(e => e.PilTaxRate).HasColumnName("PIL_TaxRate");
                entity.Property(e => e.PilTaxReversedCharge).HasColumnName("PIL_TaxReversedCharge");
                entity.Property(e => e.PilTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PIL_TimeStamp");
                entity.Property(e => e.PilUnitOfMeasureId)
                    .HasMaxLength(20)
                    .HasColumnName("PIL_UnitOfMeasure_Id");
                entity.Property(e => e.PilUnitPrice)
                    .HasColumnType("money")
                    .HasColumnName("PIL_UnitPrice");
                entity.Property(e => e.PilWorkingOrderId).HasColumnName("PIL_WorkingOrder_Id");
                entity.Property(e => e.PilYourReference)
                    .HasMaxLength(250)
                    .HasColumnName("PIL_YourReference");

                entity.HasOne(d => d.PilAssistancePlan).WithMany(p => p.PurchaseInvoiceLines)
                    .HasForeignKey(d => d.PilAssistancePlanId)
                    .HasConstraintName("FK_PurchaseInvoiceLines_AssistancePlans");

                entity.HasOne(d => d.PilCostCenter).WithMany(p => p.PurchaseInvoiceLines)
                    .HasForeignKey(d => d.PilCostCenterId)
                    .HasConstraintName("FK_PurchaseInvoiceLines_CostCenters");

                entity.HasOne(d => d.PilCostUnit).WithMany(p => p.PurchaseInvoiceLines)
                    .HasForeignKey(d => d.PilCostUnitId)
                    .HasConstraintName("FK_PurchaseInvoiceLines_CostUnits");

                entity.HasOne(d => d.PilDossierAssignment).WithMany(p => p.PurchaseInvoiceLines)
                    .HasForeignKey(d => d.PilDossierAssignmentId)
                    .HasConstraintName("FK_PurchaseInvoiceLines_DossierAssignments");

                entity.HasOne(d => d.PilDossier).WithMany(p => p.PurchaseInvoiceLines)
                    .HasForeignKey(d => d.PilDossierId)
                    .HasConstraintName("FK_PurchaseInvoiceLines_Dossiers");

                entity.HasOne(d => d.PilDossierParty).WithMany(p => p.PurchaseInvoiceLines)
                    .HasForeignKey(d => d.PilDossierPartyId)
                    .HasConstraintName("FK_PurchaseInvoiceLines_DossierParties");

                entity.HasOne(d => d.PilJournal).WithMany(p => p.PurchaseInvoiceLines)
                    .HasForeignKey(d => d.PilJournalId)
                    .HasConstraintName("FK_PurchaseInvoiceLines_Journals");

                entity.HasOne(d => d.PilPurchaseInvoice).WithMany(p => p.PurchaseInvoiceLines)
                    .HasForeignKey(d => d.PilPurchaseInvoiceId)
                    .HasConstraintName("FK_PurchaseInvoiceLines_PurchaseInvoices");

                entity.HasOne(d => d.PilPurchaseLedgerSetting).WithMany(p => p.PurchaseInvoiceLines)
                    .HasForeignKey(d => d.PilPurchaseLedgerSettingId)
                    .HasConstraintName("FK_PurchaseInvoiceLines_PurchaseLedgerSettings");

                entity.HasOne(d => d.PilService).WithMany(p => p.PurchaseInvoiceLines)
                    .HasForeignKey(d => d.PilServiceId)
                    .HasConstraintName("FK_PurchaseInvoiceLines_Services");

                entity.HasOne(d => d.PilUnitOfMeasure).WithMany(p => p.PurchaseInvoiceLines)
                    .HasForeignKey(d => d.PilUnitOfMeasureId)
                    .HasConstraintName("FK_PurchaseInvoiceLines_UnitOfMeasures");

                entity.HasOne(d => d.PilWorkingOrder).WithMany(p => p.PurchaseInvoiceLines)
                    .HasForeignKey(d => d.PilWorkingOrderId)
                    .HasConstraintName("FK_PurchaseInvoiceLines_WorkingOrders");
            });

            modelBuilder.Entity<PurchaseInvoiceLineAttribute>(entity =>
            {
                entity.HasKey(e => e.PlaId);

                entity.ToTable("PurchaseInvoiceLineAttributes", "fin");

                entity.Property(e => e.PlaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PLA_Id");
                entity.Property(e => e.PlaAttributeContent)
                    .HasMaxLength(250)
                    .HasColumnName("PLA_AttributeContent");
                entity.Property(e => e.PlaAttributeName)
                    .HasMaxLength(50)
                    .HasColumnName("PLA_AttributeName");
                entity.Property(e => e.PlaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PLA_CreatedBy");
                entity.Property(e => e.PlaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PLA_CreatedDate");
                entity.Property(e => e.PlaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PLA_LastModifiedBy");
                entity.Property(e => e.PlaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PLA_LastModifiedDate");
                entity.Property(e => e.PlaPurchaseInvoiceLineId).HasColumnName("PLA_PurchaseInvoiceLine_Id");
                entity.Property(e => e.PlaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PLA_TimeStamp");

                entity.HasOne(d => d.PlaPurchaseInvoiceLine).WithMany(p => p.PurchaseInvoiceLineAttributes)
                    .HasForeignKey(d => d.PlaPurchaseInvoiceLineId)
                    .HasConstraintName("FK_PurchaseInvoiceLineAttributes_PurchaseInvoiceLines");
            });

            modelBuilder.Entity<PurchaseInvoiceLineCandidateCostOfSalesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoiceLineCandidateCostOfSalesView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.PurchaseInvoiceCostOfSalesAmount).HasColumnType("money");
                entity.Property(e => e.PurchaseInvoiceLineGrossAmount).HasColumnType("money");
                entity.Property(e => e.PurchaseInvoiceLineNetAmount).HasColumnType("money");
                entity.Property(e => e.PurchaseInvoiceLineTaxAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderLineNetAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PurchaseInvoiceLineClaimReserveCoveragesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoiceLineClaimReserveCoveragesView", "fin");

                entity.Property(e => e.AssistancePlanCoverageGrossAmount).HasColumnType("money");
                entity.Property(e => e.AssistancePlanCoverageMaxNetAmount).HasColumnType("money");
                entity.Property(e => e.AssistancePlanCoverageNetAmount).HasColumnType("money");
                entity.Property(e => e.AssistancePlanLineMaxNetAmount).HasColumnType("money");
                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.CostOfSalesNetAmount).HasColumnType("money");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.PurchaseInvoiceLineDiscount).HasColumnType("money");
                entity.Property(e => e.PurchaseInvoiceLineGrossAmount).HasColumnType("money");
                entity.Property(e => e.PurchaseInvoiceLineNetAmount).HasColumnType("money");
                entity.Property(e => e.PurchaseInvoiceLineUnitPrice).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PurchaseInvoiceLineCostOfSalesAmountsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoiceLineCostOfSalesAmountsView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrentCostOfSalesAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PurchaseInvoiceLineCostOfSalesLinesEntryView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoiceLineCostOfSalesLinesEntryView", "fin");

                entity.Property(e => e.CostOfSaleNetAmount).HasColumnType("money");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.ProductCode).HasMaxLength(10);
                entity.Property(e => e.ProductName).HasMaxLength(250);
                entity.Property(e => e.PurchaseInvoiceLineNetAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.UnitPrice).HasColumnType("money");
            });

            modelBuilder.Entity<PurchaseInvoiceLineCoveragesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoiceLineCoveragesView", "fin");

                entity.Property(e => e.AssistancePlanCoverageGrossAmount).HasColumnType("money");
                entity.Property(e => e.AssistancePlanCoverageMaxNetAmount).HasColumnType("money");
                entity.Property(e => e.AssistancePlanCoverageNetAmount).HasColumnType("money");
                entity.Property(e => e.AssistancePlanLineMaxNetAmount).HasColumnType("money");
                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.CostOfSalesNetAmount).HasColumnType("money");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.PurchaseInvoiceLineGrossAmount).HasColumnType("money");
                entity.Property(e => e.PurchaseInvoiceLineNetAmount).HasColumnType("money");
                entity.Property(e => e.PurchaseInvoiceLineUnitPrice).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PurchaseInvoiceLineExpectedCostOfSalesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoiceLineExpectedCostOfSalesView", "fin");

                entity.Property(e => e.AssistancePlanLineAmount).HasColumnType("money");
                entity.Property(e => e.AssistancePlanLineCostOfSalesAmount).HasColumnType("money");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.ExpectedCostOfSalesAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.PurchaseInvoiceLineNetAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PurchaseInvoiceLinesEntryView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoiceLinesEntryView", "fin");

                entity.Property(e => e.AssistancePlanNumbers).HasMaxLength(4000);
                entity.Property(e => e.AssistancePlanNumbersFromMapping).HasMaxLength(4000);
                entity.Property(e => e.ConvertedGrossAmount).HasColumnType("money");
                entity.Property(e => e.ConvertedNetAmount).HasColumnType("money");
                entity.Property(e => e.ConvertedTaxAmount).HasColumnType("money");
                entity.Property(e => e.ConvertedTaxCountryCode).HasMaxLength(3);
                entity.Property(e => e.ConvertedUnitPrice).HasColumnType("money");
                entity.Property(e => e.CostCenterCode).HasMaxLength(10);
                entity.Property(e => e.CostCenterName).HasMaxLength(250);
                entity.Property(e => e.CostUnitCode).HasMaxLength(10);
                entity.Property(e => e.CostUnitName).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DebitLineNumber).HasMaxLength(36);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.Discount).HasColumnType("money");
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.JournalId).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LedgerAccount).HasMaxLength(20);
                entity.Property(e => e.MainProductGroupCode).HasMaxLength(10);
                entity.Property(e => e.MainProductGroupName).HasMaxLength(250);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.ProductCode).HasMaxLength(10);
                entity.Property(e => e.ProductName).HasMaxLength(250);
                entity.Property(e => e.PurchaseOrderNumbers).HasMaxLength(4000);
                entity.Property(e => e.SubProductGroupCode).HasMaxLength(10);
                entity.Property(e => e.SubProductGroupName).HasMaxLength(250);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxBase).HasColumnType("money");
                entity.Property(e => e.TaxCode).HasMaxLength(20);
                entity.Property(e => e.TaxCountryCode).HasMaxLength(3);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.UnitOfMeasureId).HasMaxLength(20);
                entity.Property(e => e.UnitPrice).HasColumnType("money");
                entity.Property(e => e.WorkingOrderNumbers).HasMaxLength(4000);
                entity.Property(e => e.WorkingOrderNumbersFromMapping).HasMaxLength(4000);
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchaseInvoiceLinesFailedSalesOrder>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoiceLinesFailedSalesOrder", "ux");

                entity.Property(e => e.CostOfSalesAmount).HasColumnType("money");
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.FailedReason)
                    .HasMaxLength(106)
                    .IsUnicode(false);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.PendingAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderAmount).HasColumnType("money");
            });

            modelBuilder.Entity<PurchaseInvoiceLinesMatchedView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoiceLinesMatchedView", "fin");

                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(20);
                entity.Property(e => e.ClaimReserveNumber).HasMaxLength(10);
                entity.Property(e => e.ClientName).HasMaxLength(250);
                entity.Property(e => e.CostCenterCode).HasMaxLength(10);
                entity.Property(e => e.CostCenterName).HasMaxLength(250);
                entity.Property(e => e.CostUnitCode).HasMaxLength(10);
                entity.Property(e => e.CostUnitName).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DebitLineNumber).HasMaxLength(36);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.Discount).HasColumnType("money");
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InsureeFormattedName).HasMaxLength(200);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LedgerAccount).HasMaxLength(20);
                entity.Property(e => e.MainProductGroupCode).HasMaxLength(10);
                entity.Property(e => e.MainProductGroupName).HasMaxLength(250);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.ProductCode).HasMaxLength(10);
                entity.Property(e => e.ProductName).HasMaxLength(250);
                entity.Property(e => e.PurchaseOrderNumber).HasMaxLength(10);
                entity.Property(e => e.SubProductGroupCode).HasMaxLength(10);
                entity.Property(e => e.SubProductGroupName).HasMaxLength(250);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxBase).HasColumnType("money");
                entity.Property(e => e.TaxCode).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.UnitPrice).HasColumnType("money");
                entity.Property(e => e.WorkingOrderNumber).HasMaxLength(50);
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchaseInvoiceLinesOpenView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoiceLinesOpenView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.OpenNetAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PurchaseInvoiceLinesUnmatchedView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoiceLinesUnmatchedView", "fin");

                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(20);
                entity.Property(e => e.ClaimReserveNumber).HasMaxLength(10);
                entity.Property(e => e.ClientName).HasMaxLength(250);
                entity.Property(e => e.CostCenterCode).HasMaxLength(10);
                entity.Property(e => e.CostCenterName).HasMaxLength(250);
                entity.Property(e => e.CostUnitCode).HasMaxLength(10);
                entity.Property(e => e.CostUnitName).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DebitLineNumber).HasMaxLength(36);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.Discount).HasColumnType("money");
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InsureeFormattedName).HasMaxLength(200);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LedgerAccount).HasMaxLength(20);
                entity.Property(e => e.MainProductGroupCode).HasMaxLength(10);
                entity.Property(e => e.MainProductGroupName).HasMaxLength(250);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.ProductCode).HasMaxLength(10);
                entity.Property(e => e.ProductName).HasMaxLength(250);
                entity.Property(e => e.SubProductGroupCode).HasMaxLength(10);
                entity.Property(e => e.SubProductGroupName).HasMaxLength(250);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxBase).HasColumnType("money");
                entity.Property(e => e.TaxCode).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.UnitPrice).HasColumnType("money");
                entity.Property(e => e.WorkingOrderNumber).HasMaxLength(50);
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchaseInvoiceLogsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoiceLogsView", "fin");

                entity.Property(e => e.AuthorizedBy).HasMaxLength(250);
                entity.Property(e => e.BatchNumber).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditEntryNumber).HasMaxLength(36);
                entity.Property(e => e.CreditInvoiceCreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.CreditTransferAccountNumber).HasMaxLength(34);
                entity.Property(e => e.CreditTransferIban).HasMaxLength(34);
                entity.Property(e => e.DebitEntryNumber).HasMaxLength(36);
                entity.Property(e => e.DebitInvoiceCreatedBy).HasMaxLength(250);
                entity.Property(e => e.DebitInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.EmployeeName).HasMaxLength(250);
                entity.Property(e => e.InvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.PaymentDate).HasColumnType("date");
                entity.Property(e => e.SepaCreatedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.TransferedBy).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchaseInvoiceNote>(entity =>
            {
                entity.HasKey(e => e.PinId).HasName("PK__Purchase__D67CEAE2F4EDD4CA");

                entity.ToTable("PurchaseInvoiceNotes", "fin");

                entity.Property(e => e.PinId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PIN_Id");
                entity.Property(e => e.PinCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PIN_CreatedBy");
                entity.Property(e => e.PinCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PIN_CreatedDate");
                entity.Property(e => e.PinLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PIN_LastModifiedBy");
                entity.Property(e => e.PinLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PIN_LastModifiedDate");
                entity.Property(e => e.PinNotes).HasColumnName("PIN_Notes");
                entity.Property(e => e.PinPurchaseInvoiceId).HasColumnName("PIN_PurchaseInvoice_Id");
                entity.Property(e => e.PinTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PIN_TimeStamp");

                entity.HasOne(d => d.PinPurchaseInvoice).WithMany(p => p.PurchaseInvoiceNotes)
                    .HasForeignKey(d => d.PinPurchaseInvoiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseInvoiceNotes_PurchaseInvoices");
            });

            modelBuilder.Entity<PurchaseInvoicePaymentApprovalsCountView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoicePaymentApprovalsCountView", "fin");

                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.Id).HasColumnName("ID");
            });

            modelBuilder.Entity<PurchaseInvoicePaymentApprovalsInactiveBankAccountsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoicePaymentApprovalsInactiveBankAccountsView", "fin");

                entity.Property(e => e.AccountAddressLine1).HasMaxLength(250);
                entity.Property(e => e.AccountAddressLine2).HasMaxLength(250);
                entity.Property(e => e.AccountHolderName).HasMaxLength(250);
                entity.Property(e => e.AccountNumber).HasMaxLength(34);
                entity.Property(e => e.BankName).HasMaxLength(250);
                entity.Property(e => e.Bic)
                    .HasMaxLength(11)
                    .HasColumnName("BIC");
                entity.Property(e => e.CanceledCreditTransferId).HasColumnName("CanceledCreditTransfer_Id");
                entity.Property(e => e.CountryCode).HasMaxLength(3);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditAmount).HasColumnType("money");
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem)
                    .HasMaxLength(2)
                    .IsUnicode(false);
                entity.Property(e => e.ExecutionDate).HasColumnType("date");
                entity.Property(e => e.Iban)
                    .HasMaxLength(34)
                    .HasColumnName("IBAN");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LeadAmount).HasColumnType("money");
                entity.Property(e => e.LeadCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PaymentBatchType)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.PaymentCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.RemittanceInformation).HasMaxLength(250);
                entity.Property(e => e.SelectedBy).HasMaxLength(4000);
                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.TenantId).HasColumnName("Tenant_Id");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchaseInvoicePaymentApprovalsSelectableView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoicePaymentApprovalsSelectableView", "fin");

                entity.Property(e => e.AccountAddressLine1).HasMaxLength(250);
                entity.Property(e => e.AccountAddressLine2).HasMaxLength(250);
                entity.Property(e => e.AccountHolderName).HasMaxLength(250);
                entity.Property(e => e.AccountNumber).HasMaxLength(34);
                entity.Property(e => e.BankName).HasMaxLength(250);
                entity.Property(e => e.Bic)
                    .HasMaxLength(11)
                    .HasColumnName("BIC");
                entity.Property(e => e.CanceledCreditTransferId).HasColumnName("CanceledCreditTransfer_Id");
                entity.Property(e => e.CountryCode).HasMaxLength(3);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditAmount).HasColumnType("money");
                entity.Property(e => e.CreditorName).HasMaxLength(250);
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.ExecutionDate).HasColumnType("date");
                entity.Property(e => e.Iban)
                    .HasMaxLength(34)
                    .HasColumnName("IBAN");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LeadAmount).HasColumnType("money");
                entity.Property(e => e.LeadCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PaymentBatchType)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.PaymentCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.PurchaseInvoiceSalesStatus)
                    .HasMaxLength(18)
                    .IsUnicode(false);
                entity.Property(e => e.RemittanceInformation).HasMaxLength(250);
                entity.Property(e => e.SelectedBy).HasMaxLength(4000);
                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.TenantId).HasColumnName("Tenant_Id");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchaseInvoicePaymentApprovalsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoicePaymentApprovalsView", "fin");

                entity.Property(e => e.AccountAddressLine1).HasMaxLength(250);
                entity.Property(e => e.AccountAddressLine2).HasMaxLength(250);
                entity.Property(e => e.AccountHolderName).HasMaxLength(250);
                entity.Property(e => e.AccountNumber).HasMaxLength(34);
                entity.Property(e => e.BankName).HasMaxLength(250);
                entity.Property(e => e.Bic)
                    .HasMaxLength(11)
                    .HasColumnName("BIC");
                entity.Property(e => e.CountryCode).HasMaxLength(3);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditAmount).HasColumnType("money");
                entity.Property(e => e.CreditorCategory).HasMaxLength(250);
                entity.Property(e => e.CreditorName).HasMaxLength(250);
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierAssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.ExecutionDate).HasColumnType("date");
                entity.Property(e => e.Iban)
                    .HasMaxLength(34)
                    .HasColumnName("IBAN");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LeadAmount).HasColumnType("money");
                entity.Property(e => e.LeadCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.NonSelectableReason)
                    .HasMaxLength(54)
                    .IsUnicode(false);
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PaymentBatchType)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.PaymentCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.PurchaseInvoiceSalesStatus)
                    .HasMaxLength(18)
                    .IsUnicode(false);
                entity.Property(e => e.RemittanceInformation).HasMaxLength(250);
                entity.Property(e => e.SelectedBy).HasMaxLength(4000);
                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchaseInvoicePaymentAuthorizationsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoicePaymentAuthorizationsView", "fin");

                entity.Property(e => e.ApprovalComment).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditorAccountName).HasMaxLength(250);
                entity.Property(e => e.CreditorIban).HasMaxLength(34);
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DocumentArchiveId).HasMaxLength(250);
                entity.Property(e => e.DossierAssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.InvoiceDate).HasColumnType("date");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.OpenAmount).HasColumnType("money");
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PaymentDate).HasColumnType("date");
                entity.Property(e => e.PaymentMethodCode).HasMaxLength(10);
                entity.Property(e => e.PaymentMethodName).HasMaxLength(250);
                entity.Property(e => e.RecipientName).HasMaxLength(250);
                entity.Property(e => e.SelectedBy).HasMaxLength(250);
                entity.Property(e => e.SupplierInvoiceDate).HasColumnType("date");
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SupplierName).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchaseInvoicePaymentCreationsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoicePaymentCreationsView", "fin");

                entity.Property(e => e.AccountAddressLine1).HasMaxLength(250);
                entity.Property(e => e.AccountAddressLine2).HasMaxLength(250);
                entity.Property(e => e.AccountHolderName).HasMaxLength(250);
                entity.Property(e => e.AccountNumber).HasMaxLength(34);
                entity.Property(e => e.BankName).HasMaxLength(250);
                entity.Property(e => e.Bic)
                    .HasMaxLength(11)
                    .HasColumnName("BIC");
                entity.Property(e => e.CountryCode).HasMaxLength(3);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditAmount).HasColumnType("money");
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.ExecutionDate).HasColumnType("date");
                entity.Property(e => e.Iban)
                    .HasMaxLength(34)
                    .HasColumnName("IBAN");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.RemittanceInformation).HasMaxLength(20);
                entity.Property(e => e.TenantId).HasColumnName("Tenant_Id");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PurchaseInvoicePendingSalesOrderView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoicePendingSalesOrderView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PurchaseInvoiceStatus>(entity =>
            {
                entity.HasKey(e => e.PisId);

                entity.ToTable("PurchaseInvoiceStatuses", "fin");

                entity.Property(e => e.PisId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PIS_Id");
                entity.Property(e => e.PisCode)
                    .HasMaxLength(20)
                    .HasColumnName("PIS_Code");
                entity.Property(e => e.PisCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PIS_CreatedBy");
                entity.Property(e => e.PisCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PIS_CreatedDate");
                entity.Property(e => e.PisInactive).HasColumnName("PIS_Inactive");
                entity.Property(e => e.PisLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PIS_LastModifiedBy");
                entity.Property(e => e.PisLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PIS_LastModifiedDate");
                entity.Property(e => e.PisLocalizableEntryId).HasColumnName("PIS_LocalizableEntry_Id");
                entity.Property(e => e.PisLongName)
                    .HasMaxLength(250)
                    .HasColumnName("PIS_LongName");
                entity.Property(e => e.PisShortName)
                    .HasMaxLength(30)
                    .HasColumnName("PIS_ShortName");
                entity.Property(e => e.PisTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PIS_TimeStamp");

                entity.HasOne(d => d.PisLocalizableEntry).WithMany(p => p.PurchaseInvoiceStatuses)
                    .HasForeignKey(d => d.PisLocalizableEntryId)
                    .HasConstraintName("FK_PurchaseInvoiceStatuses_LocalizableEntries");
            });

            modelBuilder.Entity<PurchaseInvoiceStatusHistory>(entity =>
            {
                entity.HasKey(e => e.PishId);

                entity.ToTable("PurchaseInvoiceStatusHistory", "fin", tb =>
                {
                    tb.HasTrigger("td_PurchaseInvoiceStatusHistory");
                    tb.HasTrigger("ti_PurchaseInvoiceStatusHistory");
                    tb.HasTrigger("tu_PurchaseInvoiceStatusHistory");
                });

                entity.HasIndex(e => e.PishPurchaseInvoiceId, "IX_PurchaseInvoiceStatusHistory_PISH_PurchaseInvoice_Id");

                entity.Property(e => e.PishId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PISH_Id");
                entity.Property(e => e.PishCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PISH_CreatedBy");
                entity.Property(e => e.PishCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PISH_CreatedDate");
                entity.Property(e => e.PishEmployeeId).HasColumnName("PISH_Employee_Id");
                entity.Property(e => e.PishLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PISH_LastModifiedBy");
                entity.Property(e => e.PishLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PISH_LastModifiedDate");
                entity.Property(e => e.PishPurchaseInvoiceId).HasColumnName("PISH_PurchaseInvoice_Id");
                entity.Property(e => e.PishPurchaseInvoiceStatusId).HasColumnName("PISH_PurchaseInvoiceStatus_Id");
                entity.Property(e => e.PishStartDate).HasColumnName("PISH_StartDate");
                entity.Property(e => e.PishStatusChangeReason)
                    .HasMaxLength(250)
                    .HasColumnName("PISH_StatusChangeReason");
                entity.Property(e => e.PishTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PISH_TimeStamp");

                entity.HasOne(d => d.PishEmployee).WithMany(p => p.PurchaseInvoiceStatusHistories)
                    .HasForeignKey(d => d.PishEmployeeId)
                    .HasConstraintName("FK_PurchaseInvoiceStatusHistory_Employees");

                entity.HasOne(d => d.PishPurchaseInvoice).WithMany(p => p.PurchaseInvoiceStatusHistories)
                    .HasForeignKey(d => d.PishPurchaseInvoiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseInvoiceStatusHistory_PurchaseInvoices");

                entity.HasOne(d => d.PishPurchaseInvoiceStatus).WithMany(p => p.PurchaseInvoiceStatusHistories)
                    .HasForeignKey(d => d.PishPurchaseInvoiceStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseInvoiceStatusHistory_PurchaseInvoiceStatuses");
            });

            modelBuilder.Entity<PurchaseInvoiceSummariesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoiceSummariesView", "fin");

                entity.Property(e => e.ConvertedGrossAmount).HasColumnType("money");
                entity.Property(e => e.ConvertedNetAmount).HasColumnType("money");
                entity.Property(e => e.ConvertedTaxAmount).HasColumnType("money");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditorCity).HasMaxLength(250);
                entity.Property(e => e.CreditorName).HasMaxLength(250);
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.CreditorPostalCode).HasMaxLength(10);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.DepartmentName).HasMaxLength(756);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierAssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.Journal).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LedgerAccount).HasMaxLength(20);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.OpenAmount).HasColumnType("money");
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PaymentCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.PurchaseInvoiceStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseInvoiceStatusName).HasMaxLength(250);
                entity.Property(e => e.SourceTypeId).HasMaxLength(250);
                entity.Property(e => e.SupplierInvoiceDate).HasColumnType("date");
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.SupplierNumber)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SupplierVatNumber).HasMaxLength(50);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxCountryCode).HasMaxLength(3);
                entity.Property(e => e.TaxExemptedAmount).HasColumnType("money");
                entity.Property(e => e.TaxImportAmount).HasColumnType("money");
                entity.Property(e => e.TaxResversedChargeAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchaseInvoiceToAssistancePlanMappingsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoiceToAssistancePlanMappingsView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchaseInvoiceToCreditableSalesInvoicesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoiceToCreditableSalesInvoicesView", "fin");

                entity.Property(e => e.PurchaseInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SalesInvoiceNumber).HasMaxLength(20);
            });

            modelBuilder.Entity<PurchaseInvoiceToCreditableSalesOrdersView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoiceToCreditableSalesOrdersView", "fin");

                entity.Property(e => e.PurchaseInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SalesOrderNumber).HasMaxLength(20);
            });

            modelBuilder.Entity<PurchaseInvoiceToOrderMapping>(entity =>
            {
                entity.HasKey(e => e.PitoId);

                entity.ToTable("PurchaseInvoiceToOrderMapping", "fin");

                entity.HasIndex(e => e.PitoInactive, "IX_fin_PurchaseInvoiceToOrderMapping_Inactive__INCL");

                entity.HasIndex(e => new { e.PitoPurchaseInvoiceLineId, e.PitoInactive }, "IX_fin_PurchaseInvoiceToOrderMapping_PurchaseInvoiceLine_Inactive__INCL");

                entity.HasIndex(e => new { e.PitoPurchaseOrderLineId, e.PitoInactive }, "IX_fin_PurchaseInvoiceToOrderMapping_PurchaseOrderLine_Inactive__INCL");

                entity.Property(e => e.PitoId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PITO_Id");
                entity.Property(e => e.PitoCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PITO_CreatedBy");
                entity.Property(e => e.PitoCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PITO_CreatedDate");
                entity.Property(e => e.PitoInactive).HasColumnName("PITO_Inactive");
                entity.Property(e => e.PitoLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PITO_LastModifiedBy");
                entity.Property(e => e.PitoLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PITO_LastModifiedDate");
                entity.Property(e => e.PitoPurchaseInvoiceLineId).HasColumnName("PITO_PurchaseInvoiceLine_Id");
                entity.Property(e => e.PitoPurchaseOrderLineId).HasColumnName("PITO_PurchaseOrderLine_Id");
                entity.Property(e => e.PitoTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PITO_TimeStamp");

                entity.HasOne(d => d.PitoPurchaseInvoiceLine).WithMany(p => p.PurchaseInvoiceToOrderMappings)
                    .HasForeignKey(d => d.PitoPurchaseInvoiceLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseInvoiceToOrderMapping_PurchaseInvoiceLines");

                entity.HasOne(d => d.PitoPurchaseOrderLine).WithMany(p => p.PurchaseInvoiceToOrderMappings)
                    .HasForeignKey(d => d.PitoPurchaseOrderLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseInvoiceToOrderMapping_PurchaseOrderLines");
            });

            modelBuilder.Entity<PurchaseInvoiceToPurchaseOrderMappingsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoiceToPurchaseOrderMappingsView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.PurchaseInvoiceLineGrossAmount).HasColumnType("money");
                entity.Property(e => e.PurchaseOrderLineGrossAmount).HasColumnType("money");
            });

            modelBuilder.Entity<PurchaseInvoiceToPurchaseOrdersView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoiceToPurchaseOrdersView", "fin");

                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.OnNameOfCed).HasColumnName("OnNameOfCED");
                entity.Property(e => e.OrderNumber).HasMaxLength(10);
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PurchaseInvoiceToSalesInvoicesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoiceToSalesInvoicesView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.PurchaseInvoiceGrossAmount).HasColumnType("money");
                entity.Property(e => e.PurchaseInvoiceNetAmount).HasColumnType("money");
                entity.Property(e => e.PurchaseInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.PurchaseInvoiceTaxAmount).HasColumnType("money");
                entity.Property(e => e.SalesInvoiceDebtorName).HasMaxLength(756);
                entity.Property(e => e.SalesInvoiceDebtorNumber).HasMaxLength(20);
                entity.Property(e => e.SalesInvoiceGrossAmount).HasColumnType("money");
                entity.Property(e => e.SalesInvoiceNetAmount).HasColumnType("money");
                entity.Property(e => e.SalesInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SalesInvoicePaymentDate).HasColumnType("date");
                entity.Property(e => e.SalesInvoiceStatusCode).HasMaxLength(20);
                entity.Property(e => e.SalesInvoiceStatusName).HasMaxLength(250);
                entity.Property(e => e.SalesInvoiceTaxAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PurchaseInvoiceToSalesOrdersView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoiceToSalesOrdersView", "fin");

                entity.Property(e => e.ApprovalStatus)
                    .HasMaxLength(8)
                    .IsUnicode(false);
                entity.Property(e => e.AuthorizedBy).HasMaxLength(250);
                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.Comment).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.PurchaseInvoiceGrossAmount).HasColumnType("money");
                entity.Property(e => e.PurchaseInvoiceNetAmount).HasColumnType("money");
                entity.Property(e => e.PurchaseInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.PurchaseInvoiceTaxAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.SalesOrderGrossAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderNetAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderNumber).HasMaxLength(20);
                entity.Property(e => e.SalesOrderStatusCode).HasMaxLength(20);
                entity.Property(e => e.SalesOrderStatusName).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PurchaseInvoiceToWorkingOrderMappingsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoiceToWorkingOrderMappingsView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchaseInvoiceWorkingOrder>(entity =>
            {
                entity.HasKey(e => e.PiwoId);

                entity.ToTable("PurchaseInvoiceWorkingOrders", "fin");

                entity.HasIndex(e => new { e.PiwoWorkingOrderLineCostId, e.PiwoInactive }, "IX_fin_PurchaseInvoiceWorkingOrders_AssistancePlanLine_Inactive__INCL");

                entity.HasIndex(e => e.PiwoInactive, "IX_fin_PurchaseInvoiceWorkingOrders_Inactive__INCL");

                entity.HasIndex(e => new { e.PiwoPurchaseInvoiceLineId, e.PiwoInactive }, "PurchaseInvoiceWorkingOrders_PurchaseInvoiceLine_Id_Inactive_INCL");

                entity.Property(e => e.PiwoId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PIWO_Id");
                entity.Property(e => e.PiwoCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PIWO_CreatedBy");
                entity.Property(e => e.PiwoCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PIWO_CreatedDate");
                entity.Property(e => e.PiwoGrossAmount)
                    .HasColumnType("money")
                    .HasColumnName("PIWO_GrossAmount");
                entity.Property(e => e.PiwoInactive).HasColumnName("PIWO_Inactive");
                entity.Property(e => e.PiwoInactiveDate).HasColumnName("PIWO_InactiveDate");
                entity.Property(e => e.PiwoLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PIWO_LastModifiedBy");
                entity.Property(e => e.PiwoLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PIWO_LastModifiedDate");
                entity.Property(e => e.PiwoNetAmount)
                    .HasColumnType("money")
                    .HasColumnName("PIWO_NetAmount");
                entity.Property(e => e.PiwoPurchaseInvoiceLineId).HasColumnName("PIWO_PurchaseInvoiceLine_Id");
                entity.Property(e => e.PiwoTaxAmount)
                    .HasColumnType("money")
                    .HasColumnName("PIWO_TaxAmount");
                entity.Property(e => e.PiwoTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PIWO_TimeStamp");
                entity.Property(e => e.PiwoWorkingOrderLineCostId).HasColumnName("PIWO_WorkingOrderLineCost_Id");

                entity.HasOne(d => d.PiwoPurchaseInvoiceLine).WithMany(p => p.PurchaseInvoiceWorkingOrders)
                    .HasForeignKey(d => d.PiwoPurchaseInvoiceLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseInvoiceWorkingOrders_PurchaseInvoiceLines");

                entity.HasOne(d => d.PiwoWorkingOrderLineCost).WithMany(p => p.PurchaseInvoiceWorkingOrders)
                    .HasForeignKey(d => d.PiwoWorkingOrderLineCostId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseInvoiceWorkingOrders_WorkingOrderLineCosts");
            });

            modelBuilder.Entity<PurchaseInvoicesBlockedMatchedCountView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoicesBlockedMatchedCountView", "fin");

                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.Id).HasColumnName("ID");
            });

            modelBuilder.Entity<PurchaseInvoicesBlockedMatchedView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoicesBlockedMatchedView", "fin");

                entity.Property(e => e.AssistancePlanCreatedBy).HasMaxLength(250);
                entity.Property(e => e.AssistancePlanLastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DossierAssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.DossierCreatedBy).HasMaxLength(250);
                entity.Property(e => e.DossierLastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PurchaseInvoiceStatusChangeReason).HasMaxLength(250);
                entity.Property(e => e.SourceFrom).HasMaxLength(250);
                entity.Property(e => e.SupplierAccountNumber).HasMaxLength(34);
                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SupplierIban)
                    .HasMaxLength(34)
                    .HasColumnName("SupplierIBAN");
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.WorkingOrderCreatedBy).HasMaxLength(250);
                entity.Property(e => e.WorkingOrderLastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.WorkingOrderNumber).HasMaxLength(50);
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchaseInvoicesBlockedUnmatchedAssistancePlansView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoicesBlockedUnmatchedAssistancePlansView", "fin");

                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(20);
                entity.Property(e => e.ClientName).HasMaxLength(250);
                entity.Property(e => e.CostCenterCode).HasMaxLength(10);
                entity.Property(e => e.CostUnitCode).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditReason).HasMaxLength(250);
                entity.Property(e => e.CreditorChamberOfCommerceNumber).HasMaxLength(50);
                entity.Property(e => e.CreditorCity).HasMaxLength(250);
                entity.Property(e => e.CreditorCountryCode).HasMaxLength(3);
                entity.Property(e => e.CreditorEmail).HasMaxLength(250);
                entity.Property(e => e.CreditorEntryBatch).HasMaxLength(36);
                entity.Property(e => e.CreditorEntryNumber).HasMaxLength(36);
                entity.Property(e => e.CreditorEntrySystem).HasMaxLength(10);
                entity.Property(e => e.CreditorFax).HasMaxLength(20);
                entity.Property(e => e.CreditorHomePage).HasMaxLength(250);
                entity.Property(e => e.CreditorHouseNo).HasMaxLength(10);
                entity.Property(e => e.CreditorHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.CreditorIban).HasMaxLength(34);
                entity.Property(e => e.CreditorName).HasMaxLength(250);
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.CreditorPhone).HasMaxLength(20);
                entity.Property(e => e.CreditorPhoneExt).HasMaxLength(10);
                entity.Property(e => e.CreditorPostalCode).HasMaxLength(10);
                entity.Property(e => e.CreditorProvince).HasMaxLength(250);
                entity.Property(e => e.CreditorStreetName).HasMaxLength(250);
                entity.Property(e => e.CreditorVatNumber).HasMaxLength(50);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierTypeCode).HasMaxLength(10);
                entity.Property(e => e.DossierTypeName).HasMaxLength(250);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InvoiceTypeCode).HasMaxLength(10);
                entity.Property(e => e.Journal).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LedgerAccount).HasMaxLength(20);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PayeeAccountHolderName).HasMaxLength(250);
                entity.Property(e => e.PayeeAccountNumber).HasMaxLength(34);
                entity.Property(e => e.PayeeBankName).HasMaxLength(250);
                entity.Property(e => e.PayeeBic)
                    .HasMaxLength(11)
                    .HasColumnName("PayeeBIC");
                entity.Property(e => e.PayeeCity).HasMaxLength(250);
                entity.Property(e => e.PayeeCountryCode).HasMaxLength(3);
                entity.Property(e => e.PayeeHouseNo).HasMaxLength(10);
                entity.Property(e => e.PayeeHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.PayeeIban)
                    .HasMaxLength(34)
                    .HasColumnName("PayeeIBAN");
                entity.Property(e => e.PayeeName).HasMaxLength(250);
                entity.Property(e => e.PayeePostalCode).HasMaxLength(10);
                entity.Property(e => e.PayeeProvince).HasMaxLength(250);
                entity.Property(e => e.PayeeStreetName).HasMaxLength(250);
                entity.Property(e => e.PurchaseInvoiceStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseInvoiceStatusName).HasMaxLength(250);
                entity.Property(e => e.RecipientName).HasMaxLength(250);
                entity.Property(e => e.SourceFrom).HasMaxLength(250);
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchaseInvoicesBlockedUnmatchedCountView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoicesBlockedUnmatchedCountView", "fin");

                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.Id).HasColumnName("ID");
            });

            modelBuilder.Entity<PurchaseInvoicesBlockedUnmatchedView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoicesBlockedUnmatchedView", "fin");

                entity.Property(e => e.AssistancePlanCreatedBy).HasMaxLength(250);
                entity.Property(e => e.AssistancePlanLastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DossierAssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.DossierCreatedBy).HasMaxLength(250);
                entity.Property(e => e.DossierLastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.SourceFrom).HasMaxLength(250);
                entity.Property(e => e.SupplierAccountNumber).HasMaxLength(34);
                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SupplierIban)
                    .HasMaxLength(34)
                    .HasColumnName("SupplierIBAN");
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.WorkingOrderCreatedBy).HasMaxLength(250);
                entity.Property(e => e.WorkingOrderLastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.WorkingOrderNumber).HasMaxLength(50);
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchaseInvoicesBlockedView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoicesBlockedView", "fin");

                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(20);
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.CostCenterCode).HasMaxLength(10);
                entity.Property(e => e.CostUnitCode).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditReason).HasMaxLength(250);
                entity.Property(e => e.CreditorAccountNumber).HasMaxLength(34);
                entity.Property(e => e.CreditorChamberOfCommerceNumber).HasMaxLength(50);
                entity.Property(e => e.CreditorCity).HasMaxLength(250);
                entity.Property(e => e.CreditorCountryCode).HasMaxLength(3);
                entity.Property(e => e.CreditorEmail).HasMaxLength(250);
                entity.Property(e => e.CreditorEntryBatch).HasMaxLength(36);
                entity.Property(e => e.CreditorEntryNumber).HasMaxLength(36);
                entity.Property(e => e.CreditorEntrySystem).HasMaxLength(10);
                entity.Property(e => e.CreditorFax).HasMaxLength(20);
                entity.Property(e => e.CreditorHomePage).HasMaxLength(250);
                entity.Property(e => e.CreditorHouseNo).HasMaxLength(10);
                entity.Property(e => e.CreditorHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.CreditorIban).HasMaxLength(34);
                entity.Property(e => e.CreditorName).HasMaxLength(250);
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.CreditorPhone).HasMaxLength(20);
                entity.Property(e => e.CreditorPhoneExt).HasMaxLength(10);
                entity.Property(e => e.CreditorPostalCode).HasMaxLength(10);
                entity.Property(e => e.CreditorProvince).HasMaxLength(250);
                entity.Property(e => e.CreditorStreetName).HasMaxLength(250);
                entity.Property(e => e.CreditorVatNumber).HasMaxLength(50);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierTypeCode).HasMaxLength(10);
                entity.Property(e => e.DossierTypeName).HasMaxLength(250);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InvoiceTypeCode).HasMaxLength(10);
                entity.Property(e => e.Journal).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LedgerAccount).HasMaxLength(20);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PayeeAccountHolderName).HasMaxLength(250);
                entity.Property(e => e.PayeeAccountNumber).HasMaxLength(34);
                entity.Property(e => e.PayeeBankName).HasMaxLength(250);
                entity.Property(e => e.PayeeBic)
                    .HasMaxLength(11)
                    .HasColumnName("PayeeBIC");
                entity.Property(e => e.PayeeCity).HasMaxLength(250);
                entity.Property(e => e.PayeeCountryCode).HasMaxLength(3);
                entity.Property(e => e.PayeeHouseNo).HasMaxLength(10);
                entity.Property(e => e.PayeeHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.PayeeIban)
                    .HasMaxLength(34)
                    .HasColumnName("PayeeIBAN");
                entity.Property(e => e.PayeeName).HasMaxLength(250);
                entity.Property(e => e.PayeePostalCode).HasMaxLength(10);
                entity.Property(e => e.PayeeProvince).HasMaxLength(250);
                entity.Property(e => e.PayeeStreetName).HasMaxLength(250);
                entity.Property(e => e.PurchaseInvoiceStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseInvoiceStatusName).HasMaxLength(250);
                entity.Property(e => e.RecipientName).HasMaxLength(250);
                entity.Property(e => e.SourceFrom).HasMaxLength(250);
                entity.Property(e => e.SupplierAccountNumber).HasMaxLength(34);
                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SupplierIban)
                    .HasMaxLength(34)
                    .HasColumnName("SupplierIBAN");
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.WorkingOrderNumber).HasMaxLength(50);
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchaseInvoicesCreditableView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoicesCreditableView", "fin");

                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.CostCenterCode).HasMaxLength(10);
                entity.Property(e => e.CostUnitCode).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditReason).HasMaxLength(250);
                entity.Property(e => e.CreditorChamberOfCommerceNumber).HasMaxLength(50);
                entity.Property(e => e.CreditorEmail).HasMaxLength(250);
                entity.Property(e => e.CreditorFax).HasMaxLength(20);
                entity.Property(e => e.CreditorHomePage).HasMaxLength(250);
                entity.Property(e => e.CreditorName).HasMaxLength(250);
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.CreditorPhone).HasMaxLength(20);
                entity.Property(e => e.CreditorPhoneExt).HasMaxLength(10);
                entity.Property(e => e.CreditorVatNumber).HasMaxLength(50);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.Journal).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LedgerAccount).HasMaxLength(20);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PayeeName).HasMaxLength(250);
                entity.Property(e => e.PurchaseInvoiceStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseInvoiceStatusName).HasMaxLength(250);
                entity.Property(e => e.RecipientName).HasMaxLength(250);
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchaseInvoicesCreditedView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoicesCreditedView", "fin");

                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(20);
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.CostCenterCode).HasMaxLength(10);
                entity.Property(e => e.CostUnitCode).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditReason).HasMaxLength(250);
                entity.Property(e => e.CreditorChamberOfCommerceNumber).HasMaxLength(50);
                entity.Property(e => e.CreditorCity).HasMaxLength(250);
                entity.Property(e => e.CreditorCountryCode).HasMaxLength(3);
                entity.Property(e => e.CreditorEmail).HasMaxLength(250);
                entity.Property(e => e.CreditorEntryBatch).HasMaxLength(36);
                entity.Property(e => e.CreditorEntryNumber).HasMaxLength(36);
                entity.Property(e => e.CreditorEntrySystem).HasMaxLength(10);
                entity.Property(e => e.CreditorFax).HasMaxLength(20);
                entity.Property(e => e.CreditorHomePage).HasMaxLength(250);
                entity.Property(e => e.CreditorHouseNo).HasMaxLength(10);
                entity.Property(e => e.CreditorHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.CreditorIban).HasMaxLength(34);
                entity.Property(e => e.CreditorName).HasMaxLength(250);
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.CreditorPhone).HasMaxLength(20);
                entity.Property(e => e.CreditorPhoneExt).HasMaxLength(10);
                entity.Property(e => e.CreditorPostalCode).HasMaxLength(10);
                entity.Property(e => e.CreditorProvince).HasMaxLength(250);
                entity.Property(e => e.CreditorStreetName).HasMaxLength(250);
                entity.Property(e => e.CreditorVatNumber).HasMaxLength(50);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierTypeCode).HasMaxLength(10);
                entity.Property(e => e.DossierTypeName).HasMaxLength(250);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InvoiceTypeCode).HasMaxLength(10);
                entity.Property(e => e.Journal).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LedgerAccount).HasMaxLength(20);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PayeeAccountHolderName).HasMaxLength(250);
                entity.Property(e => e.PayeeAccountNumber).HasMaxLength(34);
                entity.Property(e => e.PayeeBankName).HasMaxLength(250);
                entity.Property(e => e.PayeeBic)
                    .HasMaxLength(11)
                    .HasColumnName("PayeeBIC");
                entity.Property(e => e.PayeeCity).HasMaxLength(250);
                entity.Property(e => e.PayeeCountryCode).HasMaxLength(3);
                entity.Property(e => e.PayeeHouseNo).HasMaxLength(10);
                entity.Property(e => e.PayeeHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.PayeeIban)
                    .HasMaxLength(34)
                    .HasColumnName("PayeeIBAN");
                entity.Property(e => e.PayeeName).HasMaxLength(250);
                entity.Property(e => e.PayeePostalCode).HasMaxLength(10);
                entity.Property(e => e.PayeeProvince).HasMaxLength(250);
                entity.Property(e => e.PayeeStreetName).HasMaxLength(250);
                entity.Property(e => e.PurchaseInvoiceStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseInvoiceStatusName).HasMaxLength(250);
                entity.Property(e => e.RecipientName).HasMaxLength(250);
                entity.Property(e => e.SourceFrom).HasMaxLength(250);
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.WorkingOrderNumber).HasMaxLength(50);
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchaseInvoicesEntryView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoicesEntryView", "fin");

                entity.Property(e => e.BlockedAmount).HasColumnType("money");
                entity.Property(e => e.BlockedIban).HasMaxLength(34);
                entity.Property(e => e.BookingNumber).HasMaxLength(10);
                entity.Property(e => e.BusinessUnitCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.BusinessUnitName).HasMaxLength(756);
                entity.Property(e => e.CostCenterCode).HasMaxLength(10);
                entity.Property(e => e.CostCenterName).HasMaxLength(250);
                entity.Property(e => e.CostUnitCode).HasMaxLength(10);
                entity.Property(e => e.CostUnitName).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditEntryNumber).HasMaxLength(36);
                entity.Property(e => e.CreditorAccountName).HasMaxLength(250);
                entity.Property(e => e.CreditorChamberOfCommerceNumber).HasMaxLength(50);
                entity.Property(e => e.CreditorCity).HasMaxLength(250);
                entity.Property(e => e.CreditorCountryCode).HasMaxLength(3);
                entity.Property(e => e.CreditorHouseNo).HasMaxLength(10);
                entity.Property(e => e.CreditorHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.CreditorIban).HasMaxLength(34);
                entity.Property(e => e.CreditorName).HasMaxLength(250);
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.CreditorPostalCode).HasMaxLength(10);
                entity.Property(e => e.CreditorStreetName).HasMaxLength(250);
                entity.Property(e => e.CreditorVatNumber).HasMaxLength(50);
                entity.Property(e => e.CultureCode).HasMaxLength(10);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DebitEntryNumber).HasMaxLength(36);
                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.DepartmentName).HasMaxLength(756);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierAssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierPartyName).HasMaxLength(200);
                entity.Property(e => e.EmployeeName).HasMaxLength(250);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InvoiceTypeCode).HasMaxLength(10);
                entity.Property(e => e.InvoiceTypeName).HasMaxLength(250);
                entity.Property(e => e.JouralName).HasMaxLength(250);
                entity.Property(e => e.JournalEntryNumber).HasMaxLength(20);
                entity.Property(e => e.JournalId).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.OpenAmount).HasColumnType("money");
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PaymentConditionCode).HasMaxLength(10);
                entity.Property(e => e.PaymentConditionName).HasMaxLength(250);
                entity.Property(e => e.PaymentCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.PaymentMethodCode).HasMaxLength(10);
                entity.Property(e => e.PaymentMethodName).HasMaxLength(250);
                entity.Property(e => e.PurchaseInvoiceStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseInvoiceStatusName).HasMaxLength(250);
                entity.Property(e => e.SupplierChamberOfCommerceNumber).HasMaxLength(50);
                entity.Property(e => e.SupplierCity).HasMaxLength(250);
                entity.Property(e => e.SupplierCountryCode).HasMaxLength(3);
                entity.Property(e => e.SupplierHouseNo).HasMaxLength(10);
                entity.Property(e => e.SupplierHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.SupplierInvoiceDate).HasColumnType("date");
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.SupplierNumber)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SupplierPostalCode).HasMaxLength(10);
                entity.Property(e => e.SupplierStreetName).HasMaxLength(250);
                entity.Property(e => e.SupplierVatNumber).HasMaxLength(50);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxCountryCode).HasMaxLength(3);
                entity.Property(e => e.TaxExemptedAmount).HasColumnType("money");
                entity.Property(e => e.TaxImportAmount).HasColumnType("money");
                entity.Property(e => e.TaxResversedChargeAmount).HasColumnType("money");
                entity.Property(e => e.TenantName).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchaseInvoicesPaymentReadyWithCreditTransfersPayRunView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoicesPaymentReadyWithCreditTransfersPayRunView", "fin");

                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.CostCenterCode).HasMaxLength(10);
                entity.Property(e => e.CostUnitCode).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditReason).HasMaxLength(250);
                entity.Property(e => e.CreditTransferStatusCode).HasMaxLength(10);
                entity.Property(e => e.CreditTransferStatusName).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InvoiceTypeCode).HasMaxLength(10);
                entity.Property(e => e.Journal).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LedgerAccount).HasMaxLength(20);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PayeeAccountHolderName).HasMaxLength(250);
                entity.Property(e => e.PayeeAccountNumber).HasMaxLength(34);
                entity.Property(e => e.PayeeBankName).HasMaxLength(250);
                entity.Property(e => e.PayeeBic)
                    .HasMaxLength(11)
                    .HasColumnName("PayeeBIC");
                entity.Property(e => e.PayeeIban)
                    .HasMaxLength(34)
                    .HasColumnName("PayeeIBAN");
                entity.Property(e => e.PayeeName).HasMaxLength(250);
                entity.Property(e => e.PurchaseInvoiceStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseInvoiceStatusName).HasMaxLength(250);
                entity.Property(e => e.RecipientName).HasMaxLength(250);
                entity.Property(e => e.SupplierAccountNumber).HasMaxLength(34);
                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SupplierIban)
                    .HasMaxLength(34)
                    .HasColumnName("SupplierIBAN");
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchaseInvoicesPendingAuthorizationCountView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoicesPendingAuthorizationCountView", "fin");

                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.Id).HasColumnName("ID");
            });

            modelBuilder.Entity<PurchaseInvoicesPendingAuthorizationView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoicesPendingAuthorizationView", "fin");

                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.CostCenterCode).HasMaxLength(10);
                entity.Property(e => e.CostUnitCode).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditReason).HasMaxLength(250);
                entity.Property(e => e.CreditorChamberOfCommerceNumber).HasMaxLength(50);
                entity.Property(e => e.CreditorCity).HasMaxLength(250);
                entity.Property(e => e.CreditorCountryCode).HasMaxLength(3);
                entity.Property(e => e.CreditorEmail).HasMaxLength(250);
                entity.Property(e => e.CreditorEntryBatch).HasMaxLength(36);
                entity.Property(e => e.CreditorEntryNumber).HasMaxLength(36);
                entity.Property(e => e.CreditorEntrySystem).HasMaxLength(10);
                entity.Property(e => e.CreditorFax).HasMaxLength(20);
                entity.Property(e => e.CreditorHomePage).HasMaxLength(250);
                entity.Property(e => e.CreditorHouseNo).HasMaxLength(10);
                entity.Property(e => e.CreditorHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.CreditorName).HasMaxLength(250);
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.CreditorPhone).HasMaxLength(20);
                entity.Property(e => e.CreditorPhoneExt).HasMaxLength(10);
                entity.Property(e => e.CreditorPostalCode).HasMaxLength(10);
                entity.Property(e => e.CreditorProvince).HasMaxLength(250);
                entity.Property(e => e.CreditorStreetName).HasMaxLength(250);
                entity.Property(e => e.CreditorVatNumber).HasMaxLength(50);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InvoiceTypeCode).HasMaxLength(10);
                entity.Property(e => e.Journal).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LedgerAccount).HasMaxLength(20);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PayeeAccountHolderName).HasMaxLength(250);
                entity.Property(e => e.PayeeAccountNumber).HasMaxLength(34);
                entity.Property(e => e.PayeeBankName).HasMaxLength(250);
                entity.Property(e => e.PayeeBic)
                    .HasMaxLength(11)
                    .HasColumnName("PayeeBIC");
                entity.Property(e => e.PayeeCity).HasMaxLength(250);
                entity.Property(e => e.PayeeCountryCode).HasMaxLength(3);
                entity.Property(e => e.PayeeHouseNo).HasMaxLength(10);
                entity.Property(e => e.PayeeHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.PayeeIban)
                    .HasMaxLength(34)
                    .HasColumnName("PayeeIBAN");
                entity.Property(e => e.PayeeName).HasMaxLength(250);
                entity.Property(e => e.PayeePostalCode).HasMaxLength(10);
                entity.Property(e => e.PayeeProvince).HasMaxLength(250);
                entity.Property(e => e.PayeeStreetName).HasMaxLength(250);
                entity.Property(e => e.PurchaseInvoiceStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseInvoiceStatusName).HasMaxLength(250);
                entity.Property(e => e.RecipientName).HasMaxLength(250);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchaseInvoicesPendingAuthorizationWithCancelledAssistancePlansView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoicesPendingAuthorizationWithCancelledAssistancePlansView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditReason).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.Journal).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PayeeName).HasMaxLength(250);
                entity.Property(e => e.PurchaseInvoiceAssistancePlanStatusCode).HasMaxLength(10);
                entity.Property(e => e.PurchaseInvoiceAssistancePlanStatusName).HasMaxLength(250);
                entity.Property(e => e.PurchaseInvoiceLineAssistancePlanStatusCode).HasMaxLength(10);
                entity.Property(e => e.PurchaseInvoiceLineAssistancePlanStatusName).HasMaxLength(250);
                entity.Property(e => e.PurchaseInvoiceStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseInvoiceStatusName).HasMaxLength(250);
                entity.Property(e => e.RecipientName).HasMaxLength(250);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchaseInvoicesPendingJournalEntryView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoicesPendingJournalEntryView", "fin");

                entity.Property(e => e.CreditorName).HasMaxLength(250);
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
            });

            modelBuilder.Entity<PurchaseInvoicesPendingPaymentView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoicesPendingPaymentView", "fin");

                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.CostCenterCode).HasMaxLength(10);
                entity.Property(e => e.CostUnitCode).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditReason).HasMaxLength(250);
                entity.Property(e => e.CreditorChamberOfCommerceNumber).HasMaxLength(50);
                entity.Property(e => e.CreditorCity).HasMaxLength(250);
                entity.Property(e => e.CreditorCountryCode).HasMaxLength(3);
                entity.Property(e => e.CreditorEmail).HasMaxLength(250);
                entity.Property(e => e.CreditorEntryBatch).HasMaxLength(36);
                entity.Property(e => e.CreditorEntryNumber).HasMaxLength(36);
                entity.Property(e => e.CreditorEntrySystem).HasMaxLength(10);
                entity.Property(e => e.CreditorFax).HasMaxLength(20);
                entity.Property(e => e.CreditorHomePage).HasMaxLength(250);
                entity.Property(e => e.CreditorHouseNo).HasMaxLength(10);
                entity.Property(e => e.CreditorHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.CreditorName).HasMaxLength(250);
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.CreditorPhone).HasMaxLength(20);
                entity.Property(e => e.CreditorPhoneExt).HasMaxLength(10);
                entity.Property(e => e.CreditorPostalCode).HasMaxLength(10);
                entity.Property(e => e.CreditorProvince).HasMaxLength(250);
                entity.Property(e => e.CreditorStreetName).HasMaxLength(250);
                entity.Property(e => e.CreditorVatNumber).HasMaxLength(50);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InvoiceTypeCode).HasMaxLength(10);
                entity.Property(e => e.Journal).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LedgerAccount).HasMaxLength(20);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PayeeAccountHolderName).HasMaxLength(250);
                entity.Property(e => e.PayeeAccountNumber).HasMaxLength(34);
                entity.Property(e => e.PayeeBankName).HasMaxLength(250);
                entity.Property(e => e.PayeeBic)
                    .HasMaxLength(11)
                    .HasColumnName("PayeeBIC");
                entity.Property(e => e.PayeeCity).HasMaxLength(250);
                entity.Property(e => e.PayeeCountryCode).HasMaxLength(3);
                entity.Property(e => e.PayeeHouseNo).HasMaxLength(10);
                entity.Property(e => e.PayeeHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.PayeeIban)
                    .HasMaxLength(34)
                    .HasColumnName("PayeeIBAN");
                entity.Property(e => e.PayeeName).HasMaxLength(250);
                entity.Property(e => e.PayeePostalCode).HasMaxLength(10);
                entity.Property(e => e.PayeeProvince).HasMaxLength(250);
                entity.Property(e => e.PayeeStreetName).HasMaxLength(250);
                entity.Property(e => e.PurchaseInvoiceStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseInvoiceStatusName).HasMaxLength(250);
                entity.Property(e => e.RecipientName).HasMaxLength(250);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchaseInvoicesPendingPaymentWithCreditTransfersPayReadyView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoicesPendingPaymentWithCreditTransfersPayReadyView", "fin");

                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.CostCenterCode).HasMaxLength(10);
                entity.Property(e => e.CostUnitCode).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditReason).HasMaxLength(250);
                entity.Property(e => e.CreditTransferStatusCode).HasMaxLength(10);
                entity.Property(e => e.CreditTransferStatusName).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InvoiceTypeCode).HasMaxLength(10);
                entity.Property(e => e.Journal).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LedgerAccount).HasMaxLength(20);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PayeeAccountHolderName).HasMaxLength(250);
                entity.Property(e => e.PayeeAccountNumber).HasMaxLength(34);
                entity.Property(e => e.PayeeBankName).HasMaxLength(250);
                entity.Property(e => e.PayeeBic)
                    .HasMaxLength(11)
                    .HasColumnName("PayeeBIC");
                entity.Property(e => e.PayeeIban)
                    .HasMaxLength(34)
                    .HasColumnName("PayeeIBAN");
                entity.Property(e => e.PayeeName).HasMaxLength(250);
                entity.Property(e => e.PurchaseInvoiceStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseInvoiceStatusName).HasMaxLength(250);
                entity.Property(e => e.RecipientName).HasMaxLength(250);
                entity.Property(e => e.SupplierAccountNumber).HasMaxLength(34);
                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SupplierIban)
                    .HasMaxLength(34)
                    .HasColumnName("SupplierIBAN");
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchaseInvoicesRejectedCountView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoicesRejectedCountView", "fin");

                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.Id).HasColumnName("ID");
            });

            modelBuilder.Entity<PurchaseInvoicesRejectedView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoicesRejectedView", "fin");

                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(20);
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.CostCenterCode).HasMaxLength(10);
                entity.Property(e => e.CostUnitCode).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditReason).HasMaxLength(250);
                entity.Property(e => e.CreditorChamberOfCommerceNumber).HasMaxLength(50);
                entity.Property(e => e.CreditorCity).HasMaxLength(250);
                entity.Property(e => e.CreditorCountryCode).HasMaxLength(3);
                entity.Property(e => e.CreditorEmail).HasMaxLength(250);
                entity.Property(e => e.CreditorEntryBatch).HasMaxLength(36);
                entity.Property(e => e.CreditorEntryNumber).HasMaxLength(36);
                entity.Property(e => e.CreditorEntrySystem).HasMaxLength(10);
                entity.Property(e => e.CreditorFax).HasMaxLength(20);
                entity.Property(e => e.CreditorHomePage).HasMaxLength(250);
                entity.Property(e => e.CreditorHouseNo).HasMaxLength(10);
                entity.Property(e => e.CreditorHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.CreditorName).HasMaxLength(250);
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.CreditorPhone).HasMaxLength(20);
                entity.Property(e => e.CreditorPhoneExt).HasMaxLength(10);
                entity.Property(e => e.CreditorPostalCode).HasMaxLength(10);
                entity.Property(e => e.CreditorProvince).HasMaxLength(250);
                entity.Property(e => e.CreditorStreetName).HasMaxLength(250);
                entity.Property(e => e.CreditorVatNumber).HasMaxLength(50);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierTypeCode).HasMaxLength(10);
                entity.Property(e => e.DossierTypeName).HasMaxLength(250);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InvoiceTypeCode).HasMaxLength(10);
                entity.Property(e => e.Journal).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LedgerAccount).HasMaxLength(20);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LicensePlate).HasMaxLength(15);
                entity.Property(e => e.LicensePlateCountryCode).HasMaxLength(3);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PayeeAccountHolderName).HasMaxLength(250);
                entity.Property(e => e.PayeeAccountNumber).HasMaxLength(34);
                entity.Property(e => e.PayeeBankName).HasMaxLength(250);
                entity.Property(e => e.PayeeBic)
                    .HasMaxLength(11)
                    .HasColumnName("PayeeBIC");
                entity.Property(e => e.PayeeCity).HasMaxLength(250);
                entity.Property(e => e.PayeeCountryCode).HasMaxLength(3);
                entity.Property(e => e.PayeeHouseNo).HasMaxLength(10);
                entity.Property(e => e.PayeeHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.PayeeIban)
                    .HasMaxLength(34)
                    .HasColumnName("PayeeIBAN");
                entity.Property(e => e.PayeeName).HasMaxLength(250);
                entity.Property(e => e.PayeePostalCode).HasMaxLength(10);
                entity.Property(e => e.PayeeProvince).HasMaxLength(250);
                entity.Property(e => e.PayeeStreetName).HasMaxLength(250);
                entity.Property(e => e.PurchaseInvoiceStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseInvoiceStatusName).HasMaxLength(250);
                entity.Property(e => e.RecipientName).HasMaxLength(250);
                entity.Property(e => e.RejectedReason).HasMaxLength(250);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.WorkingOrderNumber).HasMaxLength(50);
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchaseInvoicesUrgentView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoicesUrgentView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.PurchaseInvoiceStatusCode).HasMaxLength(20);
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
            });

            modelBuilder.Entity<PurchaseInvoicesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseInvoicesView", "fin");

                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.BankStatementLineDate).HasColumnType("date");
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.CostCenterCode).HasMaxLength(10);
                entity.Property(e => e.CostUnitCode).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditReason).HasMaxLength(250);
                entity.Property(e => e.CreditorChamberOfCommerceNumber).HasMaxLength(50);
                entity.Property(e => e.CreditorCity).HasMaxLength(250);
                entity.Property(e => e.CreditorCountryCode).HasMaxLength(3);
                entity.Property(e => e.CreditorEmail).HasMaxLength(250);
                entity.Property(e => e.CreditorEntryBatch).HasMaxLength(36);
                entity.Property(e => e.CreditorEntryNumber).HasMaxLength(36);
                entity.Property(e => e.CreditorEntrySystem).HasMaxLength(10);
                entity.Property(e => e.CreditorFax).HasMaxLength(20);
                entity.Property(e => e.CreditorHomePage).HasMaxLength(250);
                entity.Property(e => e.CreditorHouseNo).HasMaxLength(10);
                entity.Property(e => e.CreditorHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.CreditorName).HasMaxLength(250);
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.CreditorPhone).HasMaxLength(20);
                entity.Property(e => e.CreditorPhoneExt).HasMaxLength(10);
                entity.Property(e => e.CreditorPostalCode).HasMaxLength(10);
                entity.Property(e => e.CreditorProvince).HasMaxLength(250);
                entity.Property(e => e.CreditorStreetName).HasMaxLength(250);
                entity.Property(e => e.CreditorVatNumber).HasMaxLength(50);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.GuidDms).HasMaxLength(250);
                entity.Property(e => e.InvoiceTypeCode).HasMaxLength(10);
                entity.Property(e => e.Journal).HasMaxLength(20);
                entity.Property(e => e.JournalEntryNumber).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LedgerAccount).HasMaxLength(20);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.OpenAmount).HasColumnType("money");
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PayeeAccountHolderName).HasMaxLength(250);
                entity.Property(e => e.PayeeAccountNumber).HasMaxLength(34);
                entity.Property(e => e.PayeeBankName).HasMaxLength(250);
                entity.Property(e => e.PayeeBic)
                    .HasMaxLength(11)
                    .HasColumnName("PayeeBIC");
                entity.Property(e => e.PayeeCity).HasMaxLength(250);
                entity.Property(e => e.PayeeCountryCode).HasMaxLength(3);
                entity.Property(e => e.PayeeHouseNo).HasMaxLength(10);
                entity.Property(e => e.PayeeHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.PayeeIban)
                    .HasMaxLength(34)
                    .HasColumnName("PayeeIBAN");
                entity.Property(e => e.PayeeName).HasMaxLength(250);
                entity.Property(e => e.PayeePostalCode).HasMaxLength(10);
                entity.Property(e => e.PayeeProvince).HasMaxLength(250);
                entity.Property(e => e.PayeeStreetName).HasMaxLength(250);
                entity.Property(e => e.PurchaseInvoiceStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseInvoiceStatusName).HasMaxLength(250);
                entity.Property(e => e.RecipientName).HasMaxLength(250);
                entity.Property(e => e.ReconciledValue).HasColumnType("money");
                entity.Property(e => e.SignedOpenAmount).HasColumnType("money");
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.SupplierNumber)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchaseJournalEntriesExactExportedView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseJournalEntriesExactExportedView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.ExactAdministration).HasMaxLength(10);
                entity.Property(e => e.JournalEntryDate).HasColumnType("date");
                entity.Property(e => e.JournalEntryNumber).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PurchaseJournalEntriesExactView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseJournalEntriesExactView", "fin");

                entity.Property(e => e.AccountNumber).HasMaxLength(34);
                entity.Property(e => e.BankCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.BlockedAmount).HasColumnType("money");
                entity.Property(e => e.BookingNumber).HasMaxLength(10);
                entity.Property(e => e.CostCenterCode).HasMaxLength(20);
                entity.Property(e => e.CostUnitCode).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.ExactAdministration).HasMaxLength(10);
                entity.Property(e => e.ExactJournal).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.JournalEntryDate).HasColumnType("date");
                entity.Property(e => e.JournalEntryNumber).HasMaxLength(20);
                entity.Property(e => e.JournalId).HasMaxLength(20);
                entity.Property(e => e.JournalTypeId).HasMaxLength(10);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.PaymentConditionCode).HasMaxLength(10);
                entity.Property(e => e.PaymentMethodCode).HasMaxLength(20);
                entity.Property(e => e.PaymentReference).HasMaxLength(250);
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PurchaseJournalEntriesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseJournalEntriesView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.ExactAdministration).HasMaxLength(10);
                entity.Property(e => e.FinancialPeriod).HasMaxLength(20);
                entity.Property(e => e.FinancialYear).HasMaxLength(20);
                entity.Property(e => e.JournalEntryDate).HasColumnType("date");
                entity.Property(e => e.JournalEntryNumber).HasMaxLength(20);
                entity.Property(e => e.JournalNumber).HasMaxLength(10);
                entity.Property(e => e.JournalType).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PurchaseJournalEntryLine>(entity =>
            {
                entity.HasKey(e => e.PjlId);

                entity.ToTable("PurchaseJournalEntryLines", "fin");

                entity.HasIndex(e => new { e.PjlJournalEntryLineId, e.PjlPurchaseInvoiceLineId }, "IX_PurchaseJournalEntryLines_JournalEntryLine_PurchaseInvoiceLine");

                entity.HasIndex(e => new { e.PjlPurchaseInvoiceLineId, e.PjlJournalEntryLineId }, "IX_PurchaseJournalEntryLines_PurchaseInvoiceLine_JournalEntryLine");

                entity.Property(e => e.PjlId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PJL_Id");
                entity.Property(e => e.PjlCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PJL_CreatedBy");
                entity.Property(e => e.PjlCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PJL_CreatedDate");
                entity.Property(e => e.PjlJournalEntryLineId).HasColumnName("PJL_JournalEntryLine_Id");
                entity.Property(e => e.PjlLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PJL_LastModifiedBy");
                entity.Property(e => e.PjlLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PJL_LastModifiedDate");
                entity.Property(e => e.PjlPurchaseInvoiceLineId).HasColumnName("PJL_PurchaseInvoiceLine_Id");
                entity.Property(e => e.PjlTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PJL_TimeStamp");

                entity.HasOne(d => d.PjlJournalEntryLine).WithMany(p => p.PurchaseJournalEntryLines)
                    .HasForeignKey(d => d.PjlJournalEntryLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseJournalEntryLines_JournalEntryLines");

                entity.HasOne(d => d.PjlPurchaseInvoiceLine).WithMany(p => p.PurchaseJournalEntryLines)
                    .HasForeignKey(d => d.PjlPurchaseInvoiceLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseJournalEntryLines_PurchaseInvoiceLines");
            });

            modelBuilder.Entity<PurchaseJournalEntryLineSummariesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseJournalEntryLineSummariesView", "fin");

                entity.Property(e => e.CreditValue).HasColumnType("money");
                entity.Property(e => e.CreditorName).HasMaxLength(250);
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DebitValue).HasColumnType("money");
                entity.Property(e => e.ExactGeneralLedger).HasMaxLength(10);
                entity.Property(e => e.ExactJournal).HasMaxLength(10);
                entity.Property(e => e.GeneralLedgerDescription).HasMaxLength(250);
                entity.Property(e => e.GeneralLedgerId).HasMaxLength(20);
                entity.Property(e => e.JournalEntryDate).HasColumnType("date");
                entity.Property(e => e.JournalEntryNumber).HasMaxLength(20);
                entity.Property(e => e.JournalId).HasMaxLength(20);
                entity.Property(e => e.JournalType).HasMaxLength(10);
                entity.Property(e => e.PurchaseInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.TaxCode).HasMaxLength(10);
                entity.Property(e => e.TaxValue).HasColumnType("money");
            });

            modelBuilder.Entity<PurchaseJournalEntryLinesExactView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseJournalEntryLinesExactView", "fin");

                entity.Property(e => e.CostCenterCode).HasMaxLength(20);
                entity.Property(e => e.CostUnitCode).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.ExactGeneralLedger).HasMaxLength(10);
                entity.Property(e => e.ExactJournal).HasMaxLength(10);
                entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 5)");
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxCode).HasMaxLength(10);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PurchaseJournalEntryLinesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseJournalEntryLinesView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.ExactJournal).HasMaxLength(10);
                entity.Property(e => e.JournalEntryCreditValue).HasColumnType("money");
                entity.Property(e => e.JournalEntryCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.JournalEntryDebitValue).HasColumnType("money");
                entity.Property(e => e.JournalEntryLedgerAccount).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LeadCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.PurchaseInvoiceCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.PurchaseInvoiceLineGrossAmount).HasColumnType("money");
                entity.Property(e => e.PurchaseInvoiceLineLedgerAccount).HasMaxLength(20);
                entity.Property(e => e.PurchaseInvoiceLineNetAmount).HasColumnType("money");
                entity.Property(e => e.PurchaseInvoiceLineTaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxCode).HasMaxLength(20);
            });

            modelBuilder.Entity<PurchaseJournalSettingTypeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseJournalSettingTypeView", "fin");

                entity.Property(e => e.JournalSettingType)
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PurchaseLedgerSetting>(entity =>
            {
                entity.HasKey(e => e.PlsId);

                entity.ToTable("PurchaseLedgerSettings", "fin");

                entity.Property(e => e.PlsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PLS_Id");
                entity.Property(e => e.PlsAbbreviation)
                    .HasMaxLength(10)
                    .HasColumnName("PLS_Abbreviation");
                entity.Property(e => e.PlsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PLS_CreatedBy");
                entity.Property(e => e.PlsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PLS_CreatedDate");
                entity.Property(e => e.PlsDescription)
                    .HasMaxLength(250)
                    .HasColumnName("PLS_Description");
                entity.Property(e => e.PlsEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("PLS_EffectiveDate");
                entity.Property(e => e.PlsEntrySystem)
                    .HasMaxLength(10)
                    .HasColumnName("PLS_EntrySystem");
                entity.Property(e => e.PlsEqualizationCreditGeneralLedgerId)
                    .HasMaxLength(20)
                    .HasColumnName("PLS_EqualizationCreditGeneralLedger_Id");
                entity.Property(e => e.PlsEqualizationDebitGeneralLedgerId)
                    .HasMaxLength(20)
                    .HasColumnName("PLS_EqualizationDebitGeneralLedger_Id");
                entity.Property(e => e.PlsEqualizationJournalId)
                    .HasMaxLength(20)
                    .HasColumnName("PLS_EqualizationJournal_Id");
                entity.Property(e => e.PlsGeneralLedgerId)
                    .HasMaxLength(20)
                    .HasColumnName("PLS_GeneralLedger_Id");
                entity.Property(e => e.PlsIsCostOfSales).HasColumnName("PLS_IsCostOfSales");
                entity.Property(e => e.PlsIsCredit).HasColumnName("PLS_IsCredit");
                entity.Property(e => e.PlsIsCrossBorderClaimDepartment).HasColumnName("PLS_IsCrossBorderClaimDepartment");
                entity.Property(e => e.PlsIsFee).HasColumnName("PLS_IsFee");
                entity.Property(e => e.PlsIsIntercompany).HasColumnName("PLS_IsIntercompany");
                entity.Property(e => e.PlsIsInvoice).HasColumnName("PLS_IsInvoice");
                entity.Property(e => e.PlsIsRecipientLegalEntity).HasColumnName("PLS_IsRecipientLegalEntity");
                entity.Property(e => e.PlsIsWithHoldingTax).HasColumnName("PLS_IsWithHoldingTax");
                entity.Property(e => e.PlsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PLS_LastModifiedBy");
                entity.Property(e => e.PlsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PLS_LastModifiedDate");
                entity.Property(e => e.PlsLegalEntityId).HasColumnName("PLS_LegalEntity_Id");
                entity.Property(e => e.PlsTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("PLS_TerminationDate");
                entity.Property(e => e.PlsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PLS_TimeStamp");

                entity.HasOne(d => d.PlsEqualizationCreditGeneralLedger).WithMany(p => p.PurchaseLedgerSettingPlsEqualizationCreditGeneralLedgers)
                    .HasForeignKey(d => d.PlsEqualizationCreditGeneralLedgerId)
                    .HasConstraintName("FK_PurchaseLedgerSettings_EqualizationCreditGeneralLedgers");

                entity.HasOne(d => d.PlsEqualizationDebitGeneralLedger).WithMany(p => p.PurchaseLedgerSettingPlsEqualizationDebitGeneralLedgers)
                    .HasForeignKey(d => d.PlsEqualizationDebitGeneralLedgerId)
                    .HasConstraintName("FK_PurchaseLedgerSettings_EqualizationDebitGeneralLedgers");

                entity.HasOne(d => d.PlsEqualizationJournal).WithMany(p => p.PurchaseLedgerSettings)
                    .HasForeignKey(d => d.PlsEqualizationJournalId)
                    .HasConstraintName("FK_PurchaseLedgerSettings_EqualizationJournals");

                entity.HasOne(d => d.PlsGeneralLedger).WithMany(p => p.PurchaseLedgerSettingPlsGeneralLedgers)
                    .HasForeignKey(d => d.PlsGeneralLedgerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseLedgerSettings_GeneralLedgers");

                entity.HasOne(d => d.PlsLegalEntity).WithMany(p => p.PurchaseLedgerSettings)
                    .HasForeignKey(d => d.PlsLegalEntityId)
                    .HasConstraintName("FK_PurchaseLedgerSettings_LegalEntities");
            });

            modelBuilder.Entity<PurchaseOrder>(entity =>
            {
                entity.HasKey(e => e.PohId);

                entity.ToTable("PurchaseOrders", "erp");

                entity.HasIndex(e => new { e.PohOrderNumber, e.PohDepartmentId, e.PohSupplierId }, "IX_PurchaseOrders_OrderNumber_Supplier_Department").IsUnique();

                entity.HasIndex(e => e.PohDossierId, "IX_PurchaseOrders_POH_Dossier_Id");

                entity.HasIndex(e => new { e.PohSupplierId, e.PohLegalEntityId }, "IX_PurchaseOrders_POH_Supplier_Id_POH_LegalEntity_Id");

                entity.HasIndex(e => e.PohWorkingOrderLineId, "IX_PurchaseOrders_POH_WorkingOrderLine_Id");

                entity.HasIndex(e => e.PohAssistancePlanId, "IX_erp_PurchaseOrders_AssistancePlan");

                entity.HasIndex(e => e.PohDebitPurchaseOrderId, "IX_erp_PurchaseOrders_DebitPurchaseOrder__INCL");

                entity.HasIndex(e => new { e.PohDepartmentId, e.PohEntryNumber, e.PohEntrySystem }, "IX_erp_PurchaseOrders_Department_EntryNumber_EntrySystem");

                entity.HasIndex(e => new { e.PohEntrySystem, e.PohLegalEntityId }, "IX_erp_PurchaseOrders_EntrySystem_LegalEntity__INCL");

                entity.HasIndex(e => new { e.PohIsCredit, e.PohEntrySystem }, "IX_erp_PurchaseOrders_IsCredit_EntrySystem__INCL");

                entity.HasIndex(e => new { e.PohLegalEntityId, e.PohEntrySystem }, "IX_erp_PurchaseOrders_LegalEntity_EntrySystem__INCL");

                entity.Property(e => e.PohId)
                    .ValueGeneratedNever()
                    .HasColumnName("POH_Id");
                entity.Property(e => e.PohAssistancePlanId).HasColumnName("POH_AssistancePlan_Id");
                entity.Property(e => e.PohCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("POH_CreatedBy");
                entity.Property(e => e.PohCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("POH_CreatedDate");
                entity.Property(e => e.PohCultureCode)
                    .HasMaxLength(10)
                    .HasColumnName("POH_CultureCode");
                entity.Property(e => e.PohCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("POH_CurrencyCode");
                entity.Property(e => e.PohCurrentStatusCode)
                    .HasMaxLength(20)
                    .HasColumnName("POH_CurrentStatusCode");
                entity.Property(e => e.PohCurrentStatusHistoryId).HasColumnName("POH_CurrentStatusHistory_Id");
                entity.Property(e => e.PohCurrentStatusHistoryStartDate).HasColumnName("POH_CurrentStatusHistoryStartDate");
                entity.Property(e => e.PohDebitPurchaseOrderId).HasColumnName("POH_DebitPurchaseOrder_Id");
                entity.Property(e => e.PohDeliveryAddressId).HasColumnName("POH_DeliveryAddress_Id");
                entity.Property(e => e.PohDepartmentId).HasColumnName("POH_Department_Id");
                entity.Property(e => e.PohDescription)
                    .HasMaxLength(250)
                    .HasColumnName("POH_Description");
                entity.Property(e => e.PohDocumentArchiveId).HasColumnName("POH_DocumentArchive_Id");
                entity.Property(e => e.PohDossierAssignmentId).HasColumnName("POH_DossierAssignment_Id");
                entity.Property(e => e.PohDossierId).HasColumnName("POH_Dossier_Id");
                entity.Property(e => e.PohDossierNumber)
                    .HasMaxLength(20)
                    .HasColumnName("POH_DossierNumber");
                entity.Property(e => e.PohDossierPartyId).HasColumnName("POH_DossierParty_Id");
                entity.Property(e => e.PohEmployeeId).HasColumnName("POH_Employee_Id");
                entity.Property(e => e.PohEntryBatch)
                    .HasMaxLength(36)
                    .HasColumnName("POH_EntryBatch");
                entity.Property(e => e.PohEntryNumber)
                    .HasMaxLength(36)
                    .HasColumnName("POH_EntryNumber");
                entity.Property(e => e.PohEntrySystem)
                    .HasMaxLength(10)
                    .HasColumnName("POH_EntrySystem");
                entity.Property(e => e.PohExpectedDeliveryDate).HasColumnName("POH_ExpectedDeliveryDate");
                entity.Property(e => e.PohGrossAmount)
                    .HasColumnType("money")
                    .HasColumnName("POH_GrossAmount");
                entity.Property(e => e.PohInvoiceToPayorAddressId).HasColumnName("POH_InvoiceToPayorAddress_Id");
                entity.Property(e => e.PohInvoiceToPayorId).HasColumnName("POH_InvoiceToPayor_Id");
                entity.Property(e => e.PohInvolvedObjectId).HasColumnName("POH_InvolvedObject_Id");
                entity.Property(e => e.PohIsCredit).HasColumnName("POH_IsCredit");
                entity.Property(e => e.PohIsImported).HasColumnName("POH_IsImported");
                entity.Property(e => e.PohIsIntercompany).HasColumnName("POH_IsIntercompany");
                entity.Property(e => e.PohIsPrinted).HasColumnName("POH_IsPrinted");
                entity.Property(e => e.PohLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("POH_LastModifiedBy");
                entity.Property(e => e.PohLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("POH_LastModifiedDate");
                entity.Property(e => e.PohLegalEntityId).HasColumnName("POH_LegalEntity_Id");
                entity.Property(e => e.PohNetAmount)
                    .HasColumnType("money")
                    .HasColumnName("POH_NetAmount");
                entity.Property(e => e.PohOrderDate).HasColumnName("POH_OrderDate");
                entity.Property(e => e.PohOrderDocumentId).HasColumnName("POH_OrderDocument_Id");
                entity.Property(e => e.PohOrderNumber)
                    .HasMaxLength(10)
                    .HasColumnName("POH_OrderNumber");
                entity.Property(e => e.PohOurReference)
                    .HasMaxLength(250)
                    .HasColumnName("POH_OurReference");
                entity.Property(e => e.PohSubContractorId).HasColumnName("POH_SubContractor_Id");
                entity.Property(e => e.PohSupplierId).HasColumnName("POH_Supplier_Id");
                entity.Property(e => e.PohTaxAmount)
                    .HasColumnType("money")
                    .HasColumnName("POH_TaxAmount");
                entity.Property(e => e.PohTaxCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("POH_TaxCountryCode");
                entity.Property(e => e.PohTaxExemptedAmount)
                    .HasColumnType("money")
                    .HasColumnName("POH_TaxExemptedAmount");
                entity.Property(e => e.PohTaxImportAmount)
                    .HasColumnType("money")
                    .HasColumnName("POH_TaxImportAmount");
                entity.Property(e => e.PohTaxReversedChargeAmount)
                    .HasColumnType("money")
                    .HasColumnName("POH_TaxReversedChargeAmount");
                entity.Property(e => e.PohTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("POH_TimeStamp");
                entity.Property(e => e.PohWorkingOrderLineId).HasColumnName("POH_WorkingOrderLine_Id");
                entity.Property(e => e.PohYourReference)
                    .HasMaxLength(250)
                    .HasColumnName("POH_YourReference");

                entity.HasOne(d => d.PohAssistancePlan).WithMany(p => p.PurchaseOrders)
                    .HasForeignKey(d => d.PohAssistancePlanId)
                    .HasConstraintName("FK_PurchaseOrders_AssistancePlans");

                entity.HasOne(d => d.PohDebitPurchaseOrder).WithMany(p => p.InversePohDebitPurchaseOrder)
                    .HasForeignKey(d => d.PohDebitPurchaseOrderId)
                    .HasConstraintName("FK_PurchaseOrders_PurchaseOrders");

                entity.HasOne(d => d.PohDeliveryAddress).WithMany(p => p.PurchaseOrderPohDeliveryAddresses)
                    .HasForeignKey(d => d.PohDeliveryAddressId)
                    .HasConstraintName("FK_PurchaseOrders_Addresses");

                entity.HasOne(d => d.PohDepartment).WithMany(p => p.PurchaseOrders)
                    .HasForeignKey(d => d.PohDepartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseOrders_Departments");

                entity.HasOne(d => d.PohDossierAssignment).WithMany(p => p.PurchaseOrders)
                    .HasForeignKey(d => d.PohDossierAssignmentId)
                    .HasConstraintName("FK_PurchaseOrders_DossierAssignments");

                entity.HasOne(d => d.PohDossier).WithMany(p => p.PurchaseOrders)
                    .HasForeignKey(d => d.PohDossierId)
                    .HasConstraintName("FK_PurchaseOrders_Dossiers");

                entity.HasOne(d => d.PohDossierParty).WithMany(p => p.PurchaseOrders)
                    .HasForeignKey(d => d.PohDossierPartyId)
                    .HasConstraintName("FK_PurchaseOrders_DossierParties");

                entity.HasOne(d => d.PohEmployee).WithMany(p => p.PurchaseOrders)
                    .HasForeignKey(d => d.PohEmployeeId)
                    .HasConstraintName("FK_PurchaseOrders_Employees");

                entity.HasOne(d => d.PohInvoiceToPayorAddress).WithMany(p => p.PurchaseOrderPohInvoiceToPayorAddresses)
                    .HasForeignKey(d => d.PohInvoiceToPayorAddressId)
                    .HasConstraintName("FK_PurchaseOrders_InvoicePayorAddressses");

                entity.HasOne(d => d.PohInvoiceToPayor).WithMany(p => p.PurchaseOrders)
                    .HasForeignKey(d => d.PohInvoiceToPayorId)
                    .HasConstraintName("FK_PurchaseOrders_InvoicePayors");

                entity.HasOne(d => d.PohInvolvedObject).WithMany(p => p.PurchaseOrders)
                    .HasForeignKey(d => d.PohInvolvedObjectId)
                    .HasConstraintName("FK_PurchaseOrders_InvolvedObjects");

                entity.HasOne(d => d.PohLegalEntity).WithMany(p => p.PurchaseOrders)
                    .HasForeignKey(d => d.PohLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseOrders_LegalEntities");

                entity.HasOne(d => d.PohOrderDocument).WithMany(p => p.PurchaseOrders)
                    .HasForeignKey(d => d.PohOrderDocumentId)
                    .HasConstraintName("FK_PurchaseOrders_OrderDocuments");

                entity.HasOne(d => d.PohSubContractor).WithMany(p => p.PurchaseOrderPohSubContractors)
                    .HasForeignKey(d => d.PohSubContractorId)
                    .HasConstraintName("FK_PurchaseOrders_SubContractors");

                entity.HasOne(d => d.PohSupplier).WithMany(p => p.PurchaseOrderPohSuppliers)
                    .HasForeignKey(d => d.PohSupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseOrders_Suppliers");

                entity.HasOne(d => d.PohWorkingOrderLine).WithMany(p => p.PurchaseOrders)
                    .HasForeignKey(d => d.PohWorkingOrderLineId)
                    .HasConstraintName("FK_PurchaseOrders_WorkingOrderLines");
            });

            modelBuilder.Entity<PurchaseOrderApproval>(entity =>
            {
                entity.HasKey(e => e.PopId);

                entity.ToTable("PurchaseOrderApprovals", "erp");

                entity.Property(e => e.PopId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("POP_Id");
                entity.Property(e => e.PopApprovalDate).HasColumnName("POP_ApprovalDate");
                entity.Property(e => e.PopAutorizationRoleId)
                    .HasMaxLength(50)
                    .HasColumnName("POP_AutorizationRole_Id");
                entity.Property(e => e.PopCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("POP_CreatedBy");
                entity.Property(e => e.PopCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("POP_CreatedDate");
                entity.Property(e => e.PopEmployeeId).HasColumnName("POP_Employee_Id");
                entity.Property(e => e.PopIsApproved).HasColumnName("POP_IsApproved");
                entity.Property(e => e.PopLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("POP_LastModifiedBy");
                entity.Property(e => e.PopLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("POP_LastModifiedDate");
                entity.Property(e => e.PopPurchaseOrderAuthorizationId).HasColumnName("POP_PurchaseOrderAuthorization_Id");
                entity.Property(e => e.PopTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("POP_TimeStamp");

                entity.HasOne(d => d.PopAutorizationRole).WithMany(p => p.PurchaseOrderApprovals)
                    .HasForeignKey(d => d.PopAutorizationRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseOrderApprovals_AuthorizationRoles");

                entity.HasOne(d => d.PopEmployee).WithMany(p => p.PurchaseOrderApprovals)
                    .HasForeignKey(d => d.PopEmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseOrderApprovals_Employees");

                entity.HasOne(d => d.PopPurchaseOrderAuthorization).WithMany(p => p.PurchaseOrderApprovals)
                    .HasForeignKey(d => d.PopPurchaseOrderAuthorizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseOrderApprovals_PurchaseOrderAuthorizations");
            });

            modelBuilder.Entity<PurchaseOrderAuthorization>(entity =>
            {
                entity.HasKey(e => e.PoaId);

                entity.ToTable("PurchaseOrderAuthorizations", "erp");

                entity.Property(e => e.PoaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("POA_Id");
                entity.Property(e => e.PoaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("POA_CreatedBy");
                entity.Property(e => e.PoaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("POA_CreatedDate");
                entity.Property(e => e.PoaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("POA_LastModifiedBy");
                entity.Property(e => e.PoaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("POA_LastModifiedDate");
                entity.Property(e => e.PoaPurchaseOrderId).HasColumnName("POA_PurchaseOrder_Id");
                entity.Property(e => e.PoaRequiredAutorizationRoleId)
                    .HasMaxLength(50)
                    .HasColumnName("POA_RequiredAutorizationRole_Id");
                entity.Property(e => e.PoaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("POA_TimeStamp");

                entity.HasOne(d => d.PoaPurchaseOrder).WithMany(p => p.PurchaseOrderAuthorizations)
                    .HasForeignKey(d => d.PoaPurchaseOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseOrderAuthorizations_PurchaseOrders");

                entity.HasOne(d => d.PoaRequiredAutorizationRole).WithMany(p => p.PurchaseOrderAuthorizations)
                    .HasForeignKey(d => d.PoaRequiredAutorizationRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseOrderAuthorizations_AuthorizationRoles");
            });

            modelBuilder.Entity<PurchaseOrderConfirmation>(entity =>
            {
                entity.HasKey(e => e.PocId);

                entity.ToTable("PurchaseOrderConfirmations", "erp");

                entity.Property(e => e.PocId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("POC_Id");
                entity.Property(e => e.PocConfirmationDate).HasColumnName("POC_ConfirmationDate");
                entity.Property(e => e.PocCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("POC_CreatedBy");
                entity.Property(e => e.PocCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("POC_CreatedDate");
                entity.Property(e => e.PocEmployeeId).HasColumnName("POC_Employee_Id");
                entity.Property(e => e.PocIsConfirmed)
                    .IsRequired()
                    .HasDefaultValueSql("((1))")
                    .HasColumnName("POC_IsConfirmed");
                entity.Property(e => e.PocLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("POC_LastModifiedBy");
                entity.Property(e => e.PocLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("POC_LastModifiedDate");
                entity.Property(e => e.PocPurchaseOrderId).HasColumnName("POC_PurchaseOrder_Id");
                entity.Property(e => e.PocTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("POC_TimeStamp");

                entity.HasOne(d => d.PocEmployee).WithMany(p => p.PurchaseOrderConfirmations)
                    .HasForeignKey(d => d.PocEmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseOrderConfirmations_Employees");

                entity.HasOne(d => d.PocPurchaseOrder).WithMany(p => p.PurchaseOrderConfirmations)
                    .HasForeignKey(d => d.PocPurchaseOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseOrderConfirmations_PurchaseOrders");
            });

            modelBuilder.Entity<PurchaseOrderFromWorkingOrderView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseOrderFromWorkingOrderView", "dos");

                entity.Property(e => e.Amount).HasColumnType("money");
                entity.Property(e => e.CostOfSalesAmount).HasColumnType("money");
                entity.Property(e => e.CultureCode).HasMaxLength(10);
                entity.Property(e => e.CurrencyCode)
                    .HasMaxLength(3)
                    .IsUnicode(false);
                entity.Property(e => e.CurrentStatus).HasMaxLength(10);
                entity.Property(e => e.Description).HasMaxLength(43);
                entity.Property(e => e.Discount).HasColumnType("money");
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.MaxCostOfSalesAmount).HasColumnType("money");
                entity.Property(e => e.MaxGrossAmount).HasColumnType("money");
                entity.Property(e => e.MaxNetAmount).HasColumnType("money");
                entity.Property(e => e.MaxNetAmout).HasColumnType("money");
                entity.Property(e => e.MaxTaxAmount).HasColumnType("money");
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.SupplierServiceId)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxBase).HasColumnType("money");
                entity.Property(e => e.TaxCode).HasMaxLength(20);
                entity.Property(e => e.TaxCountryCode).HasMaxLength(3);
                entity.Property(e => e.TaxExemptedAmount).HasColumnType("money");
                entity.Property(e => e.TaxImportAmount).HasColumnType("money");
                entity.Property(e => e.TaxReversedChargeAmount).HasColumnType("money");
                entity.Property(e => e.UnitOfMeasureId).HasMaxLength(20);
                entity.Property(e => e.UnitPrice).HasColumnType("money");
                entity.Property(e => e.YourReference).HasMaxLength(30);
            });

            modelBuilder.Entity<PurchaseOrderLine>(entity =>
            {
                entity.HasKey(e => e.PolId);

                entity.ToTable("PurchaseOrderLines", "erp");

                entity.HasIndex(e => e.PolPurchaseOrderId, "IX_PurchaseOrderLines_POL_PurchaseOrder_Id");

                entity.Property(e => e.PolId)
                    .ValueGeneratedNever()
                    .HasColumnName("POL_Id");
                entity.Property(e => e.PolChargeableAmount)
                    .HasColumnType("money")
                    .HasColumnName("POL_ChargeableAmount");
                entity.Property(e => e.PolCostOfSalesAmount)
                    .HasColumnType("money")
                    .HasColumnName("POL_CostOfSalesAmount");
                entity.Property(e => e.PolCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("POL_CreatedBy");
                entity.Property(e => e.PolCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("POL_CreatedDate");
                entity.Property(e => e.PolDiscount)
                    .HasColumnType("money")
                    .HasColumnName("POL_Discount");
                entity.Property(e => e.PolGrossAmount)
                    .HasColumnType("money")
                    .HasColumnName("POL_GrossAmount");
                entity.Property(e => e.PolInvolvedPartyId).HasColumnName("POL_InvolvedParty_Id");
                entity.Property(e => e.PolIsCostOfSales).HasColumnName("POL_IsCostOfSales");
                entity.Property(e => e.PolIsTaxBeforeDiscount).HasColumnName("POL_IsTaxBeforeDiscount");
                entity.Property(e => e.PolLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("POL_LastModifiedBy");
                entity.Property(e => e.PolLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("POL_LastModifiedDate");
                entity.Property(e => e.PolLineNumber).HasColumnName("POL_LineNumber");
                entity.Property(e => e.PolLineOrderNumber)
                    .HasMaxLength(10)
                    .HasColumnName("POL_LineOrderNumber");
                entity.Property(e => e.PolMaxChargeableAmount)
                    .HasColumnType("money")
                    .HasColumnName("POL_MaxChargeableAmount");
                entity.Property(e => e.PolMaxCostOfSalesAmount)
                    .HasColumnType("money")
                    .HasColumnName("POL_MaxCostOfSalesAmount");
                entity.Property(e => e.PolMaxGrossAmount)
                    .HasColumnType("money")
                    .HasColumnName("POL_MaxGrossAmount");
                entity.Property(e => e.PolMaxNetAmount)
                    .HasColumnType("money")
                    .HasColumnName("POL_MaxNetAmount");
                entity.Property(e => e.PolMaxTaxAmount)
                    .HasColumnType("money")
                    .HasColumnName("POL_MaxTaxAmount");
                entity.Property(e => e.PolNetAmount)
                    .HasColumnType("money")
                    .HasColumnName("POL_NetAmount");
                entity.Property(e => e.PolNotes)
                    .HasColumnType("ntext")
                    .HasColumnName("POL_Notes");
                entity.Property(e => e.PolPurchaseOrderId).HasColumnName("POL_PurchaseOrder_Id");
                entity.Property(e => e.PolQuantity)
                    .HasDefaultValueSql("((1))")
                    .HasColumnName("POL_Quantity");
                entity.Property(e => e.PolSupplierServiceId).HasColumnName("POL_SupplierService_Id");
                entity.Property(e => e.PolTaxAmount)
                    .HasColumnType("money")
                    .HasColumnName("POL_TaxAmount");
                entity.Property(e => e.PolTaxBase)
                    .HasColumnType("money")
                    .HasColumnName("POL_TaxBase");
                entity.Property(e => e.PolTaxCode)
                    .HasMaxLength(20)
                    .HasColumnName("POL_TaxCode");
                entity.Property(e => e.PolTaxCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("POL_TaxCountryCode");
                entity.Property(e => e.PolTaxExempted).HasColumnName("POL_TaxExempted");
                entity.Property(e => e.PolTaxImport).HasColumnName("POL_TaxImport");
                entity.Property(e => e.PolTaxRate).HasColumnName("POL_TaxRate");
                entity.Property(e => e.PolTaxReversedCharge).HasColumnName("POL_TaxReversedCharge");
                entity.Property(e => e.PolTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("POL_TimeStamp");
                entity.Property(e => e.PolUnitOfMeasureId)
                    .HasMaxLength(20)
                    .HasColumnName("POL_UnitOfMeasure_Id");
                entity.Property(e => e.PolUnitPrice)
                    .HasColumnType("money")
                    .HasColumnName("POL_UnitPrice");
                entity.Property(e => e.PolWorkingOrderLineCostId).HasColumnName("POL_WorkingOrderLineCost_Id");

                entity.HasOne(d => d.PolPurchaseOrder).WithMany(p => p.PurchaseOrderLines)
                    .HasForeignKey(d => d.PolPurchaseOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseOrderLines_PurchaseOrder");

                entity.HasOne(d => d.PolSupplierService).WithMany(p => p.PurchaseOrderLines)
                    .HasForeignKey(d => d.PolSupplierServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseOrderLines_SupplierServices");

                entity.HasOne(d => d.PolUnitOfMeasure).WithMany(p => p.PurchaseOrderLines)
                    .HasForeignKey(d => d.PolUnitOfMeasureId)
                    .HasConstraintName("FK_PurchaseOrderLines_UnitOfMeasures");

                entity.HasOne(d => d.PolWorkingOrderLineCost).WithMany(p => p.PurchaseOrderLines)
                    .HasForeignKey(d => d.PolWorkingOrderLineCostId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseOrderLines_WorkingOrderLineCosts");
            });

            modelBuilder.Entity<PurchaseOrderLinesOpenView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseOrderLinesOpenView", "erp");

                entity.Property(e => e.CreditableNetAmount).HasColumnType("money");
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
            });

            modelBuilder.Entity<PurchaseOrderLinesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseOrderLinesView", "erp");

                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.Discount).HasColumnType("money");
                entity.Property(e => e.DossierAssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LineOrderNumber).HasMaxLength(10);
                entity.Property(e => e.MainServiceGroupCode).HasMaxLength(10);
                entity.Property(e => e.MainServiceGroupLongName).HasMaxLength(250);
                entity.Property(e => e.MainServiceGroupShortName).HasMaxLength(20);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Notes).HasColumnType("ntext");
                entity.Property(e => e.PurchaseOrderNumber).HasMaxLength(10);
                entity.Property(e => e.ServiceCode).HasMaxLength(10);
                entity.Property(e => e.ServiceLongName).HasMaxLength(250);
                entity.Property(e => e.ServiceShortName).HasMaxLength(20);
                entity.Property(e => e.SubServiceGroupCode).HasMaxLength(10);
                entity.Property(e => e.SubServiceGroupLongName).HasMaxLength(250);
                entity.Property(e => e.SubServiceGroupShortName).HasMaxLength(20);
                entity.Property(e => e.SupplierCity).HasMaxLength(250);
                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SupplierCountryCode).HasMaxLength(3);
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.SupplierVatNumber).HasMaxLength(50);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxBase).HasColumnType("money");
                entity.Property(e => e.TaxCode).HasMaxLength(20);
                entity.Property(e => e.TaxCountryCode).HasMaxLength(3);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.UnitPrice).HasColumnType("money");
                entity.Property(e => e.VehicleLicenseCountryCode).HasMaxLength(3);
                entity.Property(e => e.VehicleLicensePlate).HasMaxLength(15);
                entity.Property(e => e.WorkingOrderNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<PurchaseOrderReceiptMapping>(entity =>
            {
                entity.HasKey(e => e.PomId);

                entity.ToTable("PurchaseOrderReceiptMapping", "erp");

                entity.Property(e => e.PomId)
                    .ValueGeneratedNever()
                    .HasColumnName("POM_Id");
                entity.Property(e => e.PomCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("POM_CreatedBy");
                entity.Property(e => e.PomCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("POM_CreatedDate");
                entity.Property(e => e.PomLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("POM_LastModifiedBy");
                entity.Property(e => e.PomLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("POM_LastModifiedDate");
                entity.Property(e => e.PomMappingDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("POM_MappingDate");
                entity.Property(e => e.PomPurchaseOrderLineId).HasColumnName("POM_PurchaseOrderLine_Id");
                entity.Property(e => e.PomPurchaseReceiptLineId).HasColumnName("POM_PurchaseReceiptLine_Id");
                entity.Property(e => e.PomTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("POM_TimeStamp");

                entity.HasOne(d => d.PomPurchaseOrderLine).WithMany(p => p.PurchaseOrderReceiptMappings)
                    .HasForeignKey(d => d.PomPurchaseOrderLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseOrderReceiptMapping_PurchaseOrderLines");

                entity.HasOne(d => d.PomPurchaseReceiptLine).WithMany(p => p.PurchaseOrderReceiptMappings)
                    .HasForeignKey(d => d.PomPurchaseReceiptLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseOrderReceiptMapping_PurchaseReceiptLines");
            });

            modelBuilder.Entity<PurchaseOrderStatus>(entity =>
            {
                entity.HasKey(e => e.PosId);

                entity.ToTable("PurchaseOrderStatuses", "erp");

                entity.Property(e => e.PosId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("POS_Id");
                entity.Property(e => e.PosCode)
                    .HasMaxLength(10)
                    .HasColumnName("POS_Code");
                entity.Property(e => e.PosCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("POS_CreatedBy");
                entity.Property(e => e.PosCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("POS_CreatedDate");
                entity.Property(e => e.PosInactive).HasColumnName("POS_Inactive");
                entity.Property(e => e.PosLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("POS_LastModifiedBy");
                entity.Property(e => e.PosLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("POS_LastModifiedDate");
                entity.Property(e => e.PosLocalizableEntryId).HasColumnName("POS_LocalizableEntry_Id");
                entity.Property(e => e.PosLongName)
                    .HasMaxLength(250)
                    .HasColumnName("POS_LongName");
                entity.Property(e => e.PosShortName)
                    .HasMaxLength(20)
                    .HasColumnName("POS_ShortName");
                entity.Property(e => e.PosTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("POS_TimeStamp");

                entity.HasOne(d => d.PosLocalizableEntry).WithMany(p => p.PurchaseOrderStatuses)
                    .HasForeignKey(d => d.PosLocalizableEntryId)
                    .HasConstraintName("FK_PurchaseOrderStatuses_LocalizableEntries");
            });

            modelBuilder.Entity<PurchaseOrderStatusHistory>(entity =>
            {
                entity.HasKey(e => e.PoshId);

                entity.ToTable("PurchaseOrderStatusHistory", "erp", tb =>
                {
                    tb.HasTrigger("td_PurchaseOrderStatusHistory");
                    tb.HasTrigger("ti_PurchaseOrderStatusHistory");
                    tb.HasTrigger("tu_PurchaseOrderStatusHistory");
                });

                entity.HasIndex(e => e.PoshPurchaseOrderId, "IX_PurchaseOrderStatusHistory_POSH_PurchaseOrder_Id");

                entity.Property(e => e.PoshId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("POSH_Id");
                entity.Property(e => e.PoshCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("POSH_CreatedBy");
                entity.Property(e => e.PoshCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("POSH_CreatedDate");
                entity.Property(e => e.PoshEmployeeId).HasColumnName("POSH_Employee_Id");
                entity.Property(e => e.PoshLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("POSH_LastModifiedBy");
                entity.Property(e => e.PoshLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("POSH_LastModifiedDate");
                entity.Property(e => e.PoshPurchaseOrderId).HasColumnName("POSH_PurchaseOrder_Id");
                entity.Property(e => e.PoshPurchaseOrderStatusId).HasColumnName("POSH_PurchaseOrderStatus_Id");
                entity.Property(e => e.PoshStartDate).HasColumnName("POSH_StartDate");
                entity.Property(e => e.PoshTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("POSH_TimeStamp");

                entity.HasOne(d => d.PoshEmployee).WithMany(p => p.PurchaseOrderStatusHistories)
                    .HasForeignKey(d => d.PoshEmployeeId)
                    .HasConstraintName("FK_PurchaseOrderStatusHistory_Employees");

                entity.HasOne(d => d.PoshPurchaseOrder).WithMany(p => p.PurchaseOrderStatusHistories)
                    .HasForeignKey(d => d.PoshPurchaseOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseOrderStatusHistory_PurchaseOrders");

                entity.HasOne(d => d.PoshPurchaseOrderStatus).WithMany(p => p.PurchaseOrderStatusHistories)
                    .HasForeignKey(d => d.PoshPurchaseOrderStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseOrderStatusHistory_PurchaseOrderStatuses");
            });

            modelBuilder.Entity<PurchaseOrdersApprovedView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseOrdersApprovedView", "erp");

                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CultureCode).HasMaxLength(10);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DeliveryCity).HasMaxLength(250);
                entity.Property(e => e.DeliveryCountryCode).HasMaxLength(3);
                entity.Property(e => e.DeliveryHouseNo).HasMaxLength(10);
                entity.Property(e => e.DeliveryHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.DeliveryPostalCode).HasMaxLength(10);
                entity.Property(e => e.DeliveryProvince).HasMaxLength(250);
                entity.Property(e => e.DeliveryStreetName).HasMaxLength(250);
                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InvoiceToPayorName).HasMaxLength(756);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityAbbreviation).HasMaxLength(20);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.OrderNumber).HasMaxLength(10);
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PurchaseOrderStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseOrderStatusName).HasMaxLength(250);
                entity.Property(e => e.SupplierChamberOfCommerceNumber).HasMaxLength(50);
                entity.Property(e => e.SupplierCity).HasMaxLength(250);
                entity.Property(e => e.SupplierCountryCode).HasMaxLength(3);
                entity.Property(e => e.SupplierEmail).HasMaxLength(250);
                entity.Property(e => e.SupplierEntryNumber)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.SupplierEntrySystem)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.SupplierFax)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.SupplierHomePage)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.SupplierHouseNo).HasMaxLength(10);
                entity.Property(e => e.SupplierHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.SupplierNumber)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SupplierPhone).HasMaxLength(20);
                entity.Property(e => e.SupplierPhoneExt)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.SupplierPostalCode).HasMaxLength(10);
                entity.Property(e => e.SupplierProvince).HasMaxLength(250);
                entity.Property(e => e.SupplierStreetName).HasMaxLength(250);
                entity.Property(e => e.SupplierVatNumber).HasMaxLength(50);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxExemptedAmount).HasColumnType("money");
                entity.Property(e => e.TaxImportAmount).HasColumnType("money");
                entity.Property(e => e.TaxReversedChargeAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchaseOrdersCreditableView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseOrdersCreditableView", "erp");

                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditedGrossAmount).HasColumnType("money");
                entity.Property(e => e.CreditedNetAmount).HasColumnType("money");
                entity.Property(e => e.CultureCode).HasMaxLength(10);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InvoiceToPayorName).HasMaxLength(756);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityAbbreviation).HasMaxLength(20);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.OrderNumber).HasMaxLength(10);
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PurchaseOrderStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseOrderStatusName).HasMaxLength(250);
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.SupplierNumber)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxExemptedAmount).HasColumnType("money");
                entity.Property(e => e.TaxImportAmount).HasColumnType("money");
                entity.Property(e => e.TaxReversedChargeAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchaseOrdersOpenByVatNumberView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseOrdersOpenByVatNumberView", "erp");

                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CultureCode).HasMaxLength(10);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DeliveryCity).HasMaxLength(250);
                entity.Property(e => e.DeliveryCountryCode).HasMaxLength(3);
                entity.Property(e => e.DeliveryHouseNo).HasMaxLength(10);
                entity.Property(e => e.DeliveryHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.DeliveryPostalCode).HasMaxLength(10);
                entity.Property(e => e.DeliveryProvince).HasMaxLength(250);
                entity.Property(e => e.DeliveryStreetName).HasMaxLength(250);
                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InvoiceToPayorName).HasMaxLength(756);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityAbbreviation).HasMaxLength(20);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.OrderNumber).HasMaxLength(10);
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PurchaseOrderStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseOrderStatusName).HasMaxLength(250);
                entity.Property(e => e.SupplierChamberOfCommerceNumber).HasMaxLength(50);
                entity.Property(e => e.SupplierCity).HasMaxLength(250);
                entity.Property(e => e.SupplierCountryCode).HasMaxLength(3);
                entity.Property(e => e.SupplierEmail).HasMaxLength(250);
                entity.Property(e => e.SupplierEntryNumber)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.SupplierEntrySystem)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.SupplierFax)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.SupplierHomePage)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.SupplierHouseNo).HasMaxLength(10);
                entity.Property(e => e.SupplierHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.SupplierNumber)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SupplierPhone).HasMaxLength(20);
                entity.Property(e => e.SupplierPhoneExt)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.SupplierPostalCode).HasMaxLength(10);
                entity.Property(e => e.SupplierProvince).HasMaxLength(250);
                entity.Property(e => e.SupplierStreetName).HasMaxLength(250);
                entity.Property(e => e.SupplierVatNumber).HasMaxLength(50);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxExemptedAmount).HasColumnType("money");
                entity.Property(e => e.TaxImportAmount).HasColumnType("money");
                entity.Property(e => e.TaxReversedChargeAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchaseOrdersOpenView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseOrdersOpenView", "erp");

                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CultureCode).HasMaxLength(10);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DeliveryCity).HasMaxLength(250);
                entity.Property(e => e.DeliveryCountryCode).HasMaxLength(3);
                entity.Property(e => e.DeliveryHouseNo).HasMaxLength(10);
                entity.Property(e => e.DeliveryHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.DeliveryPostalCode).HasMaxLength(10);
                entity.Property(e => e.DeliveryProvince).HasMaxLength(250);
                entity.Property(e => e.DeliveryStreetName).HasMaxLength(250);
                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InvoiceToPayorName).HasMaxLength(756);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityAbbreviation).HasMaxLength(20);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.OrderNumber).HasMaxLength(10);
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PurchaseOrderStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseOrderStatusName).HasMaxLength(250);
                entity.Property(e => e.SupplierChamberOfCommerceNumber).HasMaxLength(50);
                entity.Property(e => e.SupplierCity).HasMaxLength(250);
                entity.Property(e => e.SupplierCountryCode).HasMaxLength(3);
                entity.Property(e => e.SupplierEmail).HasMaxLength(250);
                entity.Property(e => e.SupplierEntryNumber)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.SupplierEntrySystem)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.SupplierFax)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.SupplierHomePage)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.SupplierHouseNo).HasMaxLength(10);
                entity.Property(e => e.SupplierHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.SupplierNumber)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SupplierPhone).HasMaxLength(20);
                entity.Property(e => e.SupplierPhoneExt)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.SupplierPostalCode).HasMaxLength(10);
                entity.Property(e => e.SupplierProvince).HasMaxLength(250);
                entity.Property(e => e.SupplierStreetName).HasMaxLength(250);
                entity.Property(e => e.SupplierVatNumber).HasMaxLength(50);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxExemptedAmount).HasColumnType("money");
                entity.Property(e => e.TaxImportAmount).HasColumnType("money");
                entity.Property(e => e.TaxReversedChargeAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchaseOrdersPartiallyCreditedView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseOrdersPartiallyCreditedView", "erp");

                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditGrossAmount).HasColumnType("money");
                entity.Property(e => e.CreditNetAmount).HasColumnType("money");
                entity.Property(e => e.CultureCode).HasMaxLength(10);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DeliveryCity).HasMaxLength(250);
                entity.Property(e => e.DeliveryCountryCode).HasMaxLength(3);
                entity.Property(e => e.DeliveryHouseNo).HasMaxLength(10);
                entity.Property(e => e.DeliveryHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.DeliveryPostalCode).HasMaxLength(10);
                entity.Property(e => e.DeliveryProvince).HasMaxLength(250);
                entity.Property(e => e.DeliveryStreetName).HasMaxLength(250);
                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InvoiceToPayorName).HasMaxLength(756);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityAbbreviation).HasMaxLength(20);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.OrderNumber).HasMaxLength(10);
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PurchaseOrderStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseOrderStatusName).HasMaxLength(20);
                entity.Property(e => e.SupplierChamberOfCommerceNumber).HasMaxLength(50);
                entity.Property(e => e.SupplierCity).HasMaxLength(250);
                entity.Property(e => e.SupplierCountryCode).HasMaxLength(3);
                entity.Property(e => e.SupplierEmail).HasMaxLength(250);
                entity.Property(e => e.SupplierEntryNumber)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.SupplierEntrySystem)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.SupplierFax)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.SupplierHomePage)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.SupplierHouseNo).HasMaxLength(10);
                entity.Property(e => e.SupplierHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.SupplierNumber)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SupplierPhone).HasMaxLength(20);
                entity.Property(e => e.SupplierPhoneExt)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.SupplierPostalCode).HasMaxLength(10);
                entity.Property(e => e.SupplierProvince).HasMaxLength(250);
                entity.Property(e => e.SupplierStreetName).HasMaxLength(250);
                entity.Property(e => e.SupplierVatNumber).HasMaxLength(50);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxExemptedAmount).HasColumnType("money");
                entity.Property(e => e.TaxImportAmount).HasColumnType("money");
                entity.Property(e => e.TaxReversedChargeAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchaseOrdersView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseOrdersView", "erp");

                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CultureCode).HasMaxLength(10);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DeliveryCity).HasMaxLength(250);
                entity.Property(e => e.DeliveryCountryCode).HasMaxLength(3);
                entity.Property(e => e.DeliveryHouseNo).HasMaxLength(10);
                entity.Property(e => e.DeliveryHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.DeliveryPostalCode).HasMaxLength(10);
                entity.Property(e => e.DeliveryProvince).HasMaxLength(250);
                entity.Property(e => e.DeliveryStreetName).HasMaxLength(250);
                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InvoiceToPayorName).HasMaxLength(756);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityAbbreviation).HasMaxLength(20);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.LicensePlate).HasMaxLength(15);
                entity.Property(e => e.LicensePlateCountryCode).HasMaxLength(3);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.OrderNumber).HasMaxLength(10);
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PurchaseOrderStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseOrderStatusName).HasMaxLength(250);
                entity.Property(e => e.SupplierChamberOfCommerceNumber).HasMaxLength(50);
                entity.Property(e => e.SupplierCity).HasMaxLength(250);
                entity.Property(e => e.SupplierCountryCode).HasMaxLength(3);
                entity.Property(e => e.SupplierEmail).HasMaxLength(250);
                entity.Property(e => e.SupplierEntryNumber)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.SupplierEntrySystem)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.SupplierFax)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.SupplierHomePage)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.SupplierHouseNo).HasMaxLength(10);
                entity.Property(e => e.SupplierHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.SupplierNumber)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SupplierPhone).HasMaxLength(20);
                entity.Property(e => e.SupplierPhoneExt)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.SupplierPostalCode).HasMaxLength(10);
                entity.Property(e => e.SupplierProvince).HasMaxLength(250);
                entity.Property(e => e.SupplierStreetName).HasMaxLength(250);
                entity.Property(e => e.SupplierVatNumber).HasMaxLength(50);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxCountryCode).HasMaxLength(3);
                entity.Property(e => e.TaxExemptedAmount).HasColumnType("money");
                entity.Property(e => e.TaxImportAmount).HasColumnType("money");
                entity.Property(e => e.TaxReversedChargeAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchaseOrdersWithAcceptedPurchaseInvoicesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseOrdersWithAcceptedPurchaseInvoicesView", "erp");

                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CultureCode).HasMaxLength(10);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.OrderNumber).HasMaxLength(10);
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PurchaseInvoiceStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseInvoiceStatusName).HasMaxLength(250);
                entity.Property(e => e.PurchaseOrderStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseOrderStatusName).HasMaxLength(250);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxExemptedAmount).HasColumnType("money");
                entity.Property(e => e.TaxImportAmount).HasColumnType("money");
                entity.Property(e => e.TaxReversedChargeAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchaseOrdersWithPurchaseInvoicesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseOrdersWithPurchaseInvoicesView", "erp");

                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CultureCode).HasMaxLength(10);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.OrderNumber).HasMaxLength(10);
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PurchaseInvoiceLineGrossAmount).HasColumnType("money");
                entity.Property(e => e.PurchaseInvoiceLineNetAmount).HasColumnType("money");
                entity.Property(e => e.PurchaseInvoiceStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseInvoiceStatusName).HasMaxLength(250);
                entity.Property(e => e.PurchaseOrderLineGrossAmount).HasColumnType("money");
                entity.Property(e => e.PurchaseOrderLineNetAmount).HasColumnType("money");
                entity.Property(e => e.PurchaseOrderLineRemainingAmount).HasColumnType("money");
                entity.Property(e => e.PurchaseOrderStatusCode).HasMaxLength(20);
                entity.Property(e => e.PurchaseOrderStatusName).HasMaxLength(250);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxExemptedAmount).HasColumnType("money");
                entity.Property(e => e.TaxImportAmount).HasColumnType("money");
                entity.Property(e => e.TaxReversedChargeAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<PurchasePayment>(entity =>
            {
                entity.HasKey(e => e.PipId);

                entity.ToTable("PurchasePayments", "fin");

                entity.HasIndex(e => new { e.PipPurchaseInvoiceId, e.PipBankStatementLineId }, "IX_fin_PurchasePayments_PurchaseInvoice_BankStatementLine_INCL");

                entity.Property(e => e.PipId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PIP_Id");
                entity.Property(e => e.PipBankStatementLineId).HasColumnName("PIP_BankStatementLine_Id");
                entity.Property(e => e.PipCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PIP_CreatedBy");
                entity.Property(e => e.PipCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PIP_CreatedDate");
                entity.Property(e => e.PipCurrentStatusCode)
                    .HasMaxLength(20)
                    .HasColumnName("PIP_CurrentStatusCode");
                entity.Property(e => e.PipCurrentStatusHistoryId).HasColumnName("PIP_CurrentStatusHistory_Id");
                entity.Property(e => e.PipCurrentStatusHistoryStartDate).HasColumnName("PIP_CurrentStatusHistoryStartDate");
                entity.Property(e => e.PipLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PIP_LastModifiedBy");
                entity.Property(e => e.PipLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PIP_LastModifiedDate");
                entity.Property(e => e.PipPaymentValue)
                    .HasColumnType("money")
                    .HasColumnName("PIP_PaymentValue");
                entity.Property(e => e.PipPurchaseInvoiceId).HasColumnName("PIP_PurchaseInvoice_Id");
                entity.Property(e => e.PipTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PIP_TimeStamp");

                entity.HasOne(d => d.PipBankStatementLine).WithMany(p => p.PurchasePayments)
                    .HasForeignKey(d => d.PipBankStatementLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchasePayments_BankStatementLines");

                entity.HasOne(d => d.PipPurchaseInvoice).WithMany(p => p.PurchasePayments)
                    .HasForeignKey(d => d.PipPurchaseInvoiceId)
                    .HasConstraintName("FK_PurchasePayments_PurchaseInvoices");
            });

            modelBuilder.Entity<PurchasePaymentBatch>(entity =>
            {
                entity.HasKey(e => e.PpbId);

                entity.ToTable("PurchasePaymentBatch", "fin");

                entity.Property(e => e.PpbId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PPB_Id");
                entity.Property(e => e.PpbBatchNumber)
                    .HasMaxLength(20)
                    .HasColumnName("PPB_BatchNumber");
                entity.Property(e => e.PpbCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PPB_CreatedBy");
                entity.Property(e => e.PpbCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PPB_CreatedDate");
                entity.Property(e => e.PpbEmployeeId).HasColumnName("PPB_Employee_Id");
                entity.Property(e => e.PpbLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PPB_LastModifiedBy");
                entity.Property(e => e.PpbLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PPB_LastModifiedDate");
                entity.Property(e => e.PpbTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PPB_TimeStamp");

                entity.HasOne(d => d.PpbEmployee).WithMany(p => p.PurchasePaymentBatches)
                    .HasForeignKey(d => d.PpbEmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchasePaymentBatch_Employees");
            });

            modelBuilder.Entity<PurchasePaymentBatchLine>(entity =>
            {
                entity.HasKey(e => e.PplId);

                entity.ToTable("PurchasePaymentBatchLines", "fin");

                entity.Property(e => e.PplId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PPL_Id");
                entity.Property(e => e.PplCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PPL_CreatedBy");
                entity.Property(e => e.PplCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PPL_CreatedDate");
                entity.Property(e => e.PplCreditTransferId).HasColumnName("PPL_CreditTransfer_Id");
                entity.Property(e => e.PplLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PPL_LastModifiedBy");
                entity.Property(e => e.PplLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PPL_LastModifiedDate");
                entity.Property(e => e.PplPaymentAmount)
                    .HasColumnType("money")
                    .HasColumnName("PPL_PaymentAmount");
                entity.Property(e => e.PplPurchaseInvoiceId).HasColumnName("PPL_PurchaseInvoice_Id");
                entity.Property(e => e.PplPurchasePaymentBatchId).HasColumnName("PPL_PurchasePaymentBatch_Id");
                entity.Property(e => e.PplSequenceNumber).HasColumnName("PPL_SequenceNumber");
                entity.Property(e => e.PplTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PPL_TimeStamp");

                entity.HasOne(d => d.PplCreditTransfer).WithMany(p => p.PurchasePaymentBatchLines)
                    .HasForeignKey(d => d.PplCreditTransferId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchasePaymentBatchLines_CreditTransfers");

                entity.HasOne(d => d.PplPurchaseInvoice).WithMany(p => p.PurchasePaymentBatchLines)
                    .HasForeignKey(d => d.PplPurchaseInvoiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchasePaymentBatchLines_PurchaseInvoices");

                entity.HasOne(d => d.PplPurchasePaymentBatch).WithMany(p => p.PurchasePaymentBatchLines)
                    .HasForeignKey(d => d.PplPurchasePaymentBatchId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchasePaymentBatchLines_PurchasePaymentBatch");
            });

            modelBuilder.Entity<PurchasePaymentJournalEntryLine>(entity =>
            {
                entity.HasKey(e => e.UjlId);

                entity.ToTable("PurchasePaymentJournalEntryLines", "fin");

                entity.HasIndex(e => new { e.UjlJournalEntryLineId, e.UjlPurchasePaymentId }, "IX_PurchasePaymentJournalEntryLines_JournalEntryLine_PurchasePayment");

                entity.HasIndex(e => new { e.UjlPurchasePaymentId, e.UjlJournalEntryLineId }, "IX_PurchasePaymentJournalEntryLines_PurchasePayment_JournalEntryLine");

                entity.Property(e => e.UjlId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("UJL_Id");
                entity.Property(e => e.UjlCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("UJL_CreatedBy");
                entity.Property(e => e.UjlCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("UJL_CreatedDate");
                entity.Property(e => e.UjlJournalEntryLineId).HasColumnName("UJL_JournalEntryLine_Id");
                entity.Property(e => e.UjlLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("UJL_LastModifiedBy");
                entity.Property(e => e.UjlLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("UJL_LastModifiedDate");
                entity.Property(e => e.UjlPurchasePaymentId).HasColumnName("UJL_PurchasePayment_Id");
                entity.Property(e => e.UjlTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UJL_TimeStamp");

                entity.HasOne(d => d.UjlJournalEntryLine).WithMany(p => p.PurchasePaymentJournalEntryLines)
                    .HasForeignKey(d => d.UjlJournalEntryLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchasePaymentJournalEntryLines_JournalEntryLines");

                entity.HasOne(d => d.UjlPurchasePayment).WithMany(p => p.PurchasePaymentJournalEntryLines)
                    .HasForeignKey(d => d.UjlPurchasePaymentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchasePaymentJournalEntryLines_PurchasePayments");
            });

            modelBuilder.Entity<PurchasePaymentStatus>(entity =>
            {
                entity.HasKey(e => e.PpsId);

                entity.ToTable("PurchasePaymentStatuses", "fin");

                entity.Property(e => e.PpsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PPS_Id");
                entity.Property(e => e.PpsCode)
                    .HasMaxLength(10)
                    .HasColumnName("PPS_Code");
                entity.Property(e => e.PpsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PPS_CreatedBy");
                entity.Property(e => e.PpsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PPS_CreatedDate");
                entity.Property(e => e.PpsInactive).HasColumnName("PPS_Inactive");
                entity.Property(e => e.PpsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PPS_LastModifiedBy");
                entity.Property(e => e.PpsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PPS_LastModifiedDate");
                entity.Property(e => e.PpsLocalizableEntryId).HasColumnName("PPS_LocalizableEntry_Id");
                entity.Property(e => e.PpsLongName)
                    .HasMaxLength(250)
                    .HasColumnName("PPS_LongName");
                entity.Property(e => e.PpsShortName)
                    .HasMaxLength(20)
                    .HasColumnName("PPS_ShortName");
                entity.Property(e => e.PpsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PPS_TimeStamp");

                entity.HasOne(d => d.PpsLocalizableEntry).WithMany(p => p.PurchasePaymentStatuses)
                    .HasForeignKey(d => d.PpsLocalizableEntryId)
                    .HasConstraintName("FK_PurchasePaymentStatuses_LocalizableEntries");
            });

            modelBuilder.Entity<PurchasePaymentStatusHistory>(entity =>
            {
                entity.HasKey(e => e.PphId);

                entity.ToTable("PurchasePaymentStatusHistory", "fin", tb =>
                {
                    tb.HasTrigger("td_PurchasePaymentStatusHistory");
                    tb.HasTrigger("ti_PurchasePaymentStatusHistory");
                    tb.HasTrigger("tu_PurchasePaymentStatusHistory");
                });

                entity.Property(e => e.PphId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PPH_Id");
                entity.Property(e => e.PphCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PPH_CreatedBy");
                entity.Property(e => e.PphCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PPH_CreatedDate");
                entity.Property(e => e.PphEmployeeId).HasColumnName("PPH_Employee_Id");
                entity.Property(e => e.PphLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PPH_LastModifiedBy");
                entity.Property(e => e.PphLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PPH_LastModifiedDate");
                entity.Property(e => e.PphPurchasePaymentId).HasColumnName("PPH_PurchasePayment_Id");
                entity.Property(e => e.PphPurchasePaymentStatusId).HasColumnName("PPH_PurchasePaymentStatus_Id");
                entity.Property(e => e.PphStartDate).HasColumnName("PPH_StartDate");
                entity.Property(e => e.PphTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PPH_TimeStamp");

                entity.HasOne(d => d.PphEmployee).WithMany(p => p.PurchasePaymentStatusHistories)
                    .HasForeignKey(d => d.PphEmployeeId)
                    .HasConstraintName("FK_PurchasePaymentStatusHistory_Employees");

                entity.HasOne(d => d.PphPurchasePayment).WithMany(p => p.PurchasePaymentStatusHistories)
                    .HasForeignKey(d => d.PphPurchasePaymentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchasePaymentStatusHistory_PurchasePayments");

                entity.HasOne(d => d.PphPurchasePaymentStatus).WithMany(p => p.PurchasePaymentStatusHistories)
                    .HasForeignKey(d => d.PphPurchasePaymentStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchasePaymentStatusHistory_PurchasePaymentStatuses");
            });

            modelBuilder.Entity<PurchasePaymentsPendingJournalEntryView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchasePaymentsPendingJournalEntryView", "fin");

                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.PaymentValue).HasColumnType("money");
                entity.Property(e => e.TransactionDate).HasColumnType("date");
                entity.Property(e => e.TransactionValue).HasColumnType("money");
            });

            modelBuilder.Entity<PurchasePaymentsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchasePaymentsView", "fin");

                entity.Property(e => e.BankAccountHolderName).HasMaxLength(250);
                entity.Property(e => e.BankAccountNumber).HasMaxLength(34);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditorNumber).HasMaxLength(10);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DebtorNumber).HasMaxLength(10);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.InvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.Notes).HasMaxLength(500);
                entity.Property(e => e.PaymentStatus)
                    .HasMaxLength(8)
                    .IsUnicode(false);
                entity.Property(e => e.PaymentValue).HasColumnType("money");
                entity.Property(e => e.RemittanceInformation).HasMaxLength(500);
                entity.Property(e => e.SupplierInvoiceDate).HasColumnType("date");
                entity.Property(e => e.SupplierInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.ToAccountNumber).HasMaxLength(20);
                entity.Property(e => e.ToBic)
                    .HasMaxLength(11)
                    .HasColumnName("ToBIC");
                entity.Property(e => e.ToIban)
                    .HasMaxLength(34)
                    .HasColumnName("ToIBAN");
            });

            modelBuilder.Entity<PurchaseReceipt>(entity =>
            {
                entity.HasKey(e => e.PrhId);

                entity.ToTable("PurchaseReceipts", "erp");

                entity.Property(e => e.PrhId)
                    .ValueGeneratedNever()
                    .HasColumnName("PRH_Id");
                entity.Property(e => e.PrhCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PRH_CreatedBy");
                entity.Property(e => e.PrhCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PRH_CreatedDate");
                entity.Property(e => e.PrhCultureCode)
                    .HasMaxLength(10)
                    .HasColumnName("PRH_CultureCode");
                entity.Property(e => e.PrhDepartmentId).HasColumnName("PRH_Department_Id");
                entity.Property(e => e.PrhEmployeeId).HasColumnName("PRH_Employee_Id");
                entity.Property(e => e.PrhIsCredit).HasColumnName("PRH_IsCredit");
                entity.Property(e => e.PrhIsImported).HasColumnName("PRH_IsImported");
                entity.Property(e => e.PrhIsIntercompany).HasColumnName("PRH_IsIntercompany");
                entity.Property(e => e.PrhIsPrinted).HasColumnName("PRH_IsPrinted");
                entity.Property(e => e.PrhLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PRH_LastModifiedBy");
                entity.Property(e => e.PrhLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PRH_LastModifiedDate");
                entity.Property(e => e.PrhReceiptDate).HasColumnName("PRH_ReceiptDate");
                entity.Property(e => e.PrhReceiptNumber)
                    .HasMaxLength(10)
                    .HasColumnName("PRH_ReceiptNumber");
                entity.Property(e => e.PrhShipmentDate)
                    .HasColumnType("date")
                    .HasColumnName("PRH_ShipmentDate");
                entity.Property(e => e.PrhShipmentNumber)
                    .HasMaxLength(20)
                    .HasColumnName("PRH_ShipmentNumber");
                entity.Property(e => e.PrhSupplierId).HasColumnName("PRH_Supplier_Id");
                entity.Property(e => e.PrhTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PRH_TimeStamp");

                entity.HasOne(d => d.PrhDepartment).WithMany(p => p.PurchaseReceipts)
                    .HasForeignKey(d => d.PrhDepartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseReceipts_Departments");

                entity.HasOne(d => d.PrhEmployee).WithMany(p => p.PurchaseReceipts)
                    .HasForeignKey(d => d.PrhEmployeeId)
                    .HasConstraintName("FK_PurchaseReceipts_Employees");

                entity.HasOne(d => d.PrhSupplier).WithMany(p => p.PurchaseReceipts)
                    .HasForeignKey(d => d.PrhSupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseReceipts_Suppliers");
            });

            modelBuilder.Entity<PurchaseReceiptLine>(entity =>
            {
                entity.HasKey(e => e.PrlId);

                entity.ToTable("PurchaseReceiptLines", "erp");

                entity.Property(e => e.PrlId)
                    .ValueGeneratedNever()
                    .HasColumnName("PRL_Id");
                entity.Property(e => e.PrlCancellationReason)
                    .HasMaxLength(250)
                    .HasColumnName("PRL_CancellationReason");
                entity.Property(e => e.PrlCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PRL_CreatedBy");
                entity.Property(e => e.PrlCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PRL_CreatedDate");
                entity.Property(e => e.PrlLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PRL_LastModifiedBy");
                entity.Property(e => e.PrlLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PRL_LastModifiedDate");
                entity.Property(e => e.PrlLineNumber).HasColumnName("PRL_LineNumber");
                entity.Property(e => e.PrlNotes)
                    .HasColumnType("ntext")
                    .HasColumnName("PRL_Notes");
                entity.Property(e => e.PrlOrderNumber)
                    .HasMaxLength(10)
                    .HasColumnName("PRL_OrderNumber");
                entity.Property(e => e.PrlPurchaseReceiptId).HasColumnName("PRL_PurchaseReceipt_Id");
                entity.Property(e => e.PrlQuantityCanceled).HasColumnName("PRL_QuantityCanceled");
                entity.Property(e => e.PrlQuantityReceived)
                    .HasDefaultValueSql("((1))")
                    .HasColumnName("PRL_QuantityReceived");
                entity.Property(e => e.PrlSupplierServiceId).HasColumnName("PRL_SupplierService_Id");
                entity.Property(e => e.PrlTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PRL_TimeStamp");

                entity.HasOne(d => d.PrlPurchaseReceipt).WithMany(p => p.PurchaseReceiptLines)
                    .HasForeignKey(d => d.PrlPurchaseReceiptId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseReceiptLines_PurchaseReceipts");

                entity.HasOne(d => d.PrlSupplierService).WithMany(p => p.PurchaseReceiptLines)
                    .HasForeignKey(d => d.PrlSupplierServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseReceiptLines_SupplierServices");
            });

            modelBuilder.Entity<PurchaseTaxCode>(entity =>
            {
                entity.HasKey(e => e.PtcId);

                entity.ToTable("PurchaseTaxCodes", "vat");

                entity.Property(e => e.PtcId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("PTC_Id");
                entity.Property(e => e.PtcCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PTC_CreatedBy");
                entity.Property(e => e.PtcCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PTC_CreatedDate");
                entity.Property(e => e.PtcEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("PTC_EffectiveDate");
                entity.Property(e => e.PtcLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("PTC_LastModifiedBy");
                entity.Property(e => e.PtcLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("PTC_LastModifiedDate");
                entity.Property(e => e.PtcLegalEntityId).HasColumnName("PTC_LegalEntity_Id");
                entity.Property(e => e.PtcSupplierId).HasColumnName("PTC_Supplier_Id");
                entity.Property(e => e.PtcTaxCodeId)
                    .HasMaxLength(20)
                    .HasColumnName("PTC_TaxCode_Id");
                entity.Property(e => e.PtcTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("PTC_TerminationDate");
                entity.Property(e => e.PtcTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("PTC_TimeStamp");

                entity.HasOne(d => d.PtcLegalEntity).WithMany(p => p.PurchaseTaxCodes)
                    .HasForeignKey(d => d.PtcLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseTaxCodes_LegalEntities");

                entity.HasOne(d => d.PtcSupplier).WithMany(p => p.PurchaseTaxCodes)
                    .HasForeignKey(d => d.PtcSupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseTaxCodes_Suppliers");
            });

            modelBuilder.Entity<PurchaseTaxRate>(entity =>
            {
                entity.HasKey(e => e.TxrId);

                entity.ToTable("PurchaseTaxRates", "vat");

                entity.Property(e => e.TxrId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("TXR_Id");
                entity.Property(e => e.TxrCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TXR_CreatedBy");
                entity.Property(e => e.TxrCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TXR_CreatedDate");
                entity.Property(e => e.TxrDescription)
                    .HasMaxLength(250)
                    .HasColumnName("TXR_Description");
                entity.Property(e => e.TxrInvoiceFromTaxCodeId)
                    .HasMaxLength(20)
                    .HasColumnName("TXR_InvoiceFromTaxCode_Id");
                entity.Property(e => e.TxrInvoiceToTaxCodeId)
                    .HasMaxLength(20)
                    .HasColumnName("TXR_InvoiceToTaxCode_Id");
                entity.Property(e => e.TxrIsSubContractor).HasColumnName("TXR_IsSubContractor");
                entity.Property(e => e.TxrLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TXR_LastModifiedBy");
                entity.Property(e => e.TxrLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TXR_LastModifiedDate");
                entity.Property(e => e.TxrLedgerAccount)
                    .HasMaxLength(20)
                    .HasColumnName("TXR_LedgerAccount");
                entity.Property(e => e.TxrLegalEntityId).HasColumnName("TXR_LegalEntity_Id");
                entity.Property(e => e.TxrObjectClassificationsName)
                    .HasMaxLength(250)
                    .HasColumnName("TXR_ObjectClassificationsName");
                entity.Property(e => e.TxrProductTaxCodeId)
                    .HasMaxLength(20)
                    .HasColumnName("TXR_ProductTaxCode_Id");
                entity.Property(e => e.TxrShipFromTaxCodeId)
                    .HasMaxLength(20)
                    .HasColumnName("TXR_ShipFromTaxCode_Id");
                entity.Property(e => e.TxrShipToTaxCodeId)
                    .HasMaxLength(20)
                    .HasColumnName("TXR_ShipToTaxCode_Id");
                entity.Property(e => e.TxrTaxBeforeDiscount).HasColumnName("TXR_TaxBeforeDiscount");
                entity.Property(e => e.TxrTaxCode)
                    .HasMaxLength(10)
                    .HasColumnName("TXR_TaxCode");
                entity.Property(e => e.TxrTaxExempted).HasColumnName("TXR_TaxExempted");
                entity.Property(e => e.TxrTaxImport).HasColumnName("TXR_TaxImport");
                entity.Property(e => e.TxrTaxRate)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("TXR_TaxRate");
                entity.Property(e => e.TxrTaxReversedCharge).HasColumnName("TXR_TaxReversedCharge");
                entity.Property(e => e.TxrTaxValidation)
                    .IsRequired()
                    .HasDefaultValueSql("((1))")
                    .HasColumnName("TXR_TaxValidation");
                entity.Property(e => e.TxrTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("TXR_TimeStamp");
                entity.Property(e => e.TxrValidFrom)
                    .HasColumnType("date")
                    .HasColumnName("TXR_ValidFrom");
                entity.Property(e => e.TxrValidUntil)
                    .HasColumnType("date")
                    .HasColumnName("TXR_ValidUntil");

                entity.HasOne(d => d.TxrLegalEntity).WithMany(p => p.PurchaseTaxRates)
                    .HasForeignKey(d => d.TxrLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseTaxRates_LegalEntities");
            });

            modelBuilder.Entity<Queue>(entity =>
            {
                entity.HasKey(e => e.QueId);

                entity.ToTable("Queue");

                entity.Property(e => e.QueId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("QUE_Id");
                entity.Property(e => e.QueCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("QUE_CreatedBy");
                entity.Property(e => e.QueCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("QUE_CreatedDate");
                entity.Property(e => e.QueLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("QUE_LastModifiedBy");
                entity.Property(e => e.QueLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("QUE_LastModifiedDate");
                entity.Property(e => e.QueMessage).HasColumnName("QUE_Message");
                entity.Property(e => e.QueProcessType).HasColumnName("QUE_ProcessType");
                entity.Property(e => e.QueProcessed).HasColumnName("QUE_Processed");
                entity.Property(e => e.QueTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("QUE_TimeStamp");
            });

            modelBuilder.Entity<Re>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToTable("res");

                entity.Property(e => e.PrdCode)
                    .HasMaxLength(10)
                    .HasColumnName("PRD_Code");
            });

            modelBuilder.Entity<ReceivedPayment>(entity =>
            {
                entity.HasKey(e => e.RcpId);

                entity.ToTable("ReceivedPayments", "dos", tb => tb.HasTrigger("th_dos_ReceivedPayments_TraceHistory"));

                entity.Property(e => e.RcpId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("RCP_Id");
                entity.Property(e => e.RcpCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RCP_CreatedBy");
                entity.Property(e => e.RcpCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RCP_CreatedDate");
                entity.Property(e => e.RcpLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RCP_LastModifiedBy");
                entity.Property(e => e.RcpLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RCP_LastModifiedDate");
                entity.Property(e => e.RcpReceivedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("RCP_ReceivedDate");
                entity.Property(e => e.RcpReceivedValue)
                    .HasColumnType("money")
                    .HasColumnName("RCP_ReceivedValue");
                entity.Property(e => e.RcpRecoveryPaymentId)
                    .HasMaxLength(36)
                    .HasColumnName("RCP_RecoveryPaymentId");
                entity.Property(e => e.RcpRegistrationDate).HasColumnName("RCP_RegistrationDate");
                entity.Property(e => e.RcpRegresId).HasColumnName("RCP_Regres_Id");
                entity.Property(e => e.RcpStatementLine).HasColumnName("RCP_StatementLine");
                entity.Property(e => e.RcpStatementNumber).HasColumnName("RCP_StatementNumber");
                entity.Property(e => e.RcpTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RCP_TimeStamp");

                entity.HasOne(d => d.RcpRegres).WithMany(p => p.ReceivedPayments)
                    .HasForeignKey(d => d.RcpRegresId)
                    .HasConstraintName("FK_ReceivedPayments_Regres");
            });

            modelBuilder.Entity<ReceivedPaymentsHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_ReceivedPayments_History_ID");

                entity.ToTable("ReceivedPayments_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.RcpCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RCP_CreatedBy");
                entity.Property(e => e.RcpCreatedDate).HasColumnName("RCP_CreatedDate");
                entity.Property(e => e.RcpId).HasColumnName("RCP_Id");
                entity.Property(e => e.RcpLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RCP_LastModifiedBy");
                entity.Property(e => e.RcpLastModifiedDate).HasColumnName("RCP_LastModifiedDate");
                entity.Property(e => e.RcpReceivedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("RCP_ReceivedDate");
                entity.Property(e => e.RcpReceivedValue)
                    .HasColumnType("money")
                    .HasColumnName("RCP_ReceivedValue");
                entity.Property(e => e.RcpRecoveryPaymentId)
                    .HasMaxLength(36)
                    .HasColumnName("RCP_RecoveryPaymentId");
                entity.Property(e => e.RcpRegistrationDate).HasColumnName("RCP_RegistrationDate");
                entity.Property(e => e.RcpRegresId).HasColumnName("RCP_Regres_Id");
                entity.Property(e => e.RcpStatementLine).HasColumnName("RCP_StatementLine");
                entity.Property(e => e.RcpStatementNumber).HasColumnName("RCP_StatementNumber");
            });

            modelBuilder.Entity<ReconcilliationAction>(entity =>
            {
                entity.HasKey(e => e.RacId);

                entity.ToTable("ReconcilliationActions", "fin");

                entity.Property(e => e.RacId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("RAC_Id");
                entity.Property(e => e.RacCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RAC_CreatedBy");
                entity.Property(e => e.RacCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RAC_CreatedDate");
                entity.Property(e => e.RacCreditValue)
                    .IsRequired()
                    .HasDefaultValueSql("((1))")
                    .HasColumnName("RAC_CreditValue");
                entity.Property(e => e.RacCreditorNumber)
                    .HasMaxLength(10)
                    .HasColumnName("RAC_CreditorNumber");
                entity.Property(e => e.RacDebitValue)
                    .IsRequired()
                    .HasDefaultValueSql("((1))")
                    .HasColumnName("RAC_DebitValue");
                entity.Property(e => e.RacDebtorNumber)
                    .HasMaxLength(10)
                    .HasColumnName("RAC_DebtorNumber");
                entity.Property(e => e.RacDisplayOrder)
                    .HasMaxLength(10)
                    .HasColumnName("RAC_DisplayOrder");
                entity.Property(e => e.RacEntryCode)
                    .HasMaxLength(10)
                    .HasColumnName("RAC_EntryCode");
                entity.Property(e => e.RacEntryDescription)
                    .HasMaxLength(250)
                    .HasColumnName("RAC_EntryDescription");
                entity.Property(e => e.RacEntrySystem)
                    .HasMaxLength(10)
                    .HasColumnName("RAC_EntrySystem");
                entity.Property(e => e.RacGeneralLedgerId)
                    .HasMaxLength(20)
                    .HasColumnName("RAC_GeneralLedger_Id");
                entity.Property(e => e.RacJournalId)
                    .HasMaxLength(20)
                    .HasColumnName("RAC_Journal_Id");
                entity.Property(e => e.RacLastModifiedBy)
                    .HasMaxLength(200)
                    .HasColumnName("RAC_LastModifiedBy");
                entity.Property(e => e.RacLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RAC_LastModifiedDate");
                entity.Property(e => e.RacReconcilliationActionTypeId).HasColumnName("RAC_ReconcilliationActionType_Id");
                entity.Property(e => e.RacTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RAC_TimeStamp");

                entity.HasOne(d => d.RacJournal).WithMany(p => p.ReconcilliationActions)
                    .HasForeignKey(d => d.RacJournalId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReconcilliationActions_Journals");

                entity.HasOne(d => d.RacReconcilliationActionType).WithMany(p => p.ReconcilliationActions)
                    .HasForeignKey(d => d.RacReconcilliationActionTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReconcilliationActions_ReconcilliationActionTypes");
            });

            modelBuilder.Entity<ReconcilliationActionType>(entity =>
            {
                entity.HasKey(e => e.RatId);

                entity.ToTable("ReconcilliationActionTypes", "fin");

                entity.Property(e => e.RatId)
                    .ValueGeneratedNever()
                    .HasColumnName("RAT_Id");
                entity.Property(e => e.RatAbbreviation)
                    .HasMaxLength(20)
                    .HasColumnName("RAT_Abbreviation");
                entity.Property(e => e.RatCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RAT_CreatedBy");
                entity.Property(e => e.RatCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RAT_CreatedDate");
                entity.Property(e => e.RatDescription)
                    .HasMaxLength(250)
                    .HasColumnName("RAT_Description");
                entity.Property(e => e.RatInactive).HasColumnName("RAT_Inactive");
                entity.Property(e => e.RatLastModifiedBy)
                    .HasMaxLength(200)
                    .HasColumnName("RAT_LastModifiedBy");
                entity.Property(e => e.RatLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RAT_LastModifiedDate");
                entity.Property(e => e.RatLocalizableEntryId).HasColumnName("RAT_LocalizableEntry_Id");
                entity.Property(e => e.RatTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RAT_TimeStamp");

                entity.HasOne(d => d.RatLocalizableEntry).WithMany(p => p.ReconcilliationActionTypes)
                    .HasForeignKey(d => d.RatLocalizableEntryId)
                    .HasConstraintName("FK_ReconcilliationActionTypes_LocalizableEntries");
            });

            modelBuilder.Entity<ReconcilliationBankAccountsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ReconcilliationBankAccountsView", "fin");

                entity.Property(e => e.AccountNumber).HasMaxLength(34);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.ExactAdministration).HasMaxLength(10);
                entity.Property(e => e.ExactJournal).HasMaxLength(10);
                entity.Property(e => e.Iban)
                    .HasMaxLength(34)
                    .HasColumnName("IBAN");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LedgerAccount).HasMaxLength(20);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<ReconcilliationLedgersView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ReconcilliationLedgersView", "fin");

                entity.Property(e => e.BankAccountIban).HasMaxLength(34);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.EntryDescription).HasMaxLength(250);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.ExactAdministration).HasMaxLength(10);
                entity.Property(e => e.ExactGeneralLedger).HasMaxLength(10);
                entity.Property(e => e.Id).HasMaxLength(20);
                entity.Property(e => e.Journal).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.ReconcilliationAction).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<ReconcilliationRefundAccount>(entity =>
            {
                entity.HasKey(e => e.RraId);

                entity.ToTable("ReconcilliationRefundAccounts", "fin");

                entity.Property(e => e.RraId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("RRA_Id");
                entity.Property(e => e.RraCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RRA_CreatedBy");
                entity.Property(e => e.RraCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RRA_CreatedDate");
                entity.Property(e => e.RraLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RRA_LastModifiedBy");
                entity.Property(e => e.RraLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RRA_LastModifiedDate");
                entity.Property(e => e.RraReconcilliationBankAccountId).HasColumnName("RRA_ReconcilliationBankAccount_Id");
                entity.Property(e => e.RraReconcilliationRefundTypeId).HasColumnName("RRA_ReconcilliationRefundType_Id");
                entity.Property(e => e.RraRefundBankAccountId).HasColumnName("RRA_RefundBankAccount_Id");
                entity.Property(e => e.RraTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RRA_TimeStamp");

                entity.HasOne(d => d.RraReconcilliationBankAccount).WithMany(p => p.ReconcilliationRefundAccountRraReconcilliationBankAccounts)
                    .HasForeignKey(d => d.RraReconcilliationBankAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReconcilliationRefundAccounts_ReconcilliationBankAccounts");

                entity.HasOne(d => d.RraReconcilliationRefundType).WithMany(p => p.ReconcilliationRefundAccounts)
                    .HasForeignKey(d => d.RraReconcilliationRefundTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReconcilliationRefundAccounts_ReconcilliationRefundTypes");

                entity.HasOne(d => d.RraRefundBankAccount).WithMany(p => p.ReconcilliationRefundAccountRraRefundBankAccounts)
                    .HasForeignKey(d => d.RraRefundBankAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReconcilliationRefundAccounts_RefundBankAccounts");
            });

            modelBuilder.Entity<ReconcilliationRefundType>(entity =>
            {
                entity.HasKey(e => e.RftId);

                entity.ToTable("ReconcilliationRefundTypes", "fin");

                entity.Property(e => e.RftId)
                    .ValueGeneratedNever()
                    .HasColumnName("RFT_Id");
                entity.Property(e => e.RftAbbreviation)
                    .HasMaxLength(20)
                    .HasColumnName("RFT_Abbreviation");
                entity.Property(e => e.RftCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RFT_CreatedBy");
                entity.Property(e => e.RftCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RFT_CreatedDate");
                entity.Property(e => e.RftDescription)
                    .HasMaxLength(250)
                    .HasColumnName("RFT_Description");
                entity.Property(e => e.RftInactive).HasColumnName("RFT_Inactive");
                entity.Property(e => e.RftLastModifiedBy)
                    .HasMaxLength(200)
                    .HasColumnName("RFT_LastModifiedBy");
                entity.Property(e => e.RftLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RFT_LastModifiedDate");
                entity.Property(e => e.RftLocalizableEntryId).HasColumnName("RFT_LocalizableEntry_Id");
                entity.Property(e => e.RftTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RFT_TimeStamp");

                entity.HasOne(d => d.RftLocalizableEntry).WithMany(p => p.ReconcilliationRefundTypes)
                    .HasForeignKey(d => d.RftLocalizableEntryId)
                    .HasConstraintName("FK_ReconcilliationRefundTypes_LocalizableEntries");
            });

            modelBuilder.Entity<ReconcilliationSummaryView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ReconcilliationSummaryView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LedgerAccount).HasMaxLength(20);
                entity.Property(e => e.LedgerDescription).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.TotalReconcilliationValue).HasColumnType("money");
            });

            modelBuilder.Entity<RecoveryPayablesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("RecoveryPayablesView", "fin");

                entity.Property(e => e.AmountOpen).HasColumnType("money");
                entity.Property(e => e.AmountReceived).HasColumnType("money");
                entity.Property(e => e.AmountTransfered).HasColumnType("money");
                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.ClientProductCode).HasMaxLength(20);
                entity.Property(e => e.CostCenterCode).HasMaxLength(10);
                entity.Property(e => e.CostCenterName).HasMaxLength(250);
                entity.Property(e => e.CostUnitCode).HasMaxLength(10);
                entity.Property(e => e.CostUnitName).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditorName).HasMaxLength(250);
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.IncidentAmountPaid).HasColumnType("money");
                entity.Property(e => e.IncidentDescription).HasMaxLength(250);
                entity.Property(e => e.InsuranceCoverageCode).HasMaxLength(10);
                entity.Property(e => e.InsuredPartyIban).HasMaxLength(34);
                entity.Property(e => e.InsuredPartyIncidentNumber).HasMaxLength(50);
                entity.Property(e => e.InsuredPartyInsurancePolicyNumber).HasMaxLength(50);
                entity.Property(e => e.InsuredPartyInsurerCode).HasMaxLength(10);
                entity.Property(e => e.InsuredPartyInsurerIban).HasMaxLength(34);
                entity.Property(e => e.InsuredPartyInsurerName).HasMaxLength(250);
                entity.Property(e => e.InsuredPartyLicensePlate).HasMaxLength(20);
                entity.Property(e => e.InsuredPartyName).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LedgerAccount).HasMaxLength(20);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.LiablePartyIban).HasMaxLength(34);
                entity.Property(e => e.LiablePartyIncidentNumber).HasMaxLength(50);
                entity.Property(e => e.LiablePartyInsurancePolicyNumber).HasMaxLength(50);
                entity.Property(e => e.LiablePartyInsurerCode).HasMaxLength(10);
                entity.Property(e => e.LiablePartyInsurerIban).HasMaxLength(34);
                entity.Property(e => e.LiablePartyInsurerName).HasMaxLength(250);
                entity.Property(e => e.LiablePartyLicensePlate).HasMaxLength(20);
                entity.Property(e => e.LiablePartyName).HasMaxLength(250);
                entity.Property(e => e.OurReference).HasMaxLength(50);
                entity.Property(e => e.OwnRiskAmount).HasColumnType("money");
                entity.Property(e => e.ReceivedCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.ReceivedDate).HasColumnType("date");
                entity.Property(e => e.RecoveryAmountExpected).HasColumnType("money");
                entity.Property(e => e.StatementNumber).HasMaxLength(10);
                entity.Property(e => e.StatementStatus).HasMaxLength(20);
                entity.Property(e => e.TenantCode).HasMaxLength(10);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(50);
            });

            modelBuilder.Entity<RecoveryPayment>(entity =>
            {
                entity.HasKey(e => e.RctId);

                entity.ToTable("RecoveryPayments", "fin");

                entity.HasIndex(e => e.RctRecoveryStatementId, "IX_fin_RecoveryPayments_RecoveryStatement");

                entity.Property(e => e.RctId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("RCT_Id");
                entity.Property(e => e.RctBankStatementLineId).HasColumnName("RCT_BankStatementLine_Id");
                entity.Property(e => e.RctCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RCT_CreatedBy");
                entity.Property(e => e.RctCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RCT_CreatedDate");
                entity.Property(e => e.RctCurrentStatusCode)
                    .HasMaxLength(20)
                    .HasColumnName("RCT_CurrentStatusCode");
                entity.Property(e => e.RctCurrentStatusHistoryId).HasColumnName("RCT_CurrentStatusHistory_Id");
                entity.Property(e => e.RctCurrentStatusHistoryStartDate).HasColumnName("RCT_CurrentStatusHistoryStartDate");
                entity.Property(e => e.RctLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RCT_LastModifiedBy");
                entity.Property(e => e.RctLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RCT_LastModifiedDate");
                entity.Property(e => e.RctPaymentValue)
                    .HasColumnType("money")
                    .HasColumnName("RCT_PaymentValue");
                entity.Property(e => e.RctRecoveryStatementId).HasColumnName("RCT_RecoveryStatement_Id");
                entity.Property(e => e.RctTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RCT_TimeStamp");

                entity.HasOne(d => d.RctBankStatementLine).WithMany(p => p.RecoveryPayments)
                    .HasForeignKey(d => d.RctBankStatementLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RecoveryPayments_BankStatementLines");

                entity.HasOne(d => d.RctRecoveryStatement).WithMany(p => p.RecoveryPayments)
                    .HasForeignKey(d => d.RctRecoveryStatementId)
                    .HasConstraintName("FK_RecoveryPayments_RecoveryStatements");
            });

            modelBuilder.Entity<RecoveryPaymentStatus>(entity =>
            {
                entity.HasKey(e => e.RpsId);

                entity.ToTable("RecoveryPaymentStatuses", "fin");

                entity.Property(e => e.RpsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("RPS_Id");
                entity.Property(e => e.RpsCode)
                    .HasMaxLength(10)
                    .HasColumnName("RPS_Code");
                entity.Property(e => e.RpsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RPS_CreatedBy");
                entity.Property(e => e.RpsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RPS_CreatedDate");
                entity.Property(e => e.RpsInactive).HasColumnName("RPS_Inactive");
                entity.Property(e => e.RpsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RPS_LastModifiedBy");
                entity.Property(e => e.RpsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RPS_LastModifiedDate");
                entity.Property(e => e.RpsLocalizableEntryId).HasColumnName("RPS_LocalizableEntry_Id");
                entity.Property(e => e.RpsLongName)
                    .HasMaxLength(250)
                    .HasColumnName("RPS_LongName");
                entity.Property(e => e.RpsShortName)
                    .HasMaxLength(20)
                    .HasColumnName("RPS_ShortName");
                entity.Property(e => e.RpsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RPS_TimeStamp");

                entity.HasOne(d => d.RpsLocalizableEntry).WithMany(p => p.RecoveryPaymentStatuses)
                    .HasForeignKey(d => d.RpsLocalizableEntryId)
                    .HasConstraintName("FK_RecoveryPaymentStatuses_LocalizableEntries");
            });

            modelBuilder.Entity<RecoveryPaymentStatusHistory>(entity =>
            {
                entity.HasKey(e => e.RshId);

                entity.ToTable("RecoveryPaymentStatusHistory", "fin", tb =>
                {
                    tb.HasTrigger("td_RecoveryPaymentStatusHistory");
                    tb.HasTrigger("ti_RecoveryPaymentStatusHistory");
                    tb.HasTrigger("tu_RecoveryPaymentStatusHistory");
                });

                entity.HasIndex(e => e.RshRecoveryPaymentId, "IX_fin_RecoveryPaymentStatusHistory_RecoveryPayment");

                entity.HasIndex(e => e.RshStartDate, "IX_fin_RecoveryPaymentStatusHistory_StartDate__INCL");

                entity.Property(e => e.RshId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("RSH_Id");
                entity.Property(e => e.RshCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RSH_CreatedBy");
                entity.Property(e => e.RshCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RSH_CreatedDate");
                entity.Property(e => e.RshLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RSH_LastModifiedBy");
                entity.Property(e => e.RshLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RSH_LastModifiedDate");
                entity.Property(e => e.RshRecoveryPaymentId).HasColumnName("RSH_RecoveryPayment_Id");
                entity.Property(e => e.RshRecoveryPaymentStatusId).HasColumnName("RSH_RecoveryPaymentStatus_Id");
                entity.Property(e => e.RshStartDate).HasColumnName("RSH_StartDate");
                entity.Property(e => e.RshTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RSH_TimeStamp");

                entity.HasOne(d => d.RshRecoveryPayment).WithMany(p => p.RecoveryPaymentStatusHistories)
                    .HasForeignKey(d => d.RshRecoveryPaymentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RecoveryPaymentStatusHistory_RecoveryPayments");

                entity.HasOne(d => d.RshRecoveryPaymentStatus).WithMany(p => p.RecoveryPaymentStatusHistories)
                    .HasForeignKey(d => d.RshRecoveryPaymentStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RecoveryPaymentStatusHistory_RecoveryPaymentStatuses");
            });

            modelBuilder.Entity<RecoveryPaymentsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("RecoveryPaymentsView", "fin");

                entity.Property(e => e.BankAccountNumber).HasMaxLength(34);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.Notes).HasMaxLength(500);
                entity.Property(e => e.PaymentDate).HasColumnType("date");
                entity.Property(e => e.PaymentStatus).HasMaxLength(10);
                entity.Property(e => e.PaymentValue).HasColumnType("money");
                entity.Property(e => e.RecoveryStatementNumber).HasMaxLength(10);
                entity.Property(e => e.RemittanceInformation).HasMaxLength(500);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<RecoveryReceivablesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("RecoveryReceivablesView", "fin");

                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.ClientProductCode).HasMaxLength(20);
                entity.Property(e => e.CostCenterCode).HasMaxLength(10);
                entity.Property(e => e.CostCenterName).HasMaxLength(250);
                entity.Property(e => e.CostUnitCode).HasMaxLength(10);
                entity.Property(e => e.CostUnitName).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditorName).HasMaxLength(250);
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Description).HasMaxLength(20);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.IncidentAmountPaid).HasColumnType("money");
                entity.Property(e => e.IncidentDescription).HasMaxLength(250);
                entity.Property(e => e.InsuranceCoverageCode).HasMaxLength(10);
                entity.Property(e => e.InsuredPartyCity).HasMaxLength(250);
                entity.Property(e => e.InsuredPartyCountryCode).HasMaxLength(3);
                entity.Property(e => e.InsuredPartyHouseNo).HasMaxLength(10);
                entity.Property(e => e.InsuredPartyHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.InsuredPartyIban)
                    .HasMaxLength(34)
                    .HasColumnName("InsuredPartyIBAN");
                entity.Property(e => e.InsuredPartyIncidentNumber).HasMaxLength(50);
                entity.Property(e => e.InsuredPartyInsurancePolicyNumber).HasMaxLength(50);
                entity.Property(e => e.InsuredPartyInsurerCode).HasMaxLength(10);
                entity.Property(e => e.InsuredPartyInsurerCountryCode).HasMaxLength(3);
                entity.Property(e => e.InsuredPartyInsurerIban)
                    .HasMaxLength(34)
                    .HasColumnName("InsuredPartyInsurerIBAN");
                entity.Property(e => e.InsuredPartyInsurerName).HasMaxLength(250);
                entity.Property(e => e.InsuredPartyLicensePlate).HasMaxLength(20);
                entity.Property(e => e.InsuredPartyName).HasMaxLength(250);
                entity.Property(e => e.InsuredPartyPostalCode).HasMaxLength(10);
                entity.Property(e => e.InsuredPartyProvince).HasMaxLength(250);
                entity.Property(e => e.InsuredPartyStreetName).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LastPaymentDate).HasColumnType("date");
                entity.Property(e => e.LedgerAccount).HasMaxLength(20);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.LiablePartyCity).HasMaxLength(250);
                entity.Property(e => e.LiablePartyCountryCode).HasMaxLength(3);
                entity.Property(e => e.LiablePartyHouseNo).HasMaxLength(10);
                entity.Property(e => e.LiablePartyHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.LiablePartyIban)
                    .HasMaxLength(34)
                    .HasColumnName("LiablePartyIBAN");
                entity.Property(e => e.LiablePartyIncidentNumber).HasMaxLength(50);
                entity.Property(e => e.LiablePartyInsurancePolicyNumber).HasMaxLength(50);
                entity.Property(e => e.LiablePartyInsurerCode).HasMaxLength(10);
                entity.Property(e => e.LiablePartyInsurerCountryCode).HasMaxLength(3);
                entity.Property(e => e.LiablePartyInsurerIban)
                    .HasMaxLength(34)
                    .HasColumnName("LiablePartyInsurerIBAN");
                entity.Property(e => e.LiablePartyInsurerName).HasMaxLength(250);
                entity.Property(e => e.LiablePartyLicensePlate).HasMaxLength(20);
                entity.Property(e => e.LiablePartyName).HasMaxLength(250);
                entity.Property(e => e.LiablePartyPostalCode).HasMaxLength(10);
                entity.Property(e => e.LiablePartyProvince).HasMaxLength(250);
                entity.Property(e => e.LiablePartyStreetName).HasMaxLength(250);
                entity.Property(e => e.OurReference).HasMaxLength(50);
                entity.Property(e => e.OwnRiskAmount).HasColumnType("money");
                entity.Property(e => e.RecoveryAmountExpected).HasColumnType("money");
                entity.Property(e => e.RecoveryAmountReceived).HasColumnType("money");
                entity.Property(e => e.RecoveryOpenAmount).HasColumnType("money");
                entity.Property(e => e.RecoveryTransferAmount).HasColumnType("money");
                entity.Property(e => e.StatementNumber).HasMaxLength(10);
                entity.Property(e => e.StatementStatus).HasMaxLength(20);
                entity.Property(e => e.TenantCode).HasMaxLength(10);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(20);
            });

            modelBuilder.Entity<RecoveryStatement>(entity =>
            {
                entity.HasKey(e => e.RcsId);

                entity.ToTable("RecoveryStatements", "fin", tb => tb.HasTrigger("ti_fin_RecoveryStatements"));

                entity.HasIndex(e => e.RcsDossierNumber, "IX_RecoveryStatements_DossierNumber");

                entity.HasIndex(e => e.RcsInsuredPartyIncidentNumber, "IX_RecoveryStatements_InsuredPartyIncidentNumber");

                entity.HasIndex(e => e.RcsInsuredPartyLicensePlate, "IX_RecoveryStatements_InsuredPartyLicensePlate");

                entity.HasIndex(e => new { e.RcsEntryNumber, e.RcsEntrySystem }, "IX_fin_RecoveryStatements_EntryNumber_EntrySystem");

                entity.HasIndex(e => new { e.RcsLegalEntityId, e.RcsDossierNumber }, "IX_fin_RecoveryStatements_LegalEntity_DossierNumber_INCL");

                entity.Property(e => e.RcsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("RCS_Id");
                entity.Property(e => e.RcsClientProductCode)
                    .HasMaxLength(20)
                    .HasColumnName("RCS_ClientProductCode");
                entity.Property(e => e.RcsCostCenterId).HasColumnName("RCS_CostCenter_Id");
                entity.Property(e => e.RcsCostUnitId).HasColumnName("RCS_CostUnit_Id");
                entity.Property(e => e.RcsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RCS_CreatedBy");
                entity.Property(e => e.RcsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RCS_CreatedDate");
                entity.Property(e => e.RcsCreditorNumber)
                    .HasMaxLength(20)
                    .HasColumnName("RCS_CreditorNumber");
                entity.Property(e => e.RcsCurrencyCode)
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('EUR')")
                    .HasColumnName("RCS_CurrencyCode");
                entity.Property(e => e.RcsDebtorNumber)
                    .HasMaxLength(20)
                    .HasColumnName("RCS_DebtorNumber");
                entity.Property(e => e.RcsDossierAssignmentId).HasColumnName("RCS_DossierAssignment_Id");
                entity.Property(e => e.RcsDossierDate).HasColumnName("RCS_DossierDate");
                entity.Property(e => e.RcsDossierId).HasColumnName("RCS_Dossier_Id");
                entity.Property(e => e.RcsDossierNumber)
                    .HasMaxLength(20)
                    .HasColumnName("RCS_DossierNumber");
                entity.Property(e => e.RcsDossierPartyId).HasColumnName("RCS_DossierParty_Id");
                entity.Property(e => e.RcsEntryBatch)
                    .HasMaxLength(36)
                    .HasColumnName("RCS_EntryBatch");
                entity.Property(e => e.RcsEntryNumber)
                    .HasMaxLength(36)
                    .HasColumnName("RCS_EntryNumber");
                entity.Property(e => e.RcsEntrySystem)
                    .HasMaxLength(10)
                    .HasColumnName("RCS_EntrySystem");
                entity.Property(e => e.RcsIncidentAmountPaid)
                    .HasColumnType("money")
                    .HasColumnName("RCS_IncidentAmountPaid");
                entity.Property(e => e.RcsIncidentDate).HasColumnName("RCS_IncidentDate");
                entity.Property(e => e.RcsIncidentDescription)
                    .HasMaxLength(250)
                    .HasColumnName("RCS_IncidentDescription");
                entity.Property(e => e.RcsInsuranceCoverageCode)
                    .HasMaxLength(10)
                    .HasColumnName("RCS_InsuranceCoverageCode");
                entity.Property(e => e.RcsInsuredPartyAddressId).HasColumnName("RCS_InsuredPartyAddress_Id");
                entity.Property(e => e.RcsInsuredPartyIban)
                    .HasMaxLength(34)
                    .HasColumnName("RCS_InsuredPartyIban");
                entity.Property(e => e.RcsInsuredPartyIncidentNumber)
                    .HasMaxLength(50)
                    .HasColumnName("RCS_InsuredPartyIncidentNumber");
                entity.Property(e => e.RcsInsuredPartyInsurancePolicyNumber)
                    .HasMaxLength(50)
                    .HasColumnName("RCS_InsuredPartyInsurancePolicyNumber");
                entity.Property(e => e.RcsInsuredPartyInsurerAddressId).HasColumnName("RCS_InsuredPartyInsurerAddress_Id");
                entity.Property(e => e.RcsInsuredPartyInsurerCode)
                    .HasMaxLength(10)
                    .HasColumnName("RCS_InsuredPartyInsurerCode");
                entity.Property(e => e.RcsInsuredPartyInsurerIban)
                    .HasMaxLength(34)
                    .HasColumnName("RCS_InsuredPartyInsurerIban");
                entity.Property(e => e.RcsInsuredPartyInsurerId).HasColumnName("RCS_InsuredPartyInsurerId");
                entity.Property(e => e.RcsInsuredPartyInsurerName)
                    .HasMaxLength(250)
                    .HasColumnName("RCS_InsuredPartyInsurerName");
                entity.Property(e => e.RcsInsuredPartyLicensePlate)
                    .HasMaxLength(20)
                    .HasColumnName("RCS_InsuredPartyLicensePlate");
                entity.Property(e => e.RcsInsuredPartyName)
                    .HasMaxLength(250)
                    .HasColumnName("RCS_InsuredPartyName");
                entity.Property(e => e.RcsIsGuaranteeFund)
                    .HasDefaultValueSql("((0))")
                    .HasColumnName("RCS_IsGuaranteeFund");
                entity.Property(e => e.RcsIsInsuredLiable)
                    .HasDefaultValueSql("((0))")
                    .HasColumnName("RCS_IsInsuredLiable");
                entity.Property(e => e.RcsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RCS_LastModifiedBy");
                entity.Property(e => e.RcsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RCS_LastModifiedDate");
                entity.Property(e => e.RcsLegalEntityId).HasColumnName("RCS_LegalEntity_Id");
                entity.Property(e => e.RcsLiablePartyAddressId).HasColumnName("RCS_LiablePartyAddress_Id");
                entity.Property(e => e.RcsLiablePartyIban)
                    .HasMaxLength(34)
                    .HasColumnName("RCS_LiablePartyIban");
                entity.Property(e => e.RcsLiablePartyIncidentNumber)
                    .HasMaxLength(50)
                    .HasColumnName("RCS_LiablePartyIncidentNumber");
                entity.Property(e => e.RcsLiablePartyInsurancePolicyNumber)
                    .HasMaxLength(50)
                    .HasColumnName("RCS_LiablePartyInsurancePolicyNumber");
                entity.Property(e => e.RcsLiablePartyInsurerAddressId).HasColumnName("RCS_LiablePartyInsurerAddress_Id");
                entity.Property(e => e.RcsLiablePartyInsurerCode)
                    .HasMaxLength(10)
                    .HasColumnName("RCS_LiablePartyInsurerCode");
                entity.Property(e => e.RcsLiablePartyInsurerIban)
                    .HasMaxLength(34)
                    .HasColumnName("RCS_LiablePartyInsurerIban");
                entity.Property(e => e.RcsLiablePartyInsurerId).HasColumnName("RCS_LiablePartyInsurerId");
                entity.Property(e => e.RcsLiablePartyInsurerName)
                    .HasMaxLength(250)
                    .HasColumnName("RCS_LiablePartyInsurerName");
                entity.Property(e => e.RcsLiablePartyLicensePlate)
                    .HasMaxLength(20)
                    .HasColumnName("RCS_LiablePartyLicensePlate");
                entity.Property(e => e.RcsLiablePartyName)
                    .HasMaxLength(250)
                    .HasColumnName("RCS_LiablePartyName");
                entity.Property(e => e.RcsOwnRiskAmount)
                    .HasColumnType("money")
                    .HasColumnName("RCS_OwnRiskAmount");
                entity.Property(e => e.RcsRecoveryAmountExpected)
                    .HasColumnType("money")
                    .HasColumnName("RCS_RecoveryAmountExpected");
                entity.Property(e => e.RcsStatementNumber)
                    .HasMaxLength(10)
                    .HasColumnName("RCS_StatementNumber");
                entity.Property(e => e.RcsTenantId).HasColumnName("RCS_Tenant_Id");
                entity.Property(e => e.RcsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RCS_TimeStamp");

                entity.HasOne(d => d.RcsCostCenter).WithMany(p => p.RecoveryStatements)
                    .HasForeignKey(d => d.RcsCostCenterId)
                    .HasConstraintName("FK_RecoveryStatements_CostCenters");

                entity.HasOne(d => d.RcsCostUnit).WithMany(p => p.RecoveryStatements)
                    .HasForeignKey(d => d.RcsCostUnitId)
                    .HasConstraintName("FK_RecoveryStatements_CostUnits");

                entity.HasOne(d => d.RcsDossierAssignment).WithMany(p => p.RecoveryStatements)
                    .HasForeignKey(d => d.RcsDossierAssignmentId)
                    .HasConstraintName("FK_RecoveryStatements_DossierAssignments");

                entity.HasOne(d => d.RcsDossier).WithMany(p => p.RecoveryStatements)
                    .HasForeignKey(d => d.RcsDossierId)
                    .HasConstraintName("FK_RecoveryStatements_Dossiers");

                entity.HasOne(d => d.RcsDossierParty).WithMany(p => p.RecoveryStatements)
                    .HasForeignKey(d => d.RcsDossierPartyId)
                    .HasConstraintName("FK_RecoveryStatements_DossierParties");

                entity.HasOne(d => d.RcsInsuredPartyAddress).WithMany(p => p.RecoveryStatementRcsInsuredPartyAddresses)
                    .HasForeignKey(d => d.RcsInsuredPartyAddressId)
                    .HasConstraintName("FK_RecoveryStatements_InsuredPartyAddresses");

                entity.HasOne(d => d.RcsInsuredPartyInsurerAddress).WithMany(p => p.RecoveryStatementRcsInsuredPartyInsurerAddresses)
                    .HasForeignKey(d => d.RcsInsuredPartyInsurerAddressId)
                    .HasConstraintName("FK_RecoveryStatements_InsuredPartyInsurerAddresses");

                entity.HasOne(d => d.RcsLegalEntity).WithMany(p => p.RecoveryStatements)
                    .HasForeignKey(d => d.RcsLegalEntityId)
                    .HasConstraintName("FK_RecoveryStatements_LegalEntities");

                entity.HasOne(d => d.RcsLiablePartyAddress).WithMany(p => p.RecoveryStatementRcsLiablePartyAddresses)
                    .HasForeignKey(d => d.RcsLiablePartyAddressId)
                    .HasConstraintName("FK_RecoveryStatements_LiablePartyAddresses");

                entity.HasOne(d => d.RcsLiablePartyInsurerAddress).WithMany(p => p.RecoveryStatementRcsLiablePartyInsurerAddresses)
                    .HasForeignKey(d => d.RcsLiablePartyInsurerAddressId)
                    .HasConstraintName("FK_RecoveryStatements_LiablePartyInsurerAddresses");

                entity.HasOne(d => d.RcsTenant).WithMany(p => p.RecoveryStatements)
                    .HasForeignKey(d => d.RcsTenantId)
                    .HasConstraintName("FK_RecoveryStatements_Tenants");
            });

            modelBuilder.Entity<RecoveryStatementChangeHistory>(entity =>
            {
                entity.HasKey(e => e.RcshId);

                entity.ToTable("RecoveryStatementChangeHistory", "fin");

                entity.HasIndex(e => e.RcshRecoveryStatementId, "IX_RecoveryStatementChangeHistory_RecoveryStatement_Id");

                entity.Property(e => e.RcshId)
                    .ValueGeneratedNever()
                    .HasColumnName("RCSH_Id");
                entity.Property(e => e.RcshClientProductCode)
                    .HasMaxLength(20)
                    .HasColumnName("RCSH_ClientProductCode");
                entity.Property(e => e.RcshCostCenterId).HasColumnName("RCSH_CostCenter_Id");
                entity.Property(e => e.RcshCostUnitId).HasColumnName("RCSH_CostUnit_Id");
                entity.Property(e => e.RcshCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RCSH_CreatedBy");
                entity.Property(e => e.RcshCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RCSH_CreatedDate");
                entity.Property(e => e.RcshCreditorNumber)
                    .HasMaxLength(20)
                    .HasColumnName("RCSH_CreditorNumber");
                entity.Property(e => e.RcshCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("RCSH_CurrencyCode");
                entity.Property(e => e.RcshDebtorNumber)
                    .HasMaxLength(20)
                    .HasColumnName("RCSH_DebtorNumber");
                entity.Property(e => e.RcshDossierDate).HasColumnName("RCSH_DossierDate");
                entity.Property(e => e.RcshDossierNumber)
                    .HasMaxLength(20)
                    .HasColumnName("RCSH_DossierNumber");
                entity.Property(e => e.RcshEntryBatch)
                    .HasMaxLength(36)
                    .HasColumnName("RCSH_EntryBatch");
                entity.Property(e => e.RcshEntryNumber)
                    .HasMaxLength(36)
                    .HasColumnName("RCSH_EntryNumber");
                entity.Property(e => e.RcshEntrySystem)
                    .HasMaxLength(10)
                    .HasColumnName("RCSH_EntrySystem");
                entity.Property(e => e.RcshIncidentAmountPaid)
                    .HasColumnType("money")
                    .HasColumnName("RCSH_IncidentAmountPaid");
                entity.Property(e => e.RcshIncidentDate).HasColumnName("RCSH_IncidentDate");
                entity.Property(e => e.RcshIncidentDescription)
                    .HasMaxLength(250)
                    .HasColumnName("RCSH_IncidentDescription");
                entity.Property(e => e.RcshInsuranceCoverageCode)
                    .HasMaxLength(10)
                    .HasColumnName("RCSH_InsuranceCoverageCode");
                entity.Property(e => e.RcshInsuredPartyAddressId).HasColumnName("RCSH_InsuredPartyAddress_Id");
                entity.Property(e => e.RcshInsuredPartyIban)
                    .HasMaxLength(34)
                    .HasColumnName("RCSH_InsuredPartyIban");
                entity.Property(e => e.RcshInsuredPartyIncidentNumber)
                    .HasMaxLength(50)
                    .HasColumnName("RCSH_InsuredPartyIncidentNumber");
                entity.Property(e => e.RcshInsuredPartyInsurancePolicyNumber)
                    .HasMaxLength(50)
                    .HasColumnName("RCSH_InsuredPartyInsurancePolicyNumber");
                entity.Property(e => e.RcshInsuredPartyInsurerAddressId).HasColumnName("RCSH_InsuredPartyInsurerAddress_Id");
                entity.Property(e => e.RcshInsuredPartyInsurerCode)
                    .HasMaxLength(10)
                    .HasColumnName("RCSH_InsuredPartyInsurerCode");
                entity.Property(e => e.RcshInsuredPartyInsurerIban)
                    .HasMaxLength(34)
                    .HasColumnName("RCSH_InsuredPartyInsurerIban");
                entity.Property(e => e.RcshInsuredPartyInsurerId).HasColumnName("RCSH_InsuredPartyInsurerId");
                entity.Property(e => e.RcshInsuredPartyInsurerName)
                    .HasMaxLength(250)
                    .HasColumnName("RCSH_InsuredPartyInsurerName");
                entity.Property(e => e.RcshInsuredPartyLicensePlate)
                    .HasMaxLength(20)
                    .HasColumnName("RCSH_InsuredPartyLicensePlate");
                entity.Property(e => e.RcshInsuredPartyName)
                    .HasMaxLength(250)
                    .HasColumnName("RCSH_InsuredPartyName");
                entity.Property(e => e.RcshIsGuaranteeFund).HasColumnName("RCSH_IsGuaranteeFund");
                entity.Property(e => e.RcshIsInsuredLiable).HasColumnName("RCSH_IsInsuredLiable");
                entity.Property(e => e.RcshLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RCSH_LastModifiedBy");
                entity.Property(e => e.RcshLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RCSH_LastModifiedDate");
                entity.Property(e => e.RcshLegalEntityId).HasColumnName("RCSH_LegalEntity_Id");
                entity.Property(e => e.RcshLiablePartyAddressId).HasColumnName("RCSH_LiablePartyAddress_Id");
                entity.Property(e => e.RcshLiablePartyIban)
                    .HasMaxLength(34)
                    .HasColumnName("RCSH_LiablePartyIban");
                entity.Property(e => e.RcshLiablePartyIncidentNumber)
                    .HasMaxLength(50)
                    .HasColumnName("RCSH_LiablePartyIncidentNumber");
                entity.Property(e => e.RcshLiablePartyInsurancePolicyNumber)
                    .HasMaxLength(50)
                    .HasColumnName("RCSH_LiablePartyInsurancePolicyNumber");
                entity.Property(e => e.RcshLiablePartyInsurerAddressId).HasColumnName("RCSH_LiablePartyInsurerAddress_Id");
                entity.Property(e => e.RcshLiablePartyInsurerCode)
                    .HasMaxLength(10)
                    .HasColumnName("RCSH_LiablePartyInsurerCode");
                entity.Property(e => e.RcshLiablePartyInsurerIban)
                    .HasMaxLength(34)
                    .HasColumnName("RCSH_LiablePartyInsurerIban");
                entity.Property(e => e.RcshLiablePartyInsurerId).HasColumnName("RCSH_LiablePartyInsurerId");
                entity.Property(e => e.RcshLiablePartyInsurerName)
                    .HasMaxLength(250)
                    .HasColumnName("RCSH_LiablePartyInsurerName");
                entity.Property(e => e.RcshLiablePartyLicensePlate)
                    .HasMaxLength(20)
                    .HasColumnName("RCSH_LiablePartyLicensePlate");
                entity.Property(e => e.RcshLiablePartyName)
                    .HasMaxLength(250)
                    .HasColumnName("RCSH_LiablePartyName");
                entity.Property(e => e.RcshOwnRiskAmount)
                    .HasColumnType("money")
                    .HasColumnName("RCSH_OwnRiskAmount");
                entity.Property(e => e.RcshRecoveryAmountExpected)
                    .HasColumnType("money")
                    .HasColumnName("RCSH_RecoveryAmountExpected");
                entity.Property(e => e.RcshRecoveryStatementId).HasColumnName("RCSH_RecoveryStatement_Id");
                entity.Property(e => e.RcshStatementNumber)
                    .HasMaxLength(10)
                    .HasColumnName("RCSH_StatementNumber");
                entity.Property(e => e.RcshTenantId).HasColumnName("RCSH_Tenant_Id");
                entity.Property(e => e.RcshTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RCSH_TimeStamp");
            });

            modelBuilder.Entity<RecoveryStatementStatus>(entity =>
            {
                entity.HasKey(e => e.RssId);

                entity.ToTable("RecoveryStatementStatuses", "fin");

                entity.Property(e => e.RssId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("RSS_Id");
                entity.Property(e => e.RssCode)
                    .HasMaxLength(10)
                    .HasColumnName("RSS_Code");
                entity.Property(e => e.RssCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RSS_CreatedBy");
                entity.Property(e => e.RssCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RSS_CreatedDate");
                entity.Property(e => e.RssInactive).HasColumnName("RSS_Inactive");
                entity.Property(e => e.RssLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RSS_LastModifiedBy");
                entity.Property(e => e.RssLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RSS_LastModifiedDate");
                entity.Property(e => e.RssLocalizableEntryId).HasColumnName("RSS_LocalizableEntry_Id");
                entity.Property(e => e.RssLongName)
                    .HasMaxLength(250)
                    .HasColumnName("RSS_LongName");
                entity.Property(e => e.RssShortName)
                    .HasMaxLength(20)
                    .HasColumnName("RSS_ShortName");
                entity.Property(e => e.RssTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RSS_TimeStamp");

                entity.HasOne(d => d.RssLocalizableEntry).WithMany(p => p.RecoveryStatementStatuses)
                    .HasForeignKey(d => d.RssLocalizableEntryId)
                    .HasConstraintName("FK_RecoveryStatementStatuses_LocalizableEntries");
            });

            modelBuilder.Entity<RecoveryStatementStatusHistory>(entity =>
            {
                entity.HasKey(e => e.RshId);

                entity.ToTable("RecoveryStatementStatusHistory", "fin");

                entity.Property(e => e.RshId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("RSH_Id");
                entity.Property(e => e.RshCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RSH_CreatedBy");
                entity.Property(e => e.RshCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RSH_CreatedDate");
                entity.Property(e => e.RshLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RSH_LastModifiedBy");
                entity.Property(e => e.RshLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RSH_LastModifiedDate");
                entity.Property(e => e.RshRecoveryStatementId).HasColumnName("RSH_RecoveryStatement_Id");
                entity.Property(e => e.RshRecoveryStatementStatusId).HasColumnName("RSH_RecoveryStatementStatus_Id");
                entity.Property(e => e.RshStartDate).HasColumnName("RSH_StartDate");
                entity.Property(e => e.RshStatusChangeReason)
                    .HasMaxLength(250)
                    .HasColumnName("RSH_StatusChangeReason");
                entity.Property(e => e.RshTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RSH_TimeStamp");

                entity.HasOne(d => d.RshRecoveryStatement).WithMany(p => p.RecoveryStatementStatusHistories)
                    .HasForeignKey(d => d.RshRecoveryStatementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RecoveryStatementStatusHistory_RecoveryStatements");

                entity.HasOne(d => d.RshRecoveryStatementStatus).WithMany(p => p.RecoveryStatementStatusHistories)
                    .HasForeignKey(d => d.RshRecoveryStatementStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RecoveryStatementStatusHistory_RecoveryStatementStatuses");
            });

            modelBuilder.Entity<RecoveryStatementsBookingView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("RecoveryStatementsBookingView", "fin");

                entity.Property(e => e.AccountHolderName).HasMaxLength(250);
                entity.Property(e => e.BankStatementDate).HasColumnType("date");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Iban)
                    .HasMaxLength(34)
                    .HasColumnName("IBAN");
                entity.Property(e => e.JournalDate).HasColumnType("date");
                entity.Property(e => e.JournalId).HasMaxLength(20);
                entity.Property(e => e.JournalNumber).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.OurReference).HasMaxLength(50);
                entity.Property(e => e.RemittanceInformation).HasMaxLength(500);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.TransactionAmount).HasColumnType("money");
                entity.Property(e => e.YourReference).HasMaxLength(50);
            });

            modelBuilder.Entity<RecoveryStatementsFinalizedView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("RecoveryStatementsFinalizedView", "fin");

                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.ClientProductCode).HasMaxLength(20);
                entity.Property(e => e.CostCenterCode).HasMaxLength(10);
                entity.Property(e => e.CostCenterName).HasMaxLength(250);
                entity.Property(e => e.CostUnitCode).HasMaxLength(10);
                entity.Property(e => e.CostUnitName).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditorName).HasMaxLength(250);
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.IncidentAmountPaid).HasColumnType("money");
                entity.Property(e => e.IncidentDescription).HasMaxLength(250);
                entity.Property(e => e.InsuranceCoverageCode).HasMaxLength(10);
                entity.Property(e => e.InsuredPartyCity).HasMaxLength(250);
                entity.Property(e => e.InsuredPartyCountryCode).HasMaxLength(3);
                entity.Property(e => e.InsuredPartyHouseNo).HasMaxLength(10);
                entity.Property(e => e.InsuredPartyHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.InsuredPartyIban)
                    .HasMaxLength(34)
                    .HasColumnName("InsuredPartyIBAN");
                entity.Property(e => e.InsuredPartyIncidentNumber).HasMaxLength(50);
                entity.Property(e => e.InsuredPartyInsurancePolicyNumber).HasMaxLength(50);
                entity.Property(e => e.InsuredPartyInsurerCode).HasMaxLength(10);
                entity.Property(e => e.InsuredPartyInsurerCountryCode).HasMaxLength(3);
                entity.Property(e => e.InsuredPartyInsurerIban)
                    .HasMaxLength(34)
                    .HasColumnName("InsuredPartyInsurerIBAN");
                entity.Property(e => e.InsuredPartyInsurerName).HasMaxLength(250);
                entity.Property(e => e.InsuredPartyLicensePlate).HasMaxLength(20);
                entity.Property(e => e.InsuredPartyName).HasMaxLength(250);
                entity.Property(e => e.InsuredPartyPostalCode).HasMaxLength(10);
                entity.Property(e => e.InsuredPartyProvince).HasMaxLength(250);
                entity.Property(e => e.InsuredPartyStreetName).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LastPaymentDate).HasColumnType("date");
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.LiablePartyCity).HasMaxLength(250);
                entity.Property(e => e.LiablePartyCountryCode).HasMaxLength(3);
                entity.Property(e => e.LiablePartyHouseNo).HasMaxLength(10);
                entity.Property(e => e.LiablePartyHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.LiablePartyIban)
                    .HasMaxLength(34)
                    .HasColumnName("LiablePartyIBAN");
                entity.Property(e => e.LiablePartyIncidentNumber).HasMaxLength(50);
                entity.Property(e => e.LiablePartyInsurancePolicyNumber).HasMaxLength(50);
                entity.Property(e => e.LiablePartyInsurerCode).HasMaxLength(10);
                entity.Property(e => e.LiablePartyInsurerCountryCode).HasMaxLength(3);
                entity.Property(e => e.LiablePartyInsurerIban)
                    .HasMaxLength(34)
                    .HasColumnName("LiablePartyInsurerIBAN");
                entity.Property(e => e.LiablePartyInsurerName).HasMaxLength(250);
                entity.Property(e => e.LiablePartyLicensePlate).HasMaxLength(20);
                entity.Property(e => e.LiablePartyName).HasMaxLength(250);
                entity.Property(e => e.LiablePartyPostalCode).HasMaxLength(10);
                entity.Property(e => e.LiablePartyProvince).HasMaxLength(250);
                entity.Property(e => e.LiablePartyStreetName).HasMaxLength(250);
                entity.Property(e => e.OwnRiskAmount).HasColumnType("money");
                entity.Property(e => e.RecoveryAmountExpected).HasColumnType("money");
                entity.Property(e => e.RecoveryAmountReceived).HasColumnType("money");
                entity.Property(e => e.RecoveryOpenAmount).HasColumnType("money");
                entity.Property(e => e.RecoveryTransferAmount).HasColumnType("money");
                entity.Property(e => e.StatementNumber).HasMaxLength(10);
                entity.Property(e => e.StatementStatus).HasMaxLength(20);
                entity.Property(e => e.TenantCode).HasMaxLength(10);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<RecoveryStatementsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("RecoveryStatementsView", "fin");

                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.ClientProductCode).HasMaxLength(20);
                entity.Property(e => e.CostCenterCode).HasMaxLength(10);
                entity.Property(e => e.CostCenterName).HasMaxLength(250);
                entity.Property(e => e.CostUnitCode).HasMaxLength(10);
                entity.Property(e => e.CostUnitName).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditorName).HasMaxLength(250);
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.IncidentAmountPaid).HasColumnType("money");
                entity.Property(e => e.IncidentDescription).HasMaxLength(250);
                entity.Property(e => e.InsuranceCoverageCode).HasMaxLength(10);
                entity.Property(e => e.InsuredPartyCity).HasMaxLength(250);
                entity.Property(e => e.InsuredPartyCountryCode).HasMaxLength(3);
                entity.Property(e => e.InsuredPartyHouseNo).HasMaxLength(10);
                entity.Property(e => e.InsuredPartyHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.InsuredPartyIban)
                    .HasMaxLength(34)
                    .HasColumnName("InsuredPartyIBAN");
                entity.Property(e => e.InsuredPartyIncidentNumber).HasMaxLength(50);
                entity.Property(e => e.InsuredPartyInsurancePolicyNumber).HasMaxLength(50);
                entity.Property(e => e.InsuredPartyInsurerCode).HasMaxLength(10);
                entity.Property(e => e.InsuredPartyInsurerCountryCode).HasMaxLength(3);
                entity.Property(e => e.InsuredPartyInsurerIban)
                    .HasMaxLength(34)
                    .HasColumnName("InsuredPartyInsurerIBAN");
                entity.Property(e => e.InsuredPartyInsurerName).HasMaxLength(250);
                entity.Property(e => e.InsuredPartyLicensePlate).HasMaxLength(20);
                entity.Property(e => e.InsuredPartyName).HasMaxLength(250);
                entity.Property(e => e.InsuredPartyPostalCode).HasMaxLength(10);
                entity.Property(e => e.InsuredPartyProvince).HasMaxLength(250);
                entity.Property(e => e.InsuredPartyStreetName).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LastPaymentDate).HasColumnType("date");
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.LiablePartyCity).HasMaxLength(250);
                entity.Property(e => e.LiablePartyCountryCode).HasMaxLength(3);
                entity.Property(e => e.LiablePartyHouseNo).HasMaxLength(10);
                entity.Property(e => e.LiablePartyHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.LiablePartyIban)
                    .HasMaxLength(34)
                    .HasColumnName("LiablePartyIBAN");
                entity.Property(e => e.LiablePartyIncidentNumber).HasMaxLength(50);
                entity.Property(e => e.LiablePartyInsurancePolicyNumber).HasMaxLength(50);
                entity.Property(e => e.LiablePartyInsurerCode).HasMaxLength(10);
                entity.Property(e => e.LiablePartyInsurerCountryCode).HasMaxLength(3);
                entity.Property(e => e.LiablePartyInsurerIban)
                    .HasMaxLength(34)
                    .HasColumnName("LiablePartyInsurerIBAN");
                entity.Property(e => e.LiablePartyInsurerName).HasMaxLength(250);
                entity.Property(e => e.LiablePartyLicensePlate).HasMaxLength(20);
                entity.Property(e => e.LiablePartyName).HasMaxLength(250);
                entity.Property(e => e.LiablePartyPostalCode).HasMaxLength(10);
                entity.Property(e => e.LiablePartyProvince).HasMaxLength(250);
                entity.Property(e => e.LiablePartyStreetName).HasMaxLength(250);
                entity.Property(e => e.OwnRiskAmount).HasColumnType("money");
                entity.Property(e => e.RecoveryAmountExpected).HasColumnType("money");
                entity.Property(e => e.RecoveryAmountReceived).HasColumnType("money");
                entity.Property(e => e.RecoveryOpenAmount).HasColumnType("money");
                entity.Property(e => e.RecoveryTransferAmount).HasColumnType("money");
                entity.Property(e => e.StatementNumber).HasMaxLength(10);
                entity.Property(e => e.StatementStatus).HasMaxLength(20);
                entity.Property(e => e.TenantCode).HasMaxLength(10);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<RecoveryTransfer>(entity =>
            {
                entity.HasKey(e => e.RctId);

                entity.ToTable("RecoveryTransfers", "fin", tb => tb.HasTrigger("RecoveryTransfers_Create_CreditTransferRecoveryStatements"));

                entity.HasIndex(e => e.RctRecoveryStatementId, "IX_RecoveryTransfers_RecoveryStatements");

                entity.Property(e => e.RctId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("RCT_Id");
                entity.Property(e => e.RctAccountAddressLine1)
                    .HasMaxLength(250)
                    .HasColumnName("RCT_AccountAddressLine1");
                entity.Property(e => e.RctAccountAddressLine2)
                    .HasMaxLength(250)
                    .HasColumnName("RCT_AccountAddressLine2");
                entity.Property(e => e.RctAccountHolderName)
                    .HasMaxLength(250)
                    .HasColumnName("RCT_AccountHolderName");
                entity.Property(e => e.RctAccountNumber)
                    .HasMaxLength(20)
                    .HasColumnName("RCT_AccountNumber");
                entity.Property(e => e.RctBankName)
                    .HasMaxLength(250)
                    .HasColumnName("RCT_BankName");
                entity.Property(e => e.RctBic)
                    .HasMaxLength(11)
                    .HasColumnName("RCT_BIC");
                entity.Property(e => e.RctCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RCT_CreatedBy");
                entity.Property(e => e.RctCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RCT_CreatedDate");
                entity.Property(e => e.RctCreditAmount)
                    .HasColumnType("money")
                    .HasColumnName("RCT_CreditAmount");
                entity.Property(e => e.RctCreditTransferId).HasColumnName("RCT_CreditTransfer_Id");
                entity.Property(e => e.RctCreditTransferNumber)
                    .HasMaxLength(20)
                    .HasColumnName("RCT_CreditTransferNumber");
                entity.Property(e => e.RctCurrencyCode)
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('EUR')")
                    .HasColumnName("RCT_CurrencyCode");
                entity.Property(e => e.RctEntryBatch)
                    .HasMaxLength(36)
                    .HasColumnName("RCT_EntryBatch");
                entity.Property(e => e.RctEntryNumber)
                    .HasMaxLength(36)
                    .HasColumnName("RCT_EntryNumber");
                entity.Property(e => e.RctEntrySystem)
                    .HasMaxLength(10)
                    .HasColumnName("RCT_EntrySystem");
                entity.Property(e => e.RctExecutionDate)
                    .HasColumnType("date")
                    .HasColumnName("RCT_ExecutionDate");
                entity.Property(e => e.RctIban)
                    .HasMaxLength(34)
                    .HasColumnName("RCT_IBAN");
                entity.Property(e => e.RctLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RCT_LastModifiedBy");
                entity.Property(e => e.RctLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RCT_LastModifiedDate");
                entity.Property(e => e.RctRecoveryStatementId).HasColumnName("RCT_RecoveryStatement_Id");
                entity.Property(e => e.RctRemittanceInformation)
                    .HasMaxLength(250)
                    .HasColumnName("RCT_RemittanceInformation");
                entity.Property(e => e.RctTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RCT_TimeStamp");
                entity.Property(e => e.RctUrgentTransfer).HasColumnName("RCT_UrgentTransfer");

                entity.HasOne(d => d.RctRecoveryStatement).WithMany(p => p.RecoveryTransfers)
                    .HasForeignKey(d => d.RctRecoveryStatementId)
                    .HasConstraintName("FK_RecoveryTransfers_RecoveryStatements");
            });

            modelBuilder.Entity<Region>(entity =>
            {
                entity.HasKey(e => e.RgnId);

                entity.ToTable("Regions", "ced");

                entity.Property(e => e.RgnId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("RGN_Id");
                entity.Property(e => e.RgnCode)
                    .HasMaxLength(10)
                    .HasColumnName("RGN_Code");
                entity.Property(e => e.RgnCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RGN_CreatedBy");
                entity.Property(e => e.RgnCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RGN_CreatedDate");
                entity.Property(e => e.RgnInactive).HasColumnName("RGN_Inactive");
                entity.Property(e => e.RgnLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RGN_LastModifiedBy");
                entity.Property(e => e.RgnLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RGN_LastModifiedDate");
                entity.Property(e => e.RgnLongName)
                    .HasMaxLength(250)
                    .HasColumnName("RGN_LongName");
                entity.Property(e => e.RgnShortName)
                    .HasMaxLength(20)
                    .HasColumnName("RGN_ShortName");
                entity.Property(e => e.RgnTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RGN_TimeStamp");
            });

            modelBuilder.Entity<Regre>(entity =>
            {
                entity.HasKey(e => e.RgsId);

                entity.ToTable("Regres", "dos", tb => tb.HasTrigger("th_dos_Regres_TraceHistory"));

                entity.HasIndex(e => e.RgsInvolvedObjectId, "IX_dos_Regres_InvolvedObject");

                entity.Property(e => e.RgsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("RGS_Id");
                entity.Property(e => e.RgsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RGS_CreatedBy");
                entity.Property(e => e.RgsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RGS_CreatedDate");
                entity.Property(e => e.RgsDossierId).HasColumnName("RGS_Dossier_Id");
                entity.Property(e => e.RgsInvolvedCoverageId).HasColumnName("RGS_InvolvedCoverage_Id");
                entity.Property(e => e.RgsInvolvedObjectId).HasColumnName("RGS_InvolvedObject_Id");
                entity.Property(e => e.RgsIsClearingHouse).HasColumnName("RGS_IsClearingHouse");
                entity.Property(e => e.RgsIsGuaranteeFund).HasColumnName("RGS_IsGuaranteeFund");
                entity.Property(e => e.RgsIsManual).HasColumnName("RGS_IsManual");
                entity.Property(e => e.RgsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RGS_LastModifiedBy");
                entity.Property(e => e.RgsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RGS_LastModifiedDate");
                entity.Property(e => e.RgsPaymentValue)
                    .HasColumnType("money")
                    .HasColumnName("RGS_PaymentValue");
                entity.Property(e => e.RgsPercentageRegres).HasColumnName("RGS_PercentageRegres");
                entity.Property(e => e.RgsRecoveryStatementId)
                    .HasMaxLength(36)
                    .HasColumnName("RGS_RecoveryStatementId");
                entity.Property(e => e.RgsRecoveryStatementNumber)
                    .HasMaxLength(20)
                    .HasColumnName("RGS_RecoveryStatementNumber");
                entity.Property(e => e.RgsRecoveryValueExpected)
                    .HasColumnType("money")
                    .HasColumnName("RGS_RecoveryValueExpected");
                entity.Property(e => e.RgsRetentionValue)
                    .HasColumnType("money")
                    .HasColumnName("RGS_RetentionValue");
                entity.Property(e => e.RgsSequenceNumber).HasColumnName("RGS_SequenceNumber");
                entity.Property(e => e.RgsStatus)
                    .HasMaxLength(200)
                    .HasColumnName("RGS_Status");
                entity.Property(e => e.RgsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RGS_TimeStamp");

                entity.HasOne(d => d.RgsDossier).WithMany(p => p.Regres)
                    .HasForeignKey(d => d.RgsDossierId)
                    .HasConstraintName("FK_Regres_Dossiers");

                entity.HasOne(d => d.RgsInvolvedCoverage).WithMany(p => p.Regres)
                    .HasForeignKey(d => d.RgsInvolvedCoverageId)
                    .HasConstraintName("FK_Regres_InvolvedCoverages");

                entity.HasOne(d => d.RgsInvolvedObject).WithMany(p => p.Regres)
                    .HasForeignKey(d => d.RgsInvolvedObjectId)
                    .HasConstraintName("FK_Regres_InvolvedObjects");
            });

            modelBuilder.Entity<RegresHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_Regres_History_ID");

                entity.ToTable("Regres_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.RgsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RGS_CreatedBy");
                entity.Property(e => e.RgsCreatedDate).HasColumnName("RGS_CreatedDate");
                entity.Property(e => e.RgsDossierId).HasColumnName("RGS_Dossier_Id");
                entity.Property(e => e.RgsId).HasColumnName("RGS_Id");
                entity.Property(e => e.RgsInvolvedCoverageId).HasColumnName("RGS_InvolvedCoverage_Id");
                entity.Property(e => e.RgsInvolvedObjectId).HasColumnName("RGS_InvolvedObject_Id");
                entity.Property(e => e.RgsIsClearingHouse).HasColumnName("RGS_IsClearingHouse");
                entity.Property(e => e.RgsIsGuaranteeFund).HasColumnName("RGS_IsGuaranteeFund");
                entity.Property(e => e.RgsIsManual).HasColumnName("RGS_IsManual");
                entity.Property(e => e.RgsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RGS_LastModifiedBy");
                entity.Property(e => e.RgsLastModifiedDate).HasColumnName("RGS_LastModifiedDate");
                entity.Property(e => e.RgsPaymentValue)
                    .HasColumnType("money")
                    .HasColumnName("RGS_PaymentValue");
                entity.Property(e => e.RgsPercentageRegres).HasColumnName("RGS_PercentageRegres");
                entity.Property(e => e.RgsRecoveryStatementId)
                    .HasMaxLength(36)
                    .HasColumnName("RGS_RecoveryStatementId");
                entity.Property(e => e.RgsRecoveryStatementNumber)
                    .HasMaxLength(20)
                    .HasColumnName("RGS_RecoveryStatementNumber");
                entity.Property(e => e.RgsRecoveryValueExpected)
                    .HasColumnType("money")
                    .HasColumnName("RGS_RecoveryValueExpected");
                entity.Property(e => e.RgsRetentionValue)
                    .HasColumnType("money")
                    .HasColumnName("RGS_RetentionValue");
                entity.Property(e => e.RgsSequenceNumber).HasColumnName("RGS_SequenceNumber");
                entity.Property(e => e.RgsStatus)
                    .HasMaxLength(200)
                    .HasColumnName("RGS_Status");
            });

            modelBuilder.Entity<RepairDossier>(entity =>
            {
                entity.HasKey(e => e.RedId);

                entity.ToTable("RepairDossiers", "dos", tb => tb.HasTrigger("th_dos_RepairDossiers_TraceHistory"));

                entity.Property(e => e.RedId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("RED_Id");
                entity.Property(e => e.RedCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RED_CreatedBy");
                entity.Property(e => e.RedCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RED_CreatedDate");
                entity.Property(e => e.RedDamageAmountEstimate)
                    .HasColumnType("money")
                    .HasColumnName("RED_DamageAmountEstimate");
                entity.Property(e => e.RedDamageAmountFinal)
                    .HasColumnType("money")
                    .HasColumnName("RED_DamageAmountFinal");
                entity.Property(e => e.RedHasExpertIntake).HasColumnName("RED_HasExpertIntake");
                entity.Property(e => e.RedIncidentCity)
                    .HasMaxLength(200)
                    .HasColumnName("RED_IncidentCity");
                entity.Property(e => e.RedIncidentDate).HasColumnName("RED_IncidentDate");
                entity.Property(e => e.RedIncidentStreet)
                    .HasMaxLength(200)
                    .HasColumnName("RED_IncidentStreet");
                entity.Property(e => e.RedIsExpertiseDossier).HasColumnName("RED_IsExpertiseDossier");
                entity.Property(e => e.RedLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RED_LastModifiedBy");
                entity.Property(e => e.RedLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RED_LastModifiedDate");
                entity.Property(e => e.RedReportingParty)
                    .HasMaxLength(200)
                    .HasColumnName("RED_ReportingParty");
                entity.Property(e => e.RedTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RED_TimeStamp");

                entity.HasOne(d => d.Red).WithOne(p => p.RepairDossier)
                    .HasForeignKey<RepairDossier>(d => d.RedId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairDossiers_Dossiers");
            });

            modelBuilder.Entity<RepairDossiersHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_RepairDossiers_History_ID");

                entity.ToTable("RepairDossiers_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.RedCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RED_CreatedBy");
                entity.Property(e => e.RedCreatedDate).HasColumnName("RED_CreatedDate");
                entity.Property(e => e.RedDamageAmountEstimate)
                    .HasColumnType("money")
                    .HasColumnName("RED_DamageAmountEstimate");
                entity.Property(e => e.RedDamageAmountFinal)
                    .HasColumnType("money")
                    .HasColumnName("RED_DamageAmountFinal");
                entity.Property(e => e.RedHasExpertIntake).HasColumnName("RED_HasExpertIntake");
                entity.Property(e => e.RedId).HasColumnName("RED_Id");
                entity.Property(e => e.RedIncidentCity)
                    .HasMaxLength(200)
                    .HasColumnName("RED_IncidentCity");
                entity.Property(e => e.RedIncidentDate).HasColumnName("RED_IncidentDate");
                entity.Property(e => e.RedIncidentStreet)
                    .HasMaxLength(200)
                    .HasColumnName("RED_IncidentStreet");
                entity.Property(e => e.RedIsExpertiseDossier).HasColumnName("RED_IsExpertiseDossier");
                entity.Property(e => e.RedLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RED_LastModifiedBy");
                entity.Property(e => e.RedLastModifiedDate).HasColumnName("RED_LastModifiedDate");
                entity.Property(e => e.RedReportingParty)
                    .HasMaxLength(200)
                    .HasColumnName("RED_ReportingParty");
            });

            modelBuilder.Entity<RepairOrder>(entity =>
            {
                entity.HasKey(e => e.RohId);

                entity.ToTable("RepairOrder", "dos", tb => tb.HasTrigger("th_dos_RepairOrder_TraceHistory"));

                entity.Property(e => e.RohId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("ROH_Id");
                entity.Property(e => e.RohCauseMatchesAssignment).HasColumnName("ROH_CauseMatchesAssignment");
                entity.Property(e => e.RohCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ROH_CreatedBy");
                entity.Property(e => e.RohCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ROH_CreatedDate");
                entity.Property(e => e.RohCurrentStatusCode)
                    .HasMaxLength(10)
                    .HasColumnName("ROH_CurrentStatusCode");
                entity.Property(e => e.RohCurrentStatusHistoryId).HasColumnName("ROH_CurrentStatusHistory_Id");
                entity.Property(e => e.RohCurrentStatusHistoryStartDate).HasColumnName("ROH_CurrentStatusHistoryStartDate");
                entity.Property(e => e.RohDate).HasColumnName("ROH_Date");
                entity.Property(e => e.RohFee)
                    .HasColumnType("money")
                    .HasColumnName("ROH_Fee");
                entity.Property(e => e.RohIsAdditionalWork).HasColumnName("ROH_IsAdditionalWork");
                entity.Property(e => e.RohIsContractorModel).HasColumnName("ROH_IsContractorModel");
                entity.Property(e => e.RohLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ROH_LastModifiedBy");
                entity.Property(e => e.RohLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ROH_LastModifiedDate");
                entity.Property(e => e.RohMaintenanceStatus)
                    .HasMaxLength(200)
                    .HasColumnName("ROH_MaintenanceStatus");
                entity.Property(e => e.RohNumber)
                    .HasMaxLength(10)
                    .HasColumnName("ROH_Number");
                entity.Property(e => e.RohPreventionBoxDelivered).HasColumnName("ROH_PreventionBoxDelivered");
                entity.Property(e => e.RohPreventionBoxRequired).HasColumnName("ROH_PreventionBoxRequired");
                entity.Property(e => e.RohRepairerId).HasColumnName("ROH_Repairer_Id");
                entity.Property(e => e.RohSituationMatchesAssignment).HasColumnName("ROH_SituationMatchesAssignment");
                entity.Property(e => e.RohSuspectingFraud).HasColumnName("ROH_SuspectingFraud");
                entity.Property(e => e.RohTenantId).HasColumnName("ROH_Tenant_Id");
                entity.Property(e => e.RohTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ROH_TimeStamp");
                entity.Property(e => e.RohToyDelivered).HasColumnName("ROH_ToyDelivered");
                entity.Property(e => e.RohToyRequired).HasColumnName("ROH_ToyRequired");

                entity.HasOne(d => d.RohRepairer).WithMany(p => p.RepairOrders)
                    .HasForeignKey(d => d.RohRepairerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairOrder_Repairer");

                entity.HasOne(d => d.RohTenant).WithMany(p => p.RepairOrders)
                    .HasForeignKey(d => d.RohTenantId)
                    .HasConstraintName("FK_RepairOrder_Tenants");
            });

            modelBuilder.Entity<RepairOrderHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_RepairOrder_History_ID");

                entity.ToTable("RepairOrder_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.RohCauseMatchesAssignment).HasColumnName("ROH_CauseMatchesAssignment");
                entity.Property(e => e.RohCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ROH_CreatedBy");
                entity.Property(e => e.RohCreatedDate).HasColumnName("ROH_CreatedDate");
                entity.Property(e => e.RohCurrentStatusCode)
                    .HasMaxLength(10)
                    .HasColumnName("ROH_CurrentStatusCode");
                entity.Property(e => e.RohCurrentStatusHistoryId).HasColumnName("ROH_CurrentStatusHistory_Id");
                entity.Property(e => e.RohCurrentStatusHistoryStartDate).HasColumnName("ROH_CurrentStatusHistoryStartDate");
                entity.Property(e => e.RohDate).HasColumnName("ROH_Date");
                entity.Property(e => e.RohFee)
                    .HasColumnType("money")
                    .HasColumnName("ROH_Fee");
                entity.Property(e => e.RohId).HasColumnName("ROH_Id");
                entity.Property(e => e.RohIsAdditionalWork).HasColumnName("ROH_IsAdditionalWork");
                entity.Property(e => e.RohIsContractorModel).HasColumnName("ROH_IsContractorModel");
                entity.Property(e => e.RohLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ROH_LastModifiedBy");
                entity.Property(e => e.RohLastModifiedDate).HasColumnName("ROH_LastModifiedDate");
                entity.Property(e => e.RohMaintenanceStatus)
                    .HasMaxLength(200)
                    .HasColumnName("ROH_MaintenanceStatus");
                entity.Property(e => e.RohNumber)
                    .HasMaxLength(10)
                    .HasColumnName("ROH_Number");
                entity.Property(e => e.RohPreventionBoxDelivered).HasColumnName("ROH_PreventionBoxDelivered");
                entity.Property(e => e.RohPreventionBoxRequired).HasColumnName("ROH_PreventionBoxRequired");
                entity.Property(e => e.RohRepairerId).HasColumnName("ROH_Repairer_Id");
                entity.Property(e => e.RohSituationMatchesAssignment).HasColumnName("ROH_SituationMatchesAssignment");
                entity.Property(e => e.RohSuspectingFraud).HasColumnName("ROH_SuspectingFraud");
                entity.Property(e => e.RohTenantId).HasColumnName("ROH_Tenant_Id");
                entity.Property(e => e.RohToyDelivered).HasColumnName("ROH_ToyDelivered");
                entity.Property(e => e.RohToyRequired).HasColumnName("ROH_ToyRequired");
            });

            modelBuilder.Entity<RepairOrderLine>(entity =>
            {
                entity.HasKey(e => e.RolId);

                entity.ToTable("RepairOrderLine", "dos", tb => tb.HasTrigger("th_dos_RepairOrderLine_TraceHistory"));

                entity.Property(e => e.RolId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("ROL_Id");
                entity.Property(e => e.RolCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ROL_CreatedBy");
                entity.Property(e => e.RolCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ROL_CreatedDate");
                entity.Property(e => e.RolDossierLineId).HasColumnName("ROL_DossierLine_Id");
                entity.Property(e => e.RolLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ROL_LastModifiedBy");
                entity.Property(e => e.RolLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ROL_LastModifiedDate");
                entity.Property(e => e.RolNumber).HasColumnName("ROL_Number");
                entity.Property(e => e.RolRepairOrderId).HasColumnName("ROL_RepairOrder_Id");
                entity.Property(e => e.RolTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ROL_TimeStamp");

                entity.HasOne(d => d.RolDossierLine).WithMany(p => p.RepairOrderLines)
                    .HasForeignKey(d => d.RolDossierLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairOrderLine_DossierLines");

                entity.HasOne(d => d.RolRepairOrder).WithMany(p => p.RepairOrderLines)
                    .HasForeignKey(d => d.RolRepairOrderId)
                    .HasConstraintName("FK_RepairOrderLine_RepairOrder");
            });

            modelBuilder.Entity<RepairOrderLineHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_RepairOrderLine_History_ID");

                entity.ToTable("RepairOrderLine_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.RolCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ROL_CreatedBy");
                entity.Property(e => e.RolCreatedDate).HasColumnName("ROL_CreatedDate");
                entity.Property(e => e.RolDossierLineId).HasColumnName("ROL_DossierLine_Id");
                entity.Property(e => e.RolId).HasColumnName("ROL_Id");
                entity.Property(e => e.RolLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ROL_LastModifiedBy");
                entity.Property(e => e.RolLastModifiedDate).HasColumnName("ROL_LastModifiedDate");
                entity.Property(e => e.RolNumber).HasColumnName("ROL_Number");
                entity.Property(e => e.RolRepairOrderId).HasColumnName("ROL_RepairOrder_Id");
            });

            modelBuilder.Entity<RepairOrderStatus>(entity =>
            {
                entity.HasKey(e => e.RosId);

                entity.ToTable("RepairOrderStatuses", "dos", tb => tb.HasTrigger("th_dos_RepairOrderStatuses_TraceHistory"));

                entity.Property(e => e.RosId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("ROS_Id");
                entity.Property(e => e.RosCode)
                    .HasMaxLength(10)
                    .HasColumnName("ROS_Code");
                entity.Property(e => e.RosCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ROS_CreatedBy");
                entity.Property(e => e.RosCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ROS_CreatedDate");
                entity.Property(e => e.RosInactive).HasColumnName("ROS_Inactive");
                entity.Property(e => e.RosLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ROS_LastModifiedBy");
                entity.Property(e => e.RosLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ROS_LastModifiedDate");
                entity.Property(e => e.RosLongName)
                    .HasMaxLength(250)
                    .HasColumnName("ROS_LongName");
                entity.Property(e => e.RosShortName)
                    .HasMaxLength(20)
                    .HasColumnName("ROS_ShortName");
                entity.Property(e => e.RosTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ROS_TimeStamp");
            });

            modelBuilder.Entity<RepairOrderStatusHistory>(entity =>
            {
                entity.HasKey(e => e.RohId);

                entity.ToTable("RepairOrderStatusHistory", "dos", tb =>
                {
                    tb.HasTrigger("td_RepairOrderStatusHistory");
                    tb.HasTrigger("th_dos_RepairOrderStatusHistory_TraceHistory");
                    tb.HasTrigger("tr_RepairOrderStatusHistory");
                });

                entity.HasIndex(e => new { e.RohRepairOrderId, e.RohStartDate }, "IX_RepairOrderStatusHistory_RepairOrder_StartDate_INCL");

                entity.Property(e => e.RohId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("ROH_Id");
                entity.Property(e => e.RohCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ROH_CreatedBy");
                entity.Property(e => e.RohCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ROH_CreatedDate");
                entity.Property(e => e.RohLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ROH_LastModifiedBy");
                entity.Property(e => e.RohLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ROH_LastModifiedDate");
                entity.Property(e => e.RohRepairOrderId).HasColumnName("ROH_RepairOrder_Id");
                entity.Property(e => e.RohRepairOrderStatusId).HasColumnName("ROH_RepairOrderStatus_Id");
                entity.Property(e => e.RohStartDate)
                    .HasColumnType("date")
                    .HasColumnName("ROH_StartDate");
                entity.Property(e => e.RohTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ROH_TimeStamp");

                entity.HasOne(d => d.RohRepairOrder).WithMany(p => p.RepairOrderStatusHistories)
                    .HasForeignKey(d => d.RohRepairOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairOrderStatusHistory_RepairOrder");

                entity.HasOne(d => d.RohRepairOrderStatus).WithMany(p => p.RepairOrderStatusHistories)
                    .HasForeignKey(d => d.RohRepairOrderStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairOrderStatusHistory_RepairOrderStatuses");
            });

            modelBuilder.Entity<RepairOrderStatusHistoryHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_RepairOrderStatusHistory_History_ID");

                entity.ToTable("RepairOrderStatusHistory_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.RohCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ROH_CreatedBy");
                entity.Property(e => e.RohCreatedDate).HasColumnName("ROH_CreatedDate");
                entity.Property(e => e.RohId).HasColumnName("ROH_Id");
                entity.Property(e => e.RohLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ROH_LastModifiedBy");
                entity.Property(e => e.RohLastModifiedDate).HasColumnName("ROH_LastModifiedDate");
                entity.Property(e => e.RohRepairOrderId).HasColumnName("ROH_RepairOrder_Id");
                entity.Property(e => e.RohRepairOrderStatusId).HasColumnName("ROH_RepairOrderStatus_Id");
                entity.Property(e => e.RohStartDate)
                    .HasColumnType("date")
                    .HasColumnName("ROH_StartDate");
            });

            modelBuilder.Entity<RepairOrderStatusesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_RepairOrderStatuses_History_ID");

                entity.ToTable("RepairOrderStatuses_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.RosCode)
                    .HasMaxLength(10)
                    .HasColumnName("ROS_Code");
                entity.Property(e => e.RosCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ROS_CreatedBy");
                entity.Property(e => e.RosCreatedDate).HasColumnName("ROS_CreatedDate");
                entity.Property(e => e.RosId).HasColumnName("ROS_Id");
                entity.Property(e => e.RosInactive).HasColumnName("ROS_Inactive");
                entity.Property(e => e.RosLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ROS_LastModifiedBy");
                entity.Property(e => e.RosLastModifiedDate).HasColumnName("ROS_LastModifiedDate");
                entity.Property(e => e.RosLongName)
                    .HasMaxLength(250)
                    .HasColumnName("ROS_LongName");
                entity.Property(e => e.RosShortName)
                    .HasMaxLength(20)
                    .HasColumnName("ROS_ShortName");
            });

            modelBuilder.Entity<Repairer>(entity =>
            {
                entity.HasKey(e => e.RepId);

                entity.ToTable("Repairers", "mdm");

                entity.Property(e => e.RepId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("REP_Id");
                entity.Property(e => e.RepCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("REP_CreatedBy");
                entity.Property(e => e.RepCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("REP_CreatedDate");
                entity.Property(e => e.RepCultureCodePreferredLanguage)
                    .HasMaxLength(10)
                    .HasColumnName("REP_CultureCodePreferredLanguage");
                entity.Property(e => e.RepExternalCode)
                    .HasMaxLength(10)
                    .HasColumnName("REP_ExternalCode");
                entity.Property(e => e.RepInactive).HasColumnName("REP_Inactive");
                entity.Property(e => e.RepLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("REP_LastModifiedBy");
                entity.Property(e => e.RepLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("REP_LastModifiedDate");
                entity.Property(e => e.RepTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("REP_TimeStamp");

                entity.HasOne(d => d.Rep).WithOne(p => p.Repairer)
                    .HasForeignKey<Repairer>(d => d.RepId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Repairers_OrganizationUnits");
            });

            modelBuilder.Entity<RepairerSkill>(entity =>
            {
                entity.HasKey(e => e.RskId);

                entity.ToTable("RepairerSkills", "mdm");

                entity.Property(e => e.RskId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("RSK_Id");
                entity.Property(e => e.RskCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RSK_CreatedBy");
                entity.Property(e => e.RskCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RSK_CreatedDate");
                entity.Property(e => e.RskLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RSK_LastModifiedBy");
                entity.Property(e => e.RskLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RSK_LastModifiedDate");
                entity.Property(e => e.RskRepairerId).HasColumnName("RSK_Repairer_Id");
                entity.Property(e => e.RskSkillId).HasColumnName("RSK_Skill_Id");
                entity.Property(e => e.RskTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RSK_TimeStamp");

                entity.HasOne(d => d.RskRepairer).WithMany(p => p.RepairerSkills)
                    .HasForeignKey(d => d.RskRepairerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairerSkills_Repairer");

                entity.HasOne(d => d.RskSkill).WithMany(p => p.RepairerSkills)
                    .HasForeignKey(d => d.RskSkillId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairerSkills_Skills");
            });

            modelBuilder.Entity<RepairersView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("RepairersView", "mdm");

                entity.Property(e => e.Actief)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.Adres).HasMaxLength(250);
                entity.Property(e => e.Einddatum).HasColumnType("date");
                entity.Property(e => e.ExterneCode)
                    .HasMaxLength(10)
                    .HasColumnName("Externe code");
                entity.Property(e => e.Huisnr).HasMaxLength(10);
                entity.Property(e => e.Landcode).HasMaxLength(3);
                entity.Property(e => e.LandcodePostbus)
                    .HasMaxLength(3)
                    .HasColumnName("Landcode postbus");
                entity.Property(e => e.NaamCpl)
                    .HasMaxLength(756)
                    .HasColumnName("Naam cpl");
                entity.Property(e => e.NaamKort)
                    .HasMaxLength(20)
                    .HasColumnName("Naam kort");
                entity.Property(e => e.NiveauPlekInStructuur)
                    .HasMaxLength(61)
                    .HasColumnName("Niveau (plek in structuur)");
                entity.Property(e => e.OgCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("OG-Code");
                entity.Property(e => e.ParentBovenliggendeType)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("Parent (bovenliggende type)");
                entity.Property(e => e.Porcode).HasMaxLength(10);
                entity.Property(e => e.Postbus).HasMaxLength(10);
                entity.Property(e => e.Postcode).HasMaxLength(10);
                entity.Property(e => e.PostcodePostbus)
                    .HasMaxLength(10)
                    .HasColumnName("Postcode postbus");
                entity.Property(e => e.Provincie).HasMaxLength(250);
                entity.Property(e => e.ProvinciePostbus)
                    .HasMaxLength(250)
                    .HasColumnName("Provincie postbus");
                entity.Property(e => e.Startdatum).HasColumnType("date");
                entity.Property(e => e.Toevoeging).HasMaxLength(250);
                entity.Property(e => e.TypeTpVerzOfVolmacht)
                    .HasMaxLength(61)
                    .HasColumnName("Type (tp/verz/of volmacht)");
                entity.Property(e => e.Woonplaats).HasMaxLength(250);
                entity.Property(e => e.WoonplaatsPostbus)
                    .HasMaxLength(250)
                    .HasColumnName("Woonplaats postbus");
            });

            modelBuilder.Entity<ReportersViewWithContactInformation>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ReportersViewWithContactInformation", "mdm");

                entity.Property(e => e.Actief)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.Adres).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.Einddatum).HasColumnType("date");
                entity.Property(e => e.Email).HasMaxLength(250);
                entity.Property(e => e.Huisnr).HasMaxLength(10);
                entity.Property(e => e.Landcode).HasMaxLength(3);
                entity.Property(e => e.LandcodePostbus)
                    .HasMaxLength(3)
                    .HasColumnName("Landcode postbus");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NaamCpl)
                    .HasMaxLength(756)
                    .HasColumnName("Naam cpl");
                entity.Property(e => e.NaamKort)
                    .HasMaxLength(20)
                    .HasColumnName("Naam kort");
                entity.Property(e => e.NiveauPlekInStructuur)
                    .HasMaxLength(61)
                    .HasColumnName("Niveau (plek in structuur)");
                entity.Property(e => e.OgCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("OG-Code");
                entity.Property(e => e.ParentBovenliggendeType)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI")
                    .HasColumnName("Parent (bovenliggende type)");
                entity.Property(e => e.PhoneNumber).HasMaxLength(250);
                entity.Property(e => e.Porcode).HasMaxLength(10);
                entity.Property(e => e.Postbus).HasMaxLength(10);
                entity.Property(e => e.Postcode).HasMaxLength(10);
                entity.Property(e => e.PostcodePostbus)
                    .HasMaxLength(10)
                    .HasColumnName("Postcode postbus");
                entity.Property(e => e.Provincie).HasMaxLength(250);
                entity.Property(e => e.ProvinciePostbus)
                    .HasMaxLength(250)
                    .HasColumnName("Provincie postbus");
                entity.Property(e => e.Startdatum).HasColumnType("date");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.Toevoeging).HasMaxLength(250);
                entity.Property(e => e.Type)
                    .HasMaxLength(7)
                    .IsUnicode(false);
                entity.Property(e => e.TypeTpVerzOfVolmacht)
                    .HasMaxLength(61)
                    .HasColumnName("Type (tp/verz/of volmacht)");
                entity.Property(e => e.Woonplaats).HasMaxLength(250);
                entity.Property(e => e.WoonplaatsPostbus)
                    .HasMaxLength(250)
                    .HasColumnName("Woonplaats postbus");
            });

            modelBuilder.Entity<ReportingForm>(entity =>
            {
                entity.HasKey(e => e.RfId);

                entity.ToTable("ReportingForms", "pdc");

                entity.Property(e => e.RfId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("RF_Id");
                entity.Property(e => e.RfCode)
                    .HasMaxLength(10)
                    .HasColumnName("RF_Code");
                entity.Property(e => e.RfCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RF_CreatedBy");
                entity.Property(e => e.RfCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RF_CreatedDate");
                entity.Property(e => e.RfInactive).HasColumnName("RF_Inactive");
                entity.Property(e => e.RfLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RF_LastModifiedBy");
                entity.Property(e => e.RfLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RF_LastModifiedDate");
                entity.Property(e => e.RfLocalizableEntryId).HasColumnName("RF_LocalizableEntry_Id");
                entity.Property(e => e.RfLongName)
                    .HasMaxLength(250)
                    .HasColumnName("RF_LongName");
                entity.Property(e => e.RfShortName)
                    .HasMaxLength(20)
                    .HasColumnName("RF_ShortName");
                entity.Property(e => e.RfTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RF_TimeStamp");

                entity.HasOne(d => d.RfLocalizableEntry).WithMany(p => p.ReportingForms)
                    .HasForeignKey(d => d.RfLocalizableEntryId)
                    .HasConstraintName("FK_ReportingForms_LocalizableEntries");
            });

            modelBuilder.Entity<ReportingFormActivityExecution>(entity =>
            {
                entity.HasKey(e => e.RfxId);

                entity.ToTable("ReportingFormActivityExecutions", "pdc");

                entity.Property(e => e.RfxId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("RFX_Id");
                entity.Property(e => e.RfxActivityExecutionId).HasColumnName("RFX_ActivityExecution_Id");
                entity.Property(e => e.RfxCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RFX_CreatedBy");
                entity.Property(e => e.RfxCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RFX_CreatedDate");
                entity.Property(e => e.RfxLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RFX_LastModifiedBy");
                entity.Property(e => e.RfxLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RFX_LastModifiedDate");
                entity.Property(e => e.RfxReportingFormId).HasColumnName("RFX_ReportingForm_Id");
                entity.Property(e => e.RfxTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RFX_TimeStamp");

                entity.HasOne(d => d.RfxActivityExecution).WithMany(p => p.ReportingFormActivityExecutions)
                    .HasForeignKey(d => d.RfxActivityExecutionId)
                    .HasConstraintName("FK_ReportingFormActivityExecutions_ActivityExecutions");

                entity.HasOne(d => d.RfxReportingForm).WithMany(p => p.ReportingFormActivityExecutions)
                    .HasForeignKey(d => d.RfxReportingFormId)
                    .HasConstraintName("FK_ReportingFormActivityExecutions_ReportingForms");
            });

            modelBuilder.Entity<Reservation>(entity =>
            {
                entity.HasKey(e => e.RsvId);

                entity.ToTable("Reservations", "dos", tb => tb.HasTrigger("th_dos_Reservations_TraceHistory"));

                entity.HasIndex(e => e.RsvInvolvedCoverageId, "IX_dos_Reservations_InvolvedCoverage");

                entity.Property(e => e.RsvId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("RSV_Id");
                entity.Property(e => e.RsvClientProductCode)
                    .HasMaxLength(20)
                    .HasColumnName("RSV_ClientProductCode");
                entity.Property(e => e.RsvCostOfClaims)
                    .HasColumnType("money")
                    .HasColumnName("RSV_CostOfClaims");
                entity.Property(e => e.RsvCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RSV_CreatedBy");
                entity.Property(e => e.RsvCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RSV_CreatedDate");
                entity.Property(e => e.RsvInvolvedCoverageId).HasColumnName("RSV_InvolvedCoverage_Id");
                entity.Property(e => e.RsvIsManualTransaction).HasColumnName("RSV_IsManualTransaction");
                entity.Property(e => e.RsvLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RSV_LastModifiedBy");
                entity.Property(e => e.RsvLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RSV_LastModifiedDate");
                entity.Property(e => e.RsvReservationCause)
                    .HasMaxLength(200)
                    .HasColumnName("RSV_ReservationCause");
                entity.Property(e => e.RsvSequenceNumber).HasColumnName("RSV_SequenceNumber");
                entity.Property(e => e.RsvTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RSV_TimeStamp");
                entity.Property(e => e.RsvTotalPaidValue)
                    .HasColumnType("money")
                    .HasColumnName("RSV_TotalPaidValue");
                entity.Property(e => e.RsvTotalReceivedValue)
                    .HasColumnType("money")
                    .HasColumnName("RSV_TotalReceivedValue");
                entity.Property(e => e.RsvTotalReservedValue)
                    .HasColumnType("money")
                    .HasColumnName("RSV_TotalReservedValue");
                entity.Property(e => e.RsvTransactionDate).HasColumnName("RSV_TransactionDate");
                entity.Property(e => e.RsvTransactionValue)
                    .HasColumnType("money")
                    .HasColumnName("RSV_TransactionValue");

                entity.HasOne(d => d.RsvInvolvedCoverage).WithMany(p => p.Reservations)
                    .HasForeignKey(d => d.RsvInvolvedCoverageId)
                    .HasConstraintName("FK_Reservations_InvolvedCoverages");
            });

            modelBuilder.Entity<ReservationsHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_Reservations_History_ID");

                entity.ToTable("Reservations_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.RsvClientProductCode)
                    .HasMaxLength(20)
                    .HasColumnName("RSV_ClientProductCode");
                entity.Property(e => e.RsvCostOfClaims)
                    .HasColumnType("money")
                    .HasColumnName("RSV_CostOfClaims");
                entity.Property(e => e.RsvCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RSV_CreatedBy");
                entity.Property(e => e.RsvCreatedDate).HasColumnName("RSV_CreatedDate");
                entity.Property(e => e.RsvId).HasColumnName("RSV_Id");
                entity.Property(e => e.RsvInvolvedCoverageId).HasColumnName("RSV_InvolvedCoverage_Id");
                entity.Property(e => e.RsvIsManualTransaction).HasColumnName("RSV_IsManualTransaction");
                entity.Property(e => e.RsvLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RSV_LastModifiedBy");
                entity.Property(e => e.RsvLastModifiedDate).HasColumnName("RSV_LastModifiedDate");
                entity.Property(e => e.RsvReservationCause)
                    .HasMaxLength(200)
                    .HasColumnName("RSV_ReservationCause");
                entity.Property(e => e.RsvSequenceNumber).HasColumnName("RSV_SequenceNumber");
                entity.Property(e => e.RsvTotalPaidValue)
                    .HasColumnType("money")
                    .HasColumnName("RSV_TotalPaidValue");
                entity.Property(e => e.RsvTotalReceivedValue)
                    .HasColumnType("money")
                    .HasColumnName("RSV_TotalReceivedValue");
                entity.Property(e => e.RsvTotalReservedValue)
                    .HasColumnType("money")
                    .HasColumnName("RSV_TotalReservedValue");
                entity.Property(e => e.RsvTransactionDate).HasColumnName("RSV_TransactionDate");
                entity.Property(e => e.RsvTransactionValue)
                    .HasColumnType("money")
                    .HasColumnName("RSV_TransactionValue");
            });

            modelBuilder.Entity<Retention>(entity =>
            {
                entity.HasKey(e => e.RtnId);

                entity.ToTable("Retentions", "dos", tb => tb.HasTrigger("th_dos_Retentions_TraceHistory"));

                entity.Property(e => e.RtnId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("RTN_Id");
                entity.Property(e => e.RtnClaimId).HasColumnName("RTN_Claim_Id");
                entity.Property(e => e.RtnCostTypeId).HasColumnName("RTN_CostType_Id");
                entity.Property(e => e.RtnCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RTN_CreatedBy");
                entity.Property(e => e.RtnCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RTN_CreatedDate");
                entity.Property(e => e.RtnLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RTN_LastModifiedBy");
                entity.Property(e => e.RtnLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RTN_LastModifiedDate");
                entity.Property(e => e.RtnRetentionAmount)
                    .HasColumnType("money")
                    .HasColumnName("RTN_RetentionAmount");
                entity.Property(e => e.RtnSequenceNumber).HasColumnName("RTN_SequenceNumber");
                entity.Property(e => e.RtnTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RTN_TimeStamp");

                entity.HasOne(d => d.RtnClaim).WithMany(p => p.Retentions)
                    .HasForeignKey(d => d.RtnClaimId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Retentions_Claims");

                entity.HasOne(d => d.RtnCostType).WithMany(p => p.Retentions)
                    .HasForeignKey(d => d.RtnCostTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Retentions_CostTypes");
            });

            modelBuilder.Entity<RetentionsHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_Retentions_History_ID");

                entity.ToTable("Retentions_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.RtnClaimId).HasColumnName("RTN_Claim_Id");
                entity.Property(e => e.RtnCostTypeId).HasColumnName("RTN_CostType_Id");
                entity.Property(e => e.RtnCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RTN_CreatedBy");
                entity.Property(e => e.RtnCreatedDate).HasColumnName("RTN_CreatedDate");
                entity.Property(e => e.RtnId).HasColumnName("RTN_Id");
                entity.Property(e => e.RtnLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RTN_LastModifiedBy");
                entity.Property(e => e.RtnLastModifiedDate).HasColumnName("RTN_LastModifiedDate");
                entity.Property(e => e.RtnRetentionAmount)
                    .HasColumnType("money")
                    .HasColumnName("RTN_RetentionAmount");
                entity.Property(e => e.RtnSequenceNumber).HasColumnName("RTN_SequenceNumber");
            });

            modelBuilder.Entity<ReversedTaxRate>(entity =>
            {
                entity.HasKey(e => e.RtrId);

                entity.ToTable("ReversedTaxRates", "vat");

                entity.Property(e => e.RtrId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("RTR_Id");
                entity.Property(e => e.RtrCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RTR_CreatedBy");
                entity.Property(e => e.RtrCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RTR_CreatedDate");
                entity.Property(e => e.RtrEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("RTR_EffectiveDate");
                entity.Property(e => e.RtrLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RTR_LastModifiedBy");
                entity.Property(e => e.RtrLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RTR_LastModifiedDate");
                entity.Property(e => e.RtrReversedTaxCodeId)
                    .HasMaxLength(20)
                    .HasColumnName("RTR_ReversedTaxCode_Id");
                entity.Property(e => e.RtrTaxCategoryCodeId)
                    .HasMaxLength(20)
                    .HasColumnName("RTR_TaxCategoryCode_Id");
                entity.Property(e => e.RtrTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("RTR_TerminationDate");
                entity.Property(e => e.RtrTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RTR_TimeStamp");
            });

            modelBuilder.Entity<RoadAuthority>(entity =>
            {
                entity.HasKey(e => e.RaId);

                entity.ToTable("RoadAuthorities", "mdm");

                entity.Property(e => e.RaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("RA_Id");
                entity.Property(e => e.RaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RA_CreatedBy");
                entity.Property(e => e.RaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RA_CreatedDate");
                entity.Property(e => e.RaCultureCodePreferredLanguage)
                    .HasMaxLength(10)
                    .HasColumnName("RA_CultureCodePreferredLanguage");
                entity.Property(e => e.RaExternalCode)
                    .HasMaxLength(10)
                    .HasColumnName("RA_ExternalCode");
                entity.Property(e => e.RaInactive).HasColumnName("RA_Inactive");
                entity.Property(e => e.RaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RA_LastModifiedBy");
                entity.Property(e => e.RaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RA_LastModifiedDate");
                entity.Property(e => e.RaRoadAuthorityTypeId)
                    .HasMaxLength(10)
                    .HasColumnName("RA_RoadAuthorityType_Id");
                entity.Property(e => e.RaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RA_TimeStamp");

                entity.HasOne(d => d.Ra).WithOne(p => p.RoadAuthority)
                    .HasForeignKey<RoadAuthority>(d => d.RaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RoadAuthorities_OrganizationUnits");

                entity.HasOne(d => d.RaRoadAuthorityType).WithMany(p => p.RoadAuthorities)
                    .HasForeignKey(d => d.RaRoadAuthorityTypeId)
                    .HasConstraintName("FK_RoadAuthorities_RoadAuthorityTypes");
            });

            modelBuilder.Entity<RoadAuthority1>(entity =>
            {
                entity.HasKey(e => e.RaId);

                entity.ToTable("RoadAuthorities", "stg");

                entity.Property(e => e.RaId)
                    .ValueGeneratedNever()
                    .HasColumnName("RA_Id");
                entity.Property(e => e.RaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RA_CreatedBy");
                entity.Property(e => e.RaCreatedDate).HasColumnName("RA_CreatedDate");
                entity.Property(e => e.RaCultureCodePreferredLanguage)
                    .HasMaxLength(10)
                    .HasColumnName("RA_CultureCodePreferredLanguage");
                entity.Property(e => e.RaExternalCode)
                    .HasMaxLength(10)
                    .HasColumnName("RA_ExternalCode");
                entity.Property(e => e.RaInactive).HasColumnName("RA_Inactive");
                entity.Property(e => e.RaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RA_LastModifiedBy");
                entity.Property(e => e.RaLastModifiedDate).HasColumnName("RA_LastModifiedDate");
                entity.Property(e => e.RaRoadAuthorityTypeId)
                    .HasMaxLength(10)
                    .HasColumnName("RA_RoadAuthorityType_Id");
                entity.Property(e => e.RaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RA_TimeStamp");
            });

            modelBuilder.Entity<RoadAuthorityCode>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToTable("RoadAuthorityCodes", "etl");

                entity.Property(e => e.RocCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ROC_CreatedBy");
                entity.Property(e => e.RocCreatedDate).HasColumnName("ROC_CreatedDate");
                entity.Property(e => e.RocId)
                    .HasMaxLength(10)
                    .HasColumnName("ROC_Id");
                entity.Property(e => e.RocInactive).HasColumnName("ROC_Inactive");
                entity.Property(e => e.RocLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ROC_LastModifiedBy");
                entity.Property(e => e.RocLastModifiedDate).HasColumnName("ROC_LastModifiedDate");
                entity.Property(e => e.RocLocalizableEntryId).HasColumnName("ROC_LocalizableEntry_Id");
                entity.Property(e => e.RocName)
                    .HasMaxLength(250)
                    .HasColumnName("ROC_Name");
                entity.Property(e => e.RocRoadAuthorityTypeId)
                    .HasMaxLength(10)
                    .HasColumnName("ROC_RoadAuthorityType_Id");
            });

            modelBuilder.Entity<RoadAuthorityCode1>(entity =>
            {
                entity.HasKey(e => e.RocId);

                entity.ToTable("RoadAuthorityCodes", "mdm");

                entity.Property(e => e.RocId)
                    .HasMaxLength(10)
                    .HasColumnName("ROC_Id");
                entity.Property(e => e.RocCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ROC_CreatedBy");
                entity.Property(e => e.RocCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ROC_CreatedDate");
                entity.Property(e => e.RocInactive).HasColumnName("ROC_Inactive");
                entity.Property(e => e.RocLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ROC_LastModifiedBy");
                entity.Property(e => e.RocLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ROC_LastModifiedDate");
                entity.Property(e => e.RocLocalizableEntryId).HasColumnName("ROC_LocalizableEntry_Id");
                entity.Property(e => e.RocName)
                    .HasMaxLength(250)
                    .HasColumnName("ROC_Name");
                entity.Property(e => e.RocRoadAuthorityTypeId)
                    .HasMaxLength(10)
                    .HasColumnName("ROC_RoadAuthorityType_Id");
                entity.Property(e => e.RocTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ROC_TimeStamp");

                entity.HasOne(d => d.RocLocalizableEntry).WithMany(p => p.RoadAuthorityCode1s)
                    .HasForeignKey(d => d.RocLocalizableEntryId)
                    .HasConstraintName("FK_RoadAuthorityCodes_LocalizableEntries");

                entity.HasOne(d => d.RocRoadAuthorityType).WithMany(p => p.RoadAuthorityCode1s)
                    .HasForeignKey(d => d.RocRoadAuthorityTypeId)
                    .HasConstraintName("FK_RoadAuthorityCodes_RoadAuthorityTypes");
            });

            modelBuilder.Entity<RoadAuthorityType>(entity =>
            {
                entity.HasKey(e => e.RotId);

                entity.ToTable("RoadAuthorityTypes", "mdm");

                entity.Property(e => e.RotId)
                    .HasMaxLength(10)
                    .HasColumnName("ROT_Id");
                entity.Property(e => e.RotCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ROT_CreatedBy");
                entity.Property(e => e.RotCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ROT_CreatedDate");
                entity.Property(e => e.RotInactive).HasColumnName("ROT_Inactive");
                entity.Property(e => e.RotLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ROT_LastModifiedBy");
                entity.Property(e => e.RotLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ROT_LastModifiedDate");
                entity.Property(e => e.RotLocalizableEntryId).HasColumnName("ROT_LocalizableEntry_Id");
                entity.Property(e => e.RotName)
                    .HasMaxLength(250)
                    .HasColumnName("ROT_Name");
                entity.Property(e => e.RotTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ROT_TimeStamp");

                entity.HasOne(d => d.RotLocalizableEntry).WithMany(p => p.RoadAuthorityTypes)
                    .HasForeignKey(d => d.RotLocalizableEntryId)
                    .HasConstraintName("FK_RoadAuthorityTypes_LocalizableEntries");
            });

            modelBuilder.Entity<RoadAuthorityType1>(entity =>
            {
                entity.HasKey(e => e.RotId);

                entity.ToTable("RoadAuthorityTypes", "stg");

                entity.Property(e => e.RotId)
                    .HasMaxLength(10)
                    .HasColumnName("ROT_Id");
                entity.Property(e => e.RotCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ROT_CreatedBy");
                entity.Property(e => e.RotCreatedDate).HasColumnName("ROT_CreatedDate");
                entity.Property(e => e.RotInactive).HasColumnName("ROT_Inactive");
                entity.Property(e => e.RotLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ROT_LastModifiedBy");
                entity.Property(e => e.RotLastModifiedDate).HasColumnName("ROT_LastModifiedDate");
                entity.Property(e => e.RotLocalizableEntryId).HasColumnName("ROT_LocalizableEntry_Id");
                entity.Property(e => e.RotName)
                    .HasMaxLength(250)
                    .HasColumnName("ROT_Name");
                entity.Property(e => e.RotTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ROT_TimeStamp");
            });

            modelBuilder.Entity<RoadDirection>(entity =>
            {
                entity.HasKey(e => e.RddId);

                entity.ToTable("RoadDirections", "mdm");

                entity.Property(e => e.RddId)
                    .HasMaxLength(10)
                    .HasColumnName("RDD_Id");
                entity.Property(e => e.RddCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RDD_CreatedBy");
                entity.Property(e => e.RddCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RDD_CreatedDate");
                entity.Property(e => e.RddInactive).HasColumnName("RDD_Inactive");
                entity.Property(e => e.RddLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RDD_LastModifiedBy");
                entity.Property(e => e.RddLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RDD_LastModifiedDate");
                entity.Property(e => e.RddLocalizableEntryId).HasColumnName("RDD_LocalizableEntry_Id");
                entity.Property(e => e.RddName)
                    .HasMaxLength(250)
                    .HasColumnName("RDD_Name");
                entity.Property(e => e.RddTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RDD_TimeStamp");

                entity.HasOne(d => d.RddLocalizableEntry).WithMany(p => p.RoadDirections)
                    .HasForeignKey(d => d.RddLocalizableEntryId)
                    .HasConstraintName("FK_RoadDirections_LocalizableEntries");
            });

            modelBuilder.Entity<RoadLocation>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToTable("RoadLocations", "etl");

                entity.Property(e => e.RdlCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RDL_CreatedBy");
                entity.Property(e => e.RdlCreatedDate).HasColumnName("RDL_CreatedDate");
                entity.Property(e => e.RdlDescription)
                    .HasMaxLength(250)
                    .HasColumnName("RDL_Description");
                entity.Property(e => e.RdlExternalId).HasColumnName("RDL_External_Id");
                entity.Property(e => e.RdlHectometerMarker).HasColumnName("RDL_HectometerMarker");
                entity.Property(e => e.RdlId).HasColumnName("RDL_Id");
                entity.Property(e => e.RdlIsMainRoad).HasColumnName("RDL_IsMainRoad");
                entity.Property(e => e.RdlLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RDL_LastModifiedBy");
                entity.Property(e => e.RdlLastModifiedDate).HasColumnName("RDL_LastModifiedDate");
                entity.Property(e => e.RdlRoadAddition)
                    .HasMaxLength(50)
                    .HasColumnName("RDL_RoadAddition");
                entity.Property(e => e.RdlRoadAuthorityCodeId)
                    .HasMaxLength(10)
                    .HasColumnName("RDL_RoadAuthorityCode_Id");
                entity.Property(e => e.RdlRoadDirectionId)
                    .HasMaxLength(10)
                    .HasColumnName("RDL_RoadDirection_Id");
                entity.Property(e => e.RdlRoadNumber)
                    .HasMaxLength(10)
                    .HasColumnName("RDL_RoadNumber");
                entity.Property(e => e.RdlRoadSectionId)
                    .HasMaxLength(10)
                    .HasColumnName("RDL_RoadSection_Id");
                entity.Property(e => e.RdlRoadSideId)
                    .HasMaxLength(10)
                    .HasColumnName("RDL_RoadSide_Id");
                entity.Property(e => e.RdlRoadTypeId)
                    .HasMaxLength(10)
                    .HasColumnName("RDL_RoadType_Id");
                entity.Property(e => e.RdlRoadX).HasColumnName("RDL_Road_X");
                entity.Property(e => e.RdlRoadY).HasColumnName("RDL_Road_Y");
                entity.Property(e => e.RdlWorldGeodeticSystem84X).HasColumnName("RDL_WorldGeodeticSystem84_X");
                entity.Property(e => e.RdlWorldGeodeticSystem84Y).HasColumnName("RDL_WorldGeodeticSystem84_Y");
            });

            modelBuilder.Entity<RoadLocation1>(entity =>
            {
                entity.HasKey(e => e.RdlId);

                entity.ToTable("RoadLocations", "mdm");

                entity.HasIndex(e => e.RdlRoadAuthorityCodeId, "IX_RoadLocationsL_RoadAuthorityCode_Id");

                entity.HasIndex(e => e.RdlDescription, "IX_RoadLocations_Description");

                entity.HasIndex(e => e.RdlRoadDirectionId, "IX_RoadLocations_RoadDirection_Id");

                entity.HasIndex(e => e.RdlRoadSectionId, "IX_RoadLocations_RoadSection_Id");

                entity.HasIndex(e => e.RdlRoadSideId, "IX_RoadLocations_RoadSide_Id");

                entity.HasIndex(e => new { e.RdlRoadTypeId, e.RdlRoadNumber, e.RdlHectometerMarker }, "IX_RoadLocations_RoadType_RoadNumber_HectometerMarker");

                entity.Property(e => e.RdlId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("RDL_Id");
                entity.Property(e => e.RdlCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RDL_CreatedBy");
                entity.Property(e => e.RdlCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RDL_CreatedDate");
                entity.Property(e => e.RdlDescription)
                    .HasMaxLength(250)
                    .HasColumnName("RDL_Description");
                entity.Property(e => e.RdlExternalId).HasColumnName("RDL_External_Id");
                entity.Property(e => e.RdlHectometerMarker).HasColumnName("RDL_HectometerMarker");
                entity.Property(e => e.RdlIsMainRoad).HasColumnName("RDL_IsMainRoad");
                entity.Property(e => e.RdlLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RDL_LastModifiedBy");
                entity.Property(e => e.RdlLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RDL_LastModifiedDate");
                entity.Property(e => e.RdlRoadAddition)
                    .HasMaxLength(50)
                    .HasColumnName("RDL_RoadAddition");
                entity.Property(e => e.RdlRoadAuthorityCodeId)
                    .HasMaxLength(10)
                    .HasColumnName("RDL_RoadAuthorityCode_Id");
                entity.Property(e => e.RdlRoadDirectionId)
                    .HasMaxLength(10)
                    .HasColumnName("RDL_RoadDirection_Id");
                entity.Property(e => e.RdlRoadNumber)
                    .HasMaxLength(10)
                    .HasColumnName("RDL_RoadNumber");
                entity.Property(e => e.RdlRoadSectionId)
                    .HasMaxLength(10)
                    .HasColumnName("RDL_RoadSection_Id");
                entity.Property(e => e.RdlRoadSideId)
                    .HasMaxLength(10)
                    .HasColumnName("RDL_RoadSide_Id");
                entity.Property(e => e.RdlRoadTypeId)
                    .HasMaxLength(10)
                    .HasColumnName("RDL_RoadType_Id");
                entity.Property(e => e.RdlRoadX).HasColumnName("RDL_Road_X");
                entity.Property(e => e.RdlRoadY).HasColumnName("RDL_Road_Y");
                entity.Property(e => e.RdlTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RDL_TimeStamp");
                entity.Property(e => e.RdlWorldGeodeticSystem84X).HasColumnName("RDL_WorldGeodeticSystem84_X");
                entity.Property(e => e.RdlWorldGeodeticSystem84Y).HasColumnName("RDL_WorldGeodeticSystem84_Y");

                entity.HasOne(d => d.RdlRoadAuthorityCode).WithMany(p => p.RoadLocation1s)
                    .HasForeignKey(d => d.RdlRoadAuthorityCodeId)
                    .HasConstraintName("FK_RoadLocations_RoadAuthorityCodes");

                entity.HasOne(d => d.RdlRoadDirection).WithMany(p => p.RoadLocation1s)
                    .HasForeignKey(d => d.RdlRoadDirectionId)
                    .HasConstraintName("FK_RoadLocations_RoadDirections");

                entity.HasOne(d => d.RdlRoadSection).WithMany(p => p.RoadLocation1s)
                    .HasForeignKey(d => d.RdlRoadSectionId)
                    .HasConstraintName("FK_RoadLocations_RoadSections");

                entity.HasOne(d => d.RdlRoadSide).WithMany(p => p.RoadLocation1s)
                    .HasForeignKey(d => d.RdlRoadSideId)
                    .HasConstraintName("FK_RoadLocations_RoadSides");

                entity.HasOne(d => d.RdlRoadType).WithMany(p => p.RoadLocation1s)
                    .HasForeignKey(d => d.RdlRoadTypeId)
                    .HasConstraintName("FK_RoadLocations_RoadTypes");
            });

            modelBuilder.Entity<RoadSection>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToTable("RoadSections", "etl");

                entity.Property(e => e.RdsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RDS_CreatedBy");
                entity.Property(e => e.RdsCreatedDate).HasColumnName("RDS_CreatedDate");
                entity.Property(e => e.RdsId)
                    .HasMaxLength(10)
                    .HasColumnName("RDS_Id");
                entity.Property(e => e.RdsInactive).HasColumnName("RDS_Inactive");
                entity.Property(e => e.RdsIsMainRoadSection).HasColumnName("RDS_IsMainRoadSection");
                entity.Property(e => e.RdsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RDS_LastModifiedBy");
                entity.Property(e => e.RdsLastModifiedDate).HasColumnName("RDS_LastModifiedDate");
                entity.Property(e => e.RdsLocalizableEntryId).HasColumnName("RDS_LocalizableEntry_Id");
            });

            modelBuilder.Entity<RoadSection1>(entity =>
            {
                entity.HasKey(e => e.RdsId);

                entity.ToTable("RoadSections", "mdm");

                entity.Property(e => e.RdsId)
                    .HasMaxLength(10)
                    .HasColumnName("RDS_Id");
                entity.Property(e => e.RdsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RDS_CreatedBy");
                entity.Property(e => e.RdsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RDS_CreatedDate");
                entity.Property(e => e.RdsInactive).HasColumnName("RDS_Inactive");
                entity.Property(e => e.RdsIsMainRoadSection).HasColumnName("RDS_IsMainRoadSection");
                entity.Property(e => e.RdsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RDS_LastModifiedBy");
                entity.Property(e => e.RdsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RDS_LastModifiedDate");
                entity.Property(e => e.RdsLocalizableEntryId).HasColumnName("RDS_LocalizableEntry_Id");
                entity.Property(e => e.RdsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RDS_TimeStamp");

                entity.HasOne(d => d.RdsLocalizableEntry).WithMany(p => p.RoadSection1s)
                    .HasForeignKey(d => d.RdsLocalizableEntryId)
                    .HasConstraintName("FK_RoadSections_LocalizableEntries");
            });

            modelBuilder.Entity<RoadSide>(entity =>
            {
                entity.HasKey(e => e.RsdId);

                entity.ToTable("RoadSides", "mdm");

                entity.Property(e => e.RsdId)
                    .HasMaxLength(10)
                    .HasColumnName("RSD_Id");
                entity.Property(e => e.RsdCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RSD_CreatedBy");
                entity.Property(e => e.RsdCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RSD_CreatedDate");
                entity.Property(e => e.RsdInactive).HasColumnName("RSD_Inactive");
                entity.Property(e => e.RsdLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RSD_LastModifiedBy");
                entity.Property(e => e.RsdLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RSD_LastModifiedDate");
                entity.Property(e => e.RsdLocalizableEntryId).HasColumnName("RSD_LocalizableEntry_Id");
                entity.Property(e => e.RsdName)
                    .HasMaxLength(250)
                    .HasColumnName("RSD_Name");
                entity.Property(e => e.RsdTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RSD_TimeStamp");

                entity.HasOne(d => d.RsdLocalizableEntry).WithMany(p => p.RoadSides)
                    .HasForeignKey(d => d.RsdLocalizableEntryId)
                    .HasConstraintName("FK_RoadSides_LocalizableEntries");
            });

            modelBuilder.Entity<RoadType>(entity =>
            {
                entity.HasKey(e => e.RdtId);

                entity.ToTable("RoadTypes", "mdm");

                entity.Property(e => e.RdtId)
                    .HasMaxLength(10)
                    .HasColumnName("RDT_Id");
                entity.Property(e => e.RdtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RDT_CreatedBy");
                entity.Property(e => e.RdtCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RDT_CreatedDate");
                entity.Property(e => e.RdtInactive).HasColumnName("RDT_Inactive");
                entity.Property(e => e.RdtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RDT_LastModifiedBy");
                entity.Property(e => e.RdtLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RDT_LastModifiedDate");
                entity.Property(e => e.RdtLocalizableEntryId).HasColumnName("RDT_LocalizableEntry_Id");
                entity.Property(e => e.RdtName)
                    .HasMaxLength(250)
                    .HasColumnName("RDT_Name");
                entity.Property(e => e.RdtTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RDT_TimeStamp");

                entity.HasOne(d => d.RdtLocalizableEntry).WithMany(p => p.RoadTypes)
                    .HasForeignKey(d => d.RdtLocalizableEntryId)
                    .HasConstraintName("FK_RoadTypes_LocalizableEntries");
            });

            modelBuilder.Entity<RoleCode>(entity =>
            {
                entity.HasKey(e => e.RcId);

                entity.ToTable("RoleCodes", "ced");

                entity.Property(e => e.RcId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("RC_Id");
                entity.Property(e => e.RcCode)
                    .HasMaxLength(10)
                    .HasColumnName("RC_Code");
                entity.Property(e => e.RcCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RC_CreatedBy");
                entity.Property(e => e.RcCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RC_CreatedDate");
                entity.Property(e => e.RcInactive).HasColumnName("RC_Inactive");
                entity.Property(e => e.RcLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RC_LastModifiedBy");
                entity.Property(e => e.RcLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RC_LastModifiedDate");
                entity.Property(e => e.RcLocalizableEntryId).HasColumnName("RC_LocalizableEntry_Id");
                entity.Property(e => e.RcLongName)
                    .HasMaxLength(250)
                    .HasColumnName("RC_LongName");
                entity.Property(e => e.RcShortName)
                    .HasMaxLength(20)
                    .HasColumnName("RC_ShortName");
                entity.Property(e => e.RcTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RC_TimeStamp");

                entity.HasOne(d => d.RcLocalizableEntry).WithMany(p => p.RoleCodes)
                    .HasForeignKey(d => d.RcLocalizableEntryId)
                    .HasConstraintName("FK_RoleCodes_LocalizableEntries");
            });

            modelBuilder.Entity<RoleCode1>(entity =>
            {
                entity.HasKey(e => e.RcId).HasName("PK__RoleCode__3214EC07705CAA4B");

                entity.ToTable("RoleCodes", "mdm");

                entity.HasIndex(e => e.RcCode, "UX_mdm_RoleCodes_Code__Filtered")
                    .IsUnique()
                    .HasFilter("([RC_Inactive]=(0))");

                entity.Property(e => e.RcId)
                    .ValueGeneratedNever()
                    .HasColumnName("RC_Id");
                entity.Property(e => e.RcCode)
                    .HasMaxLength(10)
                    .HasColumnName("RC_Code");
                entity.Property(e => e.RcCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RC_CreatedBy");
                entity.Property(e => e.RcCreatedDate).HasColumnName("RC_CreatedDate");
                entity.Property(e => e.RcInactive).HasColumnName("RC_Inactive");
                entity.Property(e => e.RcLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RC_LastModifiedBy");
                entity.Property(e => e.RcLastModifiedDate).HasColumnName("RC_LastModifiedDate");
                entity.Property(e => e.RcLocalizableEntryId).HasColumnName("RC_LocalizableEntryId");
                entity.Property(e => e.RcLongName)
                    .HasMaxLength(250)
                    .HasColumnName("RC_LongName");
                entity.Property(e => e.RcShortName)
                    .HasMaxLength(20)
                    .HasColumnName("RC_ShortName");
                entity.Property(e => e.RcTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RC_TimeStamp");

                entity.HasOne(d => d.RcLocalizableEntry).WithMany(p => p.RoleCode1s)
                    .HasForeignKey(d => d.RcLocalizableEntryId)
                    .HasConstraintName("FK_RoleCodes_LocalizableEntries");
            });

            modelBuilder.Entity<RoofCovering>(entity =>
            {
                entity.HasKey(e => e.RcId);

                entity.ToTable("RoofCoverings", "pdc");

                entity.Property(e => e.RcId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("RC_Id");
                entity.Property(e => e.RcCode)
                    .HasMaxLength(10)
                    .HasColumnName("RC_Code");
                entity.Property(e => e.RcCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RC_CreatedBy");
                entity.Property(e => e.RcCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RC_CreatedDate");
                entity.Property(e => e.RcInactive).HasColumnName("RC_Inactive");
                entity.Property(e => e.RcLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("RC_LastModifiedBy");
                entity.Property(e => e.RcLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("RC_LastModifiedDate");
                entity.Property(e => e.RcLocalizableEntryId).HasColumnName("RC_LocalizableEntry_Id");
                entity.Property(e => e.RcLongName)
                    .HasMaxLength(250)
                    .HasColumnName("RC_LongName");
                entity.Property(e => e.RcShortName)
                    .HasMaxLength(50)
                    .HasColumnName("RC_ShortName");
                entity.Property(e => e.RcTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RC_TimeStamp");

                entity.HasOne(d => d.RcLocalizableEntry).WithMany(p => p.RoofCoverings)
                    .HasForeignKey(d => d.RcLocalizableEntryId)
                    .HasConstraintName("FK_RoofCoverings_LocalizableEntries");
            });

            modelBuilder.Entity<SalesAgreement>(entity =>
            {
                entity.HasKey(e => e.SgrId);

                entity.ToTable("SalesAgreements", "mdm");

                entity.Property(e => e.SgrId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SGR_Id");
                entity.Property(e => e.SgrAgreementCode)
                    .HasMaxLength(20)
                    .HasColumnName("SGR_AgreementCode");
                entity.Property(e => e.SgrAgreementName)
                    .HasMaxLength(250)
                    .HasColumnName("SGR_AgreementName");
                entity.Property(e => e.SgrCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SGR_CreatedBy");
                entity.Property(e => e.SgrCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SGR_CreatedDate");
                entity.Property(e => e.SgrCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("SGR_CurrencyCode");
                entity.Property(e => e.SgrEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("SGR_EffectiveDate");
                entity.Property(e => e.SgrIncludingTax).HasColumnName("SGR_IncludingTax");
                entity.Property(e => e.SgrLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SGR_LastModifiedBy");
                entity.Property(e => e.SgrLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SGR_LastModifiedDate");
                entity.Property(e => e.SgrSalesAgreementTypeId).HasColumnName("SGR_SalesAgreementType_Id");
                entity.Property(e => e.SgrTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("SGR_TerminationDate");
                entity.Property(e => e.SgrTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SGR_TimeStamp");

                entity.HasOne(d => d.SgrSalesAgreementType).WithMany(p => p.SalesAgreements)
                    .HasForeignKey(d => d.SgrSalesAgreementTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesAgreements_SalesAgreementTypes");
            });

            modelBuilder.Entity<SalesAgreementType>(entity =>
            {
                entity.HasKey(e => e.SgtId);

                entity.ToTable("SalesAgreementTypes", "mdm");

                entity.Property(e => e.SgtId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SGT_Id");
                entity.Property(e => e.SgtCode)
                    .HasMaxLength(10)
                    .HasColumnName("SGT_Code");
                entity.Property(e => e.SgtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SGT_CreatedBy");
                entity.Property(e => e.SgtCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SGT_CreatedDate");
                entity.Property(e => e.SgtInactive).HasColumnName("SGT_Inactive");
                entity.Property(e => e.SgtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SGT_LastModifiedBy");
                entity.Property(e => e.SgtLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SGT_LastModifiedDate");
                entity.Property(e => e.SgtLocalizableEntryId).HasColumnName("SGT_LocalizableEntry_Id");
                entity.Property(e => e.SgtLongName)
                    .HasMaxLength(250)
                    .HasColumnName("SGT_LongName");
                entity.Property(e => e.SgtShortName)
                    .HasMaxLength(20)
                    .HasColumnName("SGT_ShortName");
                entity.Property(e => e.SgtTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SGT_TimeStamp");

                entity.HasOne(d => d.SgtLocalizableEntry).WithMany(p => p.SalesAgreementTypes)
                    .HasForeignKey(d => d.SgtLocalizableEntryId)
                    .HasConstraintName("FK_SalesAgreementTypes_LocalizableEntries");
            });

            modelBuilder.Entity<SalesCollection>(entity =>
            {
                entity.HasKey(e => e.SacId);

                entity.ToTable("SalesCollections", "fin");

                entity.HasIndex(e => e.SacCollectionNumber, "IX_SalesCollections_CollectionNumber");

                entity.Property(e => e.SacId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SAC_Id");
                entity.Property(e => e.SacCollectionDate).HasColumnName("SAC_CollectionDate");
                entity.Property(e => e.SacCollectionNumber)
                    .HasMaxLength(20)
                    .HasColumnName("SAC_CollectionNumber");
                entity.Property(e => e.SacCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SAC_CreatedBy");
                entity.Property(e => e.SacCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SAC_CreatedDate");
                entity.Property(e => e.SacCurrentStatusCode)
                    .HasMaxLength(20)
                    .HasColumnName("SAC_CurrentStatusCode");
                entity.Property(e => e.SacCurrentStatusHistoryId).HasColumnName("SAC_CurrentStatusHistory_Id");
                entity.Property(e => e.SacCurrentStatusHistoryStartDate).HasColumnName("SAC_CurrentStatusHistoryStartDate");
                entity.Property(e => e.SacDueDate).HasColumnName("SAC_DueDate");
                entity.Property(e => e.SacLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SAC_LastModifiedBy");
                entity.Property(e => e.SacLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SAC_LastModifiedDate");
                entity.Property(e => e.SacRecipientDebtorId).HasColumnName("SAC_RecipientDebtor_Id");
                entity.Property(e => e.SacRecipientEmail)
                    .HasMaxLength(250)
                    .HasColumnName("SAC_RecipientEmail");
                entity.Property(e => e.SacTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SAC_TimeStamp");

                entity.HasOne(d => d.SacRecipientDebtor).WithMany(p => p.SalesCollections)
                    .HasForeignKey(d => d.SacRecipientDebtorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesCollections_Debtors");
            });

            modelBuilder.Entity<SalesCollectionAttachment>(entity =>
            {
                entity.HasKey(e => e.ScaId);

                entity.ToTable("SalesCollectionAttachments", "fin");

                entity.HasIndex(e => e.ScaSalesCollectionId, "IX_fin_SalesCollectionAttachments_SalesInvoice__INCL");

                entity.Property(e => e.ScaId)
                    .ValueGeneratedNever()
                    .HasColumnName("SCA_Id");
                entity.Property(e => e.ScaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SCA_CreatedBy");
                entity.Property(e => e.ScaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SCA_CreatedDate");
                entity.Property(e => e.ScaDocumentId).HasColumnName("SCA_Document_Id");
                entity.Property(e => e.ScaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SCA_LastModifiedBy");
                entity.Property(e => e.ScaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SCA_LastModifiedDate");
                entity.Property(e => e.ScaSalesCollectionId).HasColumnName("SCA_SalesCollection_Id");
                entity.Property(e => e.ScaSequenceNumber).HasColumnName("SCA_SequenceNumber");
                entity.Property(e => e.ScaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SCA_TimeStamp");

                entity.HasOne(d => d.ScaDocument).WithMany(p => p.SalesCollectionAttachments)
                    .HasForeignKey(d => d.ScaDocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesCollectionAttachments_Documents");

                entity.HasOne(d => d.ScaSalesCollection).WithMany(p => p.SalesCollectionAttachments)
                    .HasForeignKey(d => d.ScaSalesCollectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesCollectionAttachments_SalesCollections");
            });

            modelBuilder.Entity<SalesCollectionAttachmentsSendableView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesCollectionAttachmentsSendableView", "fin");

                entity.Property(e => e.CollectionNumber).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.Description).HasMaxLength(500);
                entity.Property(e => e.DocumentDate).HasColumnType("date");
                entity.Property(e => e.DocumentNumber).HasMaxLength(20);
                entity.Property(e => e.DocumentTypeCode).HasMaxLength(10);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.MimeType).HasMaxLength(250);
                entity.Property(e => e.RecipientDebtorNumber).HasMaxLength(20);
                entity.Property(e => e.RecipientEmail).HasMaxLength(250);
                entity.Property(e => e.SalesInvoiceCollectableDate).HasColumnType("date");
                entity.Property(e => e.SignatureDate).HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SalesCollectionAttachmentsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesCollectionAttachmentsView", "fin");

                entity.Property(e => e.CollectionNumber).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.Description).HasMaxLength(500);
                entity.Property(e => e.DocumentDate).HasColumnType("date");
                entity.Property(e => e.DocumentNumber).HasMaxLength(20);
                entity.Property(e => e.DocumentTypeCode).HasMaxLength(10);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.MimeType).HasMaxLength(250);
                entity.Property(e => e.RecipientEmail).HasMaxLength(250);
                entity.Property(e => e.SignatureDate).HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SalesCollectionDebtor>(entity =>
            {
                entity.HasKey(e => e.ScdId);

                entity.ToTable("SalesCollectionDebtors", "fin");

                entity.HasIndex(e => e.ScdDebtorId, "IX_SalesCollectionDebtors_Debtor");

                entity.Property(e => e.ScdId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SCD_Id");
                entity.Property(e => e.ScdCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SCD_CreatedBy");
                entity.Property(e => e.ScdCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SCD_CreatedDate");
                entity.Property(e => e.ScdDebtorId).HasColumnName("SCD_Debtor_Id");
                entity.Property(e => e.ScdLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SCD_LastModifiedBy");
                entity.Property(e => e.ScdLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SCD_LastModifiedDate");
                entity.Property(e => e.ScdLineNumber).HasColumnName("SCD_LineNumber");
                entity.Property(e => e.ScdSalesCollectionId).HasColumnName("SCD_SalesCollection_Id");
                entity.Property(e => e.ScdTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SCD_TimeStamp");

                entity.HasOne(d => d.ScdDebtor).WithMany(p => p.SalesCollectionDebtors)
                    .HasForeignKey(d => d.ScdDebtorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesCollectionDebtors_Debtors");

                entity.HasOne(d => d.ScdSalesCollection).WithMany(p => p.SalesCollectionDebtors)
                    .HasForeignKey(d => d.ScdSalesCollectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesCollectionDebtors_SalesCollections");
            });

            modelBuilder.Entity<SalesCollectionLine>(entity =>
            {
                entity.HasKey(e => e.SclId);

                entity.ToTable("SalesCollectionLines", "fin");

                entity.HasIndex(e => e.SclSalesInvoiceId, "IX_SalesCollectionLines_SalesInvoice");

                entity.HasIndex(e => e.SclIsRemoved, "IX_fin_SalesCollectionLines_IsRemoved__INCL");

                entity.Property(e => e.SclId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SCL_Id");
                entity.Property(e => e.SclCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SCL_CreatedBy");
                entity.Property(e => e.SclCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SCL_CreatedDate");
                entity.Property(e => e.SclIsRemoved).HasColumnName("SCL_IsRemoved");
                entity.Property(e => e.SclLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SCL_LastModifiedBy");
                entity.Property(e => e.SclLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SCL_LastModifiedDate");
                entity.Property(e => e.SclLineNumber).HasColumnName("SCL_LineNumber");
                entity.Property(e => e.SclRemovalDate).HasColumnName("SCL_RemovalDate");
                entity.Property(e => e.SclSalesCollectionDebtorId).HasColumnName("SCL_SalesCollectionDebtor_Id");
                entity.Property(e => e.SclSalesCollectionId).HasColumnName("SCL_SalesCollection_Id");
                entity.Property(e => e.SclSalesInvoiceId).HasColumnName("SCL_SalesInvoice_Id");
                entity.Property(e => e.SclTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SCL_TimeStamp");

                entity.HasOne(d => d.SclSalesCollectionDebtor).WithMany(p => p.SalesCollectionLines)
                    .HasForeignKey(d => d.SclSalesCollectionDebtorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesCollectionLines_SalesCollectionDebtors");

                entity.HasOne(d => d.SclSalesCollection).WithMany(p => p.SalesCollectionLines)
                    .HasForeignKey(d => d.SclSalesCollectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesCollectionLines_SalesCollections");

                entity.HasOne(d => d.SclSalesInvoice).WithMany(p => p.SalesCollectionLines)
                    .HasForeignKey(d => d.SclSalesInvoiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesCollectionLines_SalesInvoices");
            });

            modelBuilder.Entity<SalesCollectionLinesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesCollectionLinesView", "fin");

                entity.Property(e => e.CollectionNumber).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DebtorChamberOfCommerceNumber).HasMaxLength(50);
                entity.Property(e => e.DebtorName).HasMaxLength(756);
                entity.Property(e => e.DebtorVatNumber).HasMaxLength(50);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.Journal).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LeadCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.RecipientDebtorName).HasMaxLength(756);
                entity.Property(e => e.RecipientDebtorNumber).HasMaxLength(20);
                entity.Property(e => e.RecipientEmail).HasMaxLength(250);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SalesCollectionNote>(entity =>
            {
                entity.HasKey(e => e.ScnId);

                entity.ToTable("SalesCollectionNotes", "fin");

                entity.Property(e => e.ScnId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SCN_Id");
                entity.Property(e => e.ScnCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SCN_CreatedBy");
                entity.Property(e => e.ScnCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SCN_CreatedDate");
                entity.Property(e => e.ScnLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SCN_LastModifiedBy");
                entity.Property(e => e.ScnLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SCN_LastModifiedDate");
                entity.Property(e => e.ScnNotes).HasColumnName("SCN_Notes");
                entity.Property(e => e.ScnSalesCollectionId).HasColumnName("SCN_SalesCollection_Id");
                entity.Property(e => e.ScnTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SCN_TimeStamp");

                entity.HasOne(d => d.ScnSalesCollection).WithMany(p => p.SalesCollectionNotes)
                    .HasForeignKey(d => d.ScnSalesCollectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesCollectionNotes_SalesCollections");
            });

            modelBuilder.Entity<SalesCollectionSalesInvoiceLinesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesCollectionSalesInvoiceLinesView", "fin");

                entity.Property(e => e.AgentName).HasMaxLength(250);
                entity.Property(e => e.ClientName).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.IncidentCity).HasMaxLength(250);
                entity.Property(e => e.IncidentCountryCode).HasMaxLength(250);
                entity.Property(e => e.IncidentCountryName).HasMaxLength(250);
                entity.Property(e => e.IncidentRoadDirection).HasMaxLength(250);
                entity.Property(e => e.IncidentRoadHectometerPost).HasMaxLength(250);
                entity.Property(e => e.IncidentRoadLane).HasMaxLength(250);
                entity.Property(e => e.IncidentRoadNumber).HasMaxLength(250);
                entity.Property(e => e.IncidentRoadTypeId).HasMaxLength(250);
                entity.Property(e => e.IncidentStreetName).HasMaxLength(250);
                entity.Property(e => e.InsurerName).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LeasingCompanyName).HasMaxLength(250);
                entity.Property(e => e.LicensePlate).HasMaxLength(250);
                entity.Property(e => e.MandateName).HasMaxLength(250);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.ProductName).HasMaxLength(501);
                entity.Property(e => e.RoadAuthorityName).HasMaxLength(250);
                entity.Property(e => e.SalesInvoiceCollectableDate).HasColumnType("date");
                entity.Property(e => e.SalesInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SalesInvoiceType)
                    .HasMaxLength(12)
                    .IsUnicode(false);
                entity.Property(e => e.SupplierName).HasMaxLength(250);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.WorkActiityCode).HasMaxLength(10);
            });

            modelBuilder.Entity<SalesCollectionStatus>(entity =>
            {
                entity.HasKey(e => e.ScsId);

                entity.ToTable("SalesCollectionStatuses", "fin");

                entity.Property(e => e.ScsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SCS_Id");
                entity.Property(e => e.ScsCode)
                    .HasMaxLength(15)
                    .HasColumnName("SCS_Code");
                entity.Property(e => e.ScsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SCS_CreatedBy");
                entity.Property(e => e.ScsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SCS_CreatedDate");
                entity.Property(e => e.ScsInactive).HasColumnName("SCS_Inactive");
                entity.Property(e => e.ScsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SCS_LastModifiedBy");
                entity.Property(e => e.ScsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SCS_LastModifiedDate");
                entity.Property(e => e.ScsLocalizableEntryId).HasColumnName("SCS_LocalizableEntry_Id");
                entity.Property(e => e.ScsLongName)
                    .HasMaxLength(250)
                    .HasColumnName("SCS_LongName");
                entity.Property(e => e.ScsShortName)
                    .HasMaxLength(20)
                    .HasColumnName("SCS_ShortName");
                entity.Property(e => e.ScsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SCS_TimeStamp");

                entity.HasOne(d => d.ScsLocalizableEntry).WithMany(p => p.SalesCollectionStatuses)
                    .HasForeignKey(d => d.ScsLocalizableEntryId)
                    .HasConstraintName("FK_SalesCollectionStatuses_LocalizableEntries");
            });

            modelBuilder.Entity<SalesCollectionStatusHistory>(entity =>
            {
                entity.HasKey(e => e.ScshId);

                entity.ToTable("SalesCollectionStatusHistory", "fin", tb =>
                {
                    tb.HasTrigger("td_SalesCollectionStatusHistory");
                    tb.HasTrigger("ti_SalesCollectionStatusHistory");
                    tb.HasTrigger("tu_SalesCollectionStatusHistory");
                });

                entity.HasIndex(e => e.ScshSalesCollectionId, "IX_fin_SalesCollectionStatusHistory_SalesCollection");

                entity.Property(e => e.ScshId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SCSH_Id");
                entity.Property(e => e.ScshCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SCSH_CreatedBy");
                entity.Property(e => e.ScshCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SCSH_CreatedDate");
                entity.Property(e => e.ScshLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SCSH_LastModifiedBy");
                entity.Property(e => e.ScshLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SCSH_LastModifiedDate");
                entity.Property(e => e.ScshSalesCollectionId).HasColumnName("SCSH_SalesCollection_Id");
                entity.Property(e => e.ScshSalesCollectionStatusId).HasColumnName("SCSH_SalesCollectionStatus_Id");
                entity.Property(e => e.ScshStartDate).HasColumnName("SCSH_StartDate");
                entity.Property(e => e.ScshStatusChangeReason)
                    .HasMaxLength(250)
                    .HasColumnName("SCSH_StatusChangeReason");
                entity.Property(e => e.ScshTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SCSH_TimeStamp");

                entity.HasOne(d => d.ScshSalesCollection).WithMany(p => p.SalesCollectionStatusHistories)
                    .HasForeignKey(d => d.ScshSalesCollectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesCollectionStatusHistory_SalesCollections");

                entity.HasOne(d => d.ScshSalesCollectionStatus).WithMany(p => p.SalesCollectionStatusHistories)
                    .HasForeignKey(d => d.ScshSalesCollectionStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesCollectionStatusHistory_SalesCollectionStatuses");
            });

            modelBuilder.Entity<SalesCollectionsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesCollectionsView", "fin");

                entity.Property(e => e.CollectionNumber).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.RecipientDebtorName).HasMaxLength(756);
                entity.Property(e => e.RecipientDebtorNumber).HasMaxLength(20);
                entity.Property(e => e.RecipientEmail).HasMaxLength(250);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SalesInvoice>(entity =>
            {
                entity.HasKey(e => e.InvId);

                entity.ToTable("SalesInvoices", "fin");

                entity.HasIndex(e => new { e.InvCurrentStatusCode, e.InvInvoiceDate }, "IX_fin_SalesInvoices_CurrentStatusCode_InvoiceDate");

                entity.HasIndex(e => new { e.InvDebitSalesInvoiceId, e.InvId }, "IX_fin_SalesInvoices_DebitSalesInvoice");

                entity.HasIndex(e => new { e.InvDebtorId, e.InvYourReference }, "IX_fin_SalesInvoices_Debtor_YourReference_INCL");

                entity.HasIndex(e => e.InvDescription, "IX_fin_SalesInvoices_Description__INCL");

                entity.HasIndex(e => new { e.InvDossierId, e.InvInvoiceDate }, "IX_fin_SalesInvoices_Dossier_Id_InvoiceDate");

                entity.HasIndex(e => new { e.InvEntryNumber, e.InvEntrySystem }, "IX_fin_SalesInvoices_EntryNumber_EntrySystem");

                entity.HasIndex(e => new { e.InvEntrySystem, e.InvDebtorId, e.InvIsCollectable, e.InvCollectableDate }, "IX_fin_SalesInvoices_EntrySystem_Debtor_IsCollectable_CollectableDate__INCL");

                entity.HasIndex(e => new { e.InvEntrySystem, e.InvDossierId }, "IX_fin_SalesInvoices_EntrySystem_Dossier_Id");

                entity.HasIndex(e => new { e.InvEntrySystem, e.InvIsCollectable, e.InvInvoiceDate }, "IX_fin_SalesInvoices_EntrySystem_IsCollectable_InvoiceDate__INCL");

                entity.HasIndex(e => new { e.InvEntrySystem, e.InvLegalEntityId }, "IX_fin_SalesInvoices_EntrySystem_LegalEntity_Id__INCL");

                entity.HasIndex(e => new { e.InvEntrySystem, e.InvCurrentStatusCode }, "IX_fin_SalesInvoices_INV_EntrySystem_INV_CurrentStatusCode");

                entity.HasIndex(e => e.InvInvoiceDate, "IX_fin_SalesInvoices_InvoiceDate__INCL");

                entity.HasIndex(e => new { e.InvIsCollectable, e.InvInvoiceDate }, "IX_fin_SalesInvoices_IsCollectable_InvoiceDate__INCL");

                entity.HasIndex(e => new { e.InvLegalEntityId, e.InvDescription }, "IX_fin_SalesInvoices_LegalEntity_Id_Description__INCL");

                entity.HasIndex(e => new { e.InvLegalEntityId, e.InvYourReference }, "IX_fin_SalesInvoices_LegalEntity_YourReference_INCL");

                entity.HasIndex(e => e.InvNumber, "IX_fin_SalesInvoices_Number");

                entity.Property(e => e.InvId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("INV_Id");
                entity.Property(e => e.InvBlockedAmount)
                    .HasColumnType("money")
                    .HasColumnName("INV_BlockedAmount");
                entity.Property(e => e.InvBlockedOrganizationAccountId).HasColumnName("INV_BlockedOrganizationAccount_Id");
                entity.Property(e => e.InvBookingDate)
                    .HasColumnType("date")
                    .HasColumnName("INV_BookingDate");
                entity.Property(e => e.InvBookingNumber)
                    .HasMaxLength(10)
                    .HasColumnName("INV_BookingNumber");
                entity.Property(e => e.InvCollectableDate)
                    .HasColumnType("date")
                    .HasColumnName("INV_CollectableDate");
                entity.Property(e => e.InvCostCenterId).HasColumnName("INV_CostCenter_Id");
                entity.Property(e => e.InvCostUnitId).HasColumnName("INV_CostUnit_Id");
                entity.Property(e => e.InvCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("INV_CreatedBy");
                entity.Property(e => e.InvCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("INV_CreatedDate");
                entity.Property(e => e.InvCultureCode)
                    .HasMaxLength(10)
                    .HasColumnName("INV_CultureCode");
                entity.Property(e => e.InvCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("INV_CurrencyCode");
                entity.Property(e => e.InvCurrentStatusCode)
                    .HasMaxLength(20)
                    .HasColumnName("INV_CurrentStatusCode");
                entity.Property(e => e.InvCurrentStatusHistoryId).HasColumnName("INV_CurrentStatusHistory_Id");
                entity.Property(e => e.InvCurrentStatusHistoryStartDate).HasColumnName("INV_CurrentStatusHistoryStartDate");
                entity.Property(e => e.InvDebitEntryNumber)
                    .HasMaxLength(36)
                    .HasColumnName("INV_DebitEntryNumber");
                entity.Property(e => e.InvDebitSalesInvoiceId).HasColumnName("INV_DebitSalesInvoice_Id");
                entity.Property(e => e.InvDebtorId).HasColumnName("INV_Debtor_Id");
                entity.Property(e => e.InvDescription)
                    .HasMaxLength(250)
                    .HasColumnName("INV_Description");
                entity.Property(e => e.InvDiscount)
                    .HasColumnType("money")
                    .HasColumnName("INV_Discount");
                entity.Property(e => e.InvDossierAssignmentId).HasColumnName("INV_DossierAssignment_Id");
                entity.Property(e => e.InvDossierId).HasColumnName("INV_Dossier_Id");
                entity.Property(e => e.InvDossierNumber)
                    .HasMaxLength(20)
                    .HasColumnName("INV_DossierNumber");
                entity.Property(e => e.InvDossierPartyId).HasColumnName("INV_DossierParty_Id");
                entity.Property(e => e.InvDueDate).HasColumnName("INV_DueDate");
                entity.Property(e => e.InvEmployeeId).HasColumnName("INV_Employee_Id");
                entity.Property(e => e.InvEntryBatch)
                    .HasMaxLength(36)
                    .HasColumnName("INV_EntryBatch");
                entity.Property(e => e.InvEntryNumber)
                    .HasMaxLength(36)
                    .HasColumnName("INV_EntryNumber");
                entity.Property(e => e.InvEntrySystem)
                    .HasMaxLength(10)
                    .HasColumnName("INV_EntrySystem");
                entity.Property(e => e.InvExchangeRate).HasColumnName("INV_ExchangeRate");
                entity.Property(e => e.InvExchangeRateId).HasColumnName("INV_ExchangeRate_Id");
                entity.Property(e => e.InvFinancialBookingPeriodId).HasColumnName("INV_FinancialBookingPeriod_Id");
                entity.Property(e => e.InvGrossAmount)
                    .HasColumnType("money")
                    .HasColumnName("INV_GrossAmount");
                entity.Property(e => e.InvInvoiceDate).HasColumnName("INV_InvoiceDate");
                entity.Property(e => e.InvInvoiceDeliveryMethodId)
                    .HasMaxLength(20)
                    .HasColumnName("INV_InvoiceDeliveryMethod_Id");
                entity.Property(e => e.InvInvoiceTypeId).HasColumnName("INV_InvoiceType_Id");
                entity.Property(e => e.InvIsCollectable).HasColumnName("INV_IsCollectable");
                entity.Property(e => e.InvIsCredit).HasColumnName("INV_IsCredit");
                entity.Property(e => e.InvIsFiscalised).HasColumnName("INV_IsFiscalised");
                entity.Property(e => e.InvIsImported).HasColumnName("INV_IsImported");
                entity.Property(e => e.InvIsIntercompany).HasColumnName("INV_IsIntercompany");
                entity.Property(e => e.InvIsPrinted).HasColumnName("INV_IsPrinted");
                entity.Property(e => e.InvJournalId)
                    .HasMaxLength(20)
                    .HasColumnName("INV_Journal_Id");
                entity.Property(e => e.InvLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("INV_LastModifiedBy");
                entity.Property(e => e.InvLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("INV_LastModifiedDate");
                entity.Property(e => e.InvLeadCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("INV_LeadCurrencyCode");
                entity.Property(e => e.InvLegalEntityId).HasColumnName("INV_LegalEntity_Id");
                entity.Property(e => e.InvNetAmount)
                    .HasColumnType("money")
                    .HasColumnName("INV_NetAmount");
                entity.Property(e => e.InvNumber)
                    .HasMaxLength(20)
                    .HasColumnName("INV_Number");
                entity.Property(e => e.InvOpenAmount)
                    .HasColumnType("money")
                    .HasColumnName("INV_OpenAmount");
                entity.Property(e => e.InvOrganizationUnitId).HasColumnName("INV_OrganizationUnit_Id");
                entity.Property(e => e.InvOurReference)
                    .HasMaxLength(250)
                    .HasColumnName("INV_OurReference");
                entity.Property(e => e.InvOwnRiskAmount)
                    .HasColumnType("money")
                    .HasColumnName("INV_OwnRiskAmount");
                entity.Property(e => e.InvParentId).HasColumnName("INV_Parent_Id");
                entity.Property(e => e.InvPaymentConditionId).HasColumnName("INV_PaymentCondition_Id");
                entity.Property(e => e.InvPaymentReference)
                    .HasMaxLength(250)
                    .HasColumnName("INV_PaymentReference");
                entity.Property(e => e.InvTaxAmount)
                    .HasColumnType("money")
                    .HasColumnName("INV_TaxAmount");
                entity.Property(e => e.InvTaxCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("INV_TaxCountryCode");
                entity.Property(e => e.InvTaxExemptedAmount)
                    .HasColumnType("money")
                    .HasColumnName("INV_TaxExemptedAmount");
                entity.Property(e => e.InvTaxImportAmount)
                    .HasColumnType("money")
                    .HasColumnName("INV_TaxImportAmount");
                entity.Property(e => e.InvTaxReversedChargeAmount)
                    .HasColumnType("money")
                    .HasColumnName("INV_TaxReversedChargeAmount");
                entity.Property(e => e.InvTenantId).HasColumnName("INV_Tenant_Id");
                entity.Property(e => e.InvTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("INV_TimeStamp");
                entity.Property(e => e.InvVatDeductableAmount)
                    .HasColumnType("money")
                    .HasColumnName("INV_VatDeductableAmount");
                entity.Property(e => e.InvYourReference)
                    .HasMaxLength(250)
                    .HasColumnName("INV_YourReference");

                entity.HasOne(d => d.InvBlockedOrganizationAccount).WithMany(p => p.SalesInvoices)
                    .HasForeignKey(d => d.InvBlockedOrganizationAccountId)
                    .HasConstraintName("FK_SalesInvoices_OrganizationAccounts");

                entity.HasOne(d => d.InvCostCenter).WithMany(p => p.SalesInvoices)
                    .HasForeignKey(d => d.InvCostCenterId)
                    .HasConstraintName("FK_SalesInvoices_CostCenters");

                entity.HasOne(d => d.InvCostUnit).WithMany(p => p.SalesInvoices)
                    .HasForeignKey(d => d.InvCostUnitId)
                    .HasConstraintName("FK_SalesInvoices_CostUnits");

                entity.HasOne(d => d.InvDebitSalesInvoice).WithMany(p => p.InverseInvDebitSalesInvoice)
                    .HasForeignKey(d => d.InvDebitSalesInvoiceId)
                    .HasConstraintName("FK_SalesInvoices_DebitSalesInvoices");

                entity.HasOne(d => d.InvDebtor).WithMany(p => p.SalesInvoices)
                    .HasForeignKey(d => d.InvDebtorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesInvoices_Debtors");

                entity.HasOne(d => d.InvDossierAssignment).WithMany(p => p.SalesInvoices)
                    .HasForeignKey(d => d.InvDossierAssignmentId)
                    .HasConstraintName("FK_SalesInvoices_DossierAssignments");

                entity.HasOne(d => d.InvDossier).WithMany(p => p.SalesInvoices)
                    .HasForeignKey(d => d.InvDossierId)
                    .HasConstraintName("FK_SalesInvoices_Dossiers");

                entity.HasOne(d => d.InvDossierParty).WithMany(p => p.SalesInvoices)
                    .HasForeignKey(d => d.InvDossierPartyId)
                    .HasConstraintName("FK_SalesInvoices_DossierParties");

                entity.HasOne(d => d.InvEmployee).WithMany(p => p.SalesInvoices)
                    .HasForeignKey(d => d.InvEmployeeId)
                    .HasConstraintName("FK_SalesInvoices_Employees");

                entity.HasOne(d => d.InvExchangeRateNavigation).WithMany(p => p.SalesInvoices)
                    .HasForeignKey(d => d.InvExchangeRateId)
                    .HasConstraintName("FK_SalesInvoices_ExchangeRates");

                entity.HasOne(d => d.InvFinancialBookingPeriod).WithMany(p => p.SalesInvoices)
                    .HasForeignKey(d => d.InvFinancialBookingPeriodId)
                    .HasConstraintName("FK_SalesInvoices_FinancialBookingPeriods");

                entity.HasOne(d => d.InvInvoiceDeliveryMethod).WithMany(p => p.SalesInvoices)
                    .HasForeignKey(d => d.InvInvoiceDeliveryMethodId)
                    .HasConstraintName("FK_SalesInvoices_InvoiceDeliveryMethods");

                entity.HasOne(d => d.InvInvoiceType).WithMany(p => p.SalesInvoices)
                    .HasForeignKey(d => d.InvInvoiceTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesInvoices_InvoiceTypes");

                entity.HasOne(d => d.InvJournal).WithMany(p => p.SalesInvoices)
                    .HasForeignKey(d => d.InvJournalId)
                    .HasConstraintName("FK_SalesInvoices_Journals");

                entity.HasOne(d => d.InvLegalEntity).WithMany(p => p.SalesInvoices)
                    .HasForeignKey(d => d.InvLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesInvoices_LegalEntities");

                entity.HasOne(d => d.InvOrganizationUnit).WithMany(p => p.SalesInvoices)
                    .HasForeignKey(d => d.InvOrganizationUnitId)
                    .HasConstraintName("FK_SalesInvoices_OrganizationUnits");

                entity.HasOne(d => d.InvParent).WithMany(p => p.InverseInvParent)
                    .HasForeignKey(d => d.InvParentId)
                    .HasConstraintName("FK_SalesInvoices_ParentSalesInvoices");

                entity.HasOne(d => d.InvPaymentCondition).WithMany(p => p.SalesInvoices)
                    .HasForeignKey(d => d.InvPaymentConditionId)
                    .HasConstraintName("FK_SalesInvoices_PaymentConditions");

                entity.HasOne(d => d.InvTenant).WithMany(p => p.SalesInvoices)
                    .HasForeignKey(d => d.InvTenantId)
                    .HasConstraintName("FK_SalesInvoices_Tenants");
            });

            modelBuilder.Entity<SalesInvoiceAttachment>(entity =>
            {
                entity.HasKey(e => e.SiaId);

                entity.ToTable("SalesInvoiceAttachments", "fin");

                entity.HasIndex(e => e.SiaSalesInvoiceId, "IX_fin_SalesInvoiceAttachments_SalesInvoice__INCL");

                entity.Property(e => e.SiaId)
                    .ValueGeneratedNever()
                    .HasColumnName("SIA_Id");
                entity.Property(e => e.SiaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SIA_CreatedBy");
                entity.Property(e => e.SiaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SIA_CreatedDate");
                entity.Property(e => e.SiaDocumentId).HasColumnName("SIA_Document_Id");
                entity.Property(e => e.SiaIsInternalDocument).HasColumnName("SIA_IsInternalDocument");
                entity.Property(e => e.SiaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SIA_LastModifiedBy");
                entity.Property(e => e.SiaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SIA_LastModifiedDate");
                entity.Property(e => e.SiaSalesInvoiceId).HasColumnName("SIA_SalesInvoice_Id");
                entity.Property(e => e.SiaSequenceNumber).HasColumnName("SIA_SequenceNumber");
                entity.Property(e => e.SiaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SIA_TimeStamp");

                entity.HasOne(d => d.SiaDocument).WithMany(p => p.SalesInvoiceAttachments)
                    .HasForeignKey(d => d.SiaDocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesInvoiceAttachments_Documents");

                entity.HasOne(d => d.SiaSalesInvoice).WithMany(p => p.SalesInvoiceAttachments)
                    .HasForeignKey(d => d.SiaSalesInvoiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesInvoiceAttachments_SalesInvoices");
            });

            modelBuilder.Entity<SalesInvoiceAttachmentsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesInvoiceAttachmentsView", "fin");

                entity.Property(e => e.ClientInvoiceDeliveryEmail).HasMaxLength(250);
                entity.Property(e => e.ClientReferenceNumber).HasMaxLength(50);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DebtorEmail).HasMaxLength(250);
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(500);
                entity.Property(e => e.DocumentNumber).HasMaxLength(20);
                entity.Property(e => e.DocumentTypeCode).HasMaxLength(10);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.InvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityIban).HasMaxLength(34);
                entity.Property(e => e.SignatureDate).HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SalesInvoiceAttribute>(entity =>
            {
                entity.HasKey(e => e.IvaId);

                entity.ToTable("SalesInvoiceAttributes", "fin");

                entity.HasIndex(e => new { e.IvaSalesInvoiceId, e.IvaAttributeName }, "IX_SalesInvoiceAttributes_SalesInvoice_AttributeName_INCL");

                entity.Property(e => e.IvaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("IVA_Id");
                entity.Property(e => e.IvaAttributeContent)
                    .HasMaxLength(250)
                    .HasColumnName("IVA_AttributeContent");
                entity.Property(e => e.IvaAttributeName)
                    .HasMaxLength(50)
                    .HasColumnName("IVA_AttributeName");
                entity.Property(e => e.IvaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IVA_CreatedBy");
                entity.Property(e => e.IvaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IVA_CreatedDate");
                entity.Property(e => e.IvaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IVA_LastModifiedBy");
                entity.Property(e => e.IvaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IVA_LastModifiedDate");
                entity.Property(e => e.IvaSalesInvoiceId).HasColumnName("IVA_SalesInvoice_Id");
                entity.Property(e => e.IvaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("IVA_TimeStamp");

                entity.HasOne(d => d.IvaSalesInvoice).WithMany(p => p.SalesInvoiceAttributes)
                    .HasForeignKey(d => d.IvaSalesInvoiceId)
                    .HasConstraintName("FK_SalesInvoiceAttributes_SalesInvoices");
            });

            modelBuilder.Entity<SalesInvoiceClaimReservesInfo>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesInvoiceClaimReservesInfo", "ux");

                entity.Property(e => e.ChargedExpensesInvoiceRecipientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ChargedExpensesInvoiceRecipientName).HasMaxLength(752);
                entity.Property(e => e.ClaimReserveNumber).HasMaxLength(10);
                entity.Property(e => e.ClaimReserveTypeCode).HasMaxLength(10);
                entity.Property(e => e.ClaimReserveTypeName).HasMaxLength(250);
                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientName).HasMaxLength(752);
                entity.Property(e => e.CoverageNumber).HasMaxLength(50);
                entity.Property(e => e.CoverageProductCode).HasMaxLength(10);
                entity.Property(e => e.CoverageProductCommercialName).HasMaxLength(250);
                entity.Property(e => e.CoverageProductName).HasMaxLength(250);
                entity.Property(e => e.OpenAmount).HasColumnType("money");
            });

            modelBuilder.Entity<SalesInvoiceCorrectionsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesInvoiceCorrectionsView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DebtorName).HasMaxLength(250);
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
            });

            modelBuilder.Entity<SalesInvoiceDeliveryFailedView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("salesInvoiceDeliveryFailedView", "fin");

                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DebtorEmailAddress).HasMaxLength(250);
                entity.Property(e => e.DebtorName).HasMaxLength(250);
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.JournalId).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.OpenAmount).HasColumnType("money");
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.SalesInvoiceStatusChangeReason).HasMaxLength(250);
                entity.Property(e => e.SalesInvoiceStatusCode).HasMaxLength(20);
                entity.Property(e => e.SalesInvoiceStatusName).HasMaxLength(250);
                entity.Property(e => e.SentMethod).HasMaxLength(20);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxExemptedAmount).HasColumnType("money");
                entity.Property(e => e.TaxImportAmount).HasColumnType("money");
                entity.Property(e => e.TaxReversedChargeAmount).HasColumnType("money");
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<SalesInvoiceFailedPdfview>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesInvoiceFailedPDFView", "ux");

                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientName).HasMaxLength(250);
                entity.Property(e => e.CollectionNumber).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DebtorEmailAddress).HasMaxLength(250);
                entity.Property(e => e.DebtorName).HasMaxLength(250);
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DocumentType)
                    .HasMaxLength(17)
                    .IsUnicode(false);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.FormatDocument)
                    .HasMaxLength(13)
                    .IsUnicode(false);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.OpenAmount).HasColumnType("money");
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PdfcreationStatus)
                    .HasMaxLength(20)
                    .HasColumnName("PDFCreationStatus");
                entity.Property(e => e.SalesInvoiceStatusChangeReason).HasMaxLength(250);
                entity.Property(e => e.SalesInvoiceStatusName).HasMaxLength(250);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxExemptedAmount).HasColumnType("money");
                entity.Property(e => e.TaxImportAmount).HasColumnType("money");
                entity.Property(e => e.TaxReversedChargeAmount).HasColumnType("money");
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<SalesInvoiceInvolvedCoveragesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesInvoiceInvolvedCoveragesView", "fin");

                entity.Property(e => e.AgentName).HasMaxLength(756);
                entity.Property(e => e.AgentPhoneNumber).HasMaxLength(20);
                entity.Property(e => e.ChargedExpensesRecipientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ChargedExpensesRecipientName).HasMaxLength(756);
                entity.Property(e => e.ClientChamberOfCommerce).HasMaxLength(50);
                entity.Property(e => e.ClientCity).HasMaxLength(250);
                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientCountry).HasMaxLength(3);
                entity.Property(e => e.ClientEmail).HasMaxLength(250);
                entity.Property(e => e.ClientHouseNumber).HasMaxLength(261);
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.ClientPostalCode).HasMaxLength(10);
                entity.Property(e => e.ClientStreetName).HasMaxLength(250);
                entity.Property(e => e.ClientVatNumber).HasMaxLength(50);
                entity.Property(e => e.CoverageProductCode).HasMaxLength(10);
                entity.Property(e => e.CoverageProductTypeCode).HasMaxLength(10);
                entity.Property(e => e.CovergeProductName).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DossierInsureeCity).HasMaxLength(200);
                entity.Property(e => e.DossierInsureeCountryCode).HasMaxLength(3);
                entity.Property(e => e.DossierInsureeDateOfBirth).HasColumnType("date");
                entity.Property(e => e.DossierInsureeFirstName).HasMaxLength(200);
                entity.Property(e => e.DossierInsureeHouseNumber).HasMaxLength(50);
                entity.Property(e => e.DossierInsureeHouseNumberAddition).HasMaxLength(200);
                entity.Property(e => e.DossierInsureeLastName).HasMaxLength(200);
                entity.Property(e => e.DossierInsureePostalCode).HasMaxLength(10);
                entity.Property(e => e.DossierInsureePrefixLastName).HasMaxLength(200);
                entity.Property(e => e.DossierInsureeStreetName).HasMaxLength(200);
                entity.Property(e => e.FeeRecipientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.FeeRecipientName).HasMaxLength(756);
                entity.Property(e => e.InsuranceCompanyName).HasMaxLength(756);
                entity.Property(e => e.InsuranceCoverageTypeCode).HasMaxLength(10);
                entity.Property(e => e.InsuranceProductType).HasMaxLength(200);
                entity.Property(e => e.InsurerCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.InsurerRdwCode).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LeasingCompanyCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LeasingCompanyName).HasMaxLength(250);
                entity.Property(e => e.MandateCrWamCode).HasMaxLength(250);
                entity.Property(e => e.MandateName).HasMaxLength(756);
                entity.Property(e => e.MandatePhoneNumber).HasMaxLength(20);
                entity.Property(e => e.MandateRdwCode).HasMaxLength(250);
                entity.Property(e => e.PolicyNumber).HasMaxLength(50);
                entity.Property(e => e.SalesOrderNumber).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SalesInvoiceLine>(entity =>
            {
                entity.HasKey(e => e.IvlId);

                entity.ToTable("SalesInvoiceLines", "fin");

                entity.HasIndex(e => e.IvlSalesInvoiceId, "IX_SalesInvoiceLines_SalesInvoice_Id");

                entity.Property(e => e.IvlId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("IVL_Id");
                entity.Property(e => e.IvlAdditionalCharges)
                    .HasColumnType("money")
                    .HasColumnName("IVL_AdditionalCharges");
                entity.Property(e => e.IvlClientId).HasColumnName("IVL_Client_Id");
                entity.Property(e => e.IvlCostCenterId).HasColumnName("IVL_CostCenter_Id");
                entity.Property(e => e.IvlCostUnitId).HasColumnName("IVL_CostUnit_Id");
                entity.Property(e => e.IvlCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IVL_CreatedBy");
                entity.Property(e => e.IvlCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IVL_CreatedDate");
                entity.Property(e => e.IvlDebitLineNumber)
                    .HasMaxLength(36)
                    .HasColumnName("IVL_DebitLineNumber");
                entity.Property(e => e.IvlDeliveryDate).HasColumnName("IVL_DeliveryDate");
                entity.Property(e => e.IvlDeliveryWeek).HasColumnName("IVL_DeliveryWeek");
                entity.Property(e => e.IvlDescription)
                    .HasMaxLength(250)
                    .HasColumnName("IVL_Description");
                entity.Property(e => e.IvlDiscount)
                    .HasColumnType("money")
                    .HasColumnName("IVL_Discount");
                entity.Property(e => e.IvlDossierAssignmentId).HasColumnName("IVL_DossierAssignment_Id");
                entity.Property(e => e.IvlDossierId).HasColumnName("IVL_Dossier_Id");
                entity.Property(e => e.IvlDossierNumber)
                    .HasMaxLength(20)
                    .HasColumnName("IVL_DossierNumber");
                entity.Property(e => e.IvlDossierPartyId).HasColumnName("IVL_DossierParty_Id");
                entity.Property(e => e.IvlDossierWorkActivityId).HasColumnName("IVL_DossierWorkActivity_Id");
                entity.Property(e => e.IvlFeeBase)
                    .HasColumnType("money")
                    .HasColumnName("IVL_FeeBase");
                entity.Property(e => e.IvlFeeRate)
                    .HasColumnType("numeric(7, 4)")
                    .HasColumnName("IVL_FeeRate");
                entity.Property(e => e.IvlFeeSettlementLineId).HasColumnName("IVL_FeeSettlementLine_Id");
                entity.Property(e => e.IvlForeignCurrencyAmount)
                    .HasColumnType("money")
                    .HasColumnName("IVL_ForeignCurrencyAmount");
                entity.Property(e => e.IvlForeignCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("IVL_ForeignCurrencyCode");
                entity.Property(e => e.IvlGrossAmount)
                    .HasColumnType("money")
                    .HasColumnName("IVL_GrossAmount");
                entity.Property(e => e.IvlIsCredit).HasColumnName("IVL_IsCredit");
                entity.Property(e => e.IvlIsFee).HasColumnName("IVL_IsFee");
                entity.Property(e => e.IvlIsTaxBeforeDiscount).HasColumnName("IVL_IsTaxBeforeDiscount");
                entity.Property(e => e.IvlJournalId)
                    .HasMaxLength(20)
                    .HasColumnName("IVL_Journal_Id");
                entity.Property(e => e.IvlLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("IVL_LastModifiedBy");
                entity.Property(e => e.IvlLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("IVL_LastModifiedDate");
                entity.Property(e => e.IvlLedgerAccount)
                    .HasMaxLength(20)
                    .HasColumnName("IVL_LedgerAccount");
                entity.Property(e => e.IvlLineNumber).HasColumnName("IVL_LineNumber");
                entity.Property(e => e.IvlMaximumFee)
                    .HasColumnType("money")
                    .HasColumnName("IVL_MaximumFee");
                entity.Property(e => e.IvlMinimumFee)
                    .HasColumnType("money")
                    .HasColumnName("IVL_MinimumFee");
                entity.Property(e => e.IvlNetAmount)
                    .HasColumnType("money")
                    .HasColumnName("IVL_NetAmount");
                entity.Property(e => e.IvlOurReference)
                    .HasMaxLength(250)
                    .HasColumnName("IVL_OurReference");
                entity.Property(e => e.IvlProductCode)
                    .HasMaxLength(10)
                    .HasColumnName("IVL_ProductCode");
                entity.Property(e => e.IvlProductId).HasColumnName("IVL_Product_Id");
                entity.Property(e => e.IvlPurchaseInvoiceNumber)
                    .HasMaxLength(20)
                    .HasColumnName("IVL_PurchaseInvoiceNumber");
                entity.Property(e => e.IvlQuantity).HasColumnName("IVL_Quantity");
                entity.Property(e => e.IvlSalesInvoiceId).HasColumnName("IVL_SalesInvoice_Id");
                entity.Property(e => e.IvlTaxAmount)
                    .HasColumnType("money")
                    .HasColumnName("IVL_TaxAmount");
                entity.Property(e => e.IvlTaxBase)
                    .HasColumnType("money")
                    .HasColumnName("IVL_TaxBase");
                entity.Property(e => e.IvlTaxCode)
                    .HasMaxLength(20)
                    .HasColumnName("IVL_TaxCode");
                entity.Property(e => e.IvlTaxCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("IVL_TaxCountryCode");
                entity.Property(e => e.IvlTaxExempted).HasColumnName("IVL_TaxExempted");
                entity.Property(e => e.IvlTaxImport).HasColumnName("IVL_TaxImport");
                entity.Property(e => e.IvlTaxRate).HasColumnName("IVL_TaxRate");
                entity.Property(e => e.IvlTaxReversedCharge).HasColumnName("IVL_TaxReversedCharge");
                entity.Property(e => e.IvlTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("IVL_TimeStamp");
                entity.Property(e => e.IvlUnitOfMeasureId)
                    .HasMaxLength(20)
                    .HasColumnName("IVL_UnitOfMeasure_Id");
                entity.Property(e => e.IvlUnitPrice)
                    .HasColumnType("money")
                    .HasColumnName("IVL_UnitPrice");
                entity.Property(e => e.IvlWorkingOrderId).HasColumnName("IVL_WorkingOrder_Id");
                entity.Property(e => e.IvlYourReference)
                    .HasMaxLength(250)
                    .HasColumnName("IVL_YourReference");

                entity.HasOne(d => d.IvlClient).WithMany(p => p.SalesInvoiceLines)
                    .HasForeignKey(d => d.IvlClientId)
                    .HasConstraintName("FK_SalesInvoiceLines_Clients");

                entity.HasOne(d => d.IvlCostCenter).WithMany(p => p.SalesInvoiceLines)
                    .HasForeignKey(d => d.IvlCostCenterId)
                    .HasConstraintName("FK_SalesInvoiceLines_CostCenters");

                entity.HasOne(d => d.IvlCostUnit).WithMany(p => p.SalesInvoiceLines)
                    .HasForeignKey(d => d.IvlCostUnitId)
                    .HasConstraintName("FK_SalesInvoiceLines_CostUnits");

                entity.HasOne(d => d.IvlDossierAssignment).WithMany(p => p.SalesInvoiceLines)
                    .HasForeignKey(d => d.IvlDossierAssignmentId)
                    .HasConstraintName("FK_SalesInvoiceLines_DossierAssignments");

                entity.HasOne(d => d.IvlDossier).WithMany(p => p.SalesInvoiceLines)
                    .HasForeignKey(d => d.IvlDossierId)
                    .HasConstraintName("FK_SalesInvoiceLines_Dossiers");

                entity.HasOne(d => d.IvlDossierParty).WithMany(p => p.SalesInvoiceLines)
                    .HasForeignKey(d => d.IvlDossierPartyId)
                    .HasConstraintName("FK_SalesInvoiceLines_DossierParties");

                entity.HasOne(d => d.IvlDossierWorkActivity).WithMany(p => p.SalesInvoiceLines)
                    .HasForeignKey(d => d.IvlDossierWorkActivityId)
                    .HasConstraintName("FK_SalesInvoiceLines_DossierWorkActivities");

                entity.HasOne(d => d.IvlFeeSettlementLine).WithMany(p => p.SalesInvoiceLines)
                    .HasForeignKey(d => d.IvlFeeSettlementLineId)
                    .HasConstraintName("FK_SalesInvoiceLines_FeeSettlementLines");

                entity.HasOne(d => d.IvlJournal).WithMany(p => p.SalesInvoiceLines)
                    .HasForeignKey(d => d.IvlJournalId)
                    .HasConstraintName("FK_SalesInvoiceLines_Journals");

                entity.HasOne(d => d.IvlProduct).WithMany(p => p.SalesInvoiceLines)
                    .HasForeignKey(d => d.IvlProductId)
                    .HasConstraintName("FK_SalesInvoiceLines_Products");

                entity.HasOne(d => d.IvlSalesInvoice).WithMany(p => p.SalesInvoiceLines)
                    .HasForeignKey(d => d.IvlSalesInvoiceId)
                    .HasConstraintName("FK_SalesInvoiceLines_SalesInvoices");

                entity.HasOne(d => d.IvlUnitOfMeasure).WithMany(p => p.SalesInvoiceLines)
                    .HasForeignKey(d => d.IvlUnitOfMeasureId)
                    .HasConstraintName("FK_SalesInvoiceLines_UnitOfMeasures");

                entity.HasOne(d => d.IvlWorkingOrder).WithMany(p => p.SalesInvoiceLines)
                    .HasForeignKey(d => d.IvlWorkingOrderId)
                    .HasConstraintName("FK_SalesInvoiceLines_WorkingOrders");
            });

            modelBuilder.Entity<SalesInvoiceLineAttribute>(entity =>
            {
                entity.HasKey(e => e.IlaId);

                entity.ToTable("SalesInvoiceLineAttributes", "fin");

                entity.HasIndex(e => new { e.IlaSalesInvoiceLineId, e.IlaAttributeName }, "IX_SalesInvoiceAttributes_SalesInvoiceLine_AttributeName_INCL");

                entity.Property(e => e.IlaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("ILA_Id");
                entity.Property(e => e.IlaAttributeContent)
                    .HasMaxLength(250)
                    .HasColumnName("ILA_AttributeContent");
                entity.Property(e => e.IlaAttributeName)
                    .HasMaxLength(50)
                    .HasColumnName("ILA_AttributeName");
                entity.Property(e => e.IlaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ILA_CreatedBy");
                entity.Property(e => e.IlaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ILA_CreatedDate");
                entity.Property(e => e.IlaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ILA_LastModifiedBy");
                entity.Property(e => e.IlaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ILA_LastModifiedDate");
                entity.Property(e => e.IlaSalesInvoiceLineId).HasColumnName("ILA_SalesInvoiceLine_Id");
                entity.Property(e => e.IlaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ILA_TimeStamp");

                entity.HasOne(d => d.IlaSalesInvoiceLine).WithMany(p => p.SalesInvoiceLineAttributes)
                    .HasForeignKey(d => d.IlaSalesInvoiceLineId)
                    .HasConstraintName("FK_SalesInvoiceLineAttributes_SalesInvoiceLines");
            });

            modelBuilder.Entity<SalesInvoiceLinesReportView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesInvoiceLinesReportView", "fin");

                entity.Property(e => e.ActivityOptionName).HasMaxLength(250);
                entity.Property(e => e.AgentName).HasMaxLength(250);
                entity.Property(e => e.ClientName).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DebtorName).HasMaxLength(250);
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.Discount).HasColumnType("money");
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.IncidentNumber).HasMaxLength(20);
                entity.Property(e => e.InsuranceCoverage).HasMaxLength(250);
                entity.Property(e => e.InsurancePolicyNumber).HasMaxLength(250);
                entity.Property(e => e.InsureeName).HasMaxLength(752);
                entity.Property(e => e.InsurerName).HasMaxLength(250);
                entity.Property(e => e.InvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.IsImdossier).HasColumnName("IsIMDossier");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LicensePlate).HasMaxLength(250);
                entity.Property(e => e.MandateName).HasMaxLength(250);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.ProductCode).HasMaxLength(20);
                entity.Property(e => e.ProductName).HasMaxLength(250);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.WorkActivityCode).HasMaxLength(10);
                entity.Property(e => e.WorkActivityName).HasMaxLength(250);
            });

            modelBuilder.Entity<SalesInvoiceLinesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesInvoiceLinesView", "fin");

                entity.Property(e => e.ActivityOptionName).HasMaxLength(250);
                entity.Property(e => e.AdditionalCharges).HasColumnType("money");
                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(4000);
                entity.Property(e => e.ClaimReserveNumber).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DebitLineNumber).HasMaxLength(36);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.Discount).HasColumnType("money");
                entity.Property(e => e.FeeBase).HasColumnType("money");
                entity.Property(e => e.FeeRate).HasColumnType("numeric(7, 4)");
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.JouralName).HasMaxLength(250);
                entity.Property(e => e.JournalId).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.MaximumFee).HasColumnType("money");
                entity.Property(e => e.MinimumFee).HasColumnType("money");
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.ProductCode).HasMaxLength(20);
                entity.Property(e => e.ProductName).HasMaxLength(250);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxBase).HasColumnType("money");
                entity.Property(e => e.TaxCode).HasMaxLength(20);
                entity.Property(e => e.TaxCountryCode).HasMaxLength(3);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.TranslatedActivityOptionName).HasMaxLength(250);
                entity.Property(e => e.TranslatedProductName).HasMaxLength(250);
                entity.Property(e => e.TranslatedWorkActivityName).HasMaxLength(250);
                entity.Property(e => e.UnitPrice).HasColumnType("money");
                entity.Property(e => e.WorkActivityName).HasMaxLength(250);
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<SalesInvoiceLogsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesInvoiceLogsView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DebtorName).HasMaxLength(250);
                entity.Property(e => e.EmployeeName).HasMaxLength(250);
                entity.Property(e => e.InvoiceDeliveryMethod).HasMaxLength(20);
                entity.Property(e => e.InvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.ProcessedBy).HasMaxLength(250);
                entity.Property(e => e.SentTo).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SalesInvoiceNote>(entity =>
            {
                entity.HasKey(e => e.SinId);

                entity.ToTable("SalesInvoiceNotes", "fin");

                entity.Property(e => e.SinId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SIN_Id");
                entity.Property(e => e.SinCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SIN_CreatedBy");
                entity.Property(e => e.SinCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SIN_CreatedDate");
                entity.Property(e => e.SinLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SIN_LastModifiedBy");
                entity.Property(e => e.SinLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SIN_LastModifiedDate");
                entity.Property(e => e.SinNotes).HasColumnName("SIN_Notes");
                entity.Property(e => e.SinSalesInvoiceId).HasColumnName("SIN_SalesInvoice_Id");
                entity.Property(e => e.SinTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SIN_TimeStamp");

                entity.HasOne(d => d.SinSalesInvoice).WithMany(p => p.SalesInvoiceNotes)
                    .HasForeignKey(d => d.SinSalesInvoiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesInvoiceNotes_SalesInvoices");
            });

            modelBuilder.Entity<SalesInvoiceStatus>(entity =>
            {
                entity.HasKey(e => e.SisId);

                entity.ToTable("SalesInvoiceStatuses", "fin");

                entity.Property(e => e.SisId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SIS_Id");
                entity.Property(e => e.SisCode)
                    .HasMaxLength(15)
                    .HasColumnName("SIS_Code");
                entity.Property(e => e.SisCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SIS_CreatedBy");
                entity.Property(e => e.SisCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SIS_CreatedDate");
                entity.Property(e => e.SisInactive).HasColumnName("SIS_Inactive");
                entity.Property(e => e.SisLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SIS_LastModifiedBy");
                entity.Property(e => e.SisLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SIS_LastModifiedDate");
                entity.Property(e => e.SisLocalizableEntryId).HasColumnName("SIS_LocalizableEntry_Id");
                entity.Property(e => e.SisLongName)
                    .HasMaxLength(250)
                    .HasColumnName("SIS_LongName");
                entity.Property(e => e.SisShortName)
                    .HasMaxLength(20)
                    .HasColumnName("SIS_ShortName");
                entity.Property(e => e.SisTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SIS_TimeStamp");

                entity.HasOne(d => d.SisLocalizableEntry).WithMany(p => p.SalesInvoiceStatuses)
                    .HasForeignKey(d => d.SisLocalizableEntryId)
                    .HasConstraintName("FK_SalesInvoiceStatuses_LocalizableEntries");
            });

            modelBuilder.Entity<SalesInvoiceStatusHistory>(entity =>
            {
                entity.HasKey(e => e.SishId);

                entity.ToTable("SalesInvoiceStatusHistory", "fin", tb =>
                {
                    tb.HasTrigger("td_SalesInvoiceStatusHistory");
                    tb.HasTrigger("ti_SalesInvoiceStatusHistory");
                    tb.HasTrigger("tu_SalesInvoiceStatusHistory");
                });

                entity.HasIndex(e => e.SishSalesInvoiceId, "IX_fin_SalesInvoiceStatusHistory_SalesInvoice");

                entity.Property(e => e.SishId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SISH_Id");
                entity.Property(e => e.SishCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SISH_CreatedBy");
                entity.Property(e => e.SishCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SISH_CreatedDate");
                entity.Property(e => e.SishLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SISH_LastModifiedBy");
                entity.Property(e => e.SishLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SISH_LastModifiedDate");
                entity.Property(e => e.SishSalesInvoiceId).HasColumnName("SISH_SalesInvoice_Id");
                entity.Property(e => e.SishSalesInvoiceStatusId).HasColumnName("SISH_SalesInvoiceStatus_Id");
                entity.Property(e => e.SishStartDate).HasColumnName("SISH_StartDate");
                entity.Property(e => e.SishStatusChangeReason)
                    .HasMaxLength(250)
                    .HasColumnName("SISH_StatusChangeReason");
                entity.Property(e => e.SishTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SISH_TimeStamp");

                entity.HasOne(d => d.SishSalesInvoice).WithMany(p => p.SalesInvoiceStatusHistories)
                    .HasForeignKey(d => d.SishSalesInvoiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesInvoiceStatusHistory_SalesInvoices");

                entity.HasOne(d => d.SishSalesInvoiceStatus).WithMany(p => p.SalesInvoiceStatusHistories)
                    .HasForeignKey(d => d.SishSalesInvoiceStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesInvoiceStatusHistory_SalesInvoiceStatuses");
            });

            modelBuilder.Entity<SalesInvoiceToCreditableSalesOrdersView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesInvoiceToCreditableSalesOrdersView", "fin");

                entity.Property(e => e.SalesInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SalesOrderNumber).HasMaxLength(20);
            });

            modelBuilder.Entity<SalesInvoiceToOrderMapping>(entity =>
            {
                entity.HasKey(e => e.SitoId);

                entity.ToTable("SalesInvoiceToOrderMapping", "fin");

                entity.HasIndex(e => e.SitoSalesInvoiceLineId, "IX_fin_SalesInvoiceToOrderMapping_SalesInvoiceLine__INCL");

                entity.HasIndex(e => e.SitoSalesOrderLineId, "IX_fin_SalesInvoiceToOrderMapping_SalesOrderLine__INCL");

                entity.Property(e => e.SitoId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SITO_Id");
                entity.Property(e => e.SitoCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SITO_CreatedBy");
                entity.Property(e => e.SitoCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SITO_CreatedDate");
                entity.Property(e => e.SitoLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SITO_LastModifiedBy");
                entity.Property(e => e.SitoLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SITO_LastModifiedDate");
                entity.Property(e => e.SitoSalesInvoiceLineId).HasColumnName("SITO_SalesInvoiceLine_Id");
                entity.Property(e => e.SitoSalesOrderLineId).HasColumnName("SITO_SalesOrderLine_Id");
                entity.Property(e => e.SitoTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SITO_TimeStamp");

                entity.HasOne(d => d.SitoSalesInvoiceLine).WithMany(p => p.SalesInvoiceToOrderMappings)
                    .HasForeignKey(d => d.SitoSalesInvoiceLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesInvoiceToOrderMapping_SalesInvoiceLines");

                entity.HasOne(d => d.SitoSalesOrderLine).WithMany(p => p.SalesInvoiceToOrderMappings)
                    .HasForeignKey(d => d.SitoSalesOrderLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesInvoiceToOrderMapping_SalesOrderLines");
            });

            modelBuilder.Entity<SalesInvoiceToPurchaseFeeOnlyMappingView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesInvoiceToPurchaseFeeOnlyMappingView", "fin");

                entity.Property(e => e.ActivityOption).HasMaxLength(250);
                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.ProductCode).HasMaxLength(20);
                entity.Property(e => e.ProductName).HasMaxLength(250);
                entity.Property(e => e.SalesInvoiceLineGrossAmount).HasColumnType("money");
                entity.Property(e => e.SalesInvoiceLineNetAmount).HasColumnType("money");
                entity.Property(e => e.SalesInvoiceLineTaxAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderNumber).HasMaxLength(20);
                entity.Property(e => e.WorkActivityCode).HasMaxLength(10);
                entity.Property(e => e.WorkActivityLongName).HasMaxLength(250);
            });

            modelBuilder.Entity<SalesInvoiceToPurchaseMapping>(entity =>
            {
                entity.HasKey(e => e.SitpId);

                entity.ToTable("SalesInvoiceToPurchaseMapping", "fin");

                entity.HasIndex(e => e.SitpPurchaseInvoiceLineId, "IX_fin_SalesInvoiceToPurchaseMapping_PurchaseInvoiceLine__INCL");

                entity.HasIndex(e => e.SitpSalesInvoiceLineId, "IX_fin_SalesInvoiceToPurchaseMapping_SalesInvoiceLine__INCL");

                entity.Property(e => e.SitpId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SITP_Id");
                entity.Property(e => e.SitpCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SITP_CreatedBy");
                entity.Property(e => e.SitpCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SITP_CreatedDate");
                entity.Property(e => e.SitpLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SITP_LastModifiedBy");
                entity.Property(e => e.SitpLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SITP_LastModifiedDate");
                entity.Property(e => e.SitpPurchaseInvoiceLineId).HasColumnName("SITP_PurchaseInvoiceLine_Id");
                entity.Property(e => e.SitpSalesInvoiceLineId).HasColumnName("SITP_SalesInvoiceLine_Id");
                entity.Property(e => e.SitpTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SITP_TimeStamp");

                entity.HasOne(d => d.SitpPurchaseInvoiceLine).WithMany(p => p.SalesInvoiceToPurchaseMappings)
                    .HasForeignKey(d => d.SitpPurchaseInvoiceLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesInvoiceToPurchaseMapping_PurchaseInvoiceLines");

                entity.HasOne(d => d.SitpSalesInvoiceLine).WithMany(p => p.SalesInvoiceToPurchaseMappings)
                    .HasForeignKey(d => d.SitpSalesInvoiceLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesInvoiceToPurchaseMapping_SalesInvoiceLines");
            });

            modelBuilder.Entity<SalesInvoiceToPurchaseMappingView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesInvoiceToPurchaseMappingView", "fin");

                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientName).HasMaxLength(250);
                entity.Property(e => e.CostOfSalesAmount).HasColumnType("money");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditorName).HasMaxLength(250);
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.ProductCode).HasMaxLength(20);
                entity.Property(e => e.ProductName).HasMaxLength(250);
                entity.Property(e => e.PurchaseInvoiceLineGrossAmount).HasColumnType("money");
                entity.Property(e => e.PurchaseInvoiceLineNetAmount).HasColumnType("money");
                entity.Property(e => e.PurchaseInvoiceLineTaxAmount).HasColumnType("money");
                entity.Property(e => e.PurchaseInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SalesInvoiceLineGrossAmount).HasColumnType("money");
                entity.Property(e => e.SalesInvoiceLineNetAmount).HasColumnType("money");
                entity.Property(e => e.SalesInvoiceLineTaxAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderGrossAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderLineGrossAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderLineNetAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderLineTaxAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderNetAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderNumber).HasMaxLength(20);
                entity.Property(e => e.SalesOrderTaxAmount).HasColumnType("money");
                entity.Property(e => e.ServiceCode).HasMaxLength(10);
                entity.Property(e => e.ServiceName).HasMaxLength(250);
                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SupplierName).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SalesInvoiceToSalesOrderMappingsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesInvoiceToSalesOrderMappingsView", "fin");
            });

            modelBuilder.Entity<SalesInvoiceToSalesOrdersView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesInvoiceToSalesOrdersView", "fin");

                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DeprecatedSalesOrderClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.DeprecatedSalesOrderClientName).HasMaxLength(756);
                entity.Property(e => e.DeprecatedSalesOrderNumber).HasMaxLength(20);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.SalesInvoiceDebtorName).HasMaxLength(756);
                entity.Property(e => e.SalesInvoiceDebtorNumber).HasMaxLength(20);
                entity.Property(e => e.SalesInvoiceNetAmount).HasColumnType("money");
                entity.Property(e => e.SalesInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SalesInvoicePaymentDate).HasColumnType("date");
                entity.Property(e => e.SalesInvoiceStatusCode).HasMaxLength(20);
                entity.Property(e => e.SalesInvoiceStatusName).HasMaxLength(250);
                entity.Property(e => e.SalesOrderCreditType)
                    .HasMaxLength(19)
                    .IsUnicode(false);
                entity.Property(e => e.SalesOrderNumber).HasMaxLength(20);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SalesInvoicesCollectableView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesInvoicesCollectableView", "fin");

                entity.Property(e => e.AgentName).HasMaxLength(756);
                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.ClientOrderNumber).HasMaxLength(50);
                entity.Property(e => e.ClientReferenceNumber).HasMaxLength(50);
                entity.Property(e => e.CollectableDate).HasColumnType("date");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DebtorChamberOfCommerceNumber).HasMaxLength(50);
                entity.Property(e => e.DebtorCity).HasMaxLength(250);
                entity.Property(e => e.DebtorCountryCode).HasMaxLength(3);
                entity.Property(e => e.DebtorEmail).HasMaxLength(250);
                entity.Property(e => e.DebtorEntryNumber).HasMaxLength(36);
                entity.Property(e => e.DebtorEntrySystem).HasMaxLength(10);
                entity.Property(e => e.DebtorFax).HasMaxLength(20);
                entity.Property(e => e.DebtorHomePage).HasMaxLength(250);
                entity.Property(e => e.DebtorHouseNo).HasMaxLength(10);
                entity.Property(e => e.DebtorHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.DebtorName).HasMaxLength(250);
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.DebtorPhone).HasMaxLength(20);
                entity.Property(e => e.DebtorPhoneExt).HasMaxLength(10);
                entity.Property(e => e.DebtorPostalCode).HasMaxLength(10);
                entity.Property(e => e.DebtorProvince).HasMaxLength(250);
                entity.Property(e => e.DebtorSalesCollectionEmail).HasMaxLength(250);
                entity.Property(e => e.DebtorStreetName).HasMaxLength(250);
                entity.Property(e => e.DebtorVatNumber).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InsurancePolicyNumber).HasMaxLength(50);
                entity.Property(e => e.InsureeDateOfBirth).HasColumnType("date");
                entity.Property(e => e.InsureeName).HasMaxLength(200);
                entity.Property(e => e.InsurerName).HasMaxLength(756);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LeasingCompanyName).HasMaxLength(756);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.MandateName).HasMaxLength(250);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.OpenAmount).HasColumnType("money");
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.SalesCollectionNumber).HasMaxLength(20);
                entity.Property(e => e.SelectedBy).HasMaxLength(4000);
                entity.Property(e => e.SignedOpenAmount).HasColumnType("money");
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<SalesInvoicesEntryView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesInvoicesEntryView", "fin");

                entity.Property(e => e.BlockedAmount).HasColumnType("decimal(18, 0)");
                entity.Property(e => e.BlockedBic).HasMaxLength(11);
                entity.Property(e => e.BlockedIban).HasMaxLength(34);
                entity.Property(e => e.BookingDate).HasColumnType("date");
                entity.Property(e => e.BookingNumber).HasMaxLength(10);
                entity.Property(e => e.BusinessUnitCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.BusinessUnitName).HasMaxLength(756);
                entity.Property(e => e.CollectableDate).HasColumnType("date");
                entity.Property(e => e.CostCenterCode).HasMaxLength(10);
                entity.Property(e => e.CostCenterName).HasMaxLength(250);
                entity.Property(e => e.CostUnitCode).HasMaxLength(10);
                entity.Property(e => e.CostUnitName).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CultureCode).HasMaxLength(10);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DebitEntryNumber).HasMaxLength(36);
                entity.Property(e => e.DebtorBic).HasMaxLength(11);
                entity.Property(e => e.DebtorChamberOfCommerceNumber).HasMaxLength(50);
                entity.Property(e => e.DebtorCity).HasMaxLength(250);
                entity.Property(e => e.DebtorCountryCode).HasMaxLength(3);
                entity.Property(e => e.DebtorEmail).HasMaxLength(250);
                entity.Property(e => e.DebtorHouseNo).HasMaxLength(10);
                entity.Property(e => e.DebtorHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.DebtorIban).HasMaxLength(34);
                entity.Property(e => e.DebtorName).HasMaxLength(250);
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.DebtorPostalCode).HasMaxLength(10);
                entity.Property(e => e.DebtorStreetName).HasMaxLength(250);
                entity.Property(e => e.DebtorVatNumber).HasMaxLength(50);
                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.DepartmentName).HasMaxLength(756);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DocumentArchiveId).HasMaxLength(250);
                entity.Property(e => e.DossierAssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierPartyName).HasMaxLength(200);
                entity.Property(e => e.EmployeeName).HasMaxLength(250);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InvoiceDeliveryMethod).HasMaxLength(20);
                entity.Property(e => e.InvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.InvoiceTypeCode).HasMaxLength(10);
                entity.Property(e => e.InvoiceTypeName).HasMaxLength(250);
                entity.Property(e => e.JournalId).HasMaxLength(20);
                entity.Property(e => e.JournalName).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LeadCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.OpenAmount).HasColumnType("money");
                entity.Property(e => e.OriginalSalesInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.OwnRiskAmount).HasColumnType("money");
                entity.Property(e => e.OwnRiskNumber).HasMaxLength(20);
                entity.Property(e => e.PayableAmount).HasColumnType("money");
                entity.Property(e => e.PaymentConditionCode).HasMaxLength(10);
                entity.Property(e => e.PaymentConditionName).HasMaxLength(250);
                entity.Property(e => e.PaymentMethodCode).HasMaxLength(10);
                entity.Property(e => e.PaymentMethodName).HasMaxLength(250);
                entity.Property(e => e.PaymentReference).HasMaxLength(250);
                entity.Property(e => e.SalesCollectionNumber).HasMaxLength(20);
                entity.Property(e => e.SalesInvoiceStatusCode).HasMaxLength(20);
                entity.Property(e => e.SalesInvoiceStatusName).HasMaxLength(250);
                entity.Property(e => e.SalesInvoiceStatusReason).HasMaxLength(250);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxCountryCode).HasMaxLength(3);
                entity.Property(e => e.TaxExemptedAmount).HasColumnType("money");
                entity.Property(e => e.TaxImportAmount).HasColumnType("money");
                entity.Property(e => e.TaxReversedChargeAmount).HasColumnType("money");
                entity.Property(e => e.TenantName).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VatDeductableAmount).HasColumnType("money");
                entity.Property(e => e.VatNumber).HasMaxLength(20);
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<SalesInvoicesExportFailedView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesInvoicesExportFailedView", "fin");

                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DebtorEmailAddress).HasMaxLength(250);
                entity.Property(e => e.DebtorName).HasMaxLength(250);
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.JournalId).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.OpenAmount).HasColumnType("money");
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.SalesInvoiceStatusChangeReason).HasMaxLength(250);
                entity.Property(e => e.SalesInvoiceStatusCode).HasMaxLength(20);
                entity.Property(e => e.SalesInvoiceStatusName).HasMaxLength(250);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxExemptedAmount).HasColumnType("money");
                entity.Property(e => e.TaxImportAmount).HasColumnType("money");
                entity.Property(e => e.TaxReversedChargeAmount).HasColumnType("money");
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<SalesInvoicesInvalidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesInvoicesInvalidView", "fin");

                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DebtorName).HasMaxLength(250);
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InsurancePolicyId).HasColumnName("InsurancePolicy_Id");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.SalesOrderNumber).HasMaxLength(20);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.WorkingOrderLineId).HasColumnName("WorkingOrderLine_Id");
            });

            modelBuilder.Entity<SalesInvoicesOpenView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesInvoicesOpenView", "fin");

                entity.Property(e => e.BookingDate).HasColumnType("date");
                entity.Property(e => e.BookingNumber).HasMaxLength(10);
                entity.Property(e => e.CostCenterCode).HasMaxLength(10);
                entity.Property(e => e.CostCenterName).HasMaxLength(250);
                entity.Property(e => e.CostUnitCode).HasMaxLength(10);
                entity.Property(e => e.CostUnitName).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CultureCode).HasMaxLength(10);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DebitEntryNumber).HasMaxLength(36);
                entity.Property(e => e.DebtorCity).HasMaxLength(250);
                entity.Property(e => e.DebtorCountryCode).HasMaxLength(3);
                entity.Property(e => e.DebtorEmailAddress).HasMaxLength(250);
                entity.Property(e => e.DebtorHouseNo).HasMaxLength(10);
                entity.Property(e => e.DebtorHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.DebtorIban).HasMaxLength(34);
                entity.Property(e => e.DebtorName).HasMaxLength(250);
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.DebtorPostalCode).HasMaxLength(10);
                entity.Property(e => e.DebtorStreetName).HasMaxLength(250);
                entity.Property(e => e.DebtorVatNumber).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EmployeeName).HasMaxLength(250);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InvoiceDeliveryMethod).HasMaxLength(20);
                entity.Property(e => e.InvoiceDeliveryMethodType).HasMaxLength(20);
                entity.Property(e => e.InvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.JournalId).HasMaxLength(20);
                entity.Property(e => e.JournalName).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.OpenAmount).HasColumnType("money");
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PaymentReference).HasMaxLength(250);
                entity.Property(e => e.SalesInvoiceStatusCode).HasMaxLength(20);
                entity.Property(e => e.SalesInvoiceStatusName).HasMaxLength(20);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxExemptedAmount).HasColumnType("money");
                entity.Property(e => e.TaxImportAmount).HasColumnType("money");
                entity.Property(e => e.TaxReversedChargeAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<SalesInvoicesPendingExportView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesInvoicesPendingExportView", "fin");

                entity.Property(e => e.BookingDate).HasColumnType("date");
                entity.Property(e => e.BookingNumber).HasMaxLength(10);
                entity.Property(e => e.CostCenterCode).HasMaxLength(10);
                entity.Property(e => e.CostCenterName).HasMaxLength(250);
                entity.Property(e => e.CostUnitCode).HasMaxLength(10);
                entity.Property(e => e.CostUnitName).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CultureCode).HasMaxLength(10);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DebitEntryNumber).HasMaxLength(36);
                entity.Property(e => e.DebtorCity).HasMaxLength(250);
                entity.Property(e => e.DebtorCountryCode).HasMaxLength(3);
                entity.Property(e => e.DebtorEmailAddress).HasMaxLength(250);
                entity.Property(e => e.DebtorHouseNo).HasMaxLength(10);
                entity.Property(e => e.DebtorHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.DebtorIban).HasMaxLength(34);
                entity.Property(e => e.DebtorName).HasMaxLength(250);
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.DebtorPostalCode).HasMaxLength(10);
                entity.Property(e => e.DebtorStreetName).HasMaxLength(250);
                entity.Property(e => e.DebtorVatNumber).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EmployeeName).HasMaxLength(250);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InvoiceDeliveryMethod).HasMaxLength(20);
                entity.Property(e => e.InvoiceDeliveryMethodType).HasMaxLength(20);
                entity.Property(e => e.InvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.JournalId).HasMaxLength(20);
                entity.Property(e => e.JournalName).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.OpenAmount).HasColumnType("money");
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PaymentReference).HasMaxLength(250);
                entity.Property(e => e.SalesInvoiceStatusCode).HasMaxLength(20);
                entity.Property(e => e.SalesInvoiceStatusName).HasMaxLength(20);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxExemptedAmount).HasColumnType("money");
                entity.Property(e => e.TaxImportAmount).HasColumnType("money");
                entity.Property(e => e.TaxReversedChargeAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<SalesInvoicesPendingJournalEntryView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesInvoicesPendingJournalEntryView", "fin");

                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DebtorName).HasMaxLength(250);
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
            });

            modelBuilder.Entity<SalesInvoicesReportView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesInvoicesReportView", "fin");

                entity.Property(e => e.CollectableDate).HasColumnType("date");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DebtorName).HasMaxLength(250);
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.DepartmentName).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.IncidentNumber).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SalesInvoicesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesInvoicesView", "fin");

                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.AssistancePlanNumbers).HasMaxLength(4000);
                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientGroupCode).HasMaxLength(10);
                entity.Property(e => e.ClientGroupName).HasMaxLength(250);
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DebtorEmail).HasMaxLength(250);
                entity.Property(e => e.DebtorName).HasMaxLength(250);
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.LicensePlate).HasMaxLength(250);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.SalesInvoiceStatusCode).HasMaxLength(20);
                entity.Property(e => e.SalesInvoiceStatusName).HasMaxLength(250);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.WorkingOrderNumber).HasMaxLength(50);
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<SalesInvoicesWithDossierAuthorizationsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesInvoicesWithDossierAuthorizationsView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DebtorName).HasMaxLength(250);
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
            });

            modelBuilder.Entity<SalesJournalEntriesExactView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesJournalEntriesExactView", "fin");

                entity.Property(e => e.AccountNumber).HasMaxLength(34);
                entity.Property(e => e.BankCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.BookingNumber).HasMaxLength(10);
                entity.Property(e => e.CostCenterCode).HasMaxLength(20);
                entity.Property(e => e.CostUnitCode).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.ExactAdministration).HasMaxLength(10);
                entity.Property(e => e.ExactJournal).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.JournalEntryDate).HasColumnType("date");
                entity.Property(e => e.JournalEntryNumber).HasMaxLength(20);
                entity.Property(e => e.JournalId).HasMaxLength(20);
                entity.Property(e => e.JournalTypeId).HasMaxLength(10);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.PaymentConditionCode).HasMaxLength(10);
                entity.Property(e => e.PaymentMethodCode).HasMaxLength(4);
                entity.Property(e => e.PaymentReference).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SalesJournalEntriesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesJournalEntriesView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.ExactAdministration).HasMaxLength(10);
                entity.Property(e => e.FinancialPeriod).HasMaxLength(20);
                entity.Property(e => e.FinancialYear).HasMaxLength(20);
                entity.Property(e => e.JournalEntryDate).HasColumnType("date");
                entity.Property(e => e.JournalEntryNumber).HasMaxLength(20);
                entity.Property(e => e.JournalNumber).HasMaxLength(10);
                entity.Property(e => e.JournalType).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SalesJournalEntryLine>(entity =>
            {
                entity.HasKey(e => e.SjlId);

                entity.ToTable("SalesJournalEntryLines", "fin");

                entity.HasIndex(e => new { e.SjlJournalEntryLineId, e.SjlSalesInvoiceLineId }, "IX_SalesJournalEntryLines_JournalEntryLine_SalesInvoiceLine");

                entity.HasIndex(e => new { e.SjlSalesInvoiceLineId, e.SjlJournalEntryLineId }, "IX_SalesJournalEntryLines_SalesInvoiceLine_JournalEntryLine");

                entity.Property(e => e.SjlId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SJL_Id");
                entity.Property(e => e.SjlCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SJL_CreatedBy");
                entity.Property(e => e.SjlCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SJL_CreatedDate");
                entity.Property(e => e.SjlJournalEntryLineId).HasColumnName("SJL_JournalEntryLine_Id");
                entity.Property(e => e.SjlLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SJL_LastModifiedBy");
                entity.Property(e => e.SjlLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SJL_LastModifiedDate");
                entity.Property(e => e.SjlSalesInvoiceLineId).HasColumnName("SJL_SalesInvoiceLine_Id");
                entity.Property(e => e.SjlTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SJL_TimeStamp");

                entity.HasOne(d => d.SjlJournalEntryLine).WithMany(p => p.SalesJournalEntryLines)
                    .HasForeignKey(d => d.SjlJournalEntryLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesJournalEntryLines_JournalEntryLines");

                entity.HasOne(d => d.SjlSalesInvoiceLine).WithMany(p => p.SalesJournalEntryLines)
                    .HasForeignKey(d => d.SjlSalesInvoiceLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesJournalEntryLines_SalesStatementReconcilliations");
            });

            modelBuilder.Entity<SalesJournalEntryLineSummariesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesJournalEntryLineSummariesView", "fin");

                entity.Property(e => e.CreditValue).HasColumnType("money");
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DebitValue).HasColumnType("money");
                entity.Property(e => e.DebtorName).HasMaxLength(250);
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.ExactGeneralLedger).HasMaxLength(10);
                entity.Property(e => e.ExactJournal).HasMaxLength(10);
                entity.Property(e => e.GeneralLedgerDescription).HasMaxLength(250);
                entity.Property(e => e.GeneralLedgerId).HasMaxLength(20);
                entity.Property(e => e.JournalEntryDate).HasColumnType("date");
                entity.Property(e => e.JournalEntryNumber).HasMaxLength(20);
                entity.Property(e => e.JournalId).HasMaxLength(20);
                entity.Property(e => e.JournalType).HasMaxLength(10);
                entity.Property(e => e.SalesInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.TaxCode).HasMaxLength(10);
                entity.Property(e => e.TaxValue).HasColumnType("money");
            });

            modelBuilder.Entity<SalesJournalEntryLinesExactView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesJournalEntryLinesExactView", "fin");

                entity.Property(e => e.CostCenterCode).HasMaxLength(20);
                entity.Property(e => e.CostUnitCode).HasMaxLength(10);
                entity.Property(e => e.CoverageProductTypeName).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.ExactGeneralLedger).HasMaxLength(10);
                entity.Property(e => e.ExactJournal).HasMaxLength(10);
                entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 5)");
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InsurancePolicyClientGroupName).HasMaxLength(250);
                entity.Property(e => e.InsurancePolicyClientName).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxCode).HasMaxLength(10);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SalesLedgerSetting>(entity =>
            {
                entity.HasKey(e => e.SlsId);

                entity.ToTable("SalesLedgerSettings", "fin");

                entity.Property(e => e.SlsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SLS_Id");
                entity.Property(e => e.SlsAbbreviation)
                    .HasMaxLength(10)
                    .HasColumnName("SLS_Abbreviation");
                entity.Property(e => e.SlsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SLS_CreatedBy");
                entity.Property(e => e.SlsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SLS_CreatedDate");
                entity.Property(e => e.SlsDescription)
                    .HasMaxLength(250)
                    .HasColumnName("SLS_Description");
                entity.Property(e => e.SlsEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("SLS_EffectiveDate");
                entity.Property(e => e.SlsEntrySystem)
                    .HasMaxLength(10)
                    .HasColumnName("SLS_EntrySystem");
                entity.Property(e => e.SlsEqualizationCreditGeneralLedgerId)
                    .HasMaxLength(20)
                    .HasColumnName("SLS_EqualizationCreditGeneralLedger_Id");
                entity.Property(e => e.SlsEqualizationDebitGeneralLedgerId)
                    .HasMaxLength(20)
                    .HasColumnName("SLS_EqualizationDebitGeneralLedger_Id");
                entity.Property(e => e.SlsEqualizationJournalId)
                    .HasMaxLength(20)
                    .HasColumnName("SLS_EqualizationJournal_Id");
                entity.Property(e => e.SlsGeneralLedgerId)
                    .HasMaxLength(20)
                    .HasColumnName("SLS_GeneralLedger_Id");
                entity.Property(e => e.SlsIsCredit).HasColumnName("SLS_IsCredit");
                entity.Property(e => e.SlsIsCrossBorderClaimDepartment).HasColumnName("SLS_IsCrossBorderClaimDepartment");
                entity.Property(e => e.SlsIsFee).HasColumnName("SLS_IsFee");
                entity.Property(e => e.SlsIsIntercompany).HasColumnName("SLS_IsIntercompany");
                entity.Property(e => e.SlsIsInvoice).HasColumnName("SLS_IsInvoice");
                entity.Property(e => e.SlsIsRecipientLegalEntity).HasColumnName("SLS_IsRecipientLegalEntity");
                entity.Property(e => e.SlsIsWithHoldingTax).HasColumnName("SLS_IsWithHoldingTax");
                entity.Property(e => e.SlsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SLS_LastModifiedBy");
                entity.Property(e => e.SlsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SLS_LastModifiedDate");
                entity.Property(e => e.SlsLegalEntityId).HasColumnName("SLS_LegalEntity_Id");
                entity.Property(e => e.SlsProductClassificationId).HasColumnName("SLS_ProductClassification_Id");
                entity.Property(e => e.SlsProductId).HasColumnName("SLS_Product_Id");
                entity.Property(e => e.SlsTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("SLS_TerminationDate");
                entity.Property(e => e.SlsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SLS_TimeStamp");
                entity.Property(e => e.SlsWorkActivityId).HasColumnName("SLS_WorkActivity_Id");

                entity.HasOne(d => d.SlsEqualizationCreditGeneralLedger).WithMany(p => p.SalesLedgerSettingSlsEqualizationCreditGeneralLedgers)
                    .HasForeignKey(d => d.SlsEqualizationCreditGeneralLedgerId)
                    .HasConstraintName("FK_SalesLedgerSettings_EqualizationCreditGeneralLedgers");

                entity.HasOne(d => d.SlsEqualizationDebitGeneralLedger).WithMany(p => p.SalesLedgerSettingSlsEqualizationDebitGeneralLedgers)
                    .HasForeignKey(d => d.SlsEqualizationDebitGeneralLedgerId)
                    .HasConstraintName("FK_SalesLedgerSettings_EqualizationDebitGeneralLedgers");

                entity.HasOne(d => d.SlsEqualizationJournal).WithMany(p => p.SalesLedgerSettings)
                    .HasForeignKey(d => d.SlsEqualizationJournalId)
                    .HasConstraintName("FK_SalesLedgerSettings_EqualizationJournals");

                entity.HasOne(d => d.SlsGeneralLedger).WithMany(p => p.SalesLedgerSettingSlsGeneralLedgers)
                    .HasForeignKey(d => d.SlsGeneralLedgerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesLedgerSettings_GeneralLedgers");

                entity.HasOne(d => d.SlsLegalEntity).WithMany(p => p.SalesLedgerSettings)
                    .HasForeignKey(d => d.SlsLegalEntityId)
                    .HasConstraintName("FK_SalesLedgerSettings_LegalEntities");

                entity.HasOne(d => d.SlsProduct).WithMany(p => p.SalesLedgerSettings)
                    .HasForeignKey(d => d.SlsProductId)
                    .HasConstraintName("FK_SalesLedgerSettings_Products");

                entity.HasOne(d => d.SlsWorkActivity).WithMany(p => p.SalesLedgerSettings)
                    .HasForeignKey(d => d.SlsWorkActivityId)
                    .HasConstraintName("FK_SalesLedgerSettings_WorkActivities");
            });

            modelBuilder.Entity<SalesOrder>(entity =>
            {
                entity.HasKey(e => e.SohId);

                entity.ToTable("SalesOrders", "fin");

                entity.HasIndex(e => new { e.SohClientId, e.SohDossierId }, "IX_fin_SalesOrders_Client_Dossier");

                entity.HasIndex(e => new { e.SohClientId, e.SohCurrentStatusCode }, "IX_fin_SalesOrders_Client_Id_CurrentStatusCode__INCL");

                entity.HasIndex(e => new { e.SohCurrentStatusCode, e.SohOrderDate }, "IX_fin_SalesOrders_CurrentStatusCode_OrderDate__INCL");

                entity.HasIndex(e => e.SohDebitSalesOrderId, "IX_fin_SalesOrders_DebitSalesOrder__INCL");

                entity.HasIndex(e => e.SohDeprecatedSalesOrderId, "IX_fin_SalesOrders_DeprecatedSalesOrder__INCL");

                entity.HasIndex(e => e.SohDossierId, "IX_fin_SalesOrders_Dossier");

                entity.HasIndex(e => new { e.SohEntrySystem, e.SohClientId }, "IX_fin_SalesOrders_EntrySystem_Client_Id__INCL");

                entity.HasIndex(e => new { e.SohEntrySystem, e.SohCurrentStatusCode }, "IX_fin_SalesOrders_EntrySystem_CurrentStatusCode__INCL");

                entity.HasIndex(e => new { e.SohEntrySystem, e.SohLegalEntityId, e.SohClientId }, "IX_fin_SalesOrders_EntrySystem_LegalEntity_Client");

                entity.HasIndex(e => new { e.SohEntrySystem, e.SohOrderDate }, "IX_fin_SalesOrders_EntrySystem_OrderDate__INCL");

                entity.HasIndex(e => new { e.SohLegalEntityId, e.SohClientId, e.SohDossierId }, "IX_fin_SalesOrders_LegalEntity_Client_Dossier");

                entity.HasIndex(e => e.SohOrderDate, "IX_fin_SalesOrders_OrderDate__INCL");

                entity.Property(e => e.SohId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SOH_Id");
                entity.Property(e => e.SohClientId).HasColumnName("SOH_Client_Id");
                entity.Property(e => e.SohCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOH_CreatedBy");
                entity.Property(e => e.SohCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOH_CreatedDate");
                entity.Property(e => e.SohCreditReason)
                    .HasMaxLength(250)
                    .HasColumnName("SOH_CreditReason");
                entity.Property(e => e.SohCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("SOH_CurrencyCode");
                entity.Property(e => e.SohCurrentStatusCode)
                    .HasMaxLength(20)
                    .HasColumnName("SOH_CurrentStatusCode");
                entity.Property(e => e.SohCurrentStatusHistoryId).HasColumnName("SOH_CurrentStatusHistory_Id");
                entity.Property(e => e.SohCurrentStatusHistoryStartDate).HasColumnName("SOH_CurrentStatusHistoryStartDate");
                entity.Property(e => e.SohCurrentStatusHistoryStatusChangeReason)
                    .HasMaxLength(250)
                    .HasColumnName("SOH_CurrentStatusHistoryStatusChangeReason");
                entity.Property(e => e.SohDebitEntryNumber)
                    .HasMaxLength(36)
                    .HasColumnName("SOH_DebitEntryNumber");
                entity.Property(e => e.SohDebitSalesOrderId).HasColumnName("SOH_DebitSalesOrder_Id");
                entity.Property(e => e.SohDeprecatedSalesOrderId).HasColumnName("SOH_DeprecatedSalesOrder_Id");
                entity.Property(e => e.SohDescription)
                    .HasMaxLength(250)
                    .HasColumnName("SOH_Description");
                entity.Property(e => e.SohDiscount)
                    .HasColumnType("money")
                    .HasColumnName("SOH_Discount");
                entity.Property(e => e.SohDossierAssignmentId).HasColumnName("SOH_DossierAssignment_Id");
                entity.Property(e => e.SohDossierId).HasColumnName("SOH_Dossier_Id");
                entity.Property(e => e.SohDossierNumber)
                    .HasMaxLength(20)
                    .HasColumnName("SOH_DossierNumber");
                entity.Property(e => e.SohDossierPartyId).HasColumnName("SOH_DossierParty_Id");
                entity.Property(e => e.SohDueDate).HasColumnName("SOH_DueDate");
                entity.Property(e => e.SohEntryBatch)
                    .HasMaxLength(36)
                    .HasColumnName("SOH_EntryBatch");
                entity.Property(e => e.SohEntryNumber)
                    .HasMaxLength(36)
                    .HasColumnName("SOH_EntryNumber");
                entity.Property(e => e.SohEntrySystem)
                    .HasMaxLength(10)
                    .HasColumnName("SOH_EntrySystem");
                entity.Property(e => e.SohExchangeRate).HasColumnName("SOH_ExchangeRate");
                entity.Property(e => e.SohExchangeRateId).HasColumnName("SOH_ExchangeRate_Id");
                entity.Property(e => e.SohGrossAmount)
                    .HasColumnType("money")
                    .HasColumnName("SOH_GrossAmount");
                entity.Property(e => e.SohInUseBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOH_InUseBy");
                entity.Property(e => e.SohIsCredit).HasColumnName("SOH_IsCredit");
                entity.Property(e => e.SohIsImported).HasColumnName("SOH_IsImported");
                entity.Property(e => e.SohIsIntercompany).HasColumnName("SOH_IsIntercompany");
                entity.Property(e => e.SohIsPrinted).HasColumnName("SOH_IsPrinted");
                entity.Property(e => e.SohIsVoided).HasColumnName("SOH_IsVoided");
                entity.Property(e => e.SohLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOH_LastModifiedBy");
                entity.Property(e => e.SohLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOH_LastModifiedDate");
                entity.Property(e => e.SohLeadCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("SOH_LeadCurrencyCode");
                entity.Property(e => e.SohLegalEntityId).HasColumnName("SOH_LegalEntity_Id");
                entity.Property(e => e.SohNetAmount)
                    .HasColumnType("money")
                    .HasColumnName("SOH_NetAmount");
                entity.Property(e => e.SohNumber)
                    .HasMaxLength(20)
                    .HasColumnName("SOH_Number");
                entity.Property(e => e.SohOrderDate).HasColumnName("SOH_OrderDate");
                entity.Property(e => e.SohOurReference)
                    .HasMaxLength(250)
                    .HasColumnName("SOH_OurReference");
                entity.Property(e => e.SohOwnRiskAmount)
                    .HasColumnType("money")
                    .HasColumnName("SOH_OwnRiskAmount");
                entity.Property(e => e.SohParentId).HasColumnName("SOH_Parent_Id");
                entity.Property(e => e.SohPaymentConditionId).HasColumnName("SOH_PaymentCondition_Id");
                entity.Property(e => e.SohPaymentReference)
                    .HasMaxLength(250)
                    .HasColumnName("SOH_PaymentReference");
                entity.Property(e => e.SohSalesOrderTypeId).HasColumnName("SOH_SalesOrderType_Id");
                entity.Property(e => e.SohTaxAmount)
                    .HasColumnType("money")
                    .HasColumnName("SOH_TaxAmount");
                entity.Property(e => e.SohTaxCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("SOH_TaxCountryCode");
                entity.Property(e => e.SohTaxExemptedAmount)
                    .HasColumnType("money")
                    .HasColumnName("SOH_TaxExemptedAmount");
                entity.Property(e => e.SohTaxImportAmount)
                    .HasColumnType("money")
                    .HasColumnName("SOH_TaxImportAmount");
                entity.Property(e => e.SohTaxReversedChargeAmount)
                    .HasColumnType("money")
                    .HasColumnName("SOH_TaxReversedChargeAmount");
                entity.Property(e => e.SohTenantId).HasColumnName("SOH_Tenant_Id");
                entity.Property(e => e.SohTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SOH_TimeStamp");
                entity.Property(e => e.SohVatDeductableAmount)
                    .HasColumnType("money")
                    .HasColumnName("SOH_VatDeductableAmount");
                entity.Property(e => e.SohYourReference)
                    .HasMaxLength(250)
                    .HasColumnName("SOH_YourReference");

                entity.HasOne(d => d.SohClient).WithMany(p => p.SalesOrders)
                    .HasForeignKey(d => d.SohClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrders_Clients");

                entity.HasOne(d => d.SohDebitSalesOrder).WithMany(p => p.InverseSohDebitSalesOrder)
                    .HasForeignKey(d => d.SohDebitSalesOrderId)
                    .HasConstraintName("FK_SalesOrders_DebitSalesOrders");

                entity.HasOne(d => d.SohDeprecatedSalesOrder).WithMany(p => p.InverseSohDeprecatedSalesOrder)
                    .HasForeignKey(d => d.SohDeprecatedSalesOrderId)
                    .HasConstraintName("FK_SalesOrders_DeprecatedSalesOrders");

                entity.HasOne(d => d.SohDossierAssignment).WithMany(p => p.SalesOrders)
                    .HasForeignKey(d => d.SohDossierAssignmentId)
                    .HasConstraintName("FK_SalesOrders_DossierAssignments");

                entity.HasOne(d => d.SohDossier).WithMany(p => p.SalesOrders)
                    .HasForeignKey(d => d.SohDossierId)
                    .HasConstraintName("FK_SalesOrders_Dossiers");

                entity.HasOne(d => d.SohDossierParty).WithMany(p => p.SalesOrders)
                    .HasForeignKey(d => d.SohDossierPartyId)
                    .HasConstraintName("FK_SalesOrders_DossierParties");

                entity.HasOne(d => d.SohExchangeRateNavigation).WithMany(p => p.SalesOrders)
                    .HasForeignKey(d => d.SohExchangeRateId)
                    .HasConstraintName("FK_SalesOrders_ExchangeRates");

                entity.HasOne(d => d.SohLegalEntity).WithMany(p => p.SalesOrders)
                    .HasForeignKey(d => d.SohLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrders_LegalEntities");

                entity.HasOne(d => d.SohParent).WithMany(p => p.InverseSohParent)
                    .HasForeignKey(d => d.SohParentId)
                    .HasConstraintName("FK_SalesOrders_ParentSalesOrders");

                entity.HasOne(d => d.SohPaymentCondition).WithMany(p => p.SalesOrders)
                    .HasForeignKey(d => d.SohPaymentConditionId)
                    .HasConstraintName("FK_SalesOrders_PaymentConditions");

                entity.HasOne(d => d.SohSalesOrderType).WithMany(p => p.SalesOrders)
                    .HasForeignKey(d => d.SohSalesOrderTypeId)
                    .HasConstraintName("FK_SalesOrders_SalesOrderTypes");

                entity.HasOne(d => d.SohTenant).WithMany(p => p.SalesOrders)
                    .HasForeignKey(d => d.SohTenantId)
                    .HasConstraintName("FK_SalesOrders_Tenants");
            });

            modelBuilder.Entity<SalesOrderApproval>(entity =>
            {
                entity.HasKey(e => e.SopId);

                entity.ToTable("SalesOrderApprovals", "fin");

                entity.HasIndex(e => e.SopSalesOrderAuthorizationId, "IX_fin_SalesOrderApprovals_SalesOrderAuthorization__INCL");

                entity.Property(e => e.SopId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SOP_Id");
                entity.Property(e => e.SopApprovalDate).HasColumnName("SOP_ApprovalDate");
                entity.Property(e => e.SopAutorizationRoleId)
                    .HasMaxLength(50)
                    .HasColumnName("SOP_AutorizationRole_Id");
                entity.Property(e => e.SopComment)
                    .HasMaxLength(250)
                    .HasColumnName("SOP_Comment");
                entity.Property(e => e.SopCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOP_CreatedBy");
                entity.Property(e => e.SopCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOP_CreatedDate");
                entity.Property(e => e.SopEmployeeId).HasColumnName("SOP_Employee_Id");
                entity.Property(e => e.SopIsApproved).HasColumnName("SOP_IsApproved");
                entity.Property(e => e.SopLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOP_LastModifiedBy");
                entity.Property(e => e.SopLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOP_LastModifiedDate");
                entity.Property(e => e.SopSalesOrderAuthorizationId).HasColumnName("SOP_SalesOrderAuthorization_Id");
                entity.Property(e => e.SopTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SOP_TimeStamp");

                entity.HasOne(d => d.SopAutorizationRole).WithMany(p => p.SalesOrderApprovals)
                    .HasForeignKey(d => d.SopAutorizationRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderApprovals_AuthorizationRoles");

                entity.HasOne(d => d.SopEmployee).WithMany(p => p.SalesOrderApprovals)
                    .HasForeignKey(d => d.SopEmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderApprovals_Employees");

                entity.HasOne(d => d.SopSalesOrderAuthorization).WithMany(p => p.SalesOrderApprovals)
                    .HasForeignKey(d => d.SopSalesOrderAuthorizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderApprovals_SalesOrderAuthorizations");
            });

            modelBuilder.Entity<SalesOrderApprovalSetting>(entity =>
            {
                entity.HasKey(e => e.SoasId).HasName("PK_SalesOrderApprovalSetings");

                entity.ToTable("SalesOrderApprovalSettings", "fin");

                entity.Property(e => e.SoasId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SOAS_Id");
                entity.Property(e => e.SoasApprovedBySystem).HasColumnName("SOAS_ApprovedBySystem");
                entity.Property(e => e.SoasClientId).HasColumnName("SOAS_Client_Id");
                entity.Property(e => e.SoasCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOAS_CreatedBy");
                entity.Property(e => e.SoasCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOAS_CreatedDate");
                entity.Property(e => e.SoasEffectiveDate)
                    .HasDefaultValueSql("(getutcdate())")
                    .HasColumnType("date")
                    .HasColumnName("SOAS_EffectiveDate");
                entity.Property(e => e.SoasEntrySystem)
                    .HasMaxLength(10)
                    .HasColumnName("SOAS_EntrySystem");
                entity.Property(e => e.SoasLastModifiedBy)
                    .HasMaxLength(200)
                    .HasColumnName("SOAS_LastModifiedBy");
                entity.Property(e => e.SoasLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOAS_LastModifiedDate");
                entity.Property(e => e.SoasLegalEntityId).HasColumnName("SOAS_LegalEntity_Id");
                entity.Property(e => e.SoasTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("SOAS_TerminationDate");
                entity.Property(e => e.SoasTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SOAS_TimeStamp");

                entity.HasOne(d => d.SoasClient).WithMany(p => p.SalesOrderApprovalSettings)
                    .HasForeignKey(d => d.SoasClientId)
                    .HasConstraintName("FK_SalesOrderApprovalSettings_Clients");

                entity.HasOne(d => d.SoasLegalEntity).WithMany(p => p.SalesOrderApprovalSettings)
                    .HasForeignKey(d => d.SoasLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderApprovalSettings_LegalEntities");
            });

            modelBuilder.Entity<SalesOrderApprovalSettingsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrderApprovalSettingsView", "fin");

                entity.Property(e => e.ApplicationName).HasMaxLength(255);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DebtorName).HasMaxLength(250);
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.EffectiveDate).HasColumnType("date");
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(200);
                entity.Property(e => e.TerminationDate).HasColumnType("date");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SalesOrderApprovalView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrderApprovalView", "fin");

                entity.Property(e => e.ApprovalStatus)
                    .HasMaxLength(8)
                    .IsUnicode(false);
                entity.Property(e => e.AutorizationRoleId).HasMaxLength(50);
                entity.Property(e => e.AutorizationRoleTypeId).HasMaxLength(250);
                entity.Property(e => e.Comment).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.EmployeeName).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SalesOrderAttachment>(entity =>
            {
                entity.HasKey(e => e.SoaId);

                entity.ToTable("SalesOrderAttachments", "fin");

                entity.HasIndex(e => e.SoaSalesOrderId, "IX_fin_SalesOrderAttachments_SalesOrder");

                entity.Property(e => e.SoaId)
                    .ValueGeneratedNever()
                    .HasColumnName("SOA_Id");
                entity.Property(e => e.SoaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOA_CreatedBy");
                entity.Property(e => e.SoaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOA_CreatedDate");
                entity.Property(e => e.SoaDocumentId).HasColumnName("SOA_Document_Id");
                entity.Property(e => e.SoaIsInternalDocument).HasColumnName("SOA_IsInternalDocument");
                entity.Property(e => e.SoaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOA_LastModifiedBy");
                entity.Property(e => e.SoaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOA_LastModifiedDate");
                entity.Property(e => e.SoaSalesOrderId).HasColumnName("SOA_SalesOrder_Id");
                entity.Property(e => e.SoaSequenceNumber).HasColumnName("SOA_SequenceNumber");
                entity.Property(e => e.SoaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SOA_TimeStamp");

                entity.HasOne(d => d.SoaDocument).WithMany(p => p.SalesOrderAttachments)
                    .HasForeignKey(d => d.SoaDocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderAttachments_Documents");

                entity.HasOne(d => d.SoaSalesOrder).WithMany(p => p.SalesOrderAttachments)
                    .HasForeignKey(d => d.SoaSalesOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderAttachments_SalesOrders");
            });

            modelBuilder.Entity<SalesOrderAttachmentsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrderAttachmentsView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.Description).HasMaxLength(500);
                entity.Property(e => e.DocumentDate).HasColumnType("date");
                entity.Property(e => e.DocumentNumber).HasMaxLength(20);
                entity.Property(e => e.DocumentTypeCode).HasMaxLength(10);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.OrderNumber).HasMaxLength(20);
                entity.Property(e => e.SignatureDate).HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SalesOrderAuthorization>(entity =>
            {
                entity.HasKey(e => e.SouId);

                entity.ToTable("SalesOrderAuthorizations", "fin");

                entity.HasIndex(e => e.SouSalesOrderId, "IX_fin_SalesOrderAuthorizations_SalesOrder");

                entity.Property(e => e.SouId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SOU_Id");
                entity.Property(e => e.SouCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOU_CreatedBy");
                entity.Property(e => e.SouCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOU_CreatedDate");
                entity.Property(e => e.SouLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOU_LastModifiedBy");
                entity.Property(e => e.SouLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOU_LastModifiedDate");
                entity.Property(e => e.SouRequiredAutorizationRoleId)
                    .HasMaxLength(50)
                    .HasColumnName("SOU_RequiredAutorizationRole_Id");
                entity.Property(e => e.SouSalesOrderId).HasColumnName("SOU_SalesOrder_Id");
                entity.Property(e => e.SouTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SOU_TimeStamp");

                entity.HasOne(d => d.SouRequiredAutorizationRole).WithMany(p => p.SalesOrderAuthorizations)
                    .HasForeignKey(d => d.SouRequiredAutorizationRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderAuthorizations_AuthorizationRoles");

                entity.HasOne(d => d.SouSalesOrder).WithMany(p => p.SalesOrderAuthorizations)
                    .HasForeignKey(d => d.SouSalesOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderAuthorizations_SalesOrders");
            });

            modelBuilder.Entity<SalesOrderClaimReservesInfo>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrderClaimReservesInfo", "ux");

                entity.Property(e => e.ChargedExpensesInvoiceRecipientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ChargedExpensesInvoiceRecipientName).HasMaxLength(752);
                entity.Property(e => e.ClaimReserveNumber).HasMaxLength(10);
                entity.Property(e => e.ClaimReserveTypeCode).HasMaxLength(10);
                entity.Property(e => e.ClaimReserveTypeName).HasMaxLength(250);
                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientName).HasMaxLength(752);
                entity.Property(e => e.CoverageNumber).HasMaxLength(50);
                entity.Property(e => e.CoverageProductCode).HasMaxLength(10);
                entity.Property(e => e.CoverageProductCommercialName).HasMaxLength(250);
                entity.Property(e => e.CoverageProductName).HasMaxLength(250);
                entity.Property(e => e.OpenAmount).HasColumnType("money");
            });

            modelBuilder.Entity<SalesOrderClientsPendingSingleSalesInvoiceInfo>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrderClientsPendingSingleSalesInvoiceInfo", "ux");

                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientName).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
            });

            modelBuilder.Entity<SalesOrderCorrection>(entity =>
            {
                entity.HasKey(e => e.SohcId);

                entity.ToTable("SalesOrderCorrections", "fin");

                entity.Property(e => e.SohcId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SOHC_Id");
                entity.Property(e => e.SohcCorrectionDate).HasColumnName("SOHC_CorrectionDate");
                entity.Property(e => e.SohcCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOHC_CreatedBy");
                entity.Property(e => e.SohcCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOHC_CreatedDate");
                entity.Property(e => e.SohcLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOHC_LastModifiedBy");
                entity.Property(e => e.SohcLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOHC_LastModifiedDate");
                entity.Property(e => e.SohcSalesOrderId).HasColumnName("SOHC_SalesOrder_Id");
                entity.Property(e => e.SohcTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SOHC_TimeStamp");

                entity.HasOne(d => d.SohcSalesOrder).WithMany(p => p.SalesOrderCorrections)
                    .HasForeignKey(d => d.SohcSalesOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderCorrections_SalesOrders");
            });

            modelBuilder.Entity<SalesOrderCorrectionApproval>(entity =>
            {
                entity.HasKey(e => e.SopcId);

                entity.ToTable("SalesOrderCorrectionApprovals", "fin");

                entity.HasIndex(e => e.SopcSalesOrderCorrectionAuthorizationId, "IX_fin_SalesOrderCorrectionApprovals_SalesOrderCorrectionAuthorization__INCL");

                entity.Property(e => e.SopcId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SOPC_Id");
                entity.Property(e => e.SopcApprovalDate).HasColumnName("SOPC_ApprovalDate");
                entity.Property(e => e.SopcAutorizationRoleId)
                    .HasMaxLength(50)
                    .HasColumnName("SOPC_AutorizationRole_Id");
                entity.Property(e => e.SopcComment)
                    .HasMaxLength(250)
                    .HasColumnName("SOPC_Comment");
                entity.Property(e => e.SopcCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOPC_CreatedBy");
                entity.Property(e => e.SopcCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOPC_CreatedDate");
                entity.Property(e => e.SopcEmployeeId).HasColumnName("SOPC_Employee_Id");
                entity.Property(e => e.SopcIsApproved).HasColumnName("SOPC_IsApproved");
                entity.Property(e => e.SopcLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOPC_LastModifiedBy");
                entity.Property(e => e.SopcLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOPC_LastModifiedDate");
                entity.Property(e => e.SopcSalesOrderCorrectionAuthorizationId).HasColumnName("SOPC_SalesOrderCorrectionAuthorization_Id");
                entity.Property(e => e.SopcTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SOPC_TimeStamp");

                entity.HasOne(d => d.SopcAutorizationRole).WithMany(p => p.SalesOrderCorrectionApprovals)
                    .HasForeignKey(d => d.SopcAutorizationRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderCorrectionApprovals_AuthorizationRoles");

                entity.HasOne(d => d.SopcEmployee).WithMany(p => p.SalesOrderCorrectionApprovals)
                    .HasForeignKey(d => d.SopcEmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderCorrectionApprovals_Employees");

                entity.HasOne(d => d.SopcSalesOrderCorrectionAuthorization).WithMany(p => p.SalesOrderCorrectionApprovals)
                    .HasForeignKey(d => d.SopcSalesOrderCorrectionAuthorizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderCorrectionApprovals_SalesOrderCorrectionAuthorizations");
            });

            modelBuilder.Entity<SalesOrderCorrectionAuthorization>(entity =>
            {
                entity.HasKey(e => e.SoucId);

                entity.ToTable("SalesOrderCorrectionAuthorizations", "fin");

                entity.HasIndex(e => e.SoucSalesOrderCorrectionId, "IX_fin_SalesOrderCorrectionAuthorizations_SalesOrderCorrection");

                entity.Property(e => e.SoucId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SOUC_Id");
                entity.Property(e => e.SoucCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOUC_CreatedBy");
                entity.Property(e => e.SoucCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOUC_CreatedDate");
                entity.Property(e => e.SoucEmployeeId).HasColumnName("SOUC_Employee_Id");
                entity.Property(e => e.SoucLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOUC_LastModifiedBy");
                entity.Property(e => e.SoucLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOUC_LastModifiedDate");
                entity.Property(e => e.SoucRequiredAutorizationRoleId)
                    .HasMaxLength(50)
                    .HasColumnName("SOUC_RequiredAutorizationRole_Id");
                entity.Property(e => e.SoucSalesOrderCorrectionId).HasColumnName("SOUC_SalesOrderCorrection_Id");
                entity.Property(e => e.SoucTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SOUC_TimeStamp");

                entity.HasOne(d => d.SoucEmployee).WithMany(p => p.SalesOrderCorrectionAuthorizations)
                    .HasForeignKey(d => d.SoucEmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderCorrectionAuthorizations_Employees");

                entity.HasOne(d => d.SoucRequiredAutorizationRole).WithMany(p => p.SalesOrderCorrectionAuthorizations)
                    .HasForeignKey(d => d.SoucRequiredAutorizationRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderCorrectionAuthorizations_AuthorizationRoles");

                entity.HasOne(d => d.SoucSalesOrderCorrection).WithMany(p => p.SalesOrderCorrectionAuthorizations)
                    .HasForeignKey(d => d.SoucSalesOrderCorrectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderCorrectionAuthorizations_SalesOrderCorrections");
            });

            modelBuilder.Entity<SalesOrderCorrectionLine>(entity =>
            {
                entity.HasKey(e => e.SolcId);

                entity.ToTable("SalesOrderCorrectionLines", "fin");

                entity.Property(e => e.SolcId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SOLC_Id");
                entity.Property(e => e.SolcClientId).HasColumnName("SOLC_Client_Id");
                entity.Property(e => e.SolcCostOfSalesAmount)
                    .HasColumnType("money")
                    .HasColumnName("SOLC_CostOfSalesAmount");
                entity.Property(e => e.SolcCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOLC_CreatedBy");
                entity.Property(e => e.SolcCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOLC_CreatedDate");
                entity.Property(e => e.SolcInvolvedCoverageId).HasColumnName("SOLC_InvolvedCoverage_Id");
                entity.Property(e => e.SolcLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOLC_LastModifiedBy");
                entity.Property(e => e.SolcLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOLC_LastModifiedDate");
                entity.Property(e => e.SolcQuantity).HasColumnName("SOLC_Quantity");
                entity.Property(e => e.SolcSalesOrderCorrectionId).HasColumnName("SOLC_SalesOrderCorrection_Id");
                entity.Property(e => e.SolcSalesOrderLineId).HasColumnName("SOLC_SalesOrderLine_Id");
                entity.Property(e => e.SolcTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SOLC_TimeStamp");
                entity.Property(e => e.SolcUnitPrice)
                    .HasColumnType("money")
                    .HasColumnName("SOLC_UnitPrice");

                entity.HasOne(d => d.SolcClient).WithMany(p => p.SalesOrderCorrectionLines)
                    .HasForeignKey(d => d.SolcClientId)
                    .HasConstraintName("FK_SalesOrderCorrectionLines_Clients");

                entity.HasOne(d => d.SolcInvolvedCoverage).WithMany(p => p.SalesOrderCorrectionLines)
                    .HasForeignKey(d => d.SolcInvolvedCoverageId)
                    .HasConstraintName("FK_SalesOrderCorrectionLines_InvolvedCoverages");

                entity.HasOne(d => d.SolcSalesOrderCorrection).WithMany(p => p.SalesOrderCorrectionLines)
                    .HasForeignKey(d => d.SolcSalesOrderCorrectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderCorrectionLines_SalesOrderCorrections");

                entity.HasOne(d => d.SolcSalesOrderLine).WithMany(p => p.SalesOrderCorrectionLines)
                    .HasForeignKey(d => d.SolcSalesOrderLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderCorrectionLines_SalesOrderLines");
            });

            modelBuilder.Entity<SalesOrderDraftApprovalSetting>(entity =>
            {
                entity.HasKey(e => e.SdasId).HasName("PK_SalesOrderDraftApprovalSetings");

                entity.ToTable("SalesOrderDraftApprovalSettings", "fin");

                entity.Property(e => e.SdasId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SDAS_Id");
                entity.Property(e => e.SdasApprovedBySystem).HasColumnName("SDAS_ApprovedBySystem");
                entity.Property(e => e.SdasClientId).HasColumnName("SDAS_Client_Id");
                entity.Property(e => e.SdasCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SDAS_CreatedBy");
                entity.Property(e => e.SdasCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SDAS_CreatedDate");
                entity.Property(e => e.SdasEffectiveDate)
                    .HasDefaultValueSql("(getutcdate())")
                    .HasColumnType("date")
                    .HasColumnName("SDAS_EffectiveDate");
                entity.Property(e => e.SdasEntrySystem)
                    .HasMaxLength(10)
                    .HasColumnName("SDAS_EntrySystem");
                entity.Property(e => e.SdasLastModifiedBy)
                    .HasMaxLength(200)
                    .HasColumnName("SDAS_LastModifiedBy");
                entity.Property(e => e.SdasLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SDAS_LastModifiedDate");
                entity.Property(e => e.SdasLegalEntityId).HasColumnName("SDAS_LegalEntity_Id");
                entity.Property(e => e.SdasTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("SDAS_TerminationDate");
                entity.Property(e => e.SdasTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SDAS_TimeStamp");

                entity.HasOne(d => d.SdasClient).WithMany(p => p.SalesOrderDraftApprovalSettings)
                    .HasForeignKey(d => d.SdasClientId)
                    .HasConstraintName("FK_SalesOrderDraftApprovalSettings_Clients");

                entity.HasOne(d => d.SdasLegalEntity).WithMany(p => p.SalesOrderDraftApprovalSettings)
                    .HasForeignKey(d => d.SdasLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderDraftApprovalSettings_LegalEntities");
            });

            modelBuilder.Entity<SalesOrderLine>(entity =>
            {
                entity.HasKey(e => e.SolId);

                entity.ToTable("SalesOrderLines", "fin");

                entity.HasIndex(e => new { e.SolSalesOrderId, e.SolIsFee, e.SolDossierWorkActivityId }, "IX_SalesOrderLines_SalesOrder_IsFee_DossierWorkActivity");

                entity.HasIndex(e => new { e.SolIsFee, e.SolDossierId }, "IX_fin_SalesOrderLines_IsFee_Dossier");

                entity.HasIndex(e => new { e.SolIsFee, e.SolDossierWorkActivityId }, "IX_fin_SalesOrderLines_IsFee_DossierWorkActivity");

                entity.Property(e => e.SolId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SOL_Id");
                entity.Property(e => e.SolAdditionalCharges)
                    .HasColumnType("money")
                    .HasColumnName("SOL_AdditionalCharges");
                entity.Property(e => e.SolCostCenterId).HasColumnName("SOL_CostCenter_Id");
                entity.Property(e => e.SolCostUnitId).HasColumnName("SOL_CostUnit_Id");
                entity.Property(e => e.SolCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOL_CreatedBy");
                entity.Property(e => e.SolCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOL_CreatedDate");
                entity.Property(e => e.SolCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("SOL_CurrencyCode");
                entity.Property(e => e.SolDebitLineNumber)
                    .HasMaxLength(36)
                    .HasColumnName("SOL_DebitLineNumber");
                entity.Property(e => e.SolDeliveryDate).HasColumnName("SOL_DeliveryDate");
                entity.Property(e => e.SolDescription)
                    .HasMaxLength(250)
                    .HasColumnName("SOL_Description");
                entity.Property(e => e.SolDiscount)
                    .HasColumnType("money")
                    .HasColumnName("SOL_Discount");
                entity.Property(e => e.SolDossierAssignmentId).HasColumnName("SOL_DossierAssignment_Id");
                entity.Property(e => e.SolDossierId).HasColumnName("SOL_Dossier_Id");
                entity.Property(e => e.SolDossierNumber)
                    .HasMaxLength(20)
                    .HasColumnName("SOL_DossierNumber");
                entity.Property(e => e.SolDossierPartyId).HasColumnName("SOL_DossierParty_Id");
                entity.Property(e => e.SolDossierWorkActivityId).HasColumnName("SOL_DossierWorkActivity_Id");
                entity.Property(e => e.SolExchangeRate).HasColumnName("SOL_ExchangeRate");
                entity.Property(e => e.SolExchangeRateId).HasColumnName("SOL_ExchangeRate_Id");
                entity.Property(e => e.SolFeeAgreementId).HasColumnName("SOL_FeeAgreement_Id");
                entity.Property(e => e.SolFeeBase)
                    .HasColumnType("money")
                    .HasColumnName("SOL_FeeBase");
                entity.Property(e => e.SolFeeRate)
                    .HasColumnType("numeric(7, 4)")
                    .HasColumnName("SOL_FeeRate");
                entity.Property(e => e.SolFeeSettlementLineId).HasColumnName("SOL_FeeSettlementLine_Id");
                entity.Property(e => e.SolFixedFee)
                    .HasColumnType("money")
                    .HasColumnName("SOL_FixedFee");
                entity.Property(e => e.SolForeignCurrencyAmount)
                    .HasColumnType("money")
                    .HasColumnName("SOL_ForeignCurrencyAmount");
                entity.Property(e => e.SolForeignCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("SOL_ForeignCurrencyCode");
                entity.Property(e => e.SolGrossAmount)
                    .HasColumnType("money")
                    .HasColumnName("SOL_GrossAmount");
                entity.Property(e => e.SolHourlyFee)
                    .HasColumnType("money")
                    .HasColumnName("SOL_HourlyFee");
                entity.Property(e => e.SolInvolvedCoverageId).HasColumnName("SOL_InvolvedCoverage_Id");
                entity.Property(e => e.SolInvolvedObjectId).HasColumnName("SOL_InvolvedObject_Id");
                entity.Property(e => e.SolInvolvedPartyId).HasColumnName("SOL_InvolvedParty_Id");
                entity.Property(e => e.SolIsCredit).HasColumnName("SOL_IsCredit");
                entity.Property(e => e.SolIsFee).HasColumnName("SOL_IsFee");
                entity.Property(e => e.SolIsTaxBeforeDiscount).HasColumnName("SOL_IsTaxBeforeDiscount");
                entity.Property(e => e.SolIsVoided).HasColumnName("SOL_IsVoided");
                entity.Property(e => e.SolJournalId)
                    .HasMaxLength(20)
                    .HasColumnName("SOL_Journal_Id");
                entity.Property(e => e.SolLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOL_LastModifiedBy");
                entity.Property(e => e.SolLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOL_LastModifiedDate");
                entity.Property(e => e.SolLedgerAccount)
                    .HasMaxLength(20)
                    .HasColumnName("SOL_LedgerAccount");
                entity.Property(e => e.SolLineNumber).HasColumnName("SOL_LineNumber");
                entity.Property(e => e.SolMaximumFee)
                    .HasColumnType("money")
                    .HasColumnName("SOL_MaximumFee");
                entity.Property(e => e.SolMinimumFee)
                    .HasColumnType("money")
                    .HasColumnName("SOL_MinimumFee");
                entity.Property(e => e.SolNetAmount)
                    .HasColumnType("money")
                    .HasColumnName("SOL_NetAmount");
                entity.Property(e => e.SolOurReference)
                    .HasMaxLength(250)
                    .HasColumnName("SOL_OurReference");
                entity.Property(e => e.SolProductDescription)
                    .HasMaxLength(250)
                    .HasColumnName("SOL_ProductDescription");
                entity.Property(e => e.SolProductId).HasColumnName("SOL_Product_Id");
                entity.Property(e => e.SolQuantity).HasColumnName("SOL_Quantity");
                entity.Property(e => e.SolSalesOrderId).HasColumnName("SOL_SalesOrder_Id");
                entity.Property(e => e.SolTaxAmount)
                    .HasColumnType("money")
                    .HasColumnName("SOL_TaxAmount");
                entity.Property(e => e.SolTaxBase)
                    .HasColumnType("money")
                    .HasColumnName("SOL_TaxBase");
                entity.Property(e => e.SolTaxCode)
                    .HasMaxLength(20)
                    .HasColumnName("SOL_TaxCode");
                entity.Property(e => e.SolTaxCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("SOL_TaxCountryCode");
                entity.Property(e => e.SolTaxExempted).HasColumnName("SOL_TaxExempted");
                entity.Property(e => e.SolTaxImport).HasColumnName("SOL_TaxImport");
                entity.Property(e => e.SolTaxRate).HasColumnName("SOL_TaxRate");
                entity.Property(e => e.SolTaxReversedCharge).HasColumnName("SOL_TaxReversedCharge");
                entity.Property(e => e.SolTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SOL_TimeStamp");
                entity.Property(e => e.SolUnitOfMeasureId)
                    .HasMaxLength(20)
                    .HasColumnName("SOL_UnitOfMeasure_Id");
                entity.Property(e => e.SolUnitPrice)
                    .HasColumnType("money")
                    .HasColumnName("SOL_UnitPrice");
                entity.Property(e => e.SolWorkingOrderId).HasColumnName("SOL_WorkingOrder_Id");
                entity.Property(e => e.SolWorkingOrderLineId).HasColumnName("SOL_WorkingOrderLine_Id");
                entity.Property(e => e.SolYourReference)
                    .HasMaxLength(250)
                    .HasColumnName("SOL_YourReference");

                entity.HasOne(d => d.SolCostCenter).WithMany(p => p.SalesOrderLines)
                    .HasForeignKey(d => d.SolCostCenterId)
                    .HasConstraintName("FK_SalesOrderLines_CostCenters");

                entity.HasOne(d => d.SolCostUnit).WithMany(p => p.SalesOrderLines)
                    .HasForeignKey(d => d.SolCostUnitId)
                    .HasConstraintName("FK_SalesOrderLines_CostUnits");

                entity.HasOne(d => d.SolDossierAssignment).WithMany(p => p.SalesOrderLines)
                    .HasForeignKey(d => d.SolDossierAssignmentId)
                    .HasConstraintName("FK_SalesOrderLines_DossierAssignments");

                entity.HasOne(d => d.SolDossier).WithMany(p => p.SalesOrderLines)
                    .HasForeignKey(d => d.SolDossierId)
                    .HasConstraintName("FK_SalesOrderLines_Dossiers");

                entity.HasOne(d => d.SolDossierParty).WithMany(p => p.SalesOrderLines)
                    .HasForeignKey(d => d.SolDossierPartyId)
                    .HasConstraintName("FK_SalesOrderLines_DossierParties");

                entity.HasOne(d => d.SolDossierWorkActivity).WithMany(p => p.SalesOrderLines)
                    .HasForeignKey(d => d.SolDossierWorkActivityId)
                    .HasConstraintName("FK_SalesOrderLines_DossierWorkActivities");

                entity.HasOne(d => d.SolExchangeRateNavigation).WithMany(p => p.SalesOrderLines)
                    .HasForeignKey(d => d.SolExchangeRateId)
                    .HasConstraintName("FK_SalesOrderLines_ExchangeRates");

                entity.HasOne(d => d.SolFeeAgreement).WithMany(p => p.SalesOrderLines)
                    .HasForeignKey(d => d.SolFeeAgreementId)
                    .HasConstraintName("FK_SalesOrderLines_FeeAgreements");

                entity.HasOne(d => d.SolFeeSettlementLine).WithMany(p => p.SalesOrderLines)
                    .HasForeignKey(d => d.SolFeeSettlementLineId)
                    .HasConstraintName("FK_SalesOrderLines_FeeSettlementLines");

                entity.HasOne(d => d.SolInvolvedCoverage).WithMany(p => p.SalesOrderLines)
                    .HasForeignKey(d => d.SolInvolvedCoverageId)
                    .HasConstraintName("FK_SalesOrderLines_InvolvedCoverages");

                entity.HasOne(d => d.SolInvolvedObject).WithMany(p => p.SalesOrderLines)
                    .HasForeignKey(d => d.SolInvolvedObjectId)
                    .HasConstraintName("FK_SalesOrderLines_InvolvedObject");

                entity.HasOne(d => d.SolJournal).WithMany(p => p.SalesOrderLines)
                    .HasForeignKey(d => d.SolJournalId)
                    .HasConstraintName("FK_SalesOrderLines_Journals");

                entity.HasOne(d => d.SolProduct).WithMany(p => p.SalesOrderLines)
                    .HasForeignKey(d => d.SolProductId)
                    .HasConstraintName("FK_SalesOrderLines_Products");

                entity.HasOne(d => d.SolSalesOrder).WithMany(p => p.SalesOrderLines)
                    .HasForeignKey(d => d.SolSalesOrderId)
                    .HasConstraintName("FK_SalesOrderLines_SalesOrders");

                entity.HasOne(d => d.SolUnitOfMeasure).WithMany(p => p.SalesOrderLines)
                    .HasForeignKey(d => d.SolUnitOfMeasureId)
                    .HasConstraintName("FK_SalesOrderLines_UnitOfMeasures");

                entity.HasOne(d => d.SolWorkingOrder).WithMany(p => p.SalesOrderLines)
                    .HasForeignKey(d => d.SolWorkingOrderId)
                    .HasConstraintName("FK_SalesOrderLines_WorkingOrders");

                entity.HasOne(d => d.SolWorkingOrderLine).WithMany(p => p.SalesOrderLines)
                    .HasForeignKey(d => d.SolWorkingOrderLineId)
                    .HasConstraintName("FK_SalesOrderLines_WorkingOrdersLine");
            });

            modelBuilder.Entity<SalesOrderLineAttribute>(entity =>
            {
                entity.HasKey(e => e.SolaId);

                entity.ToTable("SalesOrderLineAttributes", "fin");

                entity.HasIndex(e => new { e.SolaSalesOrderLineId, e.SolaAttributeName }, "IX_SalesOrderLineAttributes_SalesOrderLine_AttributeName_INCL");

                entity.Property(e => e.SolaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SOLA_Id");
                entity.Property(e => e.SolaAttributeContent)
                    .HasMaxLength(250)
                    .HasColumnName("SOLA_AttributeContent");
                entity.Property(e => e.SolaAttributeName)
                    .HasMaxLength(50)
                    .HasColumnName("SOLA_AttributeName");
                entity.Property(e => e.SolaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOLA_CreatedBy");
                entity.Property(e => e.SolaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOLA_CreatedDate");
                entity.Property(e => e.SolaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOLA_LastModifiedBy");
                entity.Property(e => e.SolaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOLA_LastModifiedDate");
                entity.Property(e => e.SolaSalesOrderLineId).HasColumnName("SOLA_SalesOrderLine_Id");
                entity.Property(e => e.SolaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SOLA_TimeStamp");

                entity.HasOne(d => d.SolaSalesOrderLine).WithMany(p => p.SalesOrderLineAttributes)
                    .HasForeignKey(d => d.SolaSalesOrderLineId)
                    .HasConstraintName("FK_SalesOrderLineAttributes_SalesOrderLines");
            });

            modelBuilder.Entity<SalesOrderLineChangesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrderLineChangesView", "fin");

                entity.Property(e => e.AssistancePlanCoverageGrossAmount).HasColumnType("money");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LicensePlate).HasMaxLength(15);
                entity.Property(e => e.SalesOrderActivityOptionId).HasMaxLength(250);
                entity.Property(e => e.SalesOrderCorrectionLineCostOfSalesAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderCorrectionLineUnitPrice).HasColumnType("money");
                entity.Property(e => e.SalesOrderGrossAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderLicensePlate).HasMaxLength(250);
                entity.Property(e => e.SalesOrderLineGrossAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderLineIsCostOfSales).HasMaxLength(250);
                entity.Property(e => e.SalesOrderLineNetAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderLineTotalAssistancePlanCoverageGrossAmount).HasMaxLength(250);
                entity.Property(e => e.SalesOrderLineUnitPrice).HasColumnType("money");
                entity.Property(e => e.SalesOrderNumber).HasMaxLength(20);
                entity.Property(e => e.SalesOrderProductId).HasMaxLength(250);
                entity.Property(e => e.SalesOrderWorkActivityId).HasMaxLength(250);
            });

            modelBuilder.Entity<SalesOrderLineChangesWithInvalidSalesInvoicesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrderLineChangesWithInvalidSalesInvoicesView", "fin");

                entity.Property(e => e.AssistancePlanCoverageGrossAmount).HasColumnType("money");
                entity.Property(e => e.ChargedExpensesInvoiceRecipientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ChargedExpensesInvoiceRecipientName).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DossierActivityOptionName).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierProductName).HasMaxLength(250);
                entity.Property(e => e.DossierWorkActivityName).HasMaxLength(250);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.FeeInvoiceRecipientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.FeeInvoiceRecipientName).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LicensePlate).HasMaxLength(15);
                entity.Property(e => e.SalesInvoiceGrossAmount).HasColumnType("money");
                entity.Property(e => e.SalesInvoiceLineGrossAmount).HasColumnType("money");
                entity.Property(e => e.SalesInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SalesOrderActivityOptionId).HasMaxLength(250);
                entity.Property(e => e.SalesOrderActivityOptionName).HasMaxLength(250);
                entity.Property(e => e.SalesOrderClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SalesOrderClientName).HasMaxLength(250);
                entity.Property(e => e.SalesOrderCorrectionLineCostOfSalesAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderCorrectionLineUnitPrice).HasColumnType("money");
                entity.Property(e => e.SalesOrderGrossAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderLicensePlate).HasMaxLength(250);
                entity.Property(e => e.SalesOrderLineGrossAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderLineIsCostOfSales).HasMaxLength(250);
                entity.Property(e => e.SalesOrderLineNetAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderLineTotalAssistancePlanCoverageGrossAmount).HasMaxLength(250);
                entity.Property(e => e.SalesOrderLineUnitPrice).HasColumnType("money");
                entity.Property(e => e.SalesOrderNumber).HasMaxLength(20);
                entity.Property(e => e.SalesOrderProductId).HasMaxLength(250);
                entity.Property(e => e.SalesOrderProductName).HasMaxLength(250);
                entity.Property(e => e.SalesOrderWorkActivityId).HasMaxLength(250);
                entity.Property(e => e.SalesOrderWorkActivityName).HasMaxLength(250);
            });

            modelBuilder.Entity<SalesOrderLineCoveragesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrderLineCoveragesView", "fin");

                entity.Property(e => e.AssistancePlanCoverageGrossAmount).HasColumnType("money");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.SalesOrderActivityOptionId).HasMaxLength(250);
                entity.Property(e => e.SalesOrderIsCostOfSales).HasMaxLength(250);
                entity.Property(e => e.SalesOrderTotalAssistancePlanCoverageGrossAmount).HasMaxLength(250);
                entity.Property(e => e.SalesOrderWorkActivityId).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SalesOrderLineDossierAssignmentChangesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrderLineDossierAssignmentChangesView", "fin");

                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.SalesOrderActivityOptionId).HasMaxLength(250);
                entity.Property(e => e.SalesOrderCorrectionLineCostOfSalesAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderCorrectionLineUnitPrice).HasColumnType("money");
                entity.Property(e => e.SalesOrderCurrentStatusCode).HasMaxLength(20);
                entity.Property(e => e.SalesOrderGrossAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderLineGrossAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderLineNetAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderLineUnitPrice).HasColumnType("money");
                entity.Property(e => e.SalesOrderNumber).HasMaxLength(20);
                entity.Property(e => e.SalesOrderProductId).HasMaxLength(250);
                entity.Property(e => e.SalesOrderWorkActivityId).HasMaxLength(250);
                entity.Property(e => e.TimeSheetQuantity).HasColumnType("numeric(38, 4)");
            });

            modelBuilder.Entity<SalesOrderLineInactiveCoveragesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrderLineInactiveCoveragesView", "fin");

                entity.Property(e => e.CoverageProductCode).HasMaxLength(10);
                entity.Property(e => e.CoverageProductName).HasMaxLength(250);
            });

            modelBuilder.Entity<SalesOrderLineInsurancePolicyChangesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrderLineInsurancePolicyChangesView", "fin");

                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.SalesOrderActivityOptionId).HasMaxLength(250);
                entity.Property(e => e.SalesOrderCorrectionLineCostOfSalesAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderCorrectionLineUnitPrice).HasColumnType("money");
                entity.Property(e => e.SalesOrderCurrentStatusCode).HasMaxLength(20);
                entity.Property(e => e.SalesOrderGrossAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderLineGrossAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderLineNetAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderLineUnitPrice).HasColumnType("money");
                entity.Property(e => e.SalesOrderNumber).HasMaxLength(20);
                entity.Property(e => e.SalesOrderProductId).HasMaxLength(250);
                entity.Property(e => e.SalesOrderWorkActivityId).HasMaxLength(250);
            });

            modelBuilder.Entity<SalesOrderLinesEntryView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrderLinesEntryView", "fin");

                entity.Property(e => e.ActivityOptionName).HasMaxLength(250);
                entity.Property(e => e.AdditionalCharges).HasColumnType("money");
                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(4000);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DebitLineNumber).HasMaxLength(36);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.Discount).HasColumnType("money");
                entity.Property(e => e.ExchangeRateAccountingDate).HasColumnType("date");
                entity.Property(e => e.ExchangeRateProviderCode).HasMaxLength(10);
                entity.Property(e => e.ExchangeRateProviderName).HasMaxLength(250);
                entity.Property(e => e.FeeAgreementName).HasMaxLength(250);
                entity.Property(e => e.FeeAgreementTypeCode).HasMaxLength(10);
                entity.Property(e => e.FeeAgreementTypeName).HasMaxLength(250);
                entity.Property(e => e.FeeBase).HasColumnType("money");
                entity.Property(e => e.FeeRate).HasColumnType("numeric(7, 4)");
                entity.Property(e => e.FixedFee).HasColumnType("money");
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.HourlyFee).HasColumnType("money");
                entity.Property(e => e.JouralName).HasMaxLength(250);
                entity.Property(e => e.JournalId).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.MaximumFee).HasColumnType("money");
                entity.Property(e => e.MinimumFee).HasColumnType("money");
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.ProductCode).HasMaxLength(20);
                entity.Property(e => e.ProductName).HasMaxLength(250);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxBase).HasColumnType("money");
                entity.Property(e => e.TaxCode).HasMaxLength(20);
                entity.Property(e => e.TaxCountryCode).HasMaxLength(3);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.TranslatedActivityOptionName).HasMaxLength(250);
                entity.Property(e => e.TranslatedProductName).HasMaxLength(250);
                entity.Property(e => e.TranslatedWorkActivityName).HasMaxLength(250);
                entity.Property(e => e.UnitPrice).HasColumnType("money");
                entity.Property(e => e.WorkActivityName).HasMaxLength(250);
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<SalesOrderLinesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrderLinesView", "fin");

                entity.Property(e => e.AdditionalCharges).HasColumnType("money");
                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DebitLineNumber).HasMaxLength(36);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.Discount).HasColumnType("money");
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierPartyName).HasMaxLength(200);
                entity.Property(e => e.FeeAgreementName).HasMaxLength(250);
                entity.Property(e => e.FeeBase).HasColumnType("money");
                entity.Property(e => e.FeeRate).HasColumnType("numeric(7, 4)");
                entity.Property(e => e.FixedFee).HasColumnType("money");
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.HourlyFee).HasColumnType("money");
                entity.Property(e => e.InvolvedPartyName).HasMaxLength(200);
                entity.Property(e => e.JournalId).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.MaximumFee).HasColumnType("money");
                entity.Property(e => e.MinimumFee).HasColumnType("money");
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.ProductName).HasMaxLength(250);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxBase).HasColumnType("money");
                entity.Property(e => e.TaxCode).HasMaxLength(20);
                entity.Property(e => e.TaxCountryCode).HasMaxLength(3);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.UnitOfMeasureId).HasMaxLength(20);
                entity.Property(e => e.UnitOfMeasureName).HasMaxLength(250);
                entity.Property(e => e.UnitPrice).HasColumnType("money");
                entity.Property(e => e.WorkActivityCode).HasMaxLength(10);
                entity.Property(e => e.WorkActivityName).HasMaxLength(250);
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<SalesOrderLinesWithAssistancePlansView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrderLinesWithAssistancePlansView", "fin");

                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(20);
                entity.Property(e => e.AssistancePlanStatusCode).HasMaxLength(10);
                entity.Property(e => e.AssistancePlanStatusName).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SalesOrderLineworkingOrderLineChangeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrderLineworkingOrderLineChangeView", "fin");

                entity.Property(e => e.SalesOrderCorrectionLineCostOfSalesAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderCorrectionLineUnitPrice).HasColumnType("money");
                entity.Property(e => e.SalesOrderCurrentStatusCode).HasMaxLength(20);
                entity.Property(e => e.SalesOrderGrossAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderLineGrossAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderLineNetAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderLineUnitPrice).HasColumnType("money");
                entity.Property(e => e.SalesOrderNumber).HasMaxLength(20);
                entity.Property(e => e.ServiceCode).HasMaxLength(10);
                entity.Property(e => e.ServiceName).HasMaxLength(250);
            });

            modelBuilder.Entity<SalesOrderNote>(entity =>
            {
                entity.HasKey(e => e.SonId);

                entity.ToTable("SalesOrderNotes", "fin");

                entity.Property(e => e.SonId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SON_Id");
                entity.Property(e => e.SonCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SON_CreatedBy");
                entity.Property(e => e.SonCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SON_CreatedDate");
                entity.Property(e => e.SonLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SON_LastModifiedBy");
                entity.Property(e => e.SonLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SON_LastModifiedDate");
                entity.Property(e => e.SonNotes).HasColumnName("SON_Notes");
                entity.Property(e => e.SonSalesOrderId).HasColumnName("SON_SalesOrder_Id");
                entity.Property(e => e.SonTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SON_TimeStamp");

                entity.HasOne(d => d.SonSalesOrder).WithMany(p => p.SalesOrderNotes)
                    .HasForeignKey(d => d.SonSalesOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderNotes_SalesOrder");
            });

            modelBuilder.Entity<SalesOrderStatus>(entity =>
            {
                entity.HasKey(e => e.SosId);

                entity.ToTable("SalesOrderStatuses", "fin");

                entity.Property(e => e.SosId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SOS_Id");
                entity.Property(e => e.SosCode)
                    .HasMaxLength(15)
                    .HasColumnName("SOS_Code");
                entity.Property(e => e.SosCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOS_CreatedBy");
                entity.Property(e => e.SosCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOS_CreatedDate");
                entity.Property(e => e.SosInactive).HasColumnName("SOS_Inactive");
                entity.Property(e => e.SosLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOS_LastModifiedBy");
                entity.Property(e => e.SosLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOS_LastModifiedDate");
                entity.Property(e => e.SosLocalizableEntryId).HasColumnName("SOS_LocalizableEntry_Id");
                entity.Property(e => e.SosLongName)
                    .HasMaxLength(250)
                    .HasColumnName("SOS_LongName");
                entity.Property(e => e.SosShortName)
                    .HasMaxLength(20)
                    .HasColumnName("SOS_ShortName");
                entity.Property(e => e.SosTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SOS_TimeStamp");

                entity.HasOne(d => d.SosLocalizableEntry).WithMany(p => p.SalesOrderStatuses)
                    .HasForeignKey(d => d.SosLocalizableEntryId)
                    .HasConstraintName("FK_SalesOrderStatuses_LocalizableEntries");
            });

            modelBuilder.Entity<SalesOrderStatusHistory>(entity =>
            {
                entity.HasKey(e => e.SoshId);

                entity.ToTable("SalesOrderStatusHistory", "fin", tb =>
                {
                    tb.HasTrigger("td_SalesOrderStatusHistory");
                    tb.HasTrigger("ti_SalesOrderStatusHistory");
                    tb.HasTrigger("tu_SalesOrderStatusHistory");
                });

                entity.HasIndex(e => new { e.SoshSalesOrderId, e.SoshSalesOrderStatusId }, "IX_fin_SalesOrderStatusHistory_SalesOrder_SalesOrderStatus_INCL");

                entity.Property(e => e.SoshId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SOSH_Id");
                entity.Property(e => e.SoshCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOSH_CreatedBy");
                entity.Property(e => e.SoshCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOSH_CreatedDate");
                entity.Property(e => e.SoshLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOSH_LastModifiedBy");
                entity.Property(e => e.SoshLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOSH_LastModifiedDate");
                entity.Property(e => e.SoshSalesOrderId).HasColumnName("SOSH_SalesOrder_Id");
                entity.Property(e => e.SoshSalesOrderStatusId).HasColumnName("SOSH_SalesOrderStatus_Id");
                entity.Property(e => e.SoshStartDate).HasColumnName("SOSH_StartDate");
                entity.Property(e => e.SoshStatusChangeReason)
                    .HasMaxLength(250)
                    .HasColumnName("SOSH_StatusChangeReason");
                entity.Property(e => e.SoshTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SOSH_TimeStamp");

                entity.HasOne(d => d.SoshSalesOrder).WithMany(p => p.SalesOrderStatusHistories)
                    .HasForeignKey(d => d.SoshSalesOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderStatusHistory_SalesOrders");

                entity.HasOne(d => d.SoshSalesOrderStatus).WithMany(p => p.SalesOrderStatusHistories)
                    .HasForeignKey(d => d.SoshSalesOrderStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderStatusHistory_SalesOrderStatuses");
            });

            modelBuilder.Entity<SalesOrderSummariesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrderSummariesView", "fin");

                entity.Property(e => e.AssignmentCreationDate).HasColumnType("date");
                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.ClientNumber)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.DepartmentName).HasMaxLength(756);
                entity.Property(e => e.DossierCreationDate).HasColumnType("date");
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LeadCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.OrderDate).HasColumnType("date");
                entity.Property(e => e.SalesInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SalesOrderStatusCode).HasMaxLength(20);
                entity.Property(e => e.SalesOrderStatusName).HasMaxLength(250);
                entity.Property(e => e.SalesOrderTypeCode).HasMaxLength(14);
                entity.Property(e => e.SalesOrderTypeName).HasMaxLength(250);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
            });

            modelBuilder.Entity<SalesOrderToAssistancePlanCoverageMapping>(entity =>
            {
                entity.HasKey(e => e.SotcId);

                entity.ToTable("SalesOrderToAssistancePlanCoverageMapping", "fin");

                entity.HasIndex(e => e.SotcAssistancePlanCoverageId, "IX_fin_SalesOrderToAssistancePlanCoverageMapping_AssistancePlanCoverage__INCL");

                entity.HasIndex(e => e.SotcSalesOrderLineId, "IX_fin_SalesOrderToAssistancePlanCoverageMapping_SalesOrderLine__INCL");

                entity.Property(e => e.SotcId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SOTC_Id");
                entity.Property(e => e.SotcAssistancePlanCoverageId).HasColumnName("SOTC_AssistancePlanCoverage_Id");
                entity.Property(e => e.SotcCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOTC_CreatedBy");
                entity.Property(e => e.SotcCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOTC_CreatedDate");
                entity.Property(e => e.SotcLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOTC_LastModifiedBy");
                entity.Property(e => e.SotcLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOTC_LastModifiedDate");
                entity.Property(e => e.SotcSalesOrderLineId).HasColumnName("SOTC_SalesOrderLine_Id");
                entity.Property(e => e.SotcTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SOTC_TimeStamp");

                entity.HasOne(d => d.SotcAssistancePlanCoverage).WithMany(p => p.SalesOrderToAssistancePlanCoverageMappings)
                    .HasForeignKey(d => d.SotcAssistancePlanCoverageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderToAssistancePlanCoverageMapping_AssistancePlanCoverages");

                entity.HasOne(d => d.SotcSalesOrderLine).WithMany(p => p.SalesOrderToAssistancePlanCoverageMappings)
                    .HasForeignKey(d => d.SotcSalesOrderLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderToAssistancePlanCoverageMapping_SalesOrderLines");
            });

            modelBuilder.Entity<SalesOrderToDossierInvolvedCoveragesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrderToDossierInvolvedCoveragesView", "fin");

                entity.Property(e => e.ChargedExpensesRecipientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ChargedExpensesRecipientName).HasMaxLength(756);
                entity.Property(e => e.ClientChamberOfCommerce).HasMaxLength(50);
                entity.Property(e => e.ClientCity).HasMaxLength(250);
                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientCountry).HasMaxLength(3);
                entity.Property(e => e.ClientEmail).HasMaxLength(250);
                entity.Property(e => e.ClientHouseNumber).HasMaxLength(261);
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.ClientPostalCode).HasMaxLength(10);
                entity.Property(e => e.ClientStreetName).HasMaxLength(250);
                entity.Property(e => e.ClientVatNumber).HasMaxLength(50);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.FeeRecipientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.FeeRecipientName).HasMaxLength(756);
                entity.Property(e => e.InsuranceCompanyName).HasMaxLength(756);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.MandateName).HasMaxLength(756);
                entity.Property(e => e.PolicyNumber).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SalesOrderToInvolvedCoveragesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrderToInvolvedCoveragesView", "fin");

                entity.Property(e => e.ChargedExpensesRecipientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ChargedExpensesRecipientName).HasMaxLength(756);
                entity.Property(e => e.ClientChamberOfCommerce).HasMaxLength(50);
                entity.Property(e => e.ClientCity).HasMaxLength(250);
                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientCountry).HasMaxLength(3);
                entity.Property(e => e.ClientEmail).HasMaxLength(250);
                entity.Property(e => e.ClientHouseNumber).HasMaxLength(261);
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.ClientPostalCode).HasMaxLength(10);
                entity.Property(e => e.ClientStreetName).HasMaxLength(250);
                entity.Property(e => e.ClientVatNumber).HasMaxLength(50);
                entity.Property(e => e.CoverageProductCode).HasMaxLength(10);
                entity.Property(e => e.CovergeProductName).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.FeeRecipientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.FeeRecipientName).HasMaxLength(756);
                entity.Property(e => e.FeeSettlementName).HasMaxLength(50);
                entity.Property(e => e.InsuranceCompanyName).HasMaxLength(756);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.MandateName).HasMaxLength(756);
                entity.Property(e => e.PolicyNumber).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SalesOrderToPurchaseInvoiceLineMappingsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrderToPurchaseInvoiceLineMappingsView", "fin");

                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientName).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditorName).HasMaxLength(250);
                entity.Property(e => e.CreditorNumber).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.ProductCode).HasMaxLength(20);
                entity.Property(e => e.ProductName).HasMaxLength(250);
                entity.Property(e => e.PurchaseInvoiceLineGrossAmount).HasColumnType("money");
                entity.Property(e => e.PurchaseInvoiceLineNetAmount).HasColumnType("money");
                entity.Property(e => e.PurchaseInvoiceLineTaxAmount).HasColumnType("money");
                entity.Property(e => e.PurchaseInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SalesOrderGrossAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderLineGrossAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderLineNetAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderLineTaxAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderNetAmount).HasColumnType("money");
                entity.Property(e => e.SalesOrderNumber).HasMaxLength(20);
                entity.Property(e => e.SalesOrderTaxAmount).HasColumnType("money");
                entity.Property(e => e.ServiceCode).HasMaxLength(10);
                entity.Property(e => e.ServiceName).HasMaxLength(250);
                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SupplierName).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SalesOrderToPurchaseInvoicesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrderToPurchaseInvoicesView", "fin");

                entity.Property(e => e.AuthorizedBy).HasMaxLength(250);
                entity.Property(e => e.ConvertedGrossAmount).HasColumnType("money");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.ExchangeRateAccountingDate).HasColumnType("date");
                entity.Property(e => e.ExchangeRateProviderName).HasMaxLength(250);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.OnNameOfCed).HasColumnName("OnNameOfCED");
                entity.Property(e => e.PaymentCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.PaymentDate).HasColumnType("date");
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SalesOrderToPurchaseMapping>(entity =>
            {
                entity.HasKey(e => e.SotpId);

                entity.ToTable("SalesOrderToPurchaseMapping", "fin");

                entity.HasIndex(e => e.SotpSalesOrderLineId, "IX_fin_SalesOrderToPurchaseMapping_SalesOrderLine__INCL");

                entity.HasIndex(e => e.SotpPurchaseInvoiceLineId, "SalesOrderToPurchaseMapping_PurchaseInvoiceLine_Id_INCL");

                entity.Property(e => e.SotpId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SOTP_Id");
                entity.Property(e => e.SotpCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOTP_CreatedBy");
                entity.Property(e => e.SotpCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOTP_CreatedDate");
                entity.Property(e => e.SotpLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOTP_LastModifiedBy");
                entity.Property(e => e.SotpLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOTP_LastModifiedDate");
                entity.Property(e => e.SotpPurchaseInvoiceLineId).HasColumnName("SOTP_PurchaseInvoiceLine_Id");
                entity.Property(e => e.SotpSalesOrderLineId).HasColumnName("SOTP_SalesOrderLine_Id");
                entity.Property(e => e.SotpTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SOTP_TimeStamp");

                entity.HasOne(d => d.SotpPurchaseInvoiceLine).WithMany(p => p.SalesOrderToPurchaseMappings)
                    .HasForeignKey(d => d.SotpPurchaseInvoiceLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderToPurchaseMapping_PurchaseInvoiceLines");

                entity.HasOne(d => d.SotpSalesOrderLine).WithMany(p => p.SalesOrderToPurchaseMappings)
                    .HasForeignKey(d => d.SotpSalesOrderLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderToPurchaseMapping_SalesOrderLines");
            });

            modelBuilder.Entity<SalesOrderToPurchaseMappingView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrderToPurchaseMappingView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
            });

            modelBuilder.Entity<SalesOrderToPurchaseOrdersView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrderToPurchaseOrdersView", "fin");

                entity.Property(e => e.AssistancePlanNumber).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.OnNameOfCed).HasColumnName("OnNameOfCED");
                entity.Property(e => e.OrderNumber).HasMaxLength(10);
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SalesOrderToTimeSheetMapping>(entity =>
            {
                entity.HasKey(e => e.SotmId);

                entity.ToTable("SalesOrderToTimeSheetMapping", "fin");

                entity.Property(e => e.SotmId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SOTM_Id");
                entity.Property(e => e.SotmConversionRate)
                    .HasDefaultValueSql("((1))")
                    .HasColumnType("numeric(10, 4)")
                    .HasColumnName("SOTM_ConversionRate");
                entity.Property(e => e.SotmCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOTM_CreatedBy");
                entity.Property(e => e.SotmCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOTM_CreatedDate");
                entity.Property(e => e.SotmLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOTM_LastModifiedBy");
                entity.Property(e => e.SotmLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOTM_LastModifiedDate");
                entity.Property(e => e.SotmQuantity)
                    .HasColumnType("numeric(10, 4)")
                    .HasColumnName("SOTM_Quantity");
                entity.Property(e => e.SotmSalesOrderLineId).HasColumnName("SOTM_SalesOrderLine_Id");
                entity.Property(e => e.SotmTimeSheetId).HasColumnName("SOTM_TimeSheet_Id");
                entity.Property(e => e.SotmTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SOTM_TimeStamp");
                entity.Property(e => e.SotmUnitOfMeasureId)
                    .HasMaxLength(20)
                    .HasColumnName("SOTM_UnitOfMeasure_Id");

                entity.HasOne(d => d.SotmSalesOrderLine).WithMany(p => p.SalesOrderToTimeSheetMappings)
                    .HasForeignKey(d => d.SotmSalesOrderLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderToTimeSheetMapping_SalesOrderLines");

                entity.HasOne(d => d.SotmTimeSheet).WithMany(p => p.SalesOrderToTimeSheetMappings)
                    .HasForeignKey(d => d.SotmTimeSheetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderToTimeSheetMapping_TimeSheets");

                entity.HasOne(d => d.SotmUnitOfMeasure).WithMany(p => p.SalesOrderToTimeSheetMappings)
                    .HasForeignKey(d => d.SotmUnitOfMeasureId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderToTimeSheetMapping_UnitOfMeasures");
            });

            modelBuilder.Entity<SalesOrderToWorkingOrderLineCoverageMapping>(entity =>
            {
                entity.HasKey(e => e.SotwcId).HasName("PK__SalesOrd__57929FDC249FB291");

                entity.ToTable("SalesOrderToWorkingOrderLineCoverageMapping", "fin");

                entity.HasIndex(e => e.SotwcSalesOrderLineId, "IX_fin_SalesOrderToWorkingOrderLineCostCoverageMapping_SalesOrderLine__INCL");

                entity.HasIndex(e => e.SotwcWorkingOrderLineCoverageId, "IX_fin_SalesOrderToWorkingOrderLineCoverageMapping_WorkingOrderLineCoverage__INCL");

                entity.Property(e => e.SotwcId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SOTWC_Id");
                entity.Property(e => e.SotwcCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOTWC_CreatedBy");
                entity.Property(e => e.SotwcCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOTWC_CreatedDate");
                entity.Property(e => e.SotwcLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOTWC_LastModifiedBy");
                entity.Property(e => e.SotwcLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOTWC_LastModifiedDate");
                entity.Property(e => e.SotwcSalesOrderLineId).HasColumnName("SOTWC_SalesOrderLine_Id");
                entity.Property(e => e.SotwcTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SOTWC_TimeStamp");
                entity.Property(e => e.SotwcWorkingOrderLineCoverageId).HasColumnName("SOTWC_WorkingOrderLineCoverage_Id");

                entity.HasOne(d => d.SotwcSalesOrderLine).WithMany(p => p.SalesOrderToWorkingOrderLineCoverageMappings)
                    .HasForeignKey(d => d.SotwcSalesOrderLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderToWorkingOrderLineCoverageMapping_SalesOrderLines");

                entity.HasOne(d => d.SotwcWorkingOrderLineCoverage).WithMany(p => p.SalesOrderToWorkingOrderLineCoverageMappings)
                    .HasForeignKey(d => d.SotwcWorkingOrderLineCoverageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderToWorkingOrderLineCoverageMapping_WorkingOrderLineCoverages");
            });

            modelBuilder.Entity<SalesOrderType>(entity =>
            {
                entity.HasKey(e => e.SotId);

                entity.ToTable("SalesOrderTypes", "fin");

                entity.Property(e => e.SotId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SOT_Id");
                entity.Property(e => e.SotCode)
                    .HasMaxLength(10)
                    .HasColumnName("SOT_Code");
                entity.Property(e => e.SotCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOT_CreatedBy");
                entity.Property(e => e.SotCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOT_CreatedDate");
                entity.Property(e => e.SotInactive).HasColumnName("SOT_Inactive");
                entity.Property(e => e.SotLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SOT_LastModifiedBy");
                entity.Property(e => e.SotLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SOT_LastModifiedDate");
                entity.Property(e => e.SotLocalizableEntryId).HasColumnName("SOT_LocalizableEntry_Id");
                entity.Property(e => e.SotLongName)
                    .HasMaxLength(250)
                    .HasColumnName("SOT_LongName");
                entity.Property(e => e.SotShortName)
                    .HasMaxLength(20)
                    .HasColumnName("SOT_ShortName");
                entity.Property(e => e.SotTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SOT_TimeStamp");

                entity.HasOne(d => d.SotLocalizableEntry).WithMany(p => p.SalesOrderTypes)
                    .HasForeignKey(d => d.SotLocalizableEntryId)
                    .HasConstraintName("FK_SalesOrderTypes_LocalizableEntries");
            });

            modelBuilder.Entity<SalesOrdersAcceptedView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrdersAcceptedView", "fin");

                entity.Property(e => e.ClientChamberOfCommerceNumber).HasMaxLength(50);
                entity.Property(e => e.ClientCity).HasMaxLength(250);
                entity.Property(e => e.ClientCountryCode).HasMaxLength(3);
                entity.Property(e => e.ClientEmail).HasMaxLength(250);
                entity.Property(e => e.ClientHouseNo).HasMaxLength(10);
                entity.Property(e => e.ClientHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.ClientNumber)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientPhone).HasMaxLength(20);
                entity.Property(e => e.ClientPostalCode).HasMaxLength(10);
                entity.Property(e => e.ClientProvince).HasMaxLength(250);
                entity.Property(e => e.ClientStreetName).HasMaxLength(250);
                entity.Property(e => e.ClientVatNumber).HasMaxLength(50);
                entity.Property(e => e.ClientWebsite).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DebitEntryNumber).HasMaxLength(36);
                entity.Property(e => e.DebtorCity).HasMaxLength(250);
                entity.Property(e => e.DebtorCountryCode).HasMaxLength(3);
                entity.Property(e => e.DebtorHouseNo).HasMaxLength(10);
                entity.Property(e => e.DebtorHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.DebtorIban).HasMaxLength(34);
                entity.Property(e => e.DebtorName).HasMaxLength(250);
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.DebtorPostalCode).HasMaxLength(10);
                entity.Property(e => e.DebtorStreetName).HasMaxLength(250);
                entity.Property(e => e.DebtorVatNumber).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.Discount).HasColumnType("money");
                entity.Property(e => e.DossierAssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierPartyName).HasMaxLength(200);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LeadCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PaymentConditionCode).HasMaxLength(10);
                entity.Property(e => e.PaymentConditionName).HasMaxLength(250);
                entity.Property(e => e.PaymentReference).HasMaxLength(250);
                entity.Property(e => e.SalesOrderStatusCode).HasMaxLength(20);
                entity.Property(e => e.SalesOrderStatusName).HasMaxLength(20);
                entity.Property(e => e.SalesOrderTypeCode).HasMaxLength(10);
                entity.Property(e => e.SalesOrderTypeName).HasMaxLength(250);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxExemptedAmount).HasColumnType("money");
                entity.Property(e => e.TaxImportAmount).HasColumnType("money");
                entity.Property(e => e.TaxResversedChargeAmount).HasColumnType("money");
                entity.Property(e => e.TenantName).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<SalesOrdersEntryView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrdersEntryView", "fin");

                entity.Property(e => e.ClientChamberOfCommerceNumber).HasMaxLength(50);
                entity.Property(e => e.ClientCity).HasMaxLength(250);
                entity.Property(e => e.ClientCountryCode).HasMaxLength(3);
                entity.Property(e => e.ClientEmail).HasMaxLength(250);
                entity.Property(e => e.ClientHouseNo).HasMaxLength(10);
                entity.Property(e => e.ClientHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.ClientNumber)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientPhone).HasMaxLength(20);
                entity.Property(e => e.ClientPostalCode).HasMaxLength(10);
                entity.Property(e => e.ClientProvince).HasMaxLength(250);
                entity.Property(e => e.ClientStreetName).HasMaxLength(250);
                entity.Property(e => e.ClientVatNumber).HasMaxLength(50);
                entity.Property(e => e.ClientWebsite).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DebitEntryNumber).HasMaxLength(36);
                entity.Property(e => e.DebtorChamberOfCommerceNumber).HasMaxLength(50);
                entity.Property(e => e.DebtorCity).HasMaxLength(250);
                entity.Property(e => e.DebtorCountryCode).HasMaxLength(3);
                entity.Property(e => e.DebtorHouseNo).HasMaxLength(10);
                entity.Property(e => e.DebtorHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.DebtorIban).HasMaxLength(34);
                entity.Property(e => e.DebtorName).HasMaxLength(250);
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.DebtorPostalCode).HasMaxLength(10);
                entity.Property(e => e.DebtorStreetName).HasMaxLength(250);
                entity.Property(e => e.DebtorVatNumber).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.Discount).HasColumnType("money");
                entity.Property(e => e.DossierAssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierPartyName).HasMaxLength(200);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.ExchangeRateAccountingDate).HasColumnType("date");
                entity.Property(e => e.ExchangeRateProviderCode).HasMaxLength(10);
                entity.Property(e => e.ExchangeRateProviderName).HasMaxLength(250);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LeadCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PaymentConditionCode).HasMaxLength(10);
                entity.Property(e => e.PaymentConditionName).HasMaxLength(250);
                entity.Property(e => e.PaymentReference).HasMaxLength(250);
                entity.Property(e => e.SalesOrderStatusCode).HasMaxLength(20);
                entity.Property(e => e.SalesOrderStatusName).HasMaxLength(250);
                entity.Property(e => e.SalesOrderTypeCode).HasMaxLength(10);
                entity.Property(e => e.SalesOrderTypeName).HasMaxLength(250);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxCountryCode).HasMaxLength(3);
                entity.Property(e => e.TaxExemptedAmount).HasColumnType("money");
                entity.Property(e => e.TaxImportAmount).HasColumnType("money");
                entity.Property(e => e.TaxResversedChargeAmount).HasColumnType("money");
                entity.Property(e => e.TenantName).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<SalesOrdersIncompleteView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrdersIncompleteView", "ux");

                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.ClientNumber)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DebitEntryNumber).HasMaxLength(36);
                entity.Property(e => e.DebtorName).HasMaxLength(250);
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.Discount).HasColumnType("money");
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierPartyName).HasMaxLength(200);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.IncompleteReason).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LeadCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PaymentReference).HasMaxLength(250);
                entity.Property(e => e.SalesOrderStatusCode).HasMaxLength(20);
                entity.Property(e => e.SalesOrderStatusName).HasMaxLength(20);
                entity.Property(e => e.SalesOrderTypeCode).HasMaxLength(10);
                entity.Property(e => e.SalesOrderTypeName).HasMaxLength(250);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxExemptedAmount).HasColumnType("money");
                entity.Property(e => e.TaxImportAmount).HasColumnType("money");
                entity.Property(e => e.TaxResversedChargeAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<SalesOrdersNewView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrdersNewView", "fin");

                entity.Property(e => e.ApprovalComment).HasMaxLength(250);
                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.ClientNumber)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DebitEntryNumber).HasMaxLength(36);
                entity.Property(e => e.DebtorName).HasMaxLength(250);
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.Discount).HasColumnType("money");
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierPartyName).HasMaxLength(200);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LeadCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.NonSelectableReason)
                    .HasMaxLength(51)
                    .IsUnicode(false);
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PaymentReference).HasMaxLength(250);
                entity.Property(e => e.PurchaseInvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.SalesOrdeType).HasMaxLength(10);
                entity.Property(e => e.SalesOrderStatusCode).HasMaxLength(20);
                entity.Property(e => e.SalesOrderStatusName).HasMaxLength(250);
                entity.Property(e => e.SelectedBy).HasMaxLength(250);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxExemptedAmount).HasColumnType("money");
                entity.Property(e => e.TaxImportAmount).HasColumnType("money");
                entity.Property(e => e.TaxResversedChargeAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<SalesOrdersPendingInvestigationView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrdersPendingInvestigationView", "fin");

                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.ClientNumber)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DebitEntryNumber).HasMaxLength(36);
                entity.Property(e => e.DebtorName).HasMaxLength(250);
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.Discount).HasColumnType("money");
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierPartyName).HasMaxLength(200);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LeadCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PaymentReference).HasMaxLength(250);
                entity.Property(e => e.SalesOrderStatusCode).HasMaxLength(20);
                entity.Property(e => e.SalesOrderStatusName).HasMaxLength(20);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxExemptedAmount).HasColumnType("money");
                entity.Property(e => e.TaxImportAmount).HasColumnType("money");
                entity.Property(e => e.TaxResversedChargeAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<SalesOrdersPendingInvoiceView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrdersPendingInvoiceView", "fin");

                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.ClientNumber)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DebitEntryNumber).HasMaxLength(36);
                entity.Property(e => e.DebtorName).HasMaxLength(250);
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.Discount).HasColumnType("money");
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierPartyName).HasMaxLength(200);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LeadCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PaymentReference).HasMaxLength(250);
                entity.Property(e => e.SalesOrderStatusCode).HasMaxLength(20);
                entity.Property(e => e.SalesOrderStatusName).HasMaxLength(20);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxExemptedAmount).HasColumnType("money");
                entity.Property(e => e.TaxImportAmount).HasColumnType("money");
                entity.Property(e => e.TaxResversedChargeAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<SalesOrdersPendingProcessSingleInvoiceView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrdersPendingProcessSingleInvoiceView", "fin");

                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.ClientNumber)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DebitEntryNumber).HasMaxLength(36);
                entity.Property(e => e.DebtorName).HasMaxLength(250);
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.Discount).HasColumnType("money");
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierPartyName).HasMaxLength(200);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LeadCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PaymentReference).HasMaxLength(250);
                entity.Property(e => e.SalesOrderStatusCode).HasMaxLength(20);
                entity.Property(e => e.SalesOrderStatusName).HasMaxLength(20);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxExemptedAmount).HasColumnType("money");
                entity.Property(e => e.TaxImportAmount).HasColumnType("money");
                entity.Property(e => e.TaxResversedChargeAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<SalesOrdersPendingSingleSalesInvoiceInfo>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrdersPendingSingleSalesInvoiceInfo", "ux");

                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientName).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.OrderDate).HasColumnType("date");
                entity.Property(e => e.OrderNumber).HasMaxLength(20);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
            });

            modelBuilder.Entity<SalesOrdersPendingSingleSalesInvoiceView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrdersPendingSingleSalesInvoiceView", "fin");

                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientName).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.OrderDate).HasColumnType("date");
                entity.Property(e => e.OrderNumber).HasMaxLength(20);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
            });

            modelBuilder.Entity<SalesOrdersReadyForInvoicingView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrdersReadyForInvoicingView", "fin");

                entity.Property(e => e.CurrentStatusCode).HasMaxLength(20);
            });

            modelBuilder.Entity<SalesOrdersRejectedView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrdersRejectedView", "fin");

                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.ClientNumber)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DebitEntryNumber).HasMaxLength(36);
                entity.Property(e => e.DebtorName).HasMaxLength(250);
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.Discount).HasColumnType("money");
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierPartyName).HasMaxLength(200);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LeadCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PaymentReference).HasMaxLength(250);
                entity.Property(e => e.SalesOrderStatusCode).HasMaxLength(20);
                entity.Property(e => e.SalesOrderStatusName).HasMaxLength(20);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxExemptedAmount).HasColumnType("money");
                entity.Property(e => e.TaxImportAmount).HasColumnType("money");
                entity.Property(e => e.TaxResversedChargeAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<SalesOrdersView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrdersView", "fin");

                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.ClientChamberOfCommerceNumber).HasMaxLength(50);
                entity.Property(e => e.ClientCity).HasMaxLength(250);
                entity.Property(e => e.ClientCountryCode).HasMaxLength(3);
                entity.Property(e => e.ClientEmail).HasMaxLength(250);
                entity.Property(e => e.ClientHouseNo).HasMaxLength(10);
                entity.Property(e => e.ClientHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.ClientNumber)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientPhone).HasMaxLength(20);
                entity.Property(e => e.ClientPostalCode).HasMaxLength(10);
                entity.Property(e => e.ClientProvince).HasMaxLength(250);
                entity.Property(e => e.ClientStreetName).HasMaxLength(250);
                entity.Property(e => e.ClientVatNumber).HasMaxLength(50);
                entity.Property(e => e.ClientWebsite).HasMaxLength(250);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DebitEntryNumber).HasMaxLength(36);
                entity.Property(e => e.DebtorChamberOfCommerceNumber).HasMaxLength(50);
                entity.Property(e => e.DebtorCity).HasMaxLength(250);
                entity.Property(e => e.DebtorCountryCode).HasMaxLength(3);
                entity.Property(e => e.DebtorEmail).HasMaxLength(250);
                entity.Property(e => e.DebtorHouseNo).HasMaxLength(10);
                entity.Property(e => e.DebtorHouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.DebtorIban).HasMaxLength(34);
                entity.Property(e => e.DebtorName).HasMaxLength(250);
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.DebtorPostalCode).HasMaxLength(10);
                entity.Property(e => e.DebtorProvince).HasMaxLength(250);
                entity.Property(e => e.DebtorStreetName).HasMaxLength(250);
                entity.Property(e => e.DebtorVatNumber).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.Discount).HasColumnType("money");
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierPartyName).HasMaxLength(200);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LeadCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(756);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.OriginalSalesOrderNumber).HasMaxLength(20);
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.OwnRiskAmount).HasColumnType("money");
                entity.Property(e => e.OwnRiskNumber).HasMaxLength(20);
                entity.Property(e => e.PayableAmount).HasColumnType("money");
                entity.Property(e => e.PaymentConditionCode).HasMaxLength(10);
                entity.Property(e => e.PaymentConditionName).HasMaxLength(250);
                entity.Property(e => e.PaymentReference).HasMaxLength(250);
                entity.Property(e => e.SalesOrderStatusCode).HasMaxLength(20);
                entity.Property(e => e.SalesOrderStatusName).HasMaxLength(250);
                entity.Property(e => e.SalesOrderTypeCode).HasMaxLength(10);
                entity.Property(e => e.SalesOrderTypeName).HasMaxLength(250);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxExemptedAmount).HasColumnType("money");
                entity.Property(e => e.TaxImportAmount).HasColumnType("money");
                entity.Property(e => e.TaxReversedChargeAmount).HasColumnType("money");
                entity.Property(e => e.TenantName).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VatDeductableAmount).HasColumnType("money");
                entity.Property(e => e.VatNumber).HasMaxLength(20);
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<SalesOrdersWaitingView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesOrdersWaitingView", "fin");

                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.ClientNumber)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DebitEntryNumber).HasMaxLength(36);
                entity.Property(e => e.DebtorName).HasMaxLength(250);
                entity.Property(e => e.DebtorNumber).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.Discount).HasColumnType("money");
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierPartyName).HasMaxLength(200);
                entity.Property(e => e.EntryBatch).HasMaxLength(36);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LeadCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.Number).HasMaxLength(20);
                entity.Property(e => e.OurReference).HasMaxLength(250);
                entity.Property(e => e.PaymentReference).HasMaxLength(250);
                entity.Property(e => e.SalesOrderStatusCode).HasMaxLength(20);
                entity.Property(e => e.SalesOrderStatusName).HasMaxLength(20);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxExemptedAmount).HasColumnType("money");
                entity.Property(e => e.TaxImportAmount).HasColumnType("money");
                entity.Property(e => e.TaxResversedChargeAmount).HasColumnType("money");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.YourReference).HasMaxLength(250);
            });

            modelBuilder.Entity<SalesPayment>(entity =>
            {
                entity.HasKey(e => e.SipId);

                entity.ToTable("SalesPayments", "fin");

                entity.Property(e => e.SipId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SIP_Id");
                entity.Property(e => e.SipBankStatementLineId).HasColumnName("SIP_BankStatementLine_Id");
                entity.Property(e => e.SipCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SIP_CreatedBy");
                entity.Property(e => e.SipCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SIP_CreatedDate");
                entity.Property(e => e.SipCurrentStatusCode)
                    .HasMaxLength(20)
                    .HasColumnName("SIP_CurrentStatusCode");
                entity.Property(e => e.SipCurrentStatusHistoryId).HasColumnName("SIP_CurrentStatusHistory_Id");
                entity.Property(e => e.SipCurrentStatusHistoryStartDate).HasColumnName("SIP_CurrentStatusHistoryStartDate");
                entity.Property(e => e.SipLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SIP_LastModifiedBy");
                entity.Property(e => e.SipLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SIP_LastModifiedDate");
                entity.Property(e => e.SipPaymentValue)
                    .HasColumnType("money")
                    .HasColumnName("SIP_PaymentValue");
                entity.Property(e => e.SipSalesInvoiceId).HasColumnName("SIP_SalesInvoice_Id");
                entity.Property(e => e.SipTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SIP_TimeStamp");

                entity.HasOne(d => d.SipBankStatementLine).WithMany(p => p.SalesPayments)
                    .HasForeignKey(d => d.SipBankStatementLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesPayments_BankStatementLines");

                entity.HasOne(d => d.SipSalesInvoice).WithMany(p => p.SalesPayments)
                    .HasForeignKey(d => d.SipSalesInvoiceId)
                    .HasConstraintName("FK_SalesPayments_SalesInvoices");
            });

            modelBuilder.Entity<SalesPaymentStatus>(entity =>
            {
                entity.HasKey(e => e.SpsId);

                entity.ToTable("SalesPaymentStatuses", "fin");

                entity.Property(e => e.SpsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SPS_Id");
                entity.Property(e => e.SpsCode)
                    .HasMaxLength(10)
                    .HasColumnName("SPS_Code");
                entity.Property(e => e.SpsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SPS_CreatedBy");
                entity.Property(e => e.SpsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SPS_CreatedDate");
                entity.Property(e => e.SpsInactive).HasColumnName("SPS_Inactive");
                entity.Property(e => e.SpsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SPS_LastModifiedBy");
                entity.Property(e => e.SpsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SPS_LastModifiedDate");
                entity.Property(e => e.SpsLocalizableEntryId).HasColumnName("SPS_LocalizableEntry_Id");
                entity.Property(e => e.SpsLongName)
                    .HasMaxLength(250)
                    .HasColumnName("SPS_LongName");
                entity.Property(e => e.SpsShortName)
                    .HasMaxLength(20)
                    .HasColumnName("SPS_ShortName");
                entity.Property(e => e.SpsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SPS_TimeStamp");

                entity.HasOne(d => d.SpsLocalizableEntry).WithMany(p => p.SalesPaymentStatuses)
                    .HasForeignKey(d => d.SpsLocalizableEntryId)
                    .HasConstraintName("FK_SalesPaymentStatuses_LocalizableEntries");
            });

            modelBuilder.Entity<SalesPaymentStatusHistory>(entity =>
            {
                entity.HasKey(e => e.SphId);

                entity.ToTable("SalesPaymentStatusHistory", "fin", tb =>
                {
                    tb.HasTrigger("td_SalesPaymentStatusHistory");
                    tb.HasTrigger("ti_SalesPaymentStatusHistory");
                    tb.HasTrigger("tu_SalesPaymentStatusHistory");
                });

                entity.Property(e => e.SphId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SPH_Id");
                entity.Property(e => e.SphCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SPH_CreatedBy");
                entity.Property(e => e.SphCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SPH_CreatedDate");
                entity.Property(e => e.SphLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SPH_LastModifiedBy");
                entity.Property(e => e.SphLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SPH_LastModifiedDate");
                entity.Property(e => e.SphSalesPaymentId).HasColumnName("SPH_SalesPayment_Id");
                entity.Property(e => e.SphSalesPaymentStatusId).HasColumnName("SPH_SalesPaymentStatus_Id");
                entity.Property(e => e.SphStartDate).HasColumnName("SPH_StartDate");
                entity.Property(e => e.SphTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SPH_TimeStamp");

                entity.HasOne(d => d.SphSalesPayment).WithMany(p => p.SalesPaymentStatusHistories)
                    .HasForeignKey(d => d.SphSalesPaymentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesPaymentStatusHistory_SalesPayments");

                entity.HasOne(d => d.SphSalesPaymentStatus).WithMany(p => p.SalesPaymentStatusHistories)
                    .HasForeignKey(d => d.SphSalesPaymentStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesPaymentStatusHistory_SalesPaymentStatuses");
            });

            modelBuilder.Entity<SalesPaymentsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SalesPaymentsView", "fin");

                entity.Property(e => e.BankAccountNumber).HasMaxLength(34);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreditorNumber).HasMaxLength(10);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.DebtorNumber).HasMaxLength(10);
                entity.Property(e => e.EntryNumber).HasMaxLength(36);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.InvoiceNumber).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.Notes).HasMaxLength(500);
                entity.Property(e => e.PaymentDate).HasColumnType("date");
                entity.Property(e => e.PaymentStatus).HasMaxLength(10);
                entity.Property(e => e.PaymentValue).HasColumnType("money");
                entity.Property(e => e.RemittanceInformation).HasMaxLength(500);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SalesSettlement>(entity =>
            {
                entity.HasKey(e => e.SstId);

                entity.ToTable("SalesSettlements", "mdm");

                entity.Property(e => e.SstId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SST_Id");
                entity.Property(e => e.SstClientId).HasColumnName("SST_Client_Id");
                entity.Property(e => e.SstContractNumber)
                    .HasMaxLength(50)
                    .HasColumnName("SST_ContractNumber");
                entity.Property(e => e.SstCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SST_CreatedBy");
                entity.Property(e => e.SstCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SST_CreatedDate");
                entity.Property(e => e.SstDiscountCode)
                    .HasMaxLength(50)
                    .HasColumnName("SST_DiscountCode");
                entity.Property(e => e.SstEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("SST_EffectiveDate");
                entity.Property(e => e.SstEntrySystem)
                    .HasMaxLength(10)
                    .HasColumnName("SST_EntrySystem");
                entity.Property(e => e.SstLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SST_LastModifiedBy");
                entity.Property(e => e.SstLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SST_LastModifiedDate");
                entity.Property(e => e.SstLegalEntityId).HasColumnName("SST_LegalEntity_Id");
                entity.Property(e => e.SstSettlementName)
                    .HasMaxLength(50)
                    .HasColumnName("SST_SettlementName");
                entity.Property(e => e.SstTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("SST_TerminationDate");
                entity.Property(e => e.SstTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SST_TimeStamp");

                entity.HasOne(d => d.SstClient).WithMany(p => p.SalesSettlements)
                    .HasForeignKey(d => d.SstClientId)
                    .HasConstraintName("FK_SalesSettlements_Clients");

                entity.HasOne(d => d.SstLegalEntity).WithMany(p => p.SalesSettlements)
                    .HasForeignKey(d => d.SstLegalEntityId)
                    .HasConstraintName("FK_SalesSettlements_LegalEntities");
            });

            modelBuilder.Entity<SalesSettlementLine>(entity =>
            {
                entity.HasKey(e => e.StlId);

                entity.ToTable("SalesSettlementLines", "mdm");

                entity.Property(e => e.StlId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("STL_Id");
                entity.Property(e => e.StlCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("STL_CreatedBy");
                entity.Property(e => e.StlCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("STL_CreatedDate");
                entity.Property(e => e.StlEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("STL_EffectiveDate");
                entity.Property(e => e.StlLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("STL_LastModifiedBy");
                entity.Property(e => e.StlLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("STL_LastModifiedDate");
                entity.Property(e => e.StlLineNumber).HasColumnName("STL_LineNumber");
                entity.Property(e => e.StlProductId).HasColumnName("STL_Product_Id");
                entity.Property(e => e.StlSalesAgreementId).HasColumnName("STL_SalesAgreement_Id");
                entity.Property(e => e.StlSalesSettlementId).HasColumnName("STL_SalesSettlement_Id");
                entity.Property(e => e.StlServiceId).HasColumnName("STL_Service_Id");
                entity.Property(e => e.StlTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("STL_TerminationDate");
                entity.Property(e => e.StlTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("STL_TimeStamp");

                entity.HasOne(d => d.StlProduct).WithMany(p => p.SalesSettlementLines)
                    .HasForeignKey(d => d.StlProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesSettlementLines_Products");

                entity.HasOne(d => d.StlSalesAgreement).WithMany(p => p.SalesSettlementLines)
                    .HasForeignKey(d => d.StlSalesAgreementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesSettlementLines_SalesAgreements");

                entity.HasOne(d => d.StlSalesSettlement).WithMany(p => p.SalesSettlementLines)
                    .HasForeignKey(d => d.StlSalesSettlementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesSettlementLines_SalesSettlements");

                entity.HasOne(d => d.StlService).WithMany(p => p.SalesSettlementLines)
                    .HasForeignKey(d => d.StlServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesSettlementLines_Services");
            });

            modelBuilder.Entity<SalesTaxCode>(entity =>
            {
                entity.HasKey(e => e.StcId);

                entity.ToTable("SalesTaxCodes", "vat");

                entity.HasIndex(e => e.StcClientId, "IX_vat_SalesTaxCodes_Client__INCL");

                entity.Property(e => e.StcId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("STC_Id");
                entity.Property(e => e.StcClientId).HasColumnName("STC_Client_Id");
                entity.Property(e => e.StcCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("STC_CreatedBy");
                entity.Property(e => e.StcCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("STC_CreatedDate");
                entity.Property(e => e.StcEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("STC_EffectiveDate");
                entity.Property(e => e.StcLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("STC_LastModifiedBy");
                entity.Property(e => e.StcLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("STC_LastModifiedDate");
                entity.Property(e => e.StcLegalEntityId).HasColumnName("STC_LegalEntity_Id");
                entity.Property(e => e.StcTaxCodeId)
                    .HasMaxLength(20)
                    .HasColumnName("STC_TaxCode_Id");
                entity.Property(e => e.StcTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("STC_TerminationDate");
                entity.Property(e => e.StcTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("STC_TimeStamp");

                entity.HasOne(d => d.StcClient).WithMany(p => p.SalesTaxCodes)
                    .HasForeignKey(d => d.StcClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesTaxCodes_Clients");

                entity.HasOne(d => d.StcLegalEntity).WithMany(p => p.SalesTaxCodes)
                    .HasForeignKey(d => d.StcLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesTaxCodes_LegalEntities");
            });

            modelBuilder.Entity<SalesTaxRate>(entity =>
            {
                entity.HasKey(e => e.TxrId);

                entity.ToTable("SalesTaxRates", "vat");

                entity.Property(e => e.TxrId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("TXR_Id");
                entity.Property(e => e.TxrCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TXR_CreatedBy");
                entity.Property(e => e.TxrCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TXR_CreatedDate");
                entity.Property(e => e.TxrDescription)
                    .HasMaxLength(250)
                    .HasColumnName("TXR_Description");
                entity.Property(e => e.TxrInvoiceFromTaxCodeId)
                    .HasMaxLength(20)
                    .HasColumnName("TXR_InvoiceFromTaxCode_Id");
                entity.Property(e => e.TxrInvoiceToTaxCodeId)
                    .HasMaxLength(20)
                    .HasColumnName("TXR_InvoiceToTaxCode_Id");
                entity.Property(e => e.TxrIsSubContractor).HasColumnName("TXR_IsSubContractor");
                entity.Property(e => e.TxrLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TXR_LastModifiedBy");
                entity.Property(e => e.TxrLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TXR_LastModifiedDate");
                entity.Property(e => e.TxrLedgerAccount)
                    .HasMaxLength(20)
                    .HasColumnName("TXR_LedgerAccount");
                entity.Property(e => e.TxrLegalEntityId).HasColumnName("TXR_LegalEntity_Id");
                entity.Property(e => e.TxrObjectClassificationsName)
                    .HasMaxLength(250)
                    .HasColumnName("TXR_ObjectClassificationsName");
                entity.Property(e => e.TxrProductTaxCodeId)
                    .HasMaxLength(20)
                    .HasColumnName("TXR_ProductTaxCode_Id");
                entity.Property(e => e.TxrShipFromTaxCodeId)
                    .HasMaxLength(20)
                    .HasColumnName("TXR_ShipFromTaxCode_Id");
                entity.Property(e => e.TxrShipToTaxCodeId)
                    .HasMaxLength(20)
                    .HasColumnName("TXR_ShipToTaxCode_Id");
                entity.Property(e => e.TxrTaxBeforeDiscount).HasColumnName("TXR_TaxBeforeDiscount");
                entity.Property(e => e.TxrTaxCode)
                    .HasMaxLength(10)
                    .HasColumnName("TXR_TaxCode");
                entity.Property(e => e.TxrTaxExempted).HasColumnName("TXR_TaxExempted");
                entity.Property(e => e.TxrTaxImport).HasColumnName("TXR_TaxImport");
                entity.Property(e => e.TxrTaxRate)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("TXR_TaxRate");
                entity.Property(e => e.TxrTaxReversedCharge).HasColumnName("TXR_TaxReversedCharge");
                entity.Property(e => e.TxrTaxValidation).HasColumnName("TXR_TaxValidation");
                entity.Property(e => e.TxrTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("TXR_TimeStamp");
                entity.Property(e => e.TxrValidFrom)
                    .HasColumnType("date")
                    .HasColumnName("TXR_ValidFrom");
                entity.Property(e => e.TxrValidUntil)
                    .HasColumnType("date")
                    .HasColumnName("TXR_ValidUntil");

                entity.HasOne(d => d.TxrLegalEntity).WithMany(p => p.SalesTaxRates)
                    .HasForeignKey(d => d.TxrLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesTaxRates_LegalEntities");
            });

            modelBuilder.Entity<Salutation>(entity =>
            {
                entity.HasKey(e => e.SalId).HasName("PK_Salutions");

                entity.ToTable("Salutations", "mdm");

                entity.Property(e => e.SalId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SAL_Id");
                entity.Property(e => e.SalCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SAL_CreatedBy");
                entity.Property(e => e.SalCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SAL_CreatedDate");
                entity.Property(e => e.SalInactive).HasColumnName("SAL_Inactive");
                entity.Property(e => e.SalLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SAL_LastModifiedBy");
                entity.Property(e => e.SalLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SAL_LastModifiedDate");
                entity.Property(e => e.SalSalutationLocalizableEntryId).HasColumnName("SAL_SalutationLocalizableEntry_Id");
                entity.Property(e => e.SalTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SAL_TimeStamp");
                entity.Property(e => e.SalTitle)
                    .HasMaxLength(250)
                    .HasColumnName("SAL_Title");
                entity.Property(e => e.SalTitleLocalizableEntryId).HasColumnName("SAL_TitleLocalizableEntry_Id");
                entity.Property(e => e.SalValue)
                    .HasMaxLength(250)
                    .HasColumnName("SAL_Value");

                entity.HasOne(d => d.SalSalutationLocalizableEntry).WithMany(p => p.SalutationSalSalutationLocalizableEntries)
                    .HasForeignKey(d => d.SalSalutationLocalizableEntryId)
                    .HasConstraintName("FK_Salutions_SalutationLocalizableEntries");

                entity.HasOne(d => d.SalTitleLocalizableEntry).WithMany(p => p.SalutationSalTitleLocalizableEntries)
                    .HasForeignKey(d => d.SalTitleLocalizableEntryId)
                    .HasConstraintName("FK_Salutions_TitleLocalizableEntries");
            });

            modelBuilder.Entity<SearchDossierAssignmentsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SearchDossierAssignmentsView", "ux");

                entity.Property(e => e.ClientCaseNumber).HasMaxLength(50);
                entity.Property(e => e.ClientOrderNumber).HasMaxLength(50);
                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.DepartmentName).HasMaxLength(752);
                entity.Property(e => e.DossierAssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.DossierAssignmentStatusCode).HasMaxLength(10);
                entity.Property(e => e.DossierAssignmentStatusName).HasMaxLength(250);
                entity.Property(e => e.DossierAssignmentStatusTypeId).HasMaxLength(20);
                entity.Property(e => e.DossierAssignmentStatusTypeName).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(752);
                entity.Property(e => e.ProductCode).HasMaxLength(20);
                entity.Property(e => e.ProductName).HasMaxLength(250);
            });

            modelBuilder.Entity<SearchInvolvedCoveragesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SearchInvolvedCoveragesView", "ux");

                entity.Property(e => e.ClientCaseNumber).HasMaxLength(50);
                entity.Property(e => e.ClientOrderNumber).HasMaxLength(50);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.InsuranceCoverageCode).HasMaxLength(10);
                entity.Property(e => e.InsuranceCoverageName).HasMaxLength(250);
                entity.Property(e => e.InsurancePolicyNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<SearchInvolvedPartiesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SearchInvolvedPartiesView", "ux");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.DepartmentName).HasMaxLength(752);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierStatusCode).HasMaxLength(10);
                entity.Property(e => e.DossierStatusName).HasMaxLength(250);
                entity.Property(e => e.DossierStatusTypeId).HasMaxLength(20);
                entity.Property(e => e.DossierStatusTypeName).HasMaxLength(250);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.InvolvedPartyDateOfBirth).HasColumnType("date");
                entity.Property(e => e.InvolvedPartyFullName).HasMaxLength(200);
                entity.Property(e => e.InvolvedPartyHouseNumber).HasMaxLength(50);
                entity.Property(e => e.InvolvedPartyHouseNumberAddition).HasMaxLength(200);
                entity.Property(e => e.InvolvedPartyPostalCode).HasMaxLength(10);
                entity.Property(e => e.LegalEntityCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.LegalEntityName).HasMaxLength(752);
                entity.Property(e => e.ProductCode).HasMaxLength(20);
                entity.Property(e => e.ProductName).HasMaxLength(250);
            });

            modelBuilder.Entity<SearchVehiclesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SearchVehiclesView", "ux");

                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.DossierStatusCode).HasMaxLength(10);
                entity.Property(e => e.DossierStatusName).HasMaxLength(250);
                entity.Property(e => e.DossierStatusTypeId).HasMaxLength(20);
                entity.Property(e => e.DossierStatusTypeName).HasMaxLength(250);
                entity.Property(e => e.EntrySystem).HasMaxLength(10);
                entity.Property(e => e.InsurancePolicyNumber).HasMaxLength(50);
                entity.Property(e => e.LicensePlate).HasMaxLength(15);
            });

            modelBuilder.Entity<SepaCountriesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SepaCountriesView", "fin");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Id).HasMaxLength(2);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SepaCountry>(entity =>
            {
                entity.HasKey(e => e.ScoId);

                entity.ToTable("SepaCountries", "fin");

                entity.Property(e => e.ScoId)
                    .HasMaxLength(2)
                    .HasColumnName("SCO_Id");
                entity.Property(e => e.ScoCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SCO_CreatedBy");
                entity.Property(e => e.ScoCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SCO_CreatedDate");
                entity.Property(e => e.ScoCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("SCO_CurrencyCode");
                entity.Property(e => e.ScoLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SCO_LastModifiedBy");
                entity.Property(e => e.ScoLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SCO_LastModifiedDate");
                entity.Property(e => e.ScoLength).HasColumnName("SCO_Length");
                entity.Property(e => e.ScoTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SCO_TimeStamp");

                entity.HasOne(d => d.Sco).WithOne(p => p.SepaCountry)
                    .HasForeignKey<SepaCountry>(d => d.ScoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SepaCountries_Countries");
            });

            modelBuilder.Entity<Service>(entity =>
            {
                entity.HasKey(e => e.ItmId);

                entity.ToTable("Services", "mdm");

                entity.HasIndex(e => e.ItmCode, "UX_mdm_Services_Code__Filtered")
                    .IsUnique()
                    .HasFilter("([ITM_Inactive]=(0))");

                entity.Property(e => e.ItmId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("ITM_Id");
                entity.Property(e => e.ItmCode)
                    .HasMaxLength(10)
                    .HasColumnName("ITM_Code");
                entity.Property(e => e.ItmCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ITM_CreatedBy");
                entity.Property(e => e.ItmCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ITM_CreatedDate");
                entity.Property(e => e.ItmForeignTaxApplicable)
                    .HasDefaultValueSql("((0))")
                    .HasColumnName("ITM_ForeignTaxApplicable");
                entity.Property(e => e.ItmInactive).HasColumnName("ITM_Inactive");
                entity.Property(e => e.ItmIsLoweredVatapplicable).HasColumnName("ITM_IsLoweredVATApplicable");
                entity.Property(e => e.ItmIsLoweredVatpossible).HasColumnName("ITM_IsLoweredVATPossible");
                entity.Property(e => e.ItmIsTransitoryItem).HasColumnName("ITM_IsTransitoryItem");
                entity.Property(e => e.ItmLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ITM_LastModifiedBy");
                entity.Property(e => e.ItmLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ITM_LastModifiedDate");
                entity.Property(e => e.ItmLocalizableEntryId).HasColumnName("ITM_LocalizableEntry_Id");
                entity.Property(e => e.ItmLongName)
                    .HasMaxLength(250)
                    .HasColumnName("ITM_LongName");
                entity.Property(e => e.ItmMainServiceGroupId).HasColumnName("ITM_MainServiceGroup_Id");
                entity.Property(e => e.ItmProductId).HasColumnName("ITM_Product_Id");
                entity.Property(e => e.ItmPurchaseTaxCodeId)
                    .HasMaxLength(20)
                    .HasColumnName("ITM_PurchaseTaxCode_Id");
                entity.Property(e => e.ItmServiceTypeId).HasColumnName("ITM_ServiceType_Id");
                entity.Property(e => e.ItmShortName)
                    .HasMaxLength(20)
                    .HasColumnName("ITM_ShortName");
                entity.Property(e => e.ItmSubServiceGroupId).HasColumnName("ITM_SubServiceGroup_Id");
                entity.Property(e => e.ItmTaxCategoryId)
                    .HasMaxLength(20)
                    .HasColumnName("ITM_TaxCategory_Id");
                entity.Property(e => e.ItmTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ITM_TimeStamp");
                entity.Property(e => e.ItmUnitOfMeasureId)
                    .HasMaxLength(20)
                    .HasColumnName("ITM_UnitOfMeasure_Id");

                entity.HasOne(d => d.ItmLocalizableEntry).WithMany(p => p.Services)
                    .HasForeignKey(d => d.ItmLocalizableEntryId)
                    .HasConstraintName("FK_Services_LocalizableEntries");

                entity.HasOne(d => d.ItmMainServiceGroup).WithMany(p => p.ServiceItmMainServiceGroups)
                    .HasForeignKey(d => d.ItmMainServiceGroupId)
                    .HasConstraintName("FK_Services_MainServiceGroups");

                entity.HasOne(d => d.ItmProduct).WithMany(p => p.Services)
                    .HasForeignKey(d => d.ItmProductId)
                    .HasConstraintName("FK_Services_Products");

                entity.HasOne(d => d.ItmSubServiceGroup).WithMany(p => p.ServiceItmSubServiceGroups)
                    .HasForeignKey(d => d.ItmSubServiceGroupId)
                    .HasConstraintName("FK_Services_SubServiceGroups");
            });

            modelBuilder.Entity<ServiceApplication>(entity =>
            {
                entity.HasKey(e => e.SraId);

                entity.ToTable("ServiceApplications", "mdm");

                entity.Property(e => e.SraId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SRA_Id");
                entity.Property(e => e.SraApplicationId).HasColumnName("SRA_Application_Id");
                entity.Property(e => e.SraCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SRA_CreatedBy");
                entity.Property(e => e.SraCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SRA_CreatedDate");
                entity.Property(e => e.SraInactive).HasColumnName("SRA_Inactive");
                entity.Property(e => e.SraLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SRA_LastModifiedBy");
                entity.Property(e => e.SraLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SRA_LastModifiedDate");
                entity.Property(e => e.SraServiceId).HasColumnName("SRA_Service_Id");
                entity.Property(e => e.SraTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SRA_TimeStamp");

                entity.HasOne(d => d.SraApplication).WithMany(p => p.ServiceApplications)
                    .HasForeignKey(d => d.SraApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceApplications_Applications");

                entity.HasOne(d => d.SraService).WithMany(p => p.ServiceApplications)
                    .HasForeignKey(d => d.SraServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceApplications_Services");
            });

            modelBuilder.Entity<ServiceCode>(entity =>
            {
                entity.HasKey(e => e.SicId);

                entity.ToTable("ServiceCodes", "mdm");

                entity.Property(e => e.SicId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SIC_Id");
                entity.Property(e => e.SicCode)
                    .HasMaxLength(20)
                    .HasColumnName("SIC_Code");
                entity.Property(e => e.SicCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SIC_CreatedBy");
                entity.Property(e => e.SicCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SIC_CreatedDate");
                entity.Property(e => e.SicLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SIC_LastModifiedBy");
                entity.Property(e => e.SicLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SIC_LastModifiedDate");
                entity.Property(e => e.SicServiceCodeTypeId).HasColumnName("SIC_ServiceCodeType_Id");
                entity.Property(e => e.SicServiceId).HasColumnName("SIC_Service_Id");
                entity.Property(e => e.SicTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SIC_TimeStamp");
                entity.Property(e => e.SicValidFromDate)
                    .HasColumnType("date")
                    .HasColumnName("SIC_ValidFromDate");
                entity.Property(e => e.SicValidUntilDate)
                    .HasColumnType("date")
                    .HasColumnName("SIC_ValidUntilDate");

                entity.HasOne(d => d.SicServiceCodeType).WithMany(p => p.ServiceCodes)
                    .HasForeignKey(d => d.SicServiceCodeTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceCodes_ServiceCodeTypes");

                entity.HasOne(d => d.SicService).WithMany(p => p.ServiceCodes)
                    .HasForeignKey(d => d.SicServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceCodes_Services");
            });

            modelBuilder.Entity<ServiceCodeType>(entity =>
            {
                entity.HasKey(e => e.SctId);

                entity.ToTable("ServiceCodeTypes", "mdm");

                entity.Property(e => e.SctId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SCT_Id");
                entity.Property(e => e.SctCode)
                    .HasMaxLength(10)
                    .HasColumnName("SCT_Code");
                entity.Property(e => e.SctCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SCT_CreatedBy");
                entity.Property(e => e.SctCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SCT_CreatedDate");
                entity.Property(e => e.SctInactive).HasColumnName("SCT_Inactive");
                entity.Property(e => e.SctLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SCT_LastModifiedBy");
                entity.Property(e => e.SctLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SCT_LastModifiedDate");
                entity.Property(e => e.SctLocalizableEntryId).HasColumnName("SCT_LocalizableEntry_Id");
                entity.Property(e => e.SctLongName)
                    .HasMaxLength(250)
                    .HasColumnName("SCT_LongName");
                entity.Property(e => e.SctShortName)
                    .HasMaxLength(20)
                    .HasColumnName("SCT_ShortName");
                entity.Property(e => e.SctTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SCT_TimeStamp");

                entity.HasOne(d => d.SctLocalizableEntry).WithMany(p => p.ServiceCodeTypes)
                    .HasForeignKey(d => d.SctLocalizableEntryId)
                    .HasConstraintName("FK_ServiceCodeTypes_LocalizableEntries");
            });

            modelBuilder.Entity<ServiceGroup>(entity =>
            {
                entity.HasKey(e => e.ItgId);

                entity.ToTable("ServiceGroups", "mdm");

                entity.HasIndex(e => e.ItgCode, "UX_mdm_ServiceGroups_Code__Filtered")
                    .IsUnique()
                    .HasFilter("([ITG_Inactive]=(0))");

                entity.Property(e => e.ItgId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("ITG_Id");
                entity.Property(e => e.ItgCode)
                    .HasMaxLength(10)
                    .HasColumnName("ITG_Code");
                entity.Property(e => e.ItgCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ITG_CreatedBy");
                entity.Property(e => e.ItgCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ITG_CreatedDate");
                entity.Property(e => e.ItgInactive).HasColumnName("ITG_Inactive");
                entity.Property(e => e.ItgLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("ITG_LastModifiedBy");
                entity.Property(e => e.ItgLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("ITG_LastModifiedDate");
                entity.Property(e => e.ItgLocalizableEntryId).HasColumnName("ITG_LocalizableEntry_Id");
                entity.Property(e => e.ItgLongName)
                    .HasMaxLength(250)
                    .HasColumnName("ITG_LongName");
                entity.Property(e => e.ItgShortName)
                    .HasMaxLength(20)
                    .HasColumnName("ITG_ShortName");
                entity.Property(e => e.ItgTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("ITG_TimeStamp");

                entity.HasOne(d => d.ItgLocalizableEntry).WithMany(p => p.ServiceGroups)
                    .HasForeignKey(d => d.ItgLocalizableEntryId)
                    .HasConstraintName("FK_ServiceGroups_LocalizableEntries");
            });

            modelBuilder.Entity<ServiceHierarchy>(entity =>
            {
                entity.HasKey(e => e.SehId);

                entity.ToTable("ServiceHierarchy", "mdm");

                entity.Property(e => e.SehId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SEH_Id");
                entity.Property(e => e.SehChildId).HasColumnName("SEH_ChildId");
                entity.Property(e => e.SehChildUnitPriceIndex).HasColumnName("SEH_ChildUnitPriceIndex");
                entity.Property(e => e.SehCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SEH_CreatedBy");
                entity.Property(e => e.SehCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SEH_CreatedDate");
                entity.Property(e => e.SehEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("SEH_EffectiveDate");
                entity.Property(e => e.SehLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SEH_LastModifiedBy");
                entity.Property(e => e.SehLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SEH_LastModifiedDate");
                entity.Property(e => e.SehParentId).HasColumnName("SEH_ParentId");
                entity.Property(e => e.SehRelationDivider).HasColumnName("SEH_RelationDivider");
                entity.Property(e => e.SehRelationNumberUnits).HasColumnName("SEH_RelationNumberUnits");
                entity.Property(e => e.SehTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("SEH_TerminationDate");
                entity.Property(e => e.SehTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SEH_TimeStamp");

                entity.HasOne(d => d.SehChild).WithMany(p => p.ServiceHierarchySehChildren)
                    .HasForeignKey(d => d.SehChildId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceHierarchy_Services1");

                entity.HasOne(d => d.SehParent).WithMany(p => p.ServiceHierarchySehParents)
                    .HasForeignKey(d => d.SehParentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceHierarchy_Services2");
            });

            modelBuilder.Entity<ServiceTaxRate>(entity =>
            {
                entity.HasKey(e => e.StrId);

                entity.ToTable("ServiceTaxRates", "vat");

                entity.Property(e => e.StrId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("STR_Id");
                entity.Property(e => e.StrCountryIso2Code)
                    .HasMaxLength(2)
                    .HasColumnName("STR_CountryIso2Code");
                entity.Property(e => e.StrCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("STR_CreatedBy");
                entity.Property(e => e.StrCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("STR_CreatedDate");
                entity.Property(e => e.StrEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("STR_EffectiveDate");
                entity.Property(e => e.StrLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("STR_LastModifiedBy");
                entity.Property(e => e.StrLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("STR_LastModifiedDate");
                entity.Property(e => e.StrLegalEntityId).HasColumnName("STR_LegalEntity_Id");
                entity.Property(e => e.StrServiceId).HasColumnName("STR_Service_Id");
                entity.Property(e => e.StrTaxCategoryId)
                    .HasMaxLength(20)
                    .HasColumnName("STR_TaxCategory_Id");
                entity.Property(e => e.StrTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("STR_TerminationDate");
                entity.Property(e => e.StrTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("STR_TimeStamp");

                entity.HasOne(d => d.StrCountryIso2CodeNavigation).WithMany(p => p.ServiceTaxRates)
                    .HasForeignKey(d => d.StrCountryIso2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceTaxRates_Countries");

                entity.HasOne(d => d.StrLegalEntity).WithMany(p => p.ServiceTaxRates)
                    .HasForeignKey(d => d.StrLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceTaxRates_LegalEntities");

                entity.HasOne(d => d.StrService).WithMany(p => p.ServiceTaxRates)
                    .HasForeignKey(d => d.StrServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceTaxRates_Services");

                entity.HasOne(d => d.StrTaxCategory).WithMany(p => p.ServiceTaxRates)
                    .HasForeignKey(d => d.StrTaxCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceTaxRates_TaxCategories");
            });

            modelBuilder.Entity<ServiceType>(entity =>
            {
                entity.HasKey(e => e.SetId);

                entity.ToTable("ServiceTypes", "mdm");

                entity.Property(e => e.SetId)
                    .ValueGeneratedNever()
                    .HasColumnName("SET_Id");
                entity.Property(e => e.SetCode)
                    .HasMaxLength(10)
                    .HasColumnName("SET_Code");
                entity.Property(e => e.SetCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SET_CreatedBy");
                entity.Property(e => e.SetCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SET_CreatedDate");
                entity.Property(e => e.SetInactive).HasColumnName("SET_Inactive");
                entity.Property(e => e.SetLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SET_LastModifiedBy");
                entity.Property(e => e.SetLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SET_LastModifiedDate");
                entity.Property(e => e.SetLocalizableEntryId).HasColumnName("SET_LocalizableEntry_Id");
                entity.Property(e => e.SetLongName)
                    .HasMaxLength(250)
                    .HasColumnName("SET_LongName");
                entity.Property(e => e.SetShortName)
                    .HasMaxLength(20)
                    .HasColumnName("SET_ShortName");
                entity.Property(e => e.SetTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SET_TimeStamp");

                entity.HasOne(d => d.SetLocalizableEntry).WithMany(p => p.ServiceTypes)
                    .HasForeignKey(d => d.SetLocalizableEntryId)
                    .HasConstraintName("FK_ServiceTypes_LocalizedEntries");
            });

            modelBuilder.Entity<ServicesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ServicesView", "mdm");

                entity.Property(e => e.Code).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.EntrySystem).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LongName).HasMaxLength(250);
                entity.Property(e => e.MainServiceGroupCode).HasMaxLength(10);
                entity.Property(e => e.MainServiceGroupLongName).HasMaxLength(250);
                entity.Property(e => e.MainServiceGroupShortName).HasMaxLength(20);
                entity.Property(e => e.ShortName).HasMaxLength(20);
                entity.Property(e => e.SubServiceGroupCode).HasMaxLength(10);
                entity.Property(e => e.SubServiceGroupLongName).HasMaxLength(250);
                entity.Property(e => e.SubServiceGroupShortName).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Setting>(entity =>
            {
                entity.HasKey(e => e.SetId);

                entity.Property(e => e.SetId)
                    .ValueGeneratedNever()
                    .HasColumnName("SET_Id");
                entity.Property(e => e.SetContext)
                    .HasMaxLength(68)
                    .HasColumnName("SET_Context");
                entity.Property(e => e.SetCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SET_CreatedBy");
                entity.Property(e => e.SetCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SET_CreatedDate");
                entity.Property(e => e.SetIsSystem).HasColumnName("SET_IsSystem");
                entity.Property(e => e.SetKey)
                    .HasMaxLength(68)
                    .HasColumnName("SET_Key");
                entity.Property(e => e.SetLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SET_LastModifiedBy");
                entity.Property(e => e.SetLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SET_LastModifiedDate");
                entity.Property(e => e.SetTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SET_TimeStamp");
                entity.Property(e => e.SetValue).HasColumnName("SET_Value");
            });

            modelBuilder.Entity<SingleInvoiceRuleLog>(entity =>
            {
                entity.HasKey(e => e.SrlId);

                entity.ToTable("SingleInvoiceRuleLogs", "fin");

                entity.HasIndex(e => e.SrlAssistancePlanId, "IX_SingleInvoiceRuleLogs_AssistancePlan");

                entity.HasIndex(e => e.SrlClientId, "IX_SingleInvoiceRuleLogs_Client");

                entity.HasIndex(e => e.SrlDossierAssignmentId, "IX_SingleInvoiceRuleLogs_DossierAssignment");

                entity.HasIndex(e => new { e.SrlDossierId, e.SrlIsClosed }, "IX_SingleInvoiceRuleLogs_Dossier_IsClosed");

                entity.Property(e => e.SrlId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SRL_Id");
                entity.Property(e => e.SrlAssistancePlanId).HasColumnName("SRL_AssistancePlan_Id");
                entity.Property(e => e.SrlClientId).HasColumnName("SRL_Client_Id");
                entity.Property(e => e.SrlCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SRL_CreatedBy");
                entity.Property(e => e.SrlCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SRL_CreatedDate");
                entity.Property(e => e.SrlDossierAssignmentId).HasColumnName("SRL_DossierAssignment_Id");
                entity.Property(e => e.SrlDossierId).HasColumnName("SRL_Dossier_Id");
                entity.Property(e => e.SrlEmployeeCompletedCheck).HasColumnName("SRL_EmployeeCompletedCheck");
                entity.Property(e => e.SrlEmployeeCompletedDate).HasColumnName("SRL_EmployeeCompletedDate");
                entity.Property(e => e.SrlEmployeeCompletedEmployeeId).HasColumnName("SRL_EmployeeCompleted_Employee_Id");
                entity.Property(e => e.SrlEmployeeCompletedReason)
                    .HasMaxLength(500)
                    .HasColumnName("SRL_EmployeeCompletedReason");
                entity.Property(e => e.SrlFeeCompletedCheck).HasColumnName("SRL_FeeCompletedCheck");
                entity.Property(e => e.SrlFeeCompletedDate).HasColumnName("SRL_FeeCompletedDate");
                entity.Property(e => e.SrlIsClosed).HasColumnName("SRL_IsClosed");
                entity.Property(e => e.SrlLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SRL_LastModifiedBy");
                entity.Property(e => e.SrlLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SRL_LastModifiedDate");
                entity.Property(e => e.SrlPurchaseInvoicesCompletedCheck).HasColumnName("SRL_PurchaseInvoicesCompletedCheck");
                entity.Property(e => e.SrlPurchaseInvoicesCompletedDate).HasColumnName("SRL_PurchaseInvoicesCompletedDate");
                entity.Property(e => e.SrlSalesOrdersCompletedCheck).HasColumnName("SRL_SalesOrdersCompletedCheck");
                entity.Property(e => e.SrlSalesOrdersCompletedDate).HasColumnName("SRL_SalesOrdersCompletedDate");
                entity.Property(e => e.SrlScheduleEventCompletedCheck).HasColumnName("SRL_ScheduleEventCompletedCheck");
                entity.Property(e => e.SrlScheduleEventCompletedDate).HasColumnName("SRL_ScheduleEventCompletedDate");
                entity.Property(e => e.SrlTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SRL_TimeStamp");

                entity.HasOne(d => d.SrlAssistancePlan).WithMany(p => p.SingleInvoiceRuleLogs)
                    .HasForeignKey(d => d.SrlAssistancePlanId)
                    .HasConstraintName("FK_SingleInvoiceRuleLogs_AssistancePlans");

                entity.HasOne(d => d.SrlClient).WithMany(p => p.SingleInvoiceRuleLogs)
                    .HasForeignKey(d => d.SrlClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SingleInvoiceRuleLogs_Clients");

                entity.HasOne(d => d.SrlDossierAssignment).WithMany(p => p.SingleInvoiceRuleLogs)
                    .HasForeignKey(d => d.SrlDossierAssignmentId)
                    .HasConstraintName("FK_SingleInvoiceRuleLogs_DossierAssignments");

                entity.HasOne(d => d.SrlDossier).WithMany(p => p.SingleInvoiceRuleLogs)
                    .HasForeignKey(d => d.SrlDossierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SingleInvoiceRuleLogs_Dossiers");
            });

            modelBuilder.Entity<Skill>(entity =>
            {
                entity.HasKey(e => e.SklId);

                entity.ToTable("Skills", "mdm");

                entity.HasIndex(e => e.SklCode, "UX_mdm_Skills_Code__Filtered")
                    .IsUnique()
                    .HasFilter("([SKL_Inactive]=(0))");

                entity.Property(e => e.SklId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SKL_Id");
                entity.Property(e => e.SklCode)
                    .HasMaxLength(10)
                    .HasColumnName("SKL_Code");
                entity.Property(e => e.SklCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SKL_CreatedBy");
                entity.Property(e => e.SklCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SKL_CreatedDate");
                entity.Property(e => e.SklInactive).HasColumnName("SKL_Inactive");
                entity.Property(e => e.SklLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SKL_LastModifiedBy");
                entity.Property(e => e.SklLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SKL_LastModifiedDate");
                entity.Property(e => e.SklLocalizableEntryId).HasColumnName("SKL_LocalizableEntry_Id");
                entity.Property(e => e.SklLongName)
                    .HasMaxLength(250)
                    .HasColumnName("SKL_LongName");
                entity.Property(e => e.SklShortName)
                    .HasMaxLength(20)
                    .HasColumnName("SKL_ShortName");
                entity.Property(e => e.SklTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SKL_TimeStamp");

                entity.HasOne(d => d.SklLocalizableEntry).WithMany(p => p.Skills)
                    .HasForeignKey(d => d.SklLocalizableEntryId)
                    .HasConstraintName("FK_Skills_LocalizableEntries");
            });

            modelBuilder.Entity<SkillsServiceGroup>(entity =>
            {
                entity.HasKey(e => e.SsgId);

                entity.ToTable("SkillsServiceGroup", "mdm");

                entity.Property(e => e.SsgId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SSG_Id");
                entity.Property(e => e.SsgCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SSG_CreatedBy");
                entity.Property(e => e.SsgCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SSG_CreatedDate");
                entity.Property(e => e.SsgEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("SSG_EffectiveDate");
                entity.Property(e => e.SsgLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SSG_LastModifiedBy");
                entity.Property(e => e.SsgLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SSG_LastModifiedDate");
                entity.Property(e => e.SsgServiceGroupId).HasColumnName("SSG_ServiceGroup_Id");
                entity.Property(e => e.SsgSkillId).HasColumnName("SSG_Skill_Id");
                entity.Property(e => e.SsgTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("SSG_TerminationDate");
                entity.Property(e => e.SsgTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SSG_TimeStamp");

                entity.HasOne(d => d.SsgServiceGroup).WithMany(p => p.SkillsServiceGroups)
                    .HasForeignKey(d => d.SsgServiceGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SkillsServiceGroup_ServiceGroups");

                entity.HasOne(d => d.SsgSkill).WithMany(p => p.SkillsServiceGroups)
                    .HasForeignKey(d => d.SsgSkillId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SkillsServiceGroup_Skills");
            });

            modelBuilder.Entity<Specification>(entity =>
            {
                entity.HasKey(e => e.SpcId);

                entity.ToTable("Specifications", "pdc");

                entity.HasIndex(e => e.SpcCode, "UX_pdc_Specifications_Code__Filtered")
                    .IsUnique()
                    .HasFilter("([SPC_Inactive]=(0))");

                entity.Property(e => e.SpcId)
                    .ValueGeneratedNever()
                    .HasColumnName("SPC_Id");
                entity.Property(e => e.SpcCode)
                    .HasMaxLength(10)
                    .HasColumnName("SPC_Code");
                entity.Property(e => e.SpcCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SPC_CreatedBy");
                entity.Property(e => e.SpcCreatedDate)
                    .HasDefaultValueSql("(getutcdate())")
                    .HasColumnName("SPC_CreatedDate");
                entity.Property(e => e.SpcInactive).HasColumnName("SPC_Inactive");
                entity.Property(e => e.SpcLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SPC_LastModifiedBy");
                entity.Property(e => e.SpcLastModifiedDate)
                    .HasDefaultValueSql("(getutcdate())")
                    .HasColumnName("SPC_LastModifiedDate");
                entity.Property(e => e.SpcLocalizableEntryId).HasColumnName("SPC_LocalizableEntry_Id");
                entity.Property(e => e.SpcLongName)
                    .HasMaxLength(250)
                    .HasColumnName("SPC_LongName");
                entity.Property(e => e.SpcShortName)
                    .HasMaxLength(20)
                    .HasColumnName("SPC_ShortName");
                entity.Property(e => e.SpcTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SPC_TimeStamp");

                entity.HasOne(d => d.SpcLocalizableEntry).WithMany(p => p.Specifications)
                    .HasForeignKey(d => d.SpcLocalizableEntryId)
                    .HasConstraintName("FK_Specifications_LocalizableEntries");
            });

            modelBuilder.Entity<Status>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__Statuses__3214EC07E2D52DBB");

                entity.ToTable("Statuses", "mdm");

                entity.HasIndex(e => e.Code, "UX_mdm_Statuses_Code__Filtered")
                    .IsUnique()
                    .HasFilter("([Inactive]=(0))");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LongName).HasMaxLength(250);
                entity.Property(e => e.ShortName).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.LocalizableEntry).WithMany(p => p.Statuses)
                    .HasForeignKey(d => d.LocalizableEntryId)
                    .HasConstraintName("FK_Status_LocalizableEntries");
            });

            modelBuilder.Entity<StatusMapping>(entity =>
            {
                entity.HasKey(e => e.SmId);

                entity.ToTable("StatusMapping", "pros");

                entity.Property(e => e.SmId)
                    .ValueGeneratedNever()
                    .HasColumnName("SM_Id");
                entity.Property(e => e.SmCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SM_CreatedBy");
                entity.Property(e => e.SmCreatedDate).HasColumnName("SM_CreatedDate");
                entity.Property(e => e.SmDefaultEis).HasColumnName("SM_DefaultEIS");
                entity.Property(e => e.SmDefaultProspect).HasColumnName("SM_DefaultProspect");
                entity.Property(e => e.SmEiscode).HasColumnName("SM_EISCode");
                entity.Property(e => e.SmLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SM_LastModifiedBy");
                entity.Property(e => e.SmLastModifiedDate).HasColumnName("SM_LastModifiedDate");
                entity.Property(e => e.SmProspectCode).HasColumnName("SM_ProspectCode");
                entity.Property(e => e.SmTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SM_TimeStamp");
            });

            modelBuilder.Entity<SubContract>(entity =>
            {
                entity.HasKey(e => e.SncId);

                entity.ToTable("SubContract", "mdm");

                entity.Property(e => e.SncId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SNC_Id");
                entity.Property(e => e.SncCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SNC_CreatedBy");
                entity.Property(e => e.SncCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SNC_CreatedDate");
                entity.Property(e => e.SncCurrencyCode)
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('EUR')")
                    .HasColumnName("SNC_CurrencyCode");
                entity.Property(e => e.SncEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("SNC_EffectiveDate");
                entity.Property(e => e.SncLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SNC_LastModifiedBy");
                entity.Property(e => e.SncLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SNC_LastModifiedDate");
                entity.Property(e => e.SncLineNumber).HasColumnName("SNC_LineNumber");
                entity.Property(e => e.SncMainContractId).HasColumnName("SNC_MainContract_Id");
                entity.Property(e => e.SncOwnerDepartmentId).HasColumnName("SNC_OwnerDepartment_Id");
                entity.Property(e => e.SncOwnerLegalEntityId).HasColumnName("SNC_OwnerLegalEntity_Id");
                entity.Property(e => e.SncProductId).HasColumnName("SNC_Product_Id");
                entity.Property(e => e.SncTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("SNC_TerminationDate");
                entity.Property(e => e.SncTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SNC_TimeStamp");

                entity.HasOne(d => d.SncMainContract).WithMany(p => p.SubContracts)
                    .HasForeignKey(d => d.SncMainContractId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SubContract_MainContract");

                entity.HasOne(d => d.SncOwnerDepartment).WithMany(p => p.SubContracts)
                    .HasForeignKey(d => d.SncOwnerDepartmentId)
                    .HasConstraintName("FK_SubContract_Departments");

                entity.HasOne(d => d.SncOwnerLegalEntity).WithMany(p => p.SubContracts)
                    .HasForeignKey(d => d.SncOwnerLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SubContract_LegalEntities");

                entity.HasOne(d => d.SncProduct).WithMany(p => p.SubContracts)
                    .HasForeignKey(d => d.SncProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SubContract_Products");
            });

            modelBuilder.Entity<SubStatusMapping>(entity =>
            {
                entity.HasKey(e => e.SsmId).HasName("PK__SubStatu__EECF35391E978B6D");

                entity.ToTable("SubStatusMapping", "pros");

                entity.Property(e => e.SsmId)
                    .ValueGeneratedNever()
                    .HasColumnName("SSM_Id");
                entity.Property(e => e.SsmCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SSM_CreatedBy");
                entity.Property(e => e.SsmCreatedDate).HasColumnName("SSM_CreatedDate");
                entity.Property(e => e.SsmDefaultEis).HasColumnName("SSM_DefaultEIS");
                entity.Property(e => e.SsmDefaultProspect).HasColumnName("SSM_DefaultProspect");
                entity.Property(e => e.SsmEiscode).HasColumnName("SSM_EISCode");
                entity.Property(e => e.SsmLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SSM_LastModifiedBy");
                entity.Property(e => e.SsmLastModifiedDate).HasColumnName("SSM_LastModifiedDate");
                entity.Property(e => e.SsmProspectStatusCode).HasColumnName("SSM_ProspectStatusCode");
                entity.Property(e => e.SsmProspectSubStatusCode).HasColumnName("SSM_ProspectSubStatusCode");
                entity.Property(e => e.SsmTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SSM_TimeStamp");
            });

            modelBuilder.Entity<SummaryStatementCreationMethod>(entity =>
            {
                entity.HasKey(e => e.SsmId).HasName("PK__SummaryS__EECF3539EDCCF945");

                entity.ToTable("SummaryStatementCreationMethods", "mdm");

                entity.Property(e => e.SsmId)
                    .HasMaxLength(250)
                    .HasColumnName("SSM_Id");
                entity.Property(e => e.SsmCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SSM_CreatedBy");
                entity.Property(e => e.SsmCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SSM_CreatedDate");
                entity.Property(e => e.SsmDescription)
                    .HasMaxLength(250)
                    .HasColumnName("SSM_Description");
                entity.Property(e => e.SsmInactive).HasColumnName("SSM_Inactive");
                entity.Property(e => e.SsmLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SSM_LastModifiedBy");
                entity.Property(e => e.SsmLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SSM_LastModifiedDate");
                entity.Property(e => e.SsmLocalizableEntryId).HasColumnName("SSM_LocalizableEntry_Id");
                entity.Property(e => e.SsmTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SSM_TimeStamp");

                entity.HasOne(d => d.SsmLocalizableEntry).WithMany(p => p.SummaryStatementCreationMethods)
                    .HasForeignKey(d => d.SsmLocalizableEntryId)
                    .HasConstraintName("FK_SummaryStatmentCreationMethods_LocalizableEntry");
            });

            modelBuilder.Entity<SummaryStatementPeriod>(entity =>
            {
                entity.HasKey(e => e.SspId).HasName("PK__tmp_ms_x__D85BFEAF96885520");

                entity.ToTable("SummaryStatementPeriods", "fin");

                entity.Property(e => e.SspId)
                    .ValueGeneratedNever()
                    .HasColumnName("SSP_Id");
                entity.Property(e => e.SspCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SSP_CreatedBy");
                entity.Property(e => e.SspCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SSP_CreatedDate");
                entity.Property(e => e.SspLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SSP_LastModifiedBy");
                entity.Property(e => e.SspLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SSP_LastModifiedDate");
                entity.Property(e => e.SspLongName)
                    .HasMaxLength(250)
                    .HasColumnName("SSP_LongName");
                entity.Property(e => e.SspTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SSP_TimeStamp");
            });

            modelBuilder.Entity<Supplier>(entity =>
            {
                entity.HasKey(e => e.SupId);

                entity.ToTable("Suppliers", "mdm", tb =>
                {
                    tb.HasTrigger("ti_Suppliers_PurchaseTaxCodes");
                    tb.HasTrigger("tu_Suppliers_PurchaseTaxCodes");
                    tb.HasTrigger("tu_mdm_Supplier_Inactive");
                });

                entity.HasIndex(e => e.SupCreatedDate, "IX_mdm_Suppliers_CreatedDate");

                entity.Property(e => e.SupId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SUP_Id");
                entity.Property(e => e.SupCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SUP_CreatedBy");
                entity.Property(e => e.SupCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SUP_CreatedDate");
                entity.Property(e => e.SupCultureCodePreferredLanguage)
                    .HasMaxLength(10)
                    .HasColumnName("SUP_CultureCodePreferredLanguage");
                entity.Property(e => e.SupCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("SUP_CurrencyCode");
                entity.Property(e => e.SupExternalCode)
                    .HasMaxLength(10)
                    .HasColumnName("SUP_ExternalCode");
                entity.Property(e => e.SupInactive).HasColumnName("SUP_Inactive");
                entity.Property(e => e.SupIsPreferredSupplier).HasColumnName("SUP_IsPreferredSupplier");
                entity.Property(e => e.SupLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SUP_LastModifiedBy");
                entity.Property(e => e.SupLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SUP_LastModifiedDate");
                entity.Property(e => e.SupPartnerId).HasColumnName("SUP_Partner_Id");
                entity.Property(e => e.SupPaymentBatchEmail)
                    .HasMaxLength(250)
                    .HasColumnName("SUP_PaymentBatchEmail");
                entity.Property(e => e.SupTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SUP_TimeStamp");

                entity.HasOne(d => d.Sup).WithOne(p => p.Supplier)
                    .HasForeignKey<Supplier>(d => d.SupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Suppliers_OrganizationUnits");

                entity.HasOne(d => d.SupPartner).WithMany(p => p.Suppliers)
                    .HasForeignKey(d => d.SupPartnerId)
                    .HasConstraintName("FK_Suppliers_Partners");
            });

            modelBuilder.Entity<SupplierBankAccountsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SupplierBankAccountsView", "fin");

                entity.Property(e => e.AccountAbbreviation).HasMaxLength(20);
                entity.Property(e => e.AccountAddressLine1).HasMaxLength(250);
                entity.Property(e => e.AccountAddressLine2).HasMaxLength(250);
                entity.Property(e => e.AccountIdentifier).HasMaxLength(20);
                entity.Property(e => e.AccountName).HasMaxLength(250);
                entity.Property(e => e.AccountNumber).HasMaxLength(34);
                entity.Property(e => e.BankName).HasMaxLength(250);
                entity.Property(e => e.Bic)
                    .HasMaxLength(11)
                    .HasColumnName("BIC");
                entity.Property(e => e.CountryCode).HasMaxLength(3);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Iban)
                    .HasMaxLength(34)
                    .HasColumnName("IBAN");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.OrganizationAccountCode).HasMaxLength(10);
                entity.Property(e => e.OrganizationAccountName).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SupplierBrand>(entity =>
            {
                entity.HasKey(e => e.SsbId);

                entity.ToTable("SupplierBrands", "mdm");

                entity.Property(e => e.SsbId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SSB_Id");
                entity.Property(e => e.SsbBrandId).HasColumnName("SSB_Brand_Id");
                entity.Property(e => e.SsbCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SSB_CreatedBy");
                entity.Property(e => e.SsbCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SSB_CreatedDate");
                entity.Property(e => e.SsbEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("SSB_EffectiveDate");
                entity.Property(e => e.SsbEndDate)
                    .HasColumnType("date")
                    .HasColumnName("SSB_EndDate");
                entity.Property(e => e.SsbLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SSB_LastModifiedBy");
                entity.Property(e => e.SsbLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SSB_LastModifiedDate");
                entity.Property(e => e.SsbSupplierId).HasColumnName("SSB_Supplier_Id");
                entity.Property(e => e.SsbTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SSB_TimeStamp");

                entity.HasOne(d => d.SsbBrand).WithMany(p => p.SupplierBrands)
                    .HasForeignKey(d => d.SsbBrandId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SupplierBrands_Brands");

                entity.HasOne(d => d.SsbSupplier).WithMany(p => p.SupplierBrands)
                    .HasForeignKey(d => d.SsbSupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SupplierBrands_Suppliers");
            });

            modelBuilder.Entity<SupplierInvoiceDeliveryMethod>(entity =>
            {
                entity.HasKey(e => e.SdmId);

                entity.ToTable("SupplierInvoiceDeliveryMethods", "fin");

                entity.Property(e => e.SdmId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SDM_Id");
                entity.Property(e => e.SdmBodyEmail)
                    .HasMaxLength(250)
                    .HasColumnName("SDM_BodyEmail");
                entity.Property(e => e.SdmBusinessUnitId).HasColumnName("SDM_BusinessUnit_Id");
                entity.Property(e => e.SdmCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SDM_CreatedBy");
                entity.Property(e => e.SdmCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SDM_CreatedDate");
                entity.Property(e => e.SdmDepartmentId).HasColumnName("SDM_Department_Id");
                entity.Property(e => e.SdmEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("SDM_EffectiveDate");
                entity.Property(e => e.SdmEmail)
                    .HasMaxLength(250)
                    .HasColumnName("SDM_Email");
                entity.Property(e => e.SdmInvoiceDeliveryMethodId)
                    .HasMaxLength(20)
                    .HasColumnName("SDM_InvoiceDeliveryMethod_Id");
                entity.Property(e => e.SdmLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SDM_LastModifiedBy");
                entity.Property(e => e.SdmLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SDM_LastModifiedDate");
                entity.Property(e => e.SdmLegalEntityId).HasColumnName("SDM_LegalEntity_Id");
                entity.Property(e => e.SdmSupplierId).HasColumnName("SDM_Supplier_Id");
                entity.Property(e => e.SdmTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("SDM_TerminationDate");
                entity.Property(e => e.SdmTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SDM_TimeStamp");

                entity.HasOne(d => d.SdmBusinessUnit).WithMany(p => p.SupplierInvoiceDeliveryMethods)
                    .HasForeignKey(d => d.SdmBusinessUnitId)
                    .HasConstraintName("FK_SupplierInvoiceDeliveryMethods_BusinessUnits");

                entity.HasOne(d => d.SdmDepartment).WithMany(p => p.SupplierInvoiceDeliveryMethods)
                    .HasForeignKey(d => d.SdmDepartmentId)
                    .HasConstraintName("FK_SupplierInvoiceDeliveryMethods_Departments");

                entity.HasOne(d => d.SdmInvoiceDeliveryMethod).WithMany(p => p.SupplierInvoiceDeliveryMethods)
                    .HasForeignKey(d => d.SdmInvoiceDeliveryMethodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SupplierInvoiceDeliveryMethods_InvoiceDeliveryMethods");

                entity.HasOne(d => d.SdmLegalEntity).WithMany(p => p.SupplierInvoiceDeliveryMethods)
                    .HasForeignKey(d => d.SdmLegalEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SupplierInvoiceDeliveryMethods_LegalEntities");

                entity.HasOne(d => d.SdmSupplier).WithMany(p => p.SupplierInvoiceDeliveryMethods)
                    .HasForeignKey(d => d.SdmSupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SupplierInvoiceDeliveryMethods_Suppliers");
            });

            modelBuilder.Entity<SupplierPaymentConditionsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SupplierPaymentConditionsView", "fin");

                entity.Property(e => e.Code).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LongName).HasMaxLength(250);
                entity.Property(e => e.ShortName).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SupplierService>(entity =>
            {
                entity.HasKey(e => e.SsiId);

                entity.ToTable("SupplierServices", "mdm");

                entity.HasIndex(e => e.SsiSupplierId, "IX_SupplierServices_Supplier_Id");

                entity.Property(e => e.SsiId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("SSI_Id");
                entity.Property(e => e.SsiCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SSI_CreatedBy");
                entity.Property(e => e.SsiCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SSI_CreatedDate");
                entity.Property(e => e.SsiEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("SSI_EffectiveDate");
                entity.Property(e => e.SsiEndDate)
                    .HasColumnType("date")
                    .HasColumnName("SSI_EndDate");
                entity.Property(e => e.SsiLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("SSI_LastModifiedBy");
                entity.Property(e => e.SsiLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("SSI_LastModifiedDate");
                entity.Property(e => e.SsiServiceId).HasColumnName("SSI_Service_Id");
                entity.Property(e => e.SsiSupplierId).HasColumnName("SSI_Supplier_Id");
                entity.Property(e => e.SsiTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SSI_TimeStamp");

                entity.HasOne(d => d.SsiService).WithMany(p => p.SupplierServices)
                    .HasForeignKey(d => d.SsiServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SupplierServices_Services");

                entity.HasOne(d => d.SsiSupplier).WithMany(p => p.SupplierServices)
                    .HasForeignKey(d => d.SsiSupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SupplierServices_Suppliers");
            });

            modelBuilder.Entity<SupplierTaxCodesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SupplierTaxCodesView", "vat");

                entity.Property(e => e.AppNumber).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.PartyTaxCode).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SuppliersMissingCreditorsCountView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SuppliersMissingCreditorsCountView", "mdm");
            });

            modelBuilder.Entity<SuppliersMissingCreditorsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SuppliersMissingCreditorsView", "mdm");

                entity.Property(e => e.Code)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LongName).HasMaxLength(756);
                entity.Property(e => e.ShortName).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SuppliersView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SuppliersView", "mdm");

                entity.Property(e => e.AccountName).HasMaxLength(250);
                entity.Property(e => e.AccountNumber).HasMaxLength(34);
                entity.Property(e => e.BankName).HasMaxLength(250);
                entity.Property(e => e.Bic)
                    .HasMaxLength(11)
                    .HasColumnName("BIC");
                entity.Property(e => e.ChamberOfCommerceNumber).HasMaxLength(50);
                entity.Property(e => e.City).HasMaxLength(250);
                entity.Property(e => e.CountryCode).HasMaxLength(3);
                entity.Property(e => e.CountryCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CultureCodePreferredLanguage).HasMaxLength(10);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.Email).HasMaxLength(250);
                entity.Property(e => e.ExternalCode).HasMaxLength(10);
                entity.Property(e => e.HouseNo).HasMaxLength(10);
                entity.Property(e => e.HouseNoAddition).HasMaxLength(250);
                entity.Property(e => e.Iban)
                    .HasMaxLength(34)
                    .HasColumnName("IBAN");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.Phone).HasMaxLength(20);
                entity.Property(e => e.PostalCode).HasMaxLength(10);
                entity.Property(e => e.Province).HasMaxLength(250);
                entity.Property(e => e.StreetName).HasMaxLength(250);
                entity.Property(e => e.SupplierAbbreviatedName).HasMaxLength(20);
                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.SupplierName).HasMaxLength(756);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VatCountryCode).HasMaxLength(2);
                entity.Property(e => e.VatNumber).HasMaxLength(50);
                entity.Property(e => e.Website).HasMaxLength(250);
            });

            modelBuilder.Entity<CED.Data.Entities.Task>(entity =>
            {
                entity.ToTable("Tasks", "dos", tb => tb.HasTrigger("th_dos_Tasks_TraceHistory"));

                entity.Property(e => e.TaskId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("TASK_Id");
                entity.Property(e => e.TaskAuthorizationGroupRoleId)
                    .HasMaxLength(50)
                    .HasColumnName("TASK_AuthorizationGroupRole_Id");
                entity.Property(e => e.TaskCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TASK_CreatedBy");
                entity.Property(e => e.TaskCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TASK_CreatedDate");
                entity.Property(e => e.TaskDescription)
                    .HasMaxLength(250)
                    .HasColumnName("TASK_Description");
                entity.Property(e => e.TaskDueDate)
                    .HasColumnType("date")
                    .HasColumnName("TASK_DueDate");
                entity.Property(e => e.TaskLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TASK_LastModifiedBy");
                entity.Property(e => e.TaskLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TASK_LastModifiedDate");
                entity.Property(e => e.TaskStartDate)
                    .HasColumnType("date")
                    .HasColumnName("TASK_StartDate");
                entity.Property(e => e.TaskTaskNumber)
                    .HasMaxLength(20)
                    .HasColumnName("TASK_TaskNumber");
                entity.Property(e => e.TaskTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("TASK_TimeStamp");

                entity.HasOne(d => d.TaskAuthorizationGroupRole).WithMany(p => p.Tasks)
                    .HasForeignKey(d => d.TaskAuthorizationGroupRoleId)
                    .HasConstraintName("FK_Tasks_AuthorizationGroupRoles");
            });

            modelBuilder.Entity<TaskCompletion>(entity =>
            {
                entity.HasKey(e => e.TascId);

                entity.ToTable("TaskCompletions", "dos", tb => tb.HasTrigger("th_dos_TaskCompletions_TraceHistory"));

                entity.Property(e => e.TascId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("TASC_Id");
                entity.Property(e => e.TascCompletionDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("date")
                    .HasColumnName("TASC_CompletionDate");
                entity.Property(e => e.TascCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TASC_CreatedBy");
                entity.Property(e => e.TascCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TASC_CreatedDate");
                entity.Property(e => e.TascEmployeeId).HasColumnName("TASC_Employee_Id");
                entity.Property(e => e.TascIsCanceled).HasColumnName("TASC_IsCanceled");
                entity.Property(e => e.TascLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TASC_LastModifiedBy");
                entity.Property(e => e.TascLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TASC_LastModifiedDate");
                entity.Property(e => e.TascTaskId).HasColumnName("TASC_Task_Id");
                entity.Property(e => e.TascTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("TASC_TimeStamp");

                entity.HasOne(d => d.TascEmployee).WithMany(p => p.TaskCompletions)
                    .HasForeignKey(d => d.TascEmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TaskCompletions_Employees");

                entity.HasOne(d => d.TascTask).WithMany(p => p.TaskCompletions)
                    .HasForeignKey(d => d.TascTaskId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TaskCompletions_Tasks");
            });

            modelBuilder.Entity<TaskCompletionsHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_TaskCompletions_History_ID");

                entity.ToTable("TaskCompletions_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.TascCompletionDate)
                    .HasColumnType("date")
                    .HasColumnName("TASC_CompletionDate");
                entity.Property(e => e.TascCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TASC_CreatedBy");
                entity.Property(e => e.TascCreatedDate).HasColumnName("TASC_CreatedDate");
                entity.Property(e => e.TascEmployeeId).HasColumnName("TASC_Employee_Id");
                entity.Property(e => e.TascId).HasColumnName("TASC_Id");
                entity.Property(e => e.TascIsCanceled).HasColumnName("TASC_IsCanceled");
                entity.Property(e => e.TascLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TASC_LastModifiedBy");
                entity.Property(e => e.TascLastModifiedDate).HasColumnName("TASC_LastModifiedDate");
                entity.Property(e => e.TascTaskId).HasColumnName("TASC_Task_Id");
            });

            modelBuilder.Entity<TaskMember>(entity =>
            {
                entity.HasKey(e => e.TasmId);

                entity.ToTable("TaskMembers", "dos", tb => tb.HasTrigger("th_dos_TaskMembers_TraceHistory"));

                entity.Property(e => e.TasmId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("TASM_Id");
                entity.Property(e => e.TasmCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TASM_CreatedBy");
                entity.Property(e => e.TasmCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TASM_CreatedDate");
                entity.Property(e => e.TasmEmployeeId).HasColumnName("TASM_Employee_Id");
                entity.Property(e => e.TasmLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TASM_LastModifiedBy");
                entity.Property(e => e.TasmLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TASM_LastModifiedDate");
                entity.Property(e => e.TasmTaskId).HasColumnName("TASM_Task_Id");
                entity.Property(e => e.TasmTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("TASM_TimeStamp");

                entity.HasOne(d => d.TasmEmployee).WithMany(p => p.TaskMembers)
                    .HasForeignKey(d => d.TasmEmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TaskMembers_Employees");

                entity.HasOne(d => d.TasmTask).WithMany(p => p.TaskMembers)
                    .HasForeignKey(d => d.TasmTaskId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TaskMembers_Tasks");
            });

            modelBuilder.Entity<TaskMembersHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_TaskMembers_History_ID");

                entity.ToTable("TaskMembers_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.TasmCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TASM_CreatedBy");
                entity.Property(e => e.TasmCreatedDate).HasColumnName("TASM_CreatedDate");
                entity.Property(e => e.TasmEmployeeId).HasColumnName("TASM_Employee_Id");
                entity.Property(e => e.TasmId).HasColumnName("TASM_Id");
                entity.Property(e => e.TasmLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TASM_LastModifiedBy");
                entity.Property(e => e.TasmLastModifiedDate).HasColumnName("TASM_LastModifiedDate");
                entity.Property(e => e.TasmTaskId).HasColumnName("TASM_Task_Id");
            });

            modelBuilder.Entity<TaskNote>(entity =>
            {
                entity.HasKey(e => e.TasnId);

                entity.ToTable("TaskNotes", "dos", tb => tb.HasTrigger("th_dos_TaskNotes_TraceHistory"));

                entity.Property(e => e.TasnId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("TASN_Id");
                entity.Property(e => e.TasnCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TASN_CreatedBy");
                entity.Property(e => e.TasnCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TASN_CreatedDate");
                entity.Property(e => e.TasnEmployeeId).HasColumnName("TASN_Employee_Id");
                entity.Property(e => e.TasnLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TASN_LastModifiedBy");
                entity.Property(e => e.TasnLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TASN_LastModifiedDate");
                entity.Property(e => e.TasnNotes).HasColumnName("TASN_Notes");
                entity.Property(e => e.TasnTaskId).HasColumnName("TASN_Task_Id");
                entity.Property(e => e.TasnTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("TASN_TimeStamp");

                entity.HasOne(d => d.TasnEmployee).WithMany(p => p.TaskNotes)
                    .HasForeignKey(d => d.TasnEmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TaskNotes_Employees");

                entity.HasOne(d => d.TasnTask).WithMany(p => p.TaskNotes)
                    .HasForeignKey(d => d.TasnTaskId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TaskNotes_Tasks");
            });

            modelBuilder.Entity<TaskNotesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_TaskNotes_History_ID");

                entity.ToTable("TaskNotes_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.TasnCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TASN_CreatedBy");
                entity.Property(e => e.TasnCreatedDate).HasColumnName("TASN_CreatedDate");
                entity.Property(e => e.TasnEmployeeId).HasColumnName("TASN_Employee_Id");
                entity.Property(e => e.TasnId).HasColumnName("TASN_Id");
                entity.Property(e => e.TasnLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TASN_LastModifiedBy");
                entity.Property(e => e.TasnLastModifiedDate).HasColumnName("TASN_LastModifiedDate");
                entity.Property(e => e.TasnNotes).HasColumnName("TASN_Notes");
                entity.Property(e => e.TasnTaskId).HasColumnName("TASN_Task_Id");
            });

            modelBuilder.Entity<TasksHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_Tasks_History_ID");

                entity.ToTable("Tasks_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.TaskAuthorizationGroupRoleId)
                    .HasMaxLength(50)
                    .HasColumnName("TASK_AuthorizationGroupRole_Id");
                entity.Property(e => e.TaskCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TASK_CreatedBy");
                entity.Property(e => e.TaskCreatedDate).HasColumnName("TASK_CreatedDate");
                entity.Property(e => e.TaskDescription)
                    .HasMaxLength(250)
                    .HasColumnName("TASK_Description");
                entity.Property(e => e.TaskDueDate)
                    .HasColumnType("date")
                    .HasColumnName("TASK_DueDate");
                entity.Property(e => e.TaskId).HasColumnName("TASK_Id");
                entity.Property(e => e.TaskLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TASK_LastModifiedBy");
                entity.Property(e => e.TaskLastModifiedDate).HasColumnName("TASK_LastModifiedDate");
                entity.Property(e => e.TaskStartDate)
                    .HasColumnType("date")
                    .HasColumnName("TASK_StartDate");
                entity.Property(e => e.TaskTaskNumber)
                    .HasMaxLength(20)
                    .HasColumnName("TASK_TaskNumber");
            });

            modelBuilder.Entity<TaxCategory>(entity =>
            {
                entity.HasKey(e => e.TctId);

                entity.ToTable("TaxCategories", "vat");

                entity.Property(e => e.TctId)
                    .HasMaxLength(20)
                    .HasColumnName("TCT_Id");
                entity.Property(e => e.TctCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TCT_CreatedBy");
                entity.Property(e => e.TctCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TCT_CreatedDate");
                entity.Property(e => e.TctDescription)
                    .HasMaxLength(250)
                    .HasColumnName("TCT_Description");
                entity.Property(e => e.TctInactive).HasColumnName("TCT_Inactive");
                entity.Property(e => e.TctLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TCT_LastModifiedBy");
                entity.Property(e => e.TctLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TCT_LastModifiedDate");
                entity.Property(e => e.TctLocalizableEntryId).HasColumnName("TCT_LocalizableEntry_Id");
                entity.Property(e => e.TctTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("TCT_TimeStamp");

                entity.HasOne(d => d.TctLocalizableEntry).WithMany(p => p.TaxCategories)
                    .HasForeignKey(d => d.TctLocalizableEntryId)
                    .HasConstraintName("FK_TaxCategories_LocalizableEntries");
            });

            modelBuilder.Entity<TaxCode>(entity =>
            {
                entity.HasKey(e => e.TxcId);

                entity.ToTable("TaxCodes", "vat");

                entity.Property(e => e.TxcId)
                    .HasMaxLength(20)
                    .HasColumnName("TXC_Id");
                entity.Property(e => e.TxcCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TXC_CreatedBy");
                entity.Property(e => e.TxcCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TXC_CreatedDate");
                entity.Property(e => e.TxcDescription)
                    .HasMaxLength(250)
                    .HasColumnName("TXC_Description");
                entity.Property(e => e.TxcLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TXC_LastModifiedBy");
                entity.Property(e => e.TxcLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TXC_LastModifiedDate");
                entity.Property(e => e.TxcTaxTypeId).HasColumnName("TXC_TaxType_Id");
                entity.Property(e => e.TxcTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("TXC_TimeStamp");

                entity.HasOne(d => d.TxcTaxType).WithMany(p => p.TaxCodes)
                    .HasForeignKey(d => d.TxcTaxTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TaxCodes_TaxTypes");
            });

            modelBuilder.Entity<TaxType>(entity =>
            {
                entity.HasKey(e => e.TatId);

                entity.ToTable("TaxTypes", "vat");

                entity.Property(e => e.TatId)
                    .ValueGeneratedNever()
                    .HasColumnName("TAT_Id");
                entity.Property(e => e.TatAbbreviation)
                    .HasMaxLength(20)
                    .HasColumnName("TAT_Abbreviation");
                entity.Property(e => e.TatCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TAT_CreatedBy");
                entity.Property(e => e.TatCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TAT_CreatedDate");
                entity.Property(e => e.TatDescription)
                    .HasMaxLength(250)
                    .HasColumnName("TAT_Description");
                entity.Property(e => e.TatInactive).HasColumnName("TAT_Inactive");
                entity.Property(e => e.TatLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TAT_LastModifiedBy");
                entity.Property(e => e.TatLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TAT_LastModifiedDate");
                entity.Property(e => e.TatLocalizableEntryId).HasColumnName("TAT_LocalizableEntry_Id");
                entity.Property(e => e.TatTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("TAT_TimeStamp");

                entity.HasOne(d => d.TatLocalizableEntry).WithMany(p => p.TaxTypes)
                    .HasForeignKey(d => d.TatLocalizableEntryId)
                    .HasConstraintName("FK_TaxTypes_LocalizableEntries");
            });

            modelBuilder.Entity<Team>(entity =>
            {
                entity.HasKey(e => e.TeaId);

                entity.ToTable("Teams", "ced");

                entity.Property(e => e.TeaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("TEA_Id");
                entity.Property(e => e.TeaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TEA_CreatedBy");
                entity.Property(e => e.TeaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TEA_CreatedDate");
                entity.Property(e => e.TeaDepartmentId).HasColumnName("TEA_Department_Id");
                entity.Property(e => e.TeaGroupRoleId)
                    .HasMaxLength(50)
                    .HasColumnName("TEA_GroupRole_Id");
                entity.Property(e => e.TeaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TEA_LastModifiedBy");
                entity.Property(e => e.TeaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TEA_LastModifiedDate");
                entity.Property(e => e.TeaManagerId).HasColumnName("TEA_Manager_Id");
                entity.Property(e => e.TeaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("TEA_TimeStamp");

                entity.HasOne(d => d.TeaDepartment).WithMany(p => p.Teams)
                    .HasForeignKey(d => d.TeaDepartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Teams_Departments");

                entity.HasOne(d => d.Tea).WithOne(p => p.Team)
                    .HasForeignKey<Team>(d => d.TeaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Teams_OrganizationUnits");

                entity.HasOne(d => d.TeaManager).WithMany(p => p.Teams)
                    .HasForeignKey(d => d.TeaManagerId)
                    .HasConstraintName("FK_Teams_Employees");
            });

            modelBuilder.Entity<Template>(entity =>
            {
                entity.HasKey(e => e.TepId);

                entity.ToTable("Templates", "mdm");

                entity.Property(e => e.TepId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("TEP_Id");
                entity.Property(e => e.TepCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TEP_CreatedBy");
                entity.Property(e => e.TepCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TEP_CreatedDate");
                entity.Property(e => e.TepLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TEP_LastModifiedBy");
                entity.Property(e => e.TepLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TEP_LastModifiedDate");
                entity.Property(e => e.TepTemplateName)
                    .HasMaxLength(250)
                    .HasColumnName("TEP_TemplateName");
                entity.Property(e => e.TepTemplateTypeId).HasColumnName("TEP_TemplateType_Id");
                entity.Property(e => e.TepTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("TEP_TimeStamp");

                entity.HasOne(d => d.TepTemplateType).WithMany(p => p.Templates)
                    .HasForeignKey(d => d.TepTemplateTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Templates_TemplateTypes");
            });

            modelBuilder.Entity<TemplateType>(entity =>
            {
                entity.HasKey(e => e.TptId);

                entity.ToTable("TemplateTypes", "mdm");

                entity.Property(e => e.TptId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("TPT_Id");
                entity.Property(e => e.TptCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TPT_CreatedBy");
                entity.Property(e => e.TptCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TPT_CreatedDate");
                entity.Property(e => e.TptLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TPT_LastModifiedBy");
                entity.Property(e => e.TptLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TPT_LastModifiedDate");
                entity.Property(e => e.TptTemplateTypeCode)
                    .HasMaxLength(15)
                    .HasColumnName("TPT_TemplateTypeCode");
                entity.Property(e => e.TptTemplateTypeName)
                    .HasMaxLength(250)
                    .HasColumnName("TPT_TemplateTypeName");
                entity.Property(e => e.TptTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("TPT_TimeStamp");
            });

            modelBuilder.Entity<Tenant>(entity =>
            {
                entity.HasKey(e => e.TenId);

                entity.ToTable("Tenants", "mdm");

                entity.Property(e => e.TenId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("TEN_Id");
                entity.Property(e => e.TenCode)
                    .HasMaxLength(10)
                    .HasColumnName("TEN_Code");
                entity.Property(e => e.TenCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TEN_CreatedBy");
                entity.Property(e => e.TenCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TEN_CreatedDate");
                entity.Property(e => e.TenInactive).HasColumnName("TEN_Inactive");
                entity.Property(e => e.TenLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TEN_LastModifiedBy");
                entity.Property(e => e.TenLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TEN_LastModifiedDate");
                entity.Property(e => e.TenName)
                    .HasMaxLength(50)
                    .HasColumnName("TEN_Name");
                entity.Property(e => e.TenTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("TEN_TimeStamp");
            });

            modelBuilder.Entity<Tenant1>(entity =>
            {
                entity.HasKey(e => e.TenId);

                entity.ToTable("Tenants", "stg");

                entity.Property(e => e.TenId)
                    .ValueGeneratedNever()
                    .HasColumnName("TEN_Id");
                entity.Property(e => e.TenCode)
                    .HasMaxLength(10)
                    .HasColumnName("TEN_Code");
                entity.Property(e => e.TenCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TEN_CreatedBy");
                entity.Property(e => e.TenCreatedDate).HasColumnName("TEN_CreatedDate");
                entity.Property(e => e.TenInactive).HasColumnName("TEN_Inactive");
                entity.Property(e => e.TenLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TEN_LastModifiedBy");
                entity.Property(e => e.TenLastModifiedDate).HasColumnName("TEN_LastModifiedDate");
                entity.Property(e => e.TenName)
                    .HasMaxLength(50)
                    .HasColumnName("TEN_Name");
                entity.Property(e => e.TenTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("TEN_TimeStamp");
            });

            modelBuilder.Entity<TimeSheet>(entity =>
            {
                entity.HasKey(e => e.TshId);

                entity.ToTable("TimeSheets", "fin");

                entity.Property(e => e.TshId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("TSH_Id");
                entity.Property(e => e.TshCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TSH_CreatedBy");
                entity.Property(e => e.TshCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TSH_CreatedDate");
                entity.Property(e => e.TshDossierWorkActivityId).HasColumnName("TSH_DossierWorkActivity_Id");
                entity.Property(e => e.TshExecutionDate)
                    .HasColumnType("date")
                    .HasColumnName("TSH_ExecutionDate");
                entity.Property(e => e.TshExecutionEmployeeId).HasColumnName("TSH_ExecutionEmployee_Id");
                entity.Property(e => e.TshExecutionEmployeeSkillId).HasColumnName("TSH_ExecutionEmployeeSkill_Id");
                entity.Property(e => e.TshLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TSH_LastModifiedBy");
                entity.Property(e => e.TshLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TSH_LastModifiedDate");
                entity.Property(e => e.TshNotInvoiceableReason)
                    .HasMaxLength(250)
                    .HasColumnName("TSH_NotInvoiceableReason");
                entity.Property(e => e.TshQuantity)
                    .HasColumnType("numeric(10, 4)")
                    .HasColumnName("TSH_Quantity");
                entity.Property(e => e.TshQuantityInvoiceable)
                    .HasColumnType("numeric(10, 4)")
                    .HasColumnName("TSH_QuantityInvoiceable");
                entity.Property(e => e.TshTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("TSH_TimeStamp");
                entity.Property(e => e.TshUnitOfMeasureId)
                    .HasMaxLength(20)
                    .HasColumnName("TSH_UnitOfMeasure_Id");

                entity.HasOne(d => d.TshDossierWorkActivity).WithMany(p => p.TimeSheets)
                    .HasForeignKey(d => d.TshDossierWorkActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TimeSheets_DossierWorkActivities");

                entity.HasOne(d => d.TshExecutionEmployee).WithMany(p => p.TimeSheets)
                    .HasForeignKey(d => d.TshExecutionEmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TimeSheets_ExecutionEmployees");

                entity.HasOne(d => d.TshExecutionEmployeeSkill).WithMany(p => p.TimeSheets)
                    .HasForeignKey(d => d.TshExecutionEmployeeSkillId)
                    .HasConstraintName("FK_TimeSheets_ExecutionEmployeeSkills");

                entity.HasOne(d => d.TshUnitOfMeasure).WithMany(p => p.TimeSheets)
                    .HasForeignKey(d => d.TshUnitOfMeasureId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TimeSheets_UnitOfMeasures");
            });

            modelBuilder.Entity<TimeSheetApproval>(entity =>
            {
                entity.HasKey(e => e.TspId);

                entity.ToTable("TimeSheetApprovals", "fin");

                entity.HasIndex(e => e.TspAutorizationRoleId, "IX_TimeSheetApprovals_AuthorizationRoles");

                entity.HasIndex(e => e.TspEmployeeId, "IX_TimeSheetApprovals_Employees");

                entity.HasIndex(e => new { e.TspTimeSheetAuthorizationId, e.TspIsApproved }, "IX_TimeSheetApprovals_TimeSheetAuthorization_IsApproved_INCL");

                entity.Property(e => e.TspId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("TSP_Id");
                entity.Property(e => e.TspApprovalDate).HasColumnName("TSP_ApprovalDate");
                entity.Property(e => e.TspAutorizationRoleId)
                    .HasMaxLength(50)
                    .HasColumnName("TSP_AutorizationRole_Id");
                entity.Property(e => e.TspComment)
                    .HasMaxLength(250)
                    .HasColumnName("TSP_Comment");
                entity.Property(e => e.TspCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TSP_CreatedBy");
                entity.Property(e => e.TspCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TSP_CreatedDate");
                entity.Property(e => e.TspEmployeeId).HasColumnName("TSP_Employee_Id");
                entity.Property(e => e.TspIsApproved).HasColumnName("TSP_IsApproved");
                entity.Property(e => e.TspLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TSP_LastModifiedBy");
                entity.Property(e => e.TspLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TSP_LastModifiedDate");
                entity.Property(e => e.TspTimeSheetAuthorizationId).HasColumnName("TSP_TimeSheetAuthorization_Id");
                entity.Property(e => e.TspTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("TSP_TimeStamp");

                entity.HasOne(d => d.TspAutorizationRole).WithMany(p => p.TimeSheetApprovals)
                    .HasForeignKey(d => d.TspAutorizationRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TimeSheetApprovals_AuthorizationRoles");

                entity.HasOne(d => d.TspEmployee).WithMany(p => p.TimeSheetApprovals)
                    .HasForeignKey(d => d.TspEmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TimeSheetApprovals_Employees");

                entity.HasOne(d => d.TspTimeSheetAuthorization).WithMany(p => p.TimeSheetApprovals)
                    .HasForeignKey(d => d.TspTimeSheetAuthorizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TimeSheetApprovals_TimeSheetAuthorizations");
            });

            modelBuilder.Entity<TimeSheetAuthorization>(entity =>
            {
                entity.HasKey(e => e.TsuId);

                entity.ToTable("TimeSheetAuthorizations", "fin");

                entity.HasIndex(e => new { e.TsuRequiredAutorizationRoleId, e.TsuTimeSheetId }, "IX_TimeSheetAuthorizations_AuthorizationRoles_TimeSheets");

                entity.HasIndex(e => new { e.TsuTimeSheetId, e.TsuRequiredAutorizationRoleId }, "IX_TimeSheetAuthorizations_TimeSheets_AuthorizationRoles");

                entity.Property(e => e.TsuId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("TSU_Id");
                entity.Property(e => e.TsuCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TSU_CreatedBy");
                entity.Property(e => e.TsuCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TSU_CreatedDate");
                entity.Property(e => e.TsuLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TSU_LastModifiedBy");
                entity.Property(e => e.TsuLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TSU_LastModifiedDate");
                entity.Property(e => e.TsuRequiredAutorizationRoleId)
                    .HasMaxLength(50)
                    .HasColumnName("TSU_RequiredAutorizationRole_Id");
                entity.Property(e => e.TsuTimeSheetId).HasColumnName("TSU_TimeSheet_Id");
                entity.Property(e => e.TsuTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("TSU_TimeStamp");

                entity.HasOne(d => d.TsuRequiredAutorizationRole).WithMany(p => p.TimeSheetAuthorizations)
                    .HasForeignKey(d => d.TsuRequiredAutorizationRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TimeSheetAuthorizations_AuthorizationRoles");

                entity.HasOne(d => d.TsuTimeSheet).WithMany(p => p.TimeSheetAuthorizations)
                    .HasForeignKey(d => d.TsuTimeSheetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TimeSheetAuthorizations_TimeSheets");
            });

            modelBuilder.Entity<TimeSheetReasonHistory>(entity =>
            {
                entity.HasKey(e => e.TsrhId);

                entity.ToTable("TimeSheetReasonHistories", "fin");

                entity.Property(e => e.TsrhId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("TSRH_Id");
                entity.Property(e => e.TsrhAdditionalInformation).HasColumnName("TSRH_AdditionalInformation");
                entity.Property(e => e.TsrhCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TSRH_CreatedBy");
                entity.Property(e => e.TsrhCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TSRH_CreatedDate");
                entity.Property(e => e.TsrhLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TSRH_LastModifiedBy");
                entity.Property(e => e.TsrhLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TSRH_LastModifiedDate");
                entity.Property(e => e.TsrhQuantity)
                    .HasColumnType("numeric(10, 4)")
                    .HasColumnName("TSRH_Quantity");
                entity.Property(e => e.TsrhQuantityInvoiceable)
                    .HasColumnType("numeric(10, 4)")
                    .HasColumnName("TSRH_QuantityInvoiceable");
                entity.Property(e => e.TsrhReasonId).HasColumnName("TSRH_Reason_Id");
                entity.Property(e => e.TsrhTimeSheetId).HasColumnName("TSRH_TimeSheet_Id");
                entity.Property(e => e.TsrhTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("TSRH_TimeStamp");

                entity.HasOne(d => d.TsrhTimeSheet).WithMany(p => p.TimeSheetReasonHistories)
                    .HasForeignKey(d => d.TsrhTimeSheetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TimeSheetReasonHistories_TimeSheets");
            });

            modelBuilder.Entity<TimeSlot>(entity =>
            {
                entity.HasKey(e => e.TmsId);

                entity.ToTable("TimeSlots", "mdm");

                entity.Property(e => e.TmsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("TMS_Id");
                entity.Property(e => e.TmsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TMS_CreatedBy");
                entity.Property(e => e.TmsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TMS_CreatedDate");
                entity.Property(e => e.TmsEndTime).HasColumnName("TMS_EndTime");
                entity.Property(e => e.TmsInactive).HasColumnName("TMS_Inactive");
                entity.Property(e => e.TmsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TMS_LastModifiedBy");
                entity.Property(e => e.TmsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TMS_LastModifiedDate");
                entity.Property(e => e.TmsStartTime).HasColumnName("TMS_StartTime");
                entity.Property(e => e.TmsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("TMS_TimeStamp");
            });

            modelBuilder.Entity<TimeTable>(entity =>
            {
                entity.HasKey(e => e.TmtId);

                entity.ToTable("TimeTables", "mdm");

                entity.Property(e => e.TmtId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("TMT_Id");
                entity.Property(e => e.TmtCode)
                    .HasMaxLength(10)
                    .HasColumnName("TMT_Code");
                entity.Property(e => e.TmtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TMT_CreatedBy");
                entity.Property(e => e.TmtCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TMT_CreatedDate");
                entity.Property(e => e.TmtInactive).HasColumnName("TMT_Inactive");
                entity.Property(e => e.TmtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TMT_LastModifiedBy");
                entity.Property(e => e.TmtLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TMT_LastModifiedDate");
                entity.Property(e => e.TmtLongName)
                    .HasMaxLength(250)
                    .HasColumnName("TMT_LongName");
                entity.Property(e => e.TmtShortName)
                    .HasMaxLength(20)
                    .HasColumnName("TMT_ShortName");
                entity.Property(e => e.TmtTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("TMT_TimeStamp");
            });

            modelBuilder.Entity<TimeTableSlot>(entity =>
            {
                entity.HasKey(e => e.TslId);

                entity.ToTable("TimeTableSlots", "mdm");

                entity.Property(e => e.TslId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("TSL_Id");
                entity.Property(e => e.TslCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TSL_CreatedBy");
                entity.Property(e => e.TslCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TSL_CreatedDate");
                entity.Property(e => e.TslInactive).HasColumnName("TSL_Inactive");
                entity.Property(e => e.TslLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("TSL_LastModifiedBy");
                entity.Property(e => e.TslLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("TSL_LastModifiedDate");
                entity.Property(e => e.TslTimeSlotId).HasColumnName("TSL_TimeSlot_Id");
                entity.Property(e => e.TslTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("TSL_TimeStamp");
                entity.Property(e => e.TslTimeTableId).HasColumnName("TSL_TimeTable_Id");

                entity.HasOne(d => d.TslTimeSlot).WithMany(p => p.TimeTableSlots)
                    .HasForeignKey(d => d.TslTimeSlotId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TimeTableSlots_TimeSlots");

                entity.HasOne(d => d.TslTimeTable).WithMany(p => p.TimeTableSlots)
                    .HasForeignKey(d => d.TslTimeTableId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TimeTableSlots_TimeTables");
            });

            modelBuilder.Entity<TimeWindow>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__TimeWind__3214EC07D1B32193");

                entity.ToTable("TimeWindows", "mdm");

                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedDate).HasDefaultValueSql("(getdate())");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.TimeWindowList).WithMany(p => p.TimeWindows)
                    .HasForeignKey(d => d.TimeWindowListId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TimeWindows_TimeWindowLists");
            });

            modelBuilder.Entity<TimeWindowList>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__TimeWind__3214EC076E20B3FA");

                entity.ToTable("TimeWindowLists", "mdm");

                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
                entity.Property(e => e.Code).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedDate).HasDefaultValueSql("(getdate())");
                entity.Property(e => e.LongName).HasMaxLength(250);
                entity.Property(e => e.ShortName).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Department).WithMany(p => p.TimeWindowLists)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_TimeWindowLists_OrganizationUnits");
            });

            modelBuilder.Entity<TransferCreditor>(entity =>
            {
                entity.HasKey(e => e.CreditorId);

                entity.ToTable("TransferCreditors", "exact");

                entity.Property(e => e.CreditorId)
                    .ValueGeneratedNever()
                    .HasColumnName("Creditor_Id");
                entity.Property(e => e.CreditorNumber)
                    .HasMaxLength(20)
                    .HasColumnName("Creditor_Number");
                entity.Property(e => e.CreditorStatus).HasColumnName("Creditor_Status");
            });

            modelBuilder.Entity<TransferDebtor>(entity =>
            {
                entity.HasKey(e => e.DebtorId);

                entity.ToTable("TransferDebtors", "exact");

                entity.Property(e => e.DebtorId)
                    .ValueGeneratedNever()
                    .HasColumnName("Debtor_Id");
                entity.Property(e => e.DebtorNumber)
                    .HasMaxLength(20)
                    .HasColumnName("Debtor_Number");
                entity.Property(e => e.DebtorStatus).HasColumnName("Debtor_Status");
            });

            modelBuilder.Entity<TransferJournalEntry>(entity =>
            {
                entity.HasKey(e => e.JournalEntryId);

                entity.ToTable("TransferJournalEntries", "exact");

                entity.Property(e => e.JournalEntryId)
                    .ValueGeneratedNever()
                    .HasColumnName("JournalEntry_Id");
                entity.Property(e => e.JournalEntryNumber)
                    .HasMaxLength(20)
                    .HasColumnName("JournalEntry_Number");
                entity.Property(e => e.JournalEntryStatus).HasColumnName("JournalEntry_Status");
            });

            modelBuilder.Entity<Transmission>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__Transmis__3214EC07CDBAA837");

                entity.ToTable("Transmissions", "mdm");

                entity.HasIndex(e => e.Code, "UX_mdm_Transmissions_Code__Filtered")
                    .IsUnique()
                    .HasFilter("([Inactive]=(0))");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LongName).HasMaxLength(250);
                entity.Property(e => e.ShortName).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.LocalizableEntry).WithMany(p => p.Transmissions)
                    .HasForeignKey(d => d.LocalizableEntryId)
                    .HasConstraintName("FK_Transmissions_LocalizableEntries");
            });

            modelBuilder.Entity<UnitOfMeasure>(entity =>
            {
                entity.HasKey(e => e.UomId);

                entity.ToTable("UnitOfMeasures", "mdm");

                entity.Property(e => e.UomId)
                    .HasMaxLength(20)
                    .HasColumnName("UOM_Id");
                entity.Property(e => e.UomCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("UOM_CreatedBy");
                entity.Property(e => e.UomCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("UOM_CreatedDate");
                entity.Property(e => e.UomInactive).HasColumnName("UOM_Inactive");
                entity.Property(e => e.UomLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("UOM_LastModifiedBy");
                entity.Property(e => e.UomLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("UOM_LastModifiedDate");
                entity.Property(e => e.UomLocalizableEntryId).HasColumnName("UOM_LocalizableEntry_Id");
                entity.Property(e => e.UomName)
                    .HasMaxLength(250)
                    .HasColumnName("UOM_Name");
                entity.Property(e => e.UomTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UOM_TimeStamp");
                entity.Property(e => e.UomUnitOfMeasureTypesId).HasColumnName("UOM_UnitOfMeasureTypes_Id");

                entity.HasOne(d => d.UomLocalizableEntry).WithMany(p => p.UnitOfMeasures)
                    .HasForeignKey(d => d.UomLocalizableEntryId)
                    .HasConstraintName("FK_UnitOfMeasures_LocalizableEntries");

                entity.HasOne(d => d.UomUnitOfMeasureTypes).WithMany(p => p.UnitOfMeasures)
                    .HasForeignKey(d => d.UomUnitOfMeasureTypesId)
                    .HasConstraintName("FK_UnitOfMeasures_UnitOfMeasureTypes");
            });

            modelBuilder.Entity<UnitOfMeasureType>(entity =>
            {
                entity.HasKey(e => e.UomtId);

                entity.ToTable("UnitOfMeasureTypes", "mdm");

                entity.Property(e => e.UomtId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("UOMT_Id");
                entity.Property(e => e.UomtCode)
                    .HasMaxLength(10)
                    .HasColumnName("UOMT_Code");
                entity.Property(e => e.UomtCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("UOMT_CreatedBy");
                entity.Property(e => e.UomtCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("UOMT_CreatedDate");
                entity.Property(e => e.UomtInactive).HasColumnName("UOMT_Inactive");
                entity.Property(e => e.UomtLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("UOMT_LastModifiedBy");
                entity.Property(e => e.UomtLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("UOMT_LastModifiedDate");
                entity.Property(e => e.UomtLocalizableEntryId).HasColumnName("UOMT_LocalizableEntry_Id");
                entity.Property(e => e.UomtLongName)
                    .HasMaxLength(250)
                    .HasColumnName("UOMT_LongName");
                entity.Property(e => e.UomtShortName)
                    .HasMaxLength(20)
                    .HasColumnName("UOMT_ShortName");
                entity.Property(e => e.UomtTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UOMT_TimeStamp");

                entity.HasOne(d => d.UomtLocalizableEntry).WithMany(p => p.UnitOfMeasureTypes)
                    .HasForeignKey(d => d.UomtLocalizableEntryId)
                    .HasConstraintName("FK_UnitOfMeasureTypes_LocalizableEntries");
            });

            modelBuilder.Entity<UnprocessedFailedQueueMessagesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("UnprocessedFailedQueueMessagesView");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.QueueSettingName).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.TopicSettingName).HasMaxLength(20);
            });

            modelBuilder.Entity<UpdateStatusesRequest>(entity =>
            {
                entity.HasKey(e => e.UsrId);

                entity.ToTable("UpdateStatusesRequests", "pros");

                entity.Property(e => e.UsrId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("USR_Id");
                entity.Property(e => e.UsrCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("USR_CreatedBy");
                entity.Property(e => e.UsrCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("USR_CreatedDate");
                entity.Property(e => e.UsrDate)
                    .HasColumnType("date")
                    .HasColumnName("USR_Date");
                entity.Property(e => e.UsrIsExecuted).HasColumnName("USR_IsExecuted");
                entity.Property(e => e.UsrLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("USR_LastModifiedBy");
                entity.Property(e => e.UsrLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("USR_LastModifiedDate");
                entity.Property(e => e.UsrTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("USR_TimeStamp");
            });

            modelBuilder.Entity<ValuationPrinciple>(entity =>
            {
                entity.HasKey(e => e.VpId);

                entity.ToTable("ValuationPrinciples", "pdc");

                entity.Property(e => e.VpId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("VP_Id");
                entity.Property(e => e.VpCode)
                    .HasMaxLength(10)
                    .HasColumnName("VP_Code");
                entity.Property(e => e.VpCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VP_CreatedBy");
                entity.Property(e => e.VpCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("VP_CreatedDate");
                entity.Property(e => e.VpInactive).HasColumnName("VP_Inactive");
                entity.Property(e => e.VpLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VP_LastModifiedBy");
                entity.Property(e => e.VpLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("VP_LastModifiedDate");
                entity.Property(e => e.VpLocalizableEntryId).HasColumnName("VP_LocalizableEntry_Id");
                entity.Property(e => e.VpLongName)
                    .HasMaxLength(250)
                    .HasColumnName("VP_LongName");
                entity.Property(e => e.VpShortName)
                    .HasMaxLength(20)
                    .HasColumnName("VP_ShortName");
                entity.Property(e => e.VpTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("VP_TimeStamp");

                entity.HasOne(d => d.VpLocalizableEntry).WithMany(p => p.ValuationPrinciples)
                    .HasForeignKey(d => d.VpLocalizableEntryId)
                    .HasConstraintName("FK_ValuationPrinciples_LocalizableEntries");
            });

            modelBuilder.Entity<VatNumberTaxCode>(entity =>
            {
                entity.HasKey(e => e.VtcId);

                entity.ToTable("VatNumberTaxCodes", "vat");

                entity.Property(e => e.VtcId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("VTC_Id");
                entity.Property(e => e.VtcCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VTC_CreatedBy");
                entity.Property(e => e.VtcCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("VTC_CreatedDate");
                entity.Property(e => e.VtcInactive).HasColumnName("VTC_Inactive");
                entity.Property(e => e.VtcIsEuropeanVatNumber).HasColumnName("VTC_IsEuropeanVatNumber");
                entity.Property(e => e.VtcIsValidVatNumer).HasColumnName("VTC_IsValidVatNumer");
                entity.Property(e => e.VtcLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VTC_LastModifiedBy");
                entity.Property(e => e.VtcLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("VTC_LastModifiedDate");
                entity.Property(e => e.VtcLocalizableEntryId).HasColumnName("VTC_LocalizableEntry_Id");
                entity.Property(e => e.VtcTaxCodeId)
                    .HasMaxLength(20)
                    .HasColumnName("VTC_TaxCode_Id");
                entity.Property(e => e.VtcTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("VTC_TimeStamp");

                entity.HasOne(d => d.VtcLocalizableEntry).WithMany(p => p.VatNumberTaxCodes)
                    .HasForeignKey(d => d.VtcLocalizableEntryId)
                    .HasConstraintName("FK_VatNumberTaxCodes_LocalizableEntries");
            });

            modelBuilder.Entity<VatNumberValidation>(entity =>
            {
                entity.HasKey(e => e.VnvId);

                entity.ToTable("VatNumberValidations", "vat");

                entity.Property(e => e.VnvId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("VNV_Id");
                entity.Property(e => e.VnvCompanyName)
                    .HasMaxLength(100)
                    .HasColumnName("VNV_CompanyName");
                entity.Property(e => e.VnvCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("VNV_CountryCode");
                entity.Property(e => e.VnvCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VNV_CreatedBy");
                entity.Property(e => e.VnvCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("VNV_CreatedDate");
                entity.Property(e => e.VnvFullAddress)
                    .HasMaxLength(500)
                    .HasColumnName("VNV_FullAddress");
                entity.Property(e => e.VnvIsValid).HasColumnName("VNV_IsValid");
                entity.Property(e => e.VnvLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VNV_LastModifiedBy");
                entity.Property(e => e.VnvLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("VNV_LastModifiedDate");
                entity.Property(e => e.VnvTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("VNV_TimeStamp");
                entity.Property(e => e.VnvValidationDate).HasColumnName("VNV_ValidationDate");
                entity.Property(e => e.VnvVatNumber)
                    .HasMaxLength(50)
                    .HasColumnName("VNV_VatNumber");
                entity.Property(e => e.VnvVatnumberValidationSourceId).HasColumnName("VNV_VatnumberValidationSource_Id");

                entity.HasOne(d => d.VnvVatnumberValidationSource).WithMany(p => p.VatNumberValidations)
                    .HasForeignKey(d => d.VnvVatnumberValidationSourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VatNumberValidations_VatNumberValidationSource");
            });

            modelBuilder.Entity<VatNumberValidationSource>(entity =>
            {
                entity.HasKey(e => e.VvsId);

                entity.ToTable("VatNumberValidationSource", "vat");

                entity.HasIndex(e => e.VvsCode, "IX_VatNumberValidationSource_Code").IsUnique();

                entity.Property(e => e.VvsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("VVS_Id");
                entity.Property(e => e.VvsCode).HasColumnName("VVS_Code");
                entity.Property(e => e.VvsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VVS_CreatedBy");
                entity.Property(e => e.VvsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("VVS_CreatedDate");
                entity.Property(e => e.VvsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VVS_LastModifiedBy");
                entity.Property(e => e.VvsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("VVS_LastModifiedDate");
                entity.Property(e => e.VvsName)
                    .HasMaxLength(20)
                    .HasColumnName("VVS_Name");
                entity.Property(e => e.VvsResource)
                    .HasMaxLength(2000)
                    .HasColumnName("VVS_Resource");
                entity.Property(e => e.VvsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("VVS_TimeStamp");
            });

            modelBuilder.Entity<VatRegistration>(entity =>
            {
                entity.HasKey(e => e.VtrId);

                entity.ToTable("VatRegistrations", "mdm");

                entity.HasIndex(e => e.VtrVatNumber, "IX_VatRegistrations_VatNumber");

                entity.Property(e => e.VtrId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("VTR_Id");
                entity.Property(e => e.VtrCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("VTR_CountryCode");
                entity.Property(e => e.VtrCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VTR_CreatedBy");
                entity.Property(e => e.VtrCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("VTR_CreatedDate");
                entity.Property(e => e.VtrInactive).HasColumnName("VTR_Inactive");
                entity.Property(e => e.VtrLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VTR_LastModifiedBy");
                entity.Property(e => e.VtrLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("VTR_LastModifiedDate");
                entity.Property(e => e.VtrLegalName)
                    .HasMaxLength(250)
                    .HasColumnName("VTR_LegalName");
                entity.Property(e => e.VtrTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("VTR_TimeStamp");
                entity.Property(e => e.VtrVatNumber)
                    .HasMaxLength(50)
                    .HasColumnName("VTR_VatNumber");
            });

            modelBuilder.Entity<Vee>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToTable("vee");

                entity.Property(e => e.PrdCode)
                    .HasMaxLength(10)
                    .HasColumnName("PRD_Code");
            });

            modelBuilder.Entity<Vehicle>(entity =>
            {
                entity.HasKey(e => e.VehId);

                entity.ToTable("Vehicles", "dos", tb => tb.HasTrigger("th_dos_Vehicles_TraceHistory"));

                entity.Property(e => e.VehId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("VEH_Id");
                entity.Property(e => e.VehBody)
                    .HasMaxLength(50)
                    .HasColumnName("VEH_Body");
                entity.Property(e => e.VehBpm).HasColumnName("VEH_Bpm");
                entity.Property(e => e.VehBrand)
                    .HasMaxLength(50)
                    .HasColumnName("VEH_Brand");
                entity.Property(e => e.VehChassisNumber)
                    .HasMaxLength(50)
                    .HasColumnName("VEH_ChassisNumber");
                entity.Property(e => e.VehClassification)
                    .HasMaxLength(50)
                    .HasColumnName("VEH_Classification");
                entity.Property(e => e.VehCommercialDescription)
                    .HasMaxLength(250)
                    .HasColumnName("VEH_CommercialDescription");
                entity.Property(e => e.VehCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VEH_CreatedBy");
                entity.Property(e => e.VehCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("VEH_CreatedDate");
                entity.Property(e => e.VehCylinders).HasColumnName("VEH_Cylinders");
                entity.Property(e => e.VehDamageLocationPoint)
                    .HasMaxLength(200)
                    .HasColumnName("VEH_DamageLocationPoint");
                entity.Property(e => e.VehDoors).HasColumnName("VEH_Doors");
                entity.Property(e => e.VehEmissionCode)
                    .HasMaxLength(10)
                    .HasColumnName("VEH_EmissionCode");
                entity.Property(e => e.VehEngineCapacity).HasColumnName("VEH_EngineCapacity");
                entity.Property(e => e.VehFirstColor)
                    .HasMaxLength(50)
                    .HasColumnName("VEH_FirstColor");
                entity.Property(e => e.VehFirstRegistration)
                    .HasColumnType("date")
                    .HasColumnName("VEH_FirstRegistration");
                entity.Property(e => e.VehFirstReleaseNetherlands)
                    .HasColumnType("date")
                    .HasColumnName("VEH_FirstReleaseNetherlands");
                entity.Property(e => e.VehGreenCardNumber)
                    .HasMaxLength(20)
                    .HasColumnName("VEH_GreenCardNumber");
                entity.Property(e => e.VehHasG3installation).HasColumnName("VEH_HasG3Installation");
                entity.Property(e => e.VehInsurancePolicyNumber)
                    .HasMaxLength(50)
                    .HasColumnName("VEH_InsurancePolicyNumber");
                entity.Property(e => e.VehIsMeldcodeCorrect).HasColumnName("VEH_IsMeldcodeCorrect");
                entity.Property(e => e.VehIsObligationHolder).HasColumnName("VEH_IsObligationHolder");
                entity.Property(e => e.VehIsParallelImport).HasColumnName("VEH_IsParallelImport");
                entity.Property(e => e.VehIsReplacement).HasColumnName("VEH_IsReplacement");
                entity.Property(e => e.VehIsTaxi).HasColumnName("VEH_IsTaxi");
                entity.Property(e => e.VehIsWamInsured).HasColumnName("VEH_IsWamInsured");
                entity.Property(e => e.VehLastAscription).HasColumnName("VEH_LastAscription");
                entity.Property(e => e.VehLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VEH_LastModifiedBy");
                entity.Property(e => e.VehLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("VEH_LastModifiedDate");
                entity.Property(e => e.VehLicenseCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("VEH_LicenseCountryCode");
                entity.Property(e => e.VehLicensePlate)
                    .HasMaxLength(15)
                    .HasColumnName("VEH_LicensePlate");
                entity.Property(e => e.VehLicensePlateUnformatted)
                    .HasMaxLength(15)
                    .HasColumnName("VEH_LicensePlateUnformatted");
                entity.Property(e => e.VehListPrice)
                    .HasColumnType("money")
                    .HasColumnName("VEH_ListPrice");
                entity.Property(e => e.VehLoadBearingCapacity).HasColumnName("VEH_LoadBearingCapacity");
                entity.Property(e => e.VehMassEmptyVehicle).HasColumnName("VEH_MassEmptyVehicle");
                entity.Property(e => e.VehMassRoadWorthy).HasColumnName("VEH_MassRoadWorthy");
                entity.Property(e => e.VehMaximumPermissibleMass).HasColumnName("VEH_MaximumPermissibleMass");
                entity.Property(e => e.VehMaximumSpeed).HasColumnName("VEH_MaximumSpeed");
                entity.Property(e => e.VehMaximumTowableMassAutonomousBraked).HasColumnName("VEH_MaximumTowableMassAutonomousBraked");
                entity.Property(e => e.VehMaximumTowableMassBraked).HasColumnName("VEH_MaximumTowableMassBraked");
                entity.Property(e => e.VehMaximumTowableMassCenterAxisBraked).HasColumnName("VEH_MaximumTowableMassCenterAxisBraked");
                entity.Property(e => e.VehMaximumTowableMassTrailerBraked).HasColumnName("VEH_MaximumTowableMassTrailerBraked");
                entity.Property(e => e.VehMaximumTowableMassUnbraked).HasColumnName("VEH_MaximumTowableMassUnbraked");
                entity.Property(e => e.VehMileageKm).HasColumnName("VEH_MileageKm");
                entity.Property(e => e.VehMoTexpiry)
                    .HasColumnType("date")
                    .HasColumnName("VEH_MoTExpiry");
                entity.Property(e => e.VehModel)
                    .HasMaxLength(50)
                    .HasColumnName("VEH_Model");
                entity.Property(e => e.VehMotorCode)
                    .HasMaxLength(20)
                    .HasColumnName("VEH_MotorCode");
                entity.Property(e => e.VehOvsClearinghuisCommunityAddress)
                    .HasMaxLength(8)
                    .HasColumnName("VEH_OvsClearinghuisCommunityAddress");
                entity.Property(e => e.VehOvsCode)
                    .HasMaxLength(50)
                    .HasColumnName("VEH_OvsCode");
                entity.Property(e => e.VehOvsDescription)
                    .HasMaxLength(200)
                    .HasColumnName("VEH_OvsDescription");
                entity.Property(e => e.VehOvsPercentageLiability)
                    .HasMaxLength(50)
                    .HasColumnName("VEH_OvsPercentageLiability");
                entity.Property(e => e.VehOwnerVehicle)
                    .HasMaxLength(50)
                    .HasColumnName("VEH_OwnerVehicle");
                entity.Property(e => e.VehPowerKw).HasColumnName("VEH_PowerKW");
                entity.Property(e => e.VehPowerMoped).HasColumnName("VEH_PowerMoped");
                entity.Property(e => e.VehPrimaryFuelTypeCode)
                    .HasMaxLength(50)
                    .HasColumnName("VEH_PrimaryFuelTypeCode");
                entity.Property(e => e.VehPrimaryFuelTypeId).HasColumnName("VEH_PrimaryFuelType_Id");
                entity.Property(e => e.VehSeats).HasColumnName("VEH_Seats");
                entity.Property(e => e.VehSecondColor)
                    .HasMaxLength(50)
                    .HasColumnName("VEH_SecondColor");
                entity.Property(e => e.VehSecondaryFuelTypeCode)
                    .HasMaxLength(50)
                    .HasColumnName("VEH_SecondaryFuelTypeCode");
                entity.Property(e => e.VehSecondaryFuelTypeId).HasColumnName("VEH_SecondaryFuelType_Id");
                entity.Property(e => e.VehStandingPlaces).HasColumnName("VEH_StandingPlaces");
                entity.Property(e => e.VehTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("VEH_TimeStamp");
                entity.Property(e => e.VehTypeVehicle)
                    .HasMaxLength(50)
                    .HasColumnName("VEH_TypeVehicle");
                entity.Property(e => e.VehVehicleKindId).HasColumnName("VEH_VehicleKind_Id");
                entity.Property(e => e.VehVersionSequenceNumber).HasColumnName("VEH_VersionSequenceNumber");
                entity.Property(e => e.VehWheelBase).HasColumnName("VEH_WheelBase");
                entity.Property(e => e.VehWheels).HasColumnName("VEH_Wheels");

                entity.HasOne(d => d.Veh).WithOne(p => p.Vehicle)
                    .HasForeignKey<Vehicle>(d => d.VehId)
                    .HasConstraintName("FK_Vehicles_InvolvedObjects");

                entity.HasOne(d => d.VehPrimaryFuelType).WithMany(p => p.VehicleVehPrimaryFuelTypes)
                    .HasForeignKey(d => d.VehPrimaryFuelTypeId)
                    .HasConstraintName("FK_Vehicles_FuelTypes_Primary");

                entity.HasOne(d => d.VehSecondaryFuelType).WithMany(p => p.VehicleVehSecondaryFuelTypes)
                    .HasForeignKey(d => d.VehSecondaryFuelTypeId)
                    .HasConstraintName("FK_Vehicles_FuelTypes_Secondary");
            });

            modelBuilder.Entity<VehiclesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_Vehicles_History_ID");

                entity.ToTable("Vehicles_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.VehBody)
                    .HasMaxLength(50)
                    .HasColumnName("VEH_Body");
                entity.Property(e => e.VehBpm).HasColumnName("VEH_Bpm");
                entity.Property(e => e.VehBrand)
                    .HasMaxLength(50)
                    .HasColumnName("VEH_Brand");
                entity.Property(e => e.VehChassisNumber)
                    .HasMaxLength(50)
                    .HasColumnName("VEH_ChassisNumber");
                entity.Property(e => e.VehClassification)
                    .HasMaxLength(50)
                    .HasColumnName("VEH_Classification");
                entity.Property(e => e.VehCommercialDescription)
                    .HasMaxLength(250)
                    .HasColumnName("VEH_CommercialDescription");
                entity.Property(e => e.VehCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VEH_CreatedBy");
                entity.Property(e => e.VehCreatedDate).HasColumnName("VEH_CreatedDate");
                entity.Property(e => e.VehCylinders).HasColumnName("VEH_Cylinders");
                entity.Property(e => e.VehDamageLocationPoint)
                    .HasMaxLength(200)
                    .HasColumnName("VEH_DamageLocationPoint");
                entity.Property(e => e.VehDoors).HasColumnName("VEH_Doors");
                entity.Property(e => e.VehEmissionCode)
                    .HasMaxLength(10)
                    .HasColumnName("VEH_EmissionCode");
                entity.Property(e => e.VehEngineCapacity).HasColumnName("VEH_EngineCapacity");
                entity.Property(e => e.VehFirstColor)
                    .HasMaxLength(50)
                    .HasColumnName("VEH_FirstColor");
                entity.Property(e => e.VehFirstRegistration)
                    .HasColumnType("date")
                    .HasColumnName("VEH_FirstRegistration");
                entity.Property(e => e.VehFirstReleaseNetherlands)
                    .HasColumnType("date")
                    .HasColumnName("VEH_FirstReleaseNetherlands");
                entity.Property(e => e.VehGreenCardNumber)
                    .HasMaxLength(20)
                    .HasColumnName("VEH_GreenCardNumber");
                entity.Property(e => e.VehHasG3installation).HasColumnName("VEH_HasG3Installation");
                entity.Property(e => e.VehId).HasColumnName("VEH_Id");
                entity.Property(e => e.VehInsurancePolicyNumber)
                    .HasMaxLength(50)
                    .HasColumnName("VEH_InsurancePolicyNumber");
                entity.Property(e => e.VehIsMeldcodeCorrect).HasColumnName("VEH_IsMeldcodeCorrect");
                entity.Property(e => e.VehIsObligationHolder).HasColumnName("VEH_IsObligationHolder");
                entity.Property(e => e.VehIsParallelImport).HasColumnName("VEH_IsParallelImport");
                entity.Property(e => e.VehIsReplacement).HasColumnName("VEH_IsReplacement");
                entity.Property(e => e.VehIsTaxi).HasColumnName("VEH_IsTaxi");
                entity.Property(e => e.VehIsWamInsured).HasColumnName("VEH_IsWamInsured");
                entity.Property(e => e.VehLastAscription).HasColumnName("VEH_LastAscription");
                entity.Property(e => e.VehLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VEH_LastModifiedBy");
                entity.Property(e => e.VehLastModifiedDate).HasColumnName("VEH_LastModifiedDate");
                entity.Property(e => e.VehLicenseCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("VEH_LicenseCountryCode");
                entity.Property(e => e.VehLicensePlate)
                    .HasMaxLength(15)
                    .HasColumnName("VEH_LicensePlate");
                entity.Property(e => e.VehLicensePlateUnformatted)
                    .HasMaxLength(15)
                    .HasColumnName("VEH_LicensePlateUnformatted");
                entity.Property(e => e.VehListPrice)
                    .HasColumnType("money")
                    .HasColumnName("VEH_ListPrice");
                entity.Property(e => e.VehLoadBearingCapacity).HasColumnName("VEH_LoadBearingCapacity");
                entity.Property(e => e.VehMassEmptyVehicle).HasColumnName("VEH_MassEmptyVehicle");
                entity.Property(e => e.VehMassRoadWorthy).HasColumnName("VEH_MassRoadWorthy");
                entity.Property(e => e.VehMaximumPermissibleMass).HasColumnName("VEH_MaximumPermissibleMass");
                entity.Property(e => e.VehMaximumSpeed).HasColumnName("VEH_MaximumSpeed");
                entity.Property(e => e.VehMaximumTowableMassAutonomousBraked).HasColumnName("VEH_MaximumTowableMassAutonomousBraked");
                entity.Property(e => e.VehMaximumTowableMassBraked).HasColumnName("VEH_MaximumTowableMassBraked");
                entity.Property(e => e.VehMaximumTowableMassCenterAxisBraked).HasColumnName("VEH_MaximumTowableMassCenterAxisBraked");
                entity.Property(e => e.VehMaximumTowableMassTrailerBraked).HasColumnName("VEH_MaximumTowableMassTrailerBraked");
                entity.Property(e => e.VehMaximumTowableMassUnbraked).HasColumnName("VEH_MaximumTowableMassUnbraked");
                entity.Property(e => e.VehMileageKm).HasColumnName("VEH_MileageKm");
                entity.Property(e => e.VehMoTexpiry)
                    .HasColumnType("date")
                    .HasColumnName("VEH_MoTExpiry");
                entity.Property(e => e.VehModel)
                    .HasMaxLength(50)
                    .HasColumnName("VEH_Model");
                entity.Property(e => e.VehMotorCode)
                    .HasMaxLength(20)
                    .HasColumnName("VEH_MotorCode");
                entity.Property(e => e.VehOvsClearinghuisCommunityAddress)
                    .HasMaxLength(8)
                    .HasColumnName("VEH_OvsClearinghuisCommunityAddress");
                entity.Property(e => e.VehOvsCode)
                    .HasMaxLength(50)
                    .HasColumnName("VEH_OvsCode");
                entity.Property(e => e.VehOvsDescription)
                    .HasMaxLength(200)
                    .HasColumnName("VEH_OvsDescription");
                entity.Property(e => e.VehOvsPercentageLiability)
                    .HasMaxLength(50)
                    .HasColumnName("VEH_OvsPercentageLiability");
                entity.Property(e => e.VehOwnerVehicle)
                    .HasMaxLength(50)
                    .HasColumnName("VEH_OwnerVehicle");
                entity.Property(e => e.VehPowerKw).HasColumnName("VEH_PowerKW");
                entity.Property(e => e.VehPowerMoped).HasColumnName("VEH_PowerMoped");
                entity.Property(e => e.VehPrimaryFuelTypeCode)
                    .HasMaxLength(50)
                    .HasColumnName("VEH_PrimaryFuelTypeCode");
                entity.Property(e => e.VehPrimaryFuelTypeId).HasColumnName("VEH_PrimaryFuelType_Id");
                entity.Property(e => e.VehSeats).HasColumnName("VEH_Seats");
                entity.Property(e => e.VehSecondColor)
                    .HasMaxLength(50)
                    .HasColumnName("VEH_SecondColor");
                entity.Property(e => e.VehSecondaryFuelTypeCode)
                    .HasMaxLength(50)
                    .HasColumnName("VEH_SecondaryFuelTypeCode");
                entity.Property(e => e.VehSecondaryFuelTypeId).HasColumnName("VEH_SecondaryFuelType_Id");
                entity.Property(e => e.VehStandingPlaces).HasColumnName("VEH_StandingPlaces");
                entity.Property(e => e.VehTypeVehicle)
                    .HasMaxLength(50)
                    .HasColumnName("VEH_TypeVehicle");
                entity.Property(e => e.VehVehicleKindId).HasColumnName("VEH_VehicleKind_Id");
                entity.Property(e => e.VehVersionSequenceNumber).HasColumnName("VEH_VersionSequenceNumber");
                entity.Property(e => e.VehWheelBase).HasColumnName("VEH_WheelBase");
                entity.Property(e => e.VehWheels).HasColumnName("VEH_Wheels");
            });

            modelBuilder.Entity<VehiclesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("VehiclesView", "dos");

                entity.Property(e => e.Brand).HasMaxLength(50);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DamageLocationPoint).HasMaxLength(200);
                entity.Property(e => e.GreencardNumber).HasMaxLength(20);
                entity.Property(e => e.InvolvedObjectCode).HasMaxLength(10);
                entity.Property(e => e.InvolvedObjectName).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LicensePlate).HasMaxLength(15);
                entity.Property(e => e.LicensePlateCountryCode).HasMaxLength(3);
                entity.Property(e => e.Model).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.TypeVehicle).HasMaxLength(50);
            });

            modelBuilder.Entity<VisitInformation>(entity =>
            {
                entity.HasKey(e => e.VifId);

                entity.ToTable("VisitInformations", "dos", tb => tb.HasTrigger("th_dos_VisitInformations_TraceHistory"));

                entity.Property(e => e.VifId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("VIF_Id");
                entity.Property(e => e.VifAdditionalInformation).HasColumnName("VIF_AdditionalInformation");
                entity.Property(e => e.VifAddressLevel1)
                    .HasMaxLength(255)
                    .HasColumnName("VIF_AddressLevel1");
                entity.Property(e => e.VifAddressLevel2)
                    .HasMaxLength(255)
                    .HasColumnName("VIF_AddressLevel2");
                entity.Property(e => e.VifAppointmentTime).HasColumnName("VIF_AppointmentTime");
                entity.Property(e => e.VifCallToday).HasColumnName("VIF_CallToday");
                entity.Property(e => e.VifContactPerson)
                    .HasMaxLength(255)
                    .HasColumnName("VIF_ContactPerson");
                entity.Property(e => e.VifCountry)
                    .HasMaxLength(28)
                    .HasColumnName("VIF_Country");
                entity.Property(e => e.VifCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VIF_CreatedBy");
                entity.Property(e => e.VifCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("VIF_CreatedDate");
                entity.Property(e => e.VifDamageAmountEstimate)
                    .HasColumnType("money")
                    .HasColumnName("VIF_DamageAmountEstimate");
                entity.Property(e => e.VifDistance).HasColumnName("VIF_Distance");
                entity.Property(e => e.VifDossierId).HasColumnName("VIF_Dossier_Id");
                entity.Property(e => e.VifDrivingTime).HasColumnName("VIF_DrivingTime");
                entity.Property(e => e.VifEmployeeId).HasColumnName("VIF_Employee_Id");
                entity.Property(e => e.VifExpectedArrival).HasColumnName("VIF_ExpectedArrival");
                entity.Property(e => e.VifExternalId).HasColumnName("VIF_ExternalId");
                entity.Property(e => e.VifExternalUrl)
                    .HasMaxLength(1000)
                    .HasColumnName("VIF_ExternalUrl");
                entity.Property(e => e.VifFixedHandler).HasColumnName("VIF_FixedHandler");
                entity.Property(e => e.VifHouseNumberAddition)
                    .HasMaxLength(16)
                    .HasColumnName("VIF_HouseNumberAddition");
                entity.Property(e => e.VifInvolvedPartyId).HasColumnName("VIF_InvolvedParty_Id");
                entity.Property(e => e.VifIsActive).HasColumnName("VIF_IsActive");
                entity.Property(e => e.VifLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VIF_LastModifiedBy");
                entity.Property(e => e.VifLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("VIF_LastModifiedDate");
                entity.Property(e => e.VifLocationObjectX)
                    .HasMaxLength(255)
                    .HasColumnName("VIF_LocationObjectX");
                entity.Property(e => e.VifLocationUnknow).HasColumnName("VIF_LocationUnknow");
                entity.Property(e => e.VifPhoneNumber)
                    .HasMaxLength(16)
                    .HasColumnName("VIF_PhoneNumber");
                entity.Property(e => e.VifPostponedTo)
                    .HasColumnType("datetime")
                    .HasColumnName("VIF_PostponedTo");
                entity.Property(e => e.VifPriority).HasColumnName("VIF_Priority");
                entity.Property(e => e.VifReason)
                    .HasMaxLength(250)
                    .HasColumnName("VIF_Reason");
                entity.Property(e => e.VifReportingTime).HasColumnName("VIF_ReportingTime");
                entity.Property(e => e.VifSequence).HasColumnName("VIF_Sequence");
                entity.Property(e => e.VifState)
                    .HasMaxLength(128)
                    .HasColumnName("VIF_State");
                entity.Property(e => e.VifTimeSoltId).HasColumnName("VIF_TimeSolt_Id");
                entity.Property(e => e.VifTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("VIF_TimeStamp");
                entity.Property(e => e.VifTypeOfContact)
                    .HasMaxLength(50)
                    .HasColumnName("VIF_TypeOfContact");
                entity.Property(e => e.VifVisitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("VIF_VisitDate");
                entity.Property(e => e.VifVisitRangeEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("VIF_VisitRangeEndDate");
                entity.Property(e => e.VifVisitRangeStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("VIF_VisitRangeStartDate");
                entity.Property(e => e.VifZipCode)
                    .HasMaxLength(16)
                    .HasColumnName("VIF_ZipCode");

                entity.HasOne(d => d.VifDossier).WithMany(p => p.VisitInformations)
                    .HasForeignKey(d => d.VifDossierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VisitInformations_VIF_Dossier_Id");

                entity.HasOne(d => d.VifEmployee).WithMany(p => p.VisitInformations)
                    .HasForeignKey(d => d.VifEmployeeId)
                    .HasConstraintName("FK_VisitInformations_VIF_Employee_Id");

                entity.HasOne(d => d.VifInvolvedParty).WithMany(p => p.VisitInformations)
                    .HasForeignKey(d => d.VifInvolvedPartyId)
                    .HasConstraintName("FK_VisitInformations_VIF_InvolvedParty_Id");
            });

            modelBuilder.Entity<VisitInformationLogHistory>(entity =>
            {
                entity.HasKey(e => e.VlhId);

                entity.ToTable("VisitInformationLogHistory", "dos");

                entity.Property(e => e.VlhId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("VLH_Id");
                entity.Property(e => e.VlhCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VLH_CreatedBy");
                entity.Property(e => e.VlhCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("VLH_CreatedDate");
                entity.Property(e => e.VlhFreeText)
                    .HasColumnType("ntext")
                    .HasColumnName("VLH_FreeText");
                entity.Property(e => e.VlhLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VLH_LastModifiedBy");
                entity.Property(e => e.VlhLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("VLH_LastModifiedDate");
                entity.Property(e => e.VlhLineNumber).HasColumnName("VLH_LineNumber");
                entity.Property(e => e.VlhLogHistoryTypeId).HasColumnName("VLH_LogHistoryType_Id");
                entity.Property(e => e.VlhRoleCodeId).HasColumnName("VLH_RoleCode_Id");
                entity.Property(e => e.VlhTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("VLH_TimeStamp");
                entity.Property(e => e.VlhVisitInformationId).HasColumnName("VLH_VisitInformation_Id");

                entity.HasOne(d => d.VlhLogHistoryType).WithMany(p => p.VisitInformationLogHistories)
                    .HasForeignKey(d => d.VlhLogHistoryTypeId)
                    .HasConstraintName("FK_VisitInformationLogHistory_LogHistoryTypes");

                entity.HasOne(d => d.VlhRoleCode).WithMany(p => p.VisitInformationLogHistories)
                    .HasForeignKey(d => d.VlhRoleCodeId)
                    .HasConstraintName("FK_VisitInformationLogHistory_RoleCodes");

                entity.HasOne(d => d.VlhVisitInformation).WithMany(p => p.VisitInformationLogHistories)
                    .HasForeignKey(d => d.VlhVisitInformationId)
                    .HasConstraintName("FK_VisitInformationLogHistory_VisitInformations");
            });

            modelBuilder.Entity<VisitInformationLogHistoryHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_VisitInformationLogHistory_History_ID");

                entity.ToTable("VisitInformationLogHistory_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.VlhCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VLH_CreatedBy");
                entity.Property(e => e.VlhCreatedDate).HasColumnName("VLH_CreatedDate");
                entity.Property(e => e.VlhFreeText)
                    .HasColumnType("ntext")
                    .HasColumnName("VLH_FreeText");
                entity.Property(e => e.VlhId).HasColumnName("VLH_Id");
                entity.Property(e => e.VlhLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VLH_LastModifiedBy");
                entity.Property(e => e.VlhLastModifiedDate).HasColumnName("VLH_LastModifiedDate");
                entity.Property(e => e.VlhLineNumber).HasColumnName("VLH_LineNumber");
                entity.Property(e => e.VlhLogHistoryTypeId).HasColumnName("VLH_LogHistoryType_Id");
                entity.Property(e => e.VlhRoleCodeId).HasColumnName("VLH_RoleCode_Id");
                entity.Property(e => e.VlhVisitInformationId).HasColumnName("VLH_VisitInformation_Id");
            });

            modelBuilder.Entity<VisitInformationStatus>(entity =>
            {
                entity.HasKey(e => e.VisId);

                entity.ToTable("VisitInformationStatuses", "dos", tb => tb.HasTrigger("th_dos_VisitInformationStatuses_TraceHistory"));

                entity.Property(e => e.VisId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("VIS_Id");
                entity.Property(e => e.VisCode)
                    .HasMaxLength(10)
                    .HasColumnName("VIS_Code");
                entity.Property(e => e.VisCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VIS_CreatedBy");
                entity.Property(e => e.VisCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("VIS_CreatedDate");
                entity.Property(e => e.VisInactive).HasColumnName("VIS_Inactive");
                entity.Property(e => e.VisLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VIS_LastModifiedBy");
                entity.Property(e => e.VisLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("VIS_LastModifiedDate");
                entity.Property(e => e.VisLocalizableEntryId).HasColumnName("VIS_LocalizableEntry_Id");
                entity.Property(e => e.VisLongName)
                    .HasMaxLength(250)
                    .HasColumnName("VIS_LongName");
                entity.Property(e => e.VisShortName)
                    .HasMaxLength(50)
                    .HasColumnName("VIS_ShortName");
                entity.Property(e => e.VisTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("VIS_TimeStamp");
                entity.Property(e => e.VisVisitInformationStatusTypeId)
                    .HasMaxLength(20)
                    .HasColumnName("VIS_VisitInformationStatusType_Id");

                entity.HasOne(d => d.VisLocalizableEntry).WithMany(p => p.VisitInformationStatuses)
                    .HasForeignKey(d => d.VisLocalizableEntryId)
                    .HasConstraintName("FK_VisitInformationStatuses_LocalizableEntries");

                entity.HasOne(d => d.VisVisitInformationStatusType).WithMany(p => p.VisitInformationStatuses)
                    .HasForeignKey(d => d.VisVisitInformationStatusTypeId)
                    .HasConstraintName("FK_VisitInformationStatuses_VisitInformationStatusTypes");
            });

            modelBuilder.Entity<VisitInformationStatusHistory>(entity =>
            {
                entity.HasKey(e => e.VishId);

                entity.ToTable("VisitInformationStatusHistory", "dos", tb => tb.HasTrigger("th_dos_VisitInformationStatusHistory_TraceHistory"));

                entity.Property(e => e.VishId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("VISH_Id");
                entity.Property(e => e.VishCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VISH_CreatedBy");
                entity.Property(e => e.VishCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("VISH_CreatedDate");
                entity.Property(e => e.VishEmployeeId).HasColumnName("VISH_Employee_Id");
                entity.Property(e => e.VishLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VISH_LastModifiedBy");
                entity.Property(e => e.VishLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("VISH_LastModifiedDate");
                entity.Property(e => e.VishReasonId).HasColumnName("VISH_ReasonId");
                entity.Property(e => e.VishStartDate).HasColumnName("VISH_StartDate");
                entity.Property(e => e.VishStatusChangeReason).HasColumnName("VISH_StatusChangeReason");
                entity.Property(e => e.VishTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("VISH_TimeStamp");
                entity.Property(e => e.VishVisitInformationId).HasColumnName("VISH_VisitInformation_Id");
                entity.Property(e => e.VishVisitInformationStatusId).HasColumnName("VISH_VisitInformationStatus_Id");

                entity.HasOne(d => d.VishVisitInformation).WithMany(p => p.VisitInformationStatusHistories)
                    .HasForeignKey(d => d.VishVisitInformationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VisitInformationStatusHistory_VisitInformations");

                entity.HasOne(d => d.VishVisitInformationStatus).WithMany(p => p.VisitInformationStatusHistories)
                    .HasForeignKey(d => d.VishVisitInformationStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VisitInformationStatusHistory_WordkingOrderStatuses");
            });

            modelBuilder.Entity<VisitInformationStatusHistoryHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_VisitInformationStatusHistory_History_ID");

                entity.ToTable("VisitInformationStatusHistory_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.VishCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VISH_CreatedBy");
                entity.Property(e => e.VishCreatedDate).HasColumnName("VISH_CreatedDate");
                entity.Property(e => e.VishEmployeeId).HasColumnName("VISH_Employee_Id");
                entity.Property(e => e.VishId).HasColumnName("VISH_Id");
                entity.Property(e => e.VishLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VISH_LastModifiedBy");
                entity.Property(e => e.VishLastModifiedDate).HasColumnName("VISH_LastModifiedDate");
                entity.Property(e => e.VishStartDate).HasColumnName("VISH_StartDate");
                entity.Property(e => e.VishStatusChangeReason)
                    .HasMaxLength(250)
                    .HasColumnName("VISH_StatusChangeReason");
                entity.Property(e => e.VishVisitInformationId).HasColumnName("VISH_VisitInformation_Id");
                entity.Property(e => e.VishVisitInformationStatusId).HasColumnName("VISH_VisitInformationStatus_Id");
            });

            modelBuilder.Entity<VisitInformationStatusType>(entity =>
            {
                entity.HasKey(e => e.VistId);

                entity.ToTable("VisitInformationStatusTypes", "dos", tb => tb.HasTrigger("th_dos_VisitInformationStatusTypes_TraceHistory"));

                entity.Property(e => e.VistId)
                    .HasMaxLength(20)
                    .HasColumnName("VIST_Id");
                entity.Property(e => e.VistCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VIST_CreatedBy");
                entity.Property(e => e.VistCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("VIST_CreatedDate");
                entity.Property(e => e.VistInactive).HasColumnName("VIST_Inactive");
                entity.Property(e => e.VistLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VIST_LastModifiedBy");
                entity.Property(e => e.VistLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("VIST_LastModifiedDate");
                entity.Property(e => e.VistLocalizableEntryId).HasColumnName("VIST_LocalizableEntry_Id");
                entity.Property(e => e.VistName)
                    .HasMaxLength(250)
                    .HasColumnName("VIST_Name");
                entity.Property(e => e.VistTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("VIST_TimeStamp");

                entity.HasOne(d => d.VistLocalizableEntry).WithMany(p => p.VisitInformationStatusTypes)
                    .HasForeignKey(d => d.VistLocalizableEntryId)
                    .HasConstraintName("FK_VisitInformationStatusTypes_LocalizableEntries");
            });

            modelBuilder.Entity<VisitInformationStatusTypesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_VisitInformationStatusTypes_History_ID");

                entity.ToTable("VisitInformationStatusTypes_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.VistCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VIST_CreatedBy");
                entity.Property(e => e.VistCreatedDate).HasColumnName("VIST_CreatedDate");
                entity.Property(e => e.VistId)
                    .HasMaxLength(20)
                    .HasColumnName("VIST_Id");
                entity.Property(e => e.VistInactive).HasColumnName("VIST_Inactive");
                entity.Property(e => e.VistLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VIST_LastModifiedBy");
                entity.Property(e => e.VistLastModifiedDate).HasColumnName("VIST_LastModifiedDate");
                entity.Property(e => e.VistLocalizableEntryId).HasColumnName("VIST_LocalizableEntry_Id");
                entity.Property(e => e.VistName)
                    .HasMaxLength(250)
                    .HasColumnName("VIST_Name");
            });

            modelBuilder.Entity<VisitInformationStatusesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_VisitInformationStatuses_History_ID");

                entity.ToTable("VisitInformationStatuses_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.VisCode)
                    .HasMaxLength(10)
                    .HasColumnName("VIS_Code");
                entity.Property(e => e.VisCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VIS_CreatedBy");
                entity.Property(e => e.VisCreatedDate).HasColumnName("VIS_CreatedDate");
                entity.Property(e => e.VisId).HasColumnName("VIS_Id");
                entity.Property(e => e.VisInactive).HasColumnName("VIS_Inactive");
                entity.Property(e => e.VisLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VIS_LastModifiedBy");
                entity.Property(e => e.VisLastModifiedDate).HasColumnName("VIS_LastModifiedDate");
                entity.Property(e => e.VisLocalizableEntryId).HasColumnName("VIS_LocalizableEntry_Id");
                entity.Property(e => e.VisLongName)
                    .HasMaxLength(250)
                    .HasColumnName("VIS_LongName");
                entity.Property(e => e.VisShortName)
                    .HasMaxLength(50)
                    .HasColumnName("VIS_ShortName");
                entity.Property(e => e.VisVisitInformationStatusTypeId)
                    .HasMaxLength(20)
                    .HasColumnName("VIS_VisitInformationStatusType_Id");
            });

            modelBuilder.Entity<VisitInformationsHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_VisitInformations_History_ID");

                entity.ToTable("VisitInformations_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.VifAddressLevel1)
                    .HasMaxLength(255)
                    .HasColumnName("VIF_AddressLevel1");
                entity.Property(e => e.VifAddressLevel2)
                    .HasMaxLength(255)
                    .HasColumnName("VIF_AddressLevel2");
                entity.Property(e => e.VifCallToday).HasColumnName("VIF_CallToday");
                entity.Property(e => e.VifContactPerson)
                    .HasMaxLength(255)
                    .HasColumnName("VIF_ContactPerson");
                entity.Property(e => e.VifCountry)
                    .HasMaxLength(28)
                    .HasColumnName("VIF_Country");
                entity.Property(e => e.VifCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VIF_CreatedBy");
                entity.Property(e => e.VifCreatedDate).HasColumnName("VIF_CreatedDate");
                entity.Property(e => e.VifDossierId).HasColumnName("VIF_Dossier_Id");
                entity.Property(e => e.VifEmployeeId).HasColumnName("VIF_Employee_Id");
                entity.Property(e => e.VifHouseNumberAddition)
                    .HasMaxLength(16)
                    .HasColumnName("VIF_HouseNumberAddition");
                entity.Property(e => e.VifId).HasColumnName("VIF_Id");
                entity.Property(e => e.VifInvolvedPartyId).HasColumnName("VIF_InvolvedParty_Id");
                entity.Property(e => e.VifIsActive).HasColumnName("VIF_IsActive");
                entity.Property(e => e.VifLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VIF_LastModifiedBy");
                entity.Property(e => e.VifLastModifiedDate).HasColumnName("VIF_LastModifiedDate");
                entity.Property(e => e.VifLocationObjectX)
                    .HasMaxLength(255)
                    .HasColumnName("VIF_LocationObjectX");
                entity.Property(e => e.VifLocationUnknow).HasColumnName("VIF_LocationUnknow");
                entity.Property(e => e.VifPhoneNumber)
                    .HasMaxLength(16)
                    .HasColumnName("VIF_PhoneNumber");
                entity.Property(e => e.VifPriority).HasColumnName("VIF_Priority");
                entity.Property(e => e.VifReason)
                    .HasMaxLength(250)
                    .HasColumnName("VIF_Reason");
                entity.Property(e => e.VifState)
                    .HasMaxLength(128)
                    .HasColumnName("VIF_State");
                entity.Property(e => e.VifTimeSoltId).HasColumnName("VIF_TimeSolt_Id");
                entity.Property(e => e.VifTypeOfContact)
                    .HasMaxLength(50)
                    .HasColumnName("VIF_TypeOfContact");
                entity.Property(e => e.VifVisitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("VIF_VisitDate");
                entity.Property(e => e.VifZipCode)
                    .HasMaxLength(16)
                    .HasColumnName("VIF_ZipCode");
            });

            modelBuilder.Entity<VolumeSalesAgreement>(entity =>
            {
                entity.HasKey(e => e.VsaId);

                entity.ToTable("VolumeSalesAgreements", "mdm");

                entity.Property(e => e.VsaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("VSA_Id");
                entity.Property(e => e.VsaAmount)
                    .HasColumnType("money")
                    .HasColumnName("VSA_Amount");
                entity.Property(e => e.VsaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VSA_CreatedBy");
                entity.Property(e => e.VsaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("VSA_CreatedDate");
                entity.Property(e => e.VsaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("VSA_LastModifiedBy");
                entity.Property(e => e.VsaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("VSA_LastModifiedDate");
                entity.Property(e => e.VsaSalesAgreementId).HasColumnName("VSA_SalesAgreement_Id");
                entity.Property(e => e.VsaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("VSA_TimeStamp");
                entity.Property(e => e.VsaUnitOfMeasureId)
                    .HasMaxLength(20)
                    .HasColumnName("VSA_UnitOfMeasure_Id");
                entity.Property(e => e.VsaVolumeMax).HasColumnName("VSA_VolumeMax");
                entity.Property(e => e.VsaVolumeMin).HasColumnName("VSA_VolumeMin");

                entity.HasOne(d => d.VsaSalesAgreement).WithMany(p => p.VolumeSalesAgreements)
                    .HasForeignKey(d => d.VsaSalesAgreementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VolumeSalesAgreements_SalesAgreements");

                entity.HasOne(d => d.VsaUnitOfMeasure).WithMany(p => p.VolumeSalesAgreements)
                    .HasForeignKey(d => d.VsaUnitOfMeasureId)
                    .HasConstraintName("FK_VolumeSalesAgreements_UnitOfMeasures");
            });

            modelBuilder.Entity<WebApiClient>(entity =>
            {
                entity.HasKey(e => e.WacId);

                entity.Property(e => e.WacId)
                    .ValueGeneratedNever()
                    .HasColumnName("WAC_Id");
                entity.Property(e => e.WacCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WAC_CreatedBy");
                entity.Property(e => e.WacCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WAC_CreatedDate");
                entity.Property(e => e.WacImpersonateEmployeeId).HasColumnName("WAC_ImpersonateEmployee_Id");
                entity.Property(e => e.WacInactive).HasColumnName("WAC_Inactive");
                entity.Property(e => e.WacLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WAC_LastModifiedBy");
                entity.Property(e => e.WacLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WAC_LastModifiedDate");
                entity.Property(e => e.WacName)
                    .HasMaxLength(20)
                    .HasColumnName("WAC_Name");
                entity.Property(e => e.WacSecret)
                    .HasMaxLength(32)
                    .HasColumnName("WAC_Secret");
                entity.Property(e => e.WacTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WAC_TimeStamp");
                entity.Property(e => e.WacTokenReturnUrls).HasColumnName("WAC_TokenReturnUrls");

                entity.HasOne(d => d.WacImpersonateEmployee).WithMany(p => p.WebApiClients)
                    .HasForeignKey(d => d.WacImpersonateEmployeeId)
                    .HasConstraintName("FK_WebApiClients_Employees");
            });

            modelBuilder.Entity<WorkActivitiesHierarchyView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("WorkActivitiesHierarchyView", "pdc");

                entity.Property(e => e.MainActivityCode).HasMaxLength(10);
                entity.Property(e => e.MainActivityName).HasMaxLength(20);
                entity.Property(e => e.SubActivityCode).HasMaxLength(10);
                entity.Property(e => e.SubActivityName).HasMaxLength(20);
                entity.Property(e => e.TertiaryActivityCode).HasMaxLength(10);
                entity.Property(e => e.TertiaryActivityName).HasMaxLength(20);
            });

            modelBuilder.Entity<WorkActivity>(entity =>
            {
                entity.HasKey(e => e.WaId);

                entity.ToTable("WorkActivities", "pdc");

                entity.Property(e => e.WaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WA_Id");
                entity.Property(e => e.WaActivityExecutionId).HasColumnName("WA_ActivityExecution_Id");
                entity.Property(e => e.WaCode)
                    .HasMaxLength(10)
                    .HasColumnName("WA_Code");
                entity.Property(e => e.WaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WA_CreatedBy");
                entity.Property(e => e.WaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WA_CreatedDate");
                entity.Property(e => e.WaInactive).HasColumnName("WA_Inactive");
                entity.Property(e => e.WaIsClientTask).HasColumnName("WA_IsClientTask");
                entity.Property(e => e.WaIsCoverageRequired).HasColumnName("WA_IsCoverageRequired");
                entity.Property(e => e.WaIsEconomicLoss).HasColumnName("WA_IsEconomicLoss");
                entity.Property(e => e.WaIsForIntake).HasColumnName("WA_IsForIntake");
                entity.Property(e => e.WaIsGeneric).HasColumnName("WA_IsGeneric");
                entity.Property(e => e.WaIsInvoiceable)
                    .IsRequired()
                    .HasDefaultValueSql("((1))")
                    .HasColumnName("WA_IsInvoiceable");
                entity.Property(e => e.WaIsMain).HasColumnName("WA_IsMain");
                entity.Property(e => e.WaIsNotSpecific)
                    .IsRequired()
                    .HasDefaultValueSql("((1))")
                    .HasColumnName("WA_IsNotSpecific");
                entity.Property(e => e.WaIsNotUrgent)
                    .IsRequired()
                    .HasDefaultValueSql("((1))")
                    .HasColumnName("WA_IsNotUrgent");
                entity.Property(e => e.WaIsResultingInClaimReserve).HasColumnName("WA_IsResultingInClaimReserve");
                entity.Property(e => e.WaIsResultingInPurchaseOrder).HasColumnName("WA_IsResultingInPurchaseOrder");
                entity.Property(e => e.WaIsResultingInReversePurchaseInvoiceBilling).HasColumnName("WA_IsResultingInReversePurchaseInvoiceBilling");
                entity.Property(e => e.WaIsSupplierTask).HasColumnName("WA_IsSupplierTask");
                entity.Property(e => e.WaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WA_LastModifiedBy");
                entity.Property(e => e.WaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WA_LastModifiedDate");
                entity.Property(e => e.WaLocalizableEntryId).HasColumnName("WA_LocalizableEntry_Id");
                entity.Property(e => e.WaLongName)
                    .HasMaxLength(250)
                    .HasColumnName("WA_LongName");
                entity.Property(e => e.WaShortName)
                    .HasMaxLength(20)
                    .HasColumnName("WA_ShortName");
                entity.Property(e => e.WaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WA_TimeStamp");

                entity.HasOne(d => d.WaActivityExecution).WithMany(p => p.WorkActivities)
                    .HasForeignKey(d => d.WaActivityExecutionId)
                    .HasConstraintName("FK_WorkActivities_ActivityExecutions");

                entity.HasOne(d => d.WaLocalizableEntry).WithMany(p => p.WorkActivities)
                    .HasForeignKey(d => d.WaLocalizableEntryId)
                    .HasConstraintName("FK_WorkActivities_LocalizableEntries");
            });

            modelBuilder.Entity<WorkActivityExecution>(entity =>
            {
                entity.HasKey(e => e.WaeId);

                entity.ToTable("WorkActivityExecutions", "pdc");

                entity.Property(e => e.WaeId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WAE_Id");
                entity.Property(e => e.WaeActivityExecutionId).HasColumnName("WAE_ActivityExecution_Id");
                entity.Property(e => e.WaeCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WAE_CreatedBy");
                entity.Property(e => e.WaeCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WAE_CreatedDate");
                entity.Property(e => e.WaeLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WAE_LastModifiedBy");
                entity.Property(e => e.WaeLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WAE_LastModifiedDate");
                entity.Property(e => e.WaeTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WAE_TimeStamp");
                entity.Property(e => e.WaeWorkActivityId).HasColumnName("WAE_WorkActivity_Id");

                entity.HasOne(d => d.WaeActivityExecution).WithMany(p => p.WorkActivityExecutions)
                    .HasForeignKey(d => d.WaeActivityExecutionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkActivityExecutions_ActivityExecutions");

                entity.HasOne(d => d.WaeWorkActivity).WithMany(p => p.WorkActivityExecutions)
                    .HasForeignKey(d => d.WaeWorkActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkActivityExecutions_WorkActivities");
            });

            modelBuilder.Entity<WorkActivityMatrixView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("WorkActivityMatrixView", "ced");

                entity.Property(e => e.Activity)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.ActivityCode).HasMaxLength(10);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.Fysiek)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.Standaard)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.Task)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.Telefonisch)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.Uitgebreid)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.Verkort)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.Video)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WorkActivityMatrixViewV2>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("WorkActivityMatrixView_V2", "ced");

                entity.Property(e => e.Activity)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.ActivityCode).HasMaxLength(10);
                entity.Property(e => e.AeLongName2)
                    .HasMaxLength(250)
                    .HasColumnName("AE_LongName2");
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.Fysiek)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.Standaard)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.Task)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.Telefonisch)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.Uitgebreid)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.Verkort)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.Video)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WorkActivityOption>(entity =>
            {
                entity.HasKey(e => e.WaoId);

                entity.ToTable("WorkActivityOptions", "pdc");

                entity.Property(e => e.WaoId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WAO_Id");
                entity.Property(e => e.WaoActivityOptionId).HasColumnName("WAO_ActivityOption_Id");
                entity.Property(e => e.WaoCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WAO_CreatedBy");
                entity.Property(e => e.WaoCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WAO_CreatedDate");
                entity.Property(e => e.WaoInactive).HasColumnName("WAO_Inactive");
                entity.Property(e => e.WaoLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WAO_LastModifiedBy");
                entity.Property(e => e.WaoLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WAO_LastModifiedDate");
                entity.Property(e => e.WaoTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WAO_TimeStamp");
                entity.Property(e => e.WaoWorkActivityId).HasColumnName("WAO_WorkActivity_Id");

                entity.HasOne(d => d.WaoActivityOption).WithMany(p => p.WorkActivityOptions)
                    .HasForeignKey(d => d.WaoActivityOptionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkActivityOptions_ActivityOptions");

                entity.HasOne(d => d.WaoWorkActivity).WithMany(p => p.WorkActivityOptions)
                    .HasForeignKey(d => d.WaoWorkActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkActivityOptions_WorkActivities");
            });

            modelBuilder.Entity<WorkActivityRelation>(entity =>
            {
                entity.HasKey(e => e.WahId);

                entity.ToTable("WorkActivityRelations", "pdc");

                entity.Property(e => e.WahId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WAH_Id");
                entity.Property(e => e.WahChildWorkActivityId).HasColumnName("WAH_ChildWorkActivity_Id");
                entity.Property(e => e.WahCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WAH_CreatedBy");
                entity.Property(e => e.WahCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WAH_CreatedDate");
                entity.Property(e => e.WahEndDate)
                    .HasDefaultValueSql("('9999-12-31')")
                    .HasColumnType("date")
                    .HasColumnName("WAH_EndDate");
                entity.Property(e => e.WahIsExternal).HasColumnName("WAH_IsExternal");
                entity.Property(e => e.WahLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WAH_LastModifiedBy");
                entity.Property(e => e.WahLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WAH_LastModifiedDate");
                entity.Property(e => e.WahParentWorkActivityId).HasColumnName("WAH_ParentWorkActivity_Id");
                entity.Property(e => e.WahStartDate)
                    .HasColumnType("date")
                    .HasColumnName("WAH_StartDate");
                entity.Property(e => e.WahTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WAH_TimeStamp");

                entity.HasOne(d => d.WahChildWorkActivity).WithMany(p => p.WorkActivityRelationWahChildWorkActivities)
                    .HasForeignKey(d => d.WahChildWorkActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkActivityRelations_ChildWorkActivities");

                entity.HasOne(d => d.WahParentWorkActivity).WithMany(p => p.WorkActivityRelationWahParentWorkActivities)
                    .HasForeignKey(d => d.WahParentWorkActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkActivityRelations_ParentWorkActivities");
            });

            modelBuilder.Entity<WorkActivitySkill>(entity =>
            {
                entity.HasKey(e => e.WasId);

                entity.ToTable("WorkActivitySkills", "pdc");

                entity.Property(e => e.WasId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WAS_Id");
                entity.Property(e => e.WasCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WAS_CreatedBy");
                entity.Property(e => e.WasCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WAS_CreatedDate");
                entity.Property(e => e.WasEffectiveDate)
                    .HasColumnType("date")
                    .HasColumnName("WAS_EffectiveDate");
                entity.Property(e => e.WasLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WAS_LastModifiedBy");
                entity.Property(e => e.WasLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WAS_LastModifiedDate");
                entity.Property(e => e.WasSkillId).HasColumnName("WAS_Skill_Id");
                entity.Property(e => e.WasTerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("WAS_TerminationDate");
                entity.Property(e => e.WasTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WAS_TimeStamp");
                entity.Property(e => e.WasWorkActivityId).HasColumnName("WAS_WorkActivity_Id");

                entity.HasOne(d => d.WasSkill).WithMany(p => p.WorkActivitySkills)
                    .HasForeignKey(d => d.WasSkillId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkActivitySkills_Skills");

                entity.HasOne(d => d.WasWorkActivity).WithMany(p => p.WorkActivitySkills)
                    .HasForeignKey(d => d.WasWorkActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkActivitySkills_WorkActivities");
            });

            modelBuilder.Entity<WorkingOrder>(entity =>
            {
                entity.HasKey(e => e.WoId);

                entity.ToTable("WorkingOrders", "dos", tb =>
                {
                    tb.HasTrigger("WorkingOrderInvolvedObject");
                    tb.HasTrigger("th_dos_WorkingOrders_TraceHistory");
                    tb.HasTrigger("ti_WO_Dossiers_NextNumberWhenZero");
                });

                entity.Property(e => e.WoId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WO_Id");
                entity.Property(e => e.WoCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WO_CreatedBy");
                entity.Property(e => e.WoCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WO_CreatedDate");
                entity.Property(e => e.WoDossierAssignmentId).HasColumnName("WO_DossierAssignment_Id");
                entity.Property(e => e.WoDossierId).HasColumnName("WO_Dossier_Id");
                entity.Property(e => e.WoEmployeeId).HasColumnName("WO_Employee_Id");
                entity.Property(e => e.WoFacilityDossierPartyId).HasColumnName("WO_FacilityDossierParty_Id");
                entity.Property(e => e.WoLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WO_LastModifiedBy");
                entity.Property(e => e.WoLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WO_LastModifiedDate");
                entity.Property(e => e.WoMainDossierPartyId).HasColumnName("WO_MainDossierParty_Id");
                entity.Property(e => e.WoTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WO_TimeStamp");
                entity.Property(e => e.WoWorkingOrderNumber)
                    .HasMaxLength(50)
                    .HasColumnName("WO_WorkingOrderNumber");
                entity.Property(e => e.WoWorkingOrderSubTypeId).HasColumnName("WO_WorkingOrderSubType_Id");
                entity.Property(e => e.WoWorkingOrderTypeId).HasColumnName("WO_WorkingOrderType_Id");

                entity.HasOne(d => d.WoDossierAssignment).WithMany(p => p.WorkingOrders)
                    .HasForeignKey(d => d.WoDossierAssignmentId)
                    .HasConstraintName("FK_WorkingOrders_WO_DossierAssignment_Id");

                entity.HasOne(d => d.WoDossier).WithMany(p => p.WorkingOrders)
                    .HasForeignKey(d => d.WoDossierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrders_WO_Dossier_Id");

                entity.HasOne(d => d.WoEmployee).WithMany(p => p.WorkingOrders)
                    .HasForeignKey(d => d.WoEmployeeId)
                    .HasConstraintName("FK_WorkingOrders_WO_Employee_Id");

                entity.HasOne(d => d.WoWorkingOrderSubType).WithMany(p => p.WorkingOrders)
                    .HasForeignKey(d => d.WoWorkingOrderSubTypeId)
                    .HasConstraintName("FK_WorkingOrder_WorkingOrderSubType_Id");

                entity.HasOne(d => d.WoWorkingOrderType).WithMany(p => p.WorkingOrders)
                    .HasForeignKey(d => d.WoWorkingOrderTypeId)
                    .HasConstraintName("FK_WorkingOrders_WorkingOrderTypes");
            });

            modelBuilder.Entity<WorkingOrderCoveragesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("WorkingOrderCoveragesView", "dos");

                entity.Property(e => e.ChargedExpensesInvoiceRecipientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ChargedExpensesInvoiceRecipientName).HasMaxLength(250);
                entity.Property(e => e.ClaimReserveAmount).HasColumnType("money");
                entity.Property(e => e.ClaimReserveClassificationId).HasMaxLength(20);
                entity.Property(e => e.ClaimReserveNumber).HasMaxLength(10);
                entity.Property(e => e.ClientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.ClientCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.ClientName).HasMaxLength(756);
                entity.Property(e => e.CoverageFreeField1).HasMaxLength(500);
                entity.Property(e => e.CoverageFreeField2).HasMaxLength(500);
                entity.Property(e => e.CoverageFreeField3).HasMaxLength(500);
                entity.Property(e => e.CoverageFreeField4).HasMaxLength(500);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.CurrencyCode).HasMaxLength(3);
                entity.Property(e => e.ExchangeRateAccountingDate).HasColumnType("date");
                entity.Property(e => e.FeeInvoiceRecipientCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.FeeInvoiceRecipientName).HasMaxLength(250);
                entity.Property(e => e.GrossAmount).HasColumnType("money");
                entity.Property(e => e.InsurancePolicyNumber).HasMaxLength(50);
                entity.Property(e => e.InsuranceProductType).HasMaxLength(200);
                entity.Property(e => e.InsurerCode)
                    .HasMaxLength(10)
                    .UseCollation("Latin1_General_CS_AI");
                entity.Property(e => e.InsurerName).HasMaxLength(756);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.MandateCode).HasMaxLength(20);
                entity.Property(e => e.MandateName).HasMaxLength(250);
                entity.Property(e => e.MaxGrossAmount).HasColumnType("money");
                entity.Property(e => e.MaxNetAmount).HasColumnType("money");
                entity.Property(e => e.MaxTaxAmount).HasColumnType("money");
                entity.Property(e => e.NetAmount).HasColumnType("money");
                entity.Property(e => e.PolicyHolder).HasMaxLength(200);
                entity.Property(e => e.ServiceCode).HasMaxLength(10);
                entity.Property(e => e.ServiceName).HasMaxLength(250);
                entity.Property(e => e.TaxAmount).HasColumnType("money");
                entity.Property(e => e.TaxCountryCode).HasMaxLength(3);
                entity.Property(e => e.WorkingOrderGrossAmount).HasColumnType("money");
                entity.Property(e => e.WorkingOrderLineMaxNetAmount).HasColumnType("money");
                entity.Property(e => e.WorkingOrderLineNumber).HasMaxLength(60);
                entity.Property(e => e.WorkingOrderNetAmount).HasColumnType("money");
                entity.Property(e => e.WorkingOrderTaxAmount).HasColumnType("money");
            });

            modelBuilder.Entity<WorkingOrderCurrentStatus>(entity =>
            {
                entity.HasKey(e => e.WocsId);

                entity.ToTable("WorkingOrderCurrentStatus", "dos");

                entity.Property(e => e.WocsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WOCS_Id");
                entity.Property(e => e.WocsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOCS_CreatedBy");
                entity.Property(e => e.WocsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOCS_CreatedDate");
                entity.Property(e => e.WocsCurrentStatusCode)
                    .HasMaxLength(10)
                    .HasColumnName("WOCS_CurrentStatusCode");
                entity.Property(e => e.WocsCurrentStatusHistoryId).HasColumnName("WOCS_CurrentStatusHistory_Id");
                entity.Property(e => e.WocsCurrentStatusHistoryStartDate).HasColumnName("WOCS_CurrentStatusHistoryStartDate");
                entity.Property(e => e.WocsCurrentStatusName)
                    .HasMaxLength(250)
                    .HasColumnName("WOCS_CurrentStatusName");
                entity.Property(e => e.WocsCurrentStatusTypeId)
                    .HasMaxLength(20)
                    .HasColumnName("WOCS_CurrentStatusType_Id");
                entity.Property(e => e.WocsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOCS_LastModifiedBy");
                entity.Property(e => e.WocsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOCS_LastModifiedDate");
                entity.Property(e => e.WocsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WOCS_TimeStamp");

                entity.HasOne(d => d.WocsCurrentStatusHistory).WithMany(p => p.WorkingOrderCurrentStatuses)
                    .HasForeignKey(d => d.WocsCurrentStatusHistoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderCurrentStatus_WorkingOrderStatusHistory");

                entity.HasOne(d => d.WocsCurrentStatusType).WithMany(p => p.WorkingOrderCurrentStatuses)
                    .HasForeignKey(d => d.WocsCurrentStatusTypeId)
                    .HasConstraintName("FK_WorkingOrderCurrentStatus_WorkingOrderStatusTypes");

                entity.HasOne(d => d.Wocs).WithOne(p => p.WorkingOrderCurrentStatus)
                    .HasForeignKey<WorkingOrderCurrentStatus>(d => d.WocsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderCurrentStatus_WorkingOrders");
            });

            modelBuilder.Entity<WorkingOrderInvolvedObject>(entity =>
            {
                entity.HasKey(e => e.WoioId);

                entity.ToTable("WorkingOrderInvolvedObjects", "dos");

                entity.Property(e => e.WoioId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WOIO_Id");
                entity.Property(e => e.WoioCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOIO_CreatedBy");
                entity.Property(e => e.WoioCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOIO_CreatedDate");
                entity.Property(e => e.WoioDossierAssignmentInvolvedObjectId).HasColumnName("WOIO_DossierAssignmentInvolvedObject_Id");
                entity.Property(e => e.WoioInvolvedObjectId).HasColumnName("WOIO_InvolvedObject_Id");
                entity.Property(e => e.WoioLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOIO_LastModifiedBy");
                entity.Property(e => e.WoioLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOIO_LastModifiedDate");
                entity.Property(e => e.WoioWorkingOrderId).HasColumnName("WOIO_WorkingOrder_Id");

                entity.HasOne(d => d.WoioDossierAssignmentInvolvedObject).WithMany(p => p.WorkingOrderInvolvedObjects)
                    .HasForeignKey(d => d.WoioDossierAssignmentInvolvedObjectId)
                    .HasConstraintName("FK_WorkingOrderInvolvedObjects_DossierAssignmentInvolvedObject");

                entity.HasOne(d => d.WoioInvolvedObject).WithMany(p => p.WorkingOrderInvolvedObjects)
                    .HasForeignKey(d => d.WoioInvolvedObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderInvolvedObjects_InvolvedObjects");

                entity.HasOne(d => d.WoioWorkingOrder).WithMany(p => p.WorkingOrderInvolvedObjects)
                    .HasForeignKey(d => d.WoioWorkingOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderInvolvedObjects_WorkingOrders");
            });

            modelBuilder.Entity<WorkingOrderLine>(entity =>
            {
                entity.HasKey(e => e.WolId);

                entity.ToTable("WorkingOrderLines", "dos", tb => tb.HasTrigger("th_dos_WorkingOrderLines_TraceHistory"));

                entity.Property(e => e.WolId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WOL_Id");
                entity.Property(e => e.WolCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOL_CreatedBy");
                entity.Property(e => e.WolCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOL_CreatedDate");
                entity.Property(e => e.WolCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("WOL_CurrencyCode");
                entity.Property(e => e.WolDeliveryAddressId).HasColumnName("WOL_DeliveryAddress_Id");
                entity.Property(e => e.WolDeliveryDate).HasColumnName("WOL_DeliveryDate");
                entity.Property(e => e.WolDossierPartyId).HasColumnName("WOL_DossierParty_Id");
                entity.Property(e => e.WolDossierWorkActivityId).HasColumnName("WOL_DossierWorkActivity_Id");
                entity.Property(e => e.WolDueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("WOL_DueDate");
                entity.Property(e => e.WolInvoiceToPayorAddressId).HasColumnName("WOL_InvoiceToPayorAddress_Id");
                entity.Property(e => e.WolInvoiceToPayorId).HasColumnName("WOL_InvoiceToPayor_Id");
                entity.Property(e => e.WolIsClosed).HasColumnName("WOL_IsClosed");
                entity.Property(e => e.WolIsExecuteVatdeductable).HasColumnName("WOL_IsExecuteVATdeductable");
                entity.Property(e => e.WolIsForProductSelection).HasColumnName("WOL_IsForProductSelection");
                entity.Property(e => e.WolIsManuallyAdded).HasColumnName("WOL_IsManuallyAdded");
                entity.Property(e => e.WolIsOwnRisk).HasColumnName("WOL_IsOwnRisk");
                entity.Property(e => e.WolIsPayorDossierParty).HasColumnName("WOL_IsPayorDossierParty");
                entity.Property(e => e.WolIsSubContractor).HasColumnName("WOL_IsSubContractor");
                entity.Property(e => e.WolLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOL_LastModifiedBy");
                entity.Property(e => e.WolLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOL_LastModifiedDate");
                entity.Property(e => e.WolLineNumber)
                    .HasMaxLength(60)
                    .HasColumnName("WOL_LineNumber");
                entity.Property(e => e.WolParentId).HasColumnName("WOL_Parent_Id");
                entity.Property(e => e.WolSubContractorId).HasColumnName("WOL_SubContractor_Id");
                entity.Property(e => e.WolSupplierId).HasColumnName("WOL_Supplier_Id");
                entity.Property(e => e.WolTaskWorkActivityId).HasColumnName("WOL_TaskWorkActivity_Id");
                entity.Property(e => e.WolTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WOL_TimeStamp");
                entity.Property(e => e.WolWorkingOrderId).HasColumnName("WOL_WorkingOrder_Id");
                entity.Property(e => e.WolYourReference)
                    .HasMaxLength(30)
                    .HasColumnName("WOL_YourReference");

                entity.HasOne(d => d.WolDeliveryAddress).WithMany(p => p.WorkingOrderLineWolDeliveryAddresses)
                    .HasForeignKey(d => d.WolDeliveryAddressId)
                    .HasConstraintName("FK_WorkingOrderLines_DeliveryAdress");

                entity.HasOne(d => d.WolDossierParty).WithMany(p => p.WorkingOrderLines)
                    .HasForeignKey(d => d.WolDossierPartyId)
                    .HasConstraintName("FK_WorkingOrderLines_DossierParty");

                entity.HasOne(d => d.WolDossierWorkActivity).WithMany(p => p.WorkingOrderLines)
                    .HasForeignKey(d => d.WolDossierWorkActivityId)
                    .HasConstraintName("FK_WorkingOrderLines_WOL_DossierWorkActivity_Id");

                entity.HasOne(d => d.WolInvoiceToPayorAddress).WithMany(p => p.WorkingOrderLineWolInvoiceToPayorAddresses)
                    .HasForeignKey(d => d.WolInvoiceToPayorAddressId)
                    .HasConstraintName("FK_WorkingOrderLines_InvoicePayerAdress");

                entity.HasOne(d => d.WolInvoiceToPayor).WithMany(p => p.WorkingOrderLines)
                    .HasForeignKey(d => d.WolInvoiceToPayorId)
                    .HasConstraintName("FK_WorkingOrderLines_InvoicePayors");

                entity.HasOne(d => d.WolParent).WithMany(p => p.InverseWolParent)
                    .HasForeignKey(d => d.WolParentId)
                    .HasConstraintName("FK_WorkingOrderLines_WOL_Parent_Id");

                entity.HasOne(d => d.WolSubContractor).WithMany(p => p.WorkingOrderLineWolSubContractors)
                    .HasForeignKey(d => d.WolSubContractorId)
                    .HasConstraintName("FK_WorkingOrderLines_SubContract");

                entity.HasOne(d => d.WolSupplier).WithMany(p => p.WorkingOrderLineWolSuppliers)
                    .HasForeignKey(d => d.WolSupplierId)
                    .HasConstraintName("FK_WorkingOrderLines_Suppliers");

                entity.HasOne(d => d.WolTaskWorkActivity).WithMany(p => p.WorkingOrderLines)
                    .HasForeignKey(d => d.WolTaskWorkActivityId)
                    .HasConstraintName("FK_WorkingOrderLines_WOL_TaskWorkActivity_Id");

                entity.HasOne(d => d.WolWorkingOrder).WithMany(p => p.WorkingOrderLines)
                    .HasForeignKey(d => d.WolWorkingOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderLines_WOL_WorkingOrder_Id");
            });

            modelBuilder.Entity<WorkingOrderLineAttachment>(entity =>
            {
                entity.HasKey(e => e.WolaId).HasName("PK__WorkingO__8B5FF771400C5077");

                entity.ToTable("WorkingOrderLineAttachments", "dos");

                entity.HasIndex(e => e.WolaId, "IX_dos_WorkingOrderLineAttachments_WorkingOrderLines__INCL");

                entity.Property(e => e.WolaId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WOLA_Id");
                entity.Property(e => e.WolaCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOLA_CreatedBy");
                entity.Property(e => e.WolaCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOLA_CreatedDate");
                entity.Property(e => e.WolaDocumentId).HasColumnName("WOLA_Document_Id");
                entity.Property(e => e.WolaLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOLA_LastModifiedBy");
                entity.Property(e => e.WolaLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOLA_LastModifiedDate");
                entity.Property(e => e.WolaTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WOLA_TimeStamp");
                entity.Property(e => e.WolaWorkingOrderLineId).HasColumnName("WOLA_WorkingOrderLine_Id");

                entity.HasOne(d => d.WolaDocument).WithMany(p => p.WorkingOrderLineAttachments)
                    .HasForeignKey(d => d.WolaDocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderLineAttachments_Documents");

                entity.HasOne(d => d.WolaWorkingOrderLine).WithMany(p => p.WorkingOrderLineAttachments)
                    .HasForeignKey(d => d.WolaWorkingOrderLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderLineAttachments_WorkingOrderLines");
            });

            modelBuilder.Entity<WorkingOrderLineAttachmentsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("WorkingOrderLineAttachmentsView", "dos");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.Description).HasMaxLength(500);
                entity.Property(e => e.DocumentDate).HasColumnType("date");
                entity.Property(e => e.DocumentNumber).HasMaxLength(20);
                entity.Property(e => e.DocumentTypeCode).HasMaxLength(10);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.SignatureDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<WorkingOrderLineCorrectionApproval>(entity =>
            {
                entity.HasKey(e => e.WolapId).HasName("PK__tmp_ms_x__0DB88757657DB09F");

                entity.ToTable("WorkingOrderLineCorrectionApprovals", "dos");

                entity.Property(e => e.WolapId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WOLAP_Id");
                entity.Property(e => e.WolapApprovalDate).HasColumnName("WOLAP_ApprovalDate");
                entity.Property(e => e.WolapAutorizationRoleId)
                    .HasMaxLength(50)
                    .HasColumnName("WOLAP_AutorizationRole_Id");
                entity.Property(e => e.WolapComment)
                    .HasMaxLength(250)
                    .HasColumnName("WOLAP_Comment");
                entity.Property(e => e.WolapCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOLAP_CreatedBy");
                entity.Property(e => e.WolapCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOLAP_CreatedDate");
                entity.Property(e => e.WolapEmployeeId).HasColumnName("WOLAP_Employee_Id");
                entity.Property(e => e.WolapIsApproved).HasColumnName("WOLAP_IsApproved");
                entity.Property(e => e.WolapLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOLAP_LastModifiedBy");
                entity.Property(e => e.WolapLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOLAP_LastModifiedDate");
                entity.Property(e => e.WolapTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WOLAP_TimeStamp");
                entity.Property(e => e.WolapWorkingOrderLineCorrectionAuthorizationId).HasColumnName("WOLAP_WorkingOrderLineCorrectionAuthorization_Id");

                entity.HasOne(d => d.WolapAutorizationRole).WithMany(p => p.WorkingOrderLineCorrectionApprovals)
                    .HasForeignKey(d => d.WolapAutorizationRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderLineCorrectionApprovals_AuthorizationRoles");

                entity.HasOne(d => d.WolapEmployee).WithMany(p => p.WorkingOrderLineCorrectionApprovals)
                    .HasForeignKey(d => d.WolapEmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderLineCorrectionApprovals_Employees");

                entity.HasOne(d => d.WolapWorkingOrderLineCorrectionAuthorization).WithMany(p => p.WorkingOrderLineCorrectionApprovals)
                    .HasForeignKey(d => d.WolapWorkingOrderLineCorrectionAuthorizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderLineCorrectionApprovals_WorkingOrderLineCorrectionAuthorizations");
            });

            modelBuilder.Entity<WorkingOrderLineCorrectionAuthorization>(entity =>
            {
                entity.HasKey(e => e.WolcuId).HasName("PK__WorkingO__CF837A831004F12C");

                entity.ToTable("WorkingOrderLineCorrectionAuthorizations", "dos");

                entity.Property(e => e.WolcuId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WOLCU_Id");
                entity.Property(e => e.WolcuCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOLCU_CreatedBy");
                entity.Property(e => e.WolcuCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOLCU_CreatedDate");
                entity.Property(e => e.WolcuLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOLCU_LastModifiedBy");
                entity.Property(e => e.WolcuLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOLCU_LastModifiedDate");
                entity.Property(e => e.WolcuRequiredAutorizationRoleId)
                    .HasMaxLength(50)
                    .HasColumnName("WOLCU_RequiredAutorizationRole_Id");
                entity.Property(e => e.WolcuTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WOLCU_TimeStamp");
                entity.Property(e => e.WolcuWorkingOrderLineId).HasColumnName("WOLCU_WorkingOrderLine_Id");

                entity.HasOne(d => d.WolcuRequiredAutorizationRole).WithMany(p => p.WorkingOrderLineCorrectionAuthorizations)
                    .HasForeignKey(d => d.WolcuRequiredAutorizationRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderLineCorrectionAuthorizations_AuthorizationRoles");

                entity.HasOne(d => d.WolcuWorkingOrderLine).WithMany(p => p.WorkingOrderLineCorrectionAuthorizations)
                    .HasForeignKey(d => d.WolcuWorkingOrderLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderLineCorrectionAuthorizations_WorkingOrderLines");
            });

            modelBuilder.Entity<WorkingOrderLineCorrectionAuthorizationsWithoutApprovalsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("WorkingOrderLineCorrectionAuthorizationsWithoutApprovalsView", "dos");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
            });

            modelBuilder.Entity<WorkingOrderLineCost>(entity =>
            {
                entity.HasKey(e => e.WolcId);

                entity.ToTable("WorkingOrderLineCosts", "dos", tb => tb.HasTrigger("th_dos_WorkingOrderLineCosts_TraceHistory"));

                entity.Property(e => e.WolcId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WOLC_Id");
                entity.Property(e => e.WolcAmount)
                    .HasColumnType("money")
                    .HasColumnName("WOLC_Amount");
                entity.Property(e => e.WolcChargeableAmount)
                    .HasColumnType("money")
                    .HasColumnName("WOLC_ChargeableAmount");
                entity.Property(e => e.WolcClaimReserveAmount)
                    .HasColumnType("money")
                    .HasColumnName("WOLC_ClaimReserveAmount");
                entity.Property(e => e.WolcClaimReserveClassificationId)
                    .HasMaxLength(20)
                    .HasColumnName("WOLC_ClaimReserveClassification_Id");
                entity.Property(e => e.WolcCostOfSalesAmount)
                    .HasColumnType("money")
                    .HasColumnName("WOLC_CostOfSalesAmount");
                entity.Property(e => e.WolcCostOfSalesComments)
                    .HasMaxLength(500)
                    .HasColumnName("WOLC_CostOfSalesComments");
                entity.Property(e => e.WolcCostRateAgreementApplicable).HasColumnName("WOLC_CostRateAgreementApplicable");
                entity.Property(e => e.WolcCostTypeId).HasColumnName("WOLC_CostType_Id");
                entity.Property(e => e.WolcCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOLC_CreatedBy");
                entity.Property(e => e.WolcCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOLC_CreatedDate");
                entity.Property(e => e.WolcDescription)
                    .HasMaxLength(255)
                    .HasColumnName("WOLC_Description");
                entity.Property(e => e.WolcDiscount)
                    .HasColumnType("money")
                    .HasColumnName("WOLC_Discount");
                entity.Property(e => e.WolcDossierPartyId).HasColumnName("WOLC_DossierParty_Id");
                entity.Property(e => e.WolcExchangeRate).HasColumnName("WOLC_ExchangeRate");
                entity.Property(e => e.WolcExchangeRateId).HasColumnName("WOLC_ExchangeRate_Id");
                entity.Property(e => e.WolcGrossAmount)
                    .HasColumnType("money")
                    .HasColumnName("WOLC_GrossAmount");
                entity.Property(e => e.WolcInactive)
                    .HasDefaultValueSql("((0))")
                    .HasColumnName("WOLC_Inactive");
                entity.Property(e => e.WolcInactiveDate).HasColumnName("WOLC_InactiveDate");
                entity.Property(e => e.WolcInvolvedObjectId).HasColumnName("WOLC_InvolvedObject_Id");
                entity.Property(e => e.WolcIsCostOfSales).HasColumnName("WOLC_IsCostOfSales");
                entity.Property(e => e.WolcIsTaxBeforeDiscount).HasColumnName("WOLC_IsTaxBeforeDiscount");
                entity.Property(e => e.WolcIsTaxExempted).HasColumnName("WOLC_IsTaxExempted");
                entity.Property(e => e.WolcIsTaxImport).HasColumnName("WOLC_IsTaxImport");
                entity.Property(e => e.WolcIsTaxReversedCharge).HasColumnName("WOLC_IsTaxReversedCharge");
                entity.Property(e => e.WolcLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOLC_LastModifiedBy");
                entity.Property(e => e.WolcLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOLC_LastModifiedDate");
                entity.Property(e => e.WolcLineNumber).HasColumnName("WOLC_LineNumber");
                entity.Property(e => e.WolcMaxChargeableAmount)
                    .HasColumnType("money")
                    .HasColumnName("WOLC_MaxChargeableAmount");
                entity.Property(e => e.WolcMaxCostOfSalesAmount)
                    .HasColumnType("money")
                    .HasColumnName("WOLC_MaxCostOfSalesAmount");
                entity.Property(e => e.WolcMaxGrossAmount)
                    .HasColumnType("money")
                    .HasColumnName("WOLC_MaxGrossAmount");
                entity.Property(e => e.WolcMaxNetAmount)
                    .HasColumnType("money")
                    .HasColumnName("WOLC_MaxNetAmount");
                entity.Property(e => e.WolcMaxTaxAmount)
                    .HasColumnType("money")
                    .HasColumnName("WOLC_MaxTaxAmount");
                entity.Property(e => e.WolcMaxTaxBaseAmount)
                    .HasColumnType("money")
                    .HasColumnName("WOLC_MaxTaxBaseAmount");
                entity.Property(e => e.WolcMaxTaxExemptedAmount)
                    .HasColumnType("money")
                    .HasColumnName("WOLC_MaxTaxExemptedAmount");
                entity.Property(e => e.WolcMaxTaxImportAmount)
                    .HasColumnType("money")
                    .HasColumnName("WOLC_MaxTaxImportAmount");
                entity.Property(e => e.WolcMaxTaxReversedChargeAmount)
                    .HasColumnType("money")
                    .HasColumnName("WOLC_MaxTaxReversedChargeAmount");
                entity.Property(e => e.WolcNetAmount)
                    .HasColumnType("money")
                    .HasColumnName("WOLC_NetAmount");
                entity.Property(e => e.WolcQuantity).HasColumnName("WOLC_Quantity");
                entity.Property(e => e.WolcServiceId).HasColumnName("WOLC_Service_Id");
                entity.Property(e => e.WolcTaxAmount)
                    .HasColumnType("money")
                    .HasColumnName("WOLC_TaxAmount");
                entity.Property(e => e.WolcTaxBase)
                    .HasColumnType("money")
                    .HasColumnName("WOLC_TaxBase");
                entity.Property(e => e.WolcTaxCode)
                    .HasMaxLength(20)
                    .HasColumnName("WOLC_TaxCode");
                entity.Property(e => e.WolcTaxCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("WOLC_TaxCountryCode");
                entity.Property(e => e.WolcTaxRate).HasColumnName("WOLC_TaxRate");
                entity.Property(e => e.WolcTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WOLC_TimeStamp");
                entity.Property(e => e.WolcUnitOfMeasureId)
                    .HasMaxLength(20)
                    .HasColumnName("WOLC_UnitOfMeasure_Id");
                entity.Property(e => e.WolcUnitPrice)
                    .HasColumnType("money")
                    .HasColumnName("WOLC_UnitPrice");
                entity.Property(e => e.WolcVat).HasColumnName("WOLC_VAT");
                entity.Property(e => e.WolcWorkingOrderLineCostTypeId).HasColumnName("WOLC_WorkingOrderLineCostType_Id");
                entity.Property(e => e.WolcWorkingOrderLineId).HasColumnName("WOLC_WorkingOrderLine_Id");
                entity.Property(e => e.WolcWorkingOrderLineInvolvedObjectId).HasColumnName("WOLC_WorkingOrderLineInvolvedObject_Id");
                entity.Property(e => e.WolcWorkingOrderLinePartyId).HasColumnName("WOLC_WorkingOrderLineParty_Id");

                entity.HasOne(d => d.WolcCostType).WithMany(p => p.WorkingOrderLineCosts)
                    .HasForeignKey(d => d.WolcCostTypeId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_WorkingOrderLineCosts_CostTypes");

                entity.HasOne(d => d.WolcDossierParty).WithMany(p => p.WorkingOrderLineCosts)
                    .HasForeignKey(d => d.WolcDossierPartyId)
                    .HasConstraintName("FK_WorkingOrderLineCosts_DossierParties");

                entity.HasOne(d => d.WolcInvolvedObject).WithMany(p => p.WorkingOrderLineCosts)
                    .HasForeignKey(d => d.WolcInvolvedObjectId)
                    .HasConstraintName("FK_WorkingOrderLineCosts_InvolvedObjects");

                entity.HasOne(d => d.WolcWorkingOrderLineCostType).WithMany(p => p.WorkingOrderLineCosts)
                    .HasForeignKey(d => d.WolcWorkingOrderLineCostTypeId)
                    .HasConstraintName("FK_WorkingOrderLineCosts_WorkingOrderLineCostTypes");

                entity.HasOne(d => d.WolcWorkingOrderLine).WithMany(p => p.WorkingOrderLineCosts)
                    .HasForeignKey(d => d.WolcWorkingOrderLineId)
                    .HasConstraintName("FK_WorkingOrderLineCosts_WorkingOrderLines");

                entity.HasOne(d => d.WolcWorkingOrderLineInvolvedObject).WithMany(p => p.WorkingOrderLineCosts)
                    .HasForeignKey(d => d.WolcWorkingOrderLineInvolvedObjectId)
                    .HasConstraintName("FK_WorkingOrderLineCosts_WorkingOrderLineInvolvedObjects");

                entity.HasOne(d => d.WolcWorkingOrderLineParty).WithMany(p => p.WorkingOrderLineCosts)
                    .HasForeignKey(d => d.WolcWorkingOrderLinePartyId)
                    .HasConstraintName("FK_WorkingOrderLineCosts_WorkingOrderLineParties");
            });

            modelBuilder.Entity<WorkingOrderLineCostNote>(entity =>
            {
                entity.HasKey(e => e.WolcnId);

                entity.ToTable("WorkingOrderLineCostNotes", "dos");

                entity.Property(e => e.WolcnId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WOLCN_Id");
                entity.Property(e => e.WolcnCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOLCN_CreatedBy");
                entity.Property(e => e.WolcnCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOLCN_CreatedDate");
                entity.Property(e => e.WolcnFreeText).HasColumnName("WOLCN_FreeText");
                entity.Property(e => e.WolcnLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOLCN_LastModifiedBy");
                entity.Property(e => e.WolcnLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOLCN_LastModifiedDate");
                entity.Property(e => e.WolcnLineNumber).HasColumnName("WOLCN_LineNumber");
                entity.Property(e => e.WolcnNoteTypeId).HasColumnName("WOLCN_NoteType_Id");
                entity.Property(e => e.WolcnRoleCodeId).HasColumnName("WOLCN_RoleCode_Id");
                entity.Property(e => e.WolcnTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WOLCN_TimeStamp");
                entity.Property(e => e.WolcnWorkingOrderLineCostId).HasColumnName("WOLCN_WorkingOrderLineCost_Id");

                entity.HasOne(d => d.WolcnNoteType).WithMany(p => p.WorkingOrderLineCostNotes)
                    .HasForeignKey(d => d.WolcnNoteTypeId)
                    .HasConstraintName("FK_WorkingOrderLineCostNotes_NoteTypes");

                entity.HasOne(d => d.WolcnRoleCode).WithMany(p => p.WorkingOrderLineCostNotes)
                    .HasForeignKey(d => d.WolcnRoleCodeId)
                    .HasConstraintName("FK_WorkingOrderLineCostNotes_RoleCodes");

                entity.HasOne(d => d.WolcnWorkingOrderLineCost).WithMany(p => p.WorkingOrderLineCostNotes)
                    .HasForeignKey(d => d.WolcnWorkingOrderLineCostId)
                    .HasConstraintName("FK_WorkingOrderLineCostNotes_WorkingOrderLineCosts");
            });

            modelBuilder.Entity<WorkingOrderLineCostType>(entity =>
            {
                entity.HasKey(e => e.WocId);

                entity.ToTable("WorkingOrderLineCostTypes", "dos", tb => tb.HasTrigger("th_dos_WorkingOrderLineCostTypes_TraceHistory"));

                entity.Property(e => e.WocId)
                    .ValueGeneratedNever()
                    .HasColumnName("WOC_Id");
                entity.Property(e => e.WocCode)
                    .HasMaxLength(10)
                    .HasColumnName("WOC_Code");
                entity.Property(e => e.WocCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOC_CreatedBy");
                entity.Property(e => e.WocCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOC_CreatedDate");
                entity.Property(e => e.WocInactive).HasColumnName("WOC_Inactive");
                entity.Property(e => e.WocLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOC_LastModifiedBy");
                entity.Property(e => e.WocLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOC_LastModifiedDate");
                entity.Property(e => e.WocLocalizableEntryId).HasColumnName("WOC_LocalizableEntry_Id");
                entity.Property(e => e.WocLongName)
                    .HasMaxLength(250)
                    .HasColumnName("WOC_LongName");
                entity.Property(e => e.WocShortName)
                    .HasMaxLength(20)
                    .HasColumnName("WOC_ShortName");
                entity.Property(e => e.WocTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WOC_TimeStamp");

                entity.HasOne(d => d.WocLocalizableEntry).WithMany(p => p.WorkingOrderLineCostTypes)
                    .HasForeignKey(d => d.WocLocalizableEntryId)
                    .HasConstraintName("FK_WorkingOrderLineCostTypes_LocalizableEntries");
            });

            modelBuilder.Entity<WorkingOrderLineCostTypesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_WorkingOrderLineCostTypes_History_ID");

                entity.ToTable("WorkingOrderLineCostTypes_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.WocCode)
                    .HasMaxLength(10)
                    .HasColumnName("WOC_Code");
                entity.Property(e => e.WocCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOC_CreatedBy");
                entity.Property(e => e.WocCreatedDate).HasColumnName("WOC_CreatedDate");
                entity.Property(e => e.WocId).HasColumnName("WOC_Id");
                entity.Property(e => e.WocInactive).HasColumnName("WOC_Inactive");
                entity.Property(e => e.WocLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOC_LastModifiedBy");
                entity.Property(e => e.WocLastModifiedDate).HasColumnName("WOC_LastModifiedDate");
                entity.Property(e => e.WocLocalizableEntryId).HasColumnName("WOC_LocalizableEntry_Id");
                entity.Property(e => e.WocLongName)
                    .HasMaxLength(250)
                    .HasColumnName("WOC_LongName");
                entity.Property(e => e.WocShortName)
                    .HasMaxLength(20)
                    .HasColumnName("WOC_ShortName");
            });

            modelBuilder.Entity<WorkingOrderLineCostsHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_WorkingOrderLineCosts_History_ID");

                entity.ToTable("WorkingOrderLineCosts_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.WolcAmount)
                    .HasColumnType("money")
                    .HasColumnName("WOLC_Amount");
                entity.Property(e => e.WolcCostTypeId).HasColumnName("WOLC_CostType_Id");
                entity.Property(e => e.WolcCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOLC_CreatedBy");
                entity.Property(e => e.WolcCreatedDate).HasColumnName("WOLC_CreatedDate");
                entity.Property(e => e.WolcDescription)
                    .HasMaxLength(255)
                    .HasColumnName("WOLC_Description");
                entity.Property(e => e.WolcId).HasColumnName("WOLC_Id");
                entity.Property(e => e.WolcLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOLC_LastModifiedBy");
                entity.Property(e => e.WolcLastModifiedDate).HasColumnName("WOLC_LastModifiedDate");
                entity.Property(e => e.WolcVat).HasColumnName("WOLC_VAT");
                entity.Property(e => e.WolcWorkingOrderLineCostTypeId).HasColumnName("WOLC_WorkingOrderLineCostType_Id");
                entity.Property(e => e.WolcWorkingOrderLineId).HasColumnName("WOLC_WorkingOrderLine_Id");
            });

            modelBuilder.Entity<WorkingOrderLineCoverage>(entity =>
            {
                entity.HasKey(e => e.WoccId);

                entity.ToTable("WorkingOrderLineCoverages", "dos");

                entity.Property(e => e.WoccId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WOCC_Id");
                entity.Property(e => e.WoccClaimReserveAmount)
                    .HasColumnType("money")
                    .HasColumnName("WOCC_ClaimReserveAmount");
                entity.Property(e => e.WoccClaimReserveClassificationId)
                    .HasMaxLength(20)
                    .HasColumnName("WOCC_ClaimReserveClassification_Id");
                entity.Property(e => e.WoccCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOCC_CreatedBy");
                entity.Property(e => e.WoccCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOCC_CreatedDate");
                entity.Property(e => e.WoccCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("WOCC_CurrencyCode");
                entity.Property(e => e.WoccDiscount)
                    .HasColumnType("money")
                    .HasColumnName("WOCC_Discount");
                entity.Property(e => e.WoccExchangeRate).HasColumnName("WOCC_ExchangeRate");
                entity.Property(e => e.WoccExchangeRateId).HasColumnName("WOCC_ExchangeRate_Id");
                entity.Property(e => e.WoccExtraProductDescription)
                    .HasMaxLength(225)
                    .HasColumnName("WOCC_ExtraProductDescription");
                entity.Property(e => e.WoccFixedRate).HasColumnName("WOCC_FixedRate");
                entity.Property(e => e.WoccGrossAmount)
                    .HasColumnType("money")
                    .HasColumnName("WOCC_GrossAmount");
                entity.Property(e => e.WoccInactive).HasColumnName("WOCC_Inactive");
                entity.Property(e => e.WoccInactiveDate).HasColumnName("WOCC_InactiveDate");
                entity.Property(e => e.WoccInvolvedCoverageId).HasColumnName("WOCC_InvolvedCoverage_Id");
                entity.Property(e => e.WoccInvolvedObjectId).HasColumnName("WOCC_InvolvedObject_Id");
                entity.Property(e => e.WoccIsTaxExempted).HasColumnName("WOCC_IsTaxExempted");
                entity.Property(e => e.WoccIsTaxImport).HasColumnName("WOCC_IsTaxImport");
                entity.Property(e => e.WoccIsTaxReversedCharge).HasColumnName("WOCC_IsTaxReversedCharge");
                entity.Property(e => e.WoccItemPrice)
                    .HasColumnType("money")
                    .HasColumnName("WOCC_ItemPrice");
                entity.Property(e => e.WoccLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOCC_LastModifiedBy");
                entity.Property(e => e.WoccLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOCC_LastModifiedDate");
                entity.Property(e => e.WoccLeadCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("WOCC_LeadCurrencyCode");
                entity.Property(e => e.WoccLineNumber).HasColumnName("WOCC_LineNumber");
                entity.Property(e => e.WoccMaxGrossAmount)
                    .HasColumnType("money")
                    .HasColumnName("WOCC_MaxGrossAmount");
                entity.Property(e => e.WoccMaxNetAmount)
                    .HasColumnType("money")
                    .HasColumnName("WOCC_MaxNetAmount");
                entity.Property(e => e.WoccMaxTaxAmount)
                    .HasColumnType("money")
                    .HasColumnName("WOCC_MaxTaxAmount");
                entity.Property(e => e.WoccNetAmount)
                    .HasColumnType("money")
                    .HasColumnName("WOCC_NetAmount");
                entity.Property(e => e.WoccPriority).HasColumnName("WOCC_Priority");
                entity.Property(e => e.WoccProductId).HasColumnName("WOCC_Product_Id");
                entity.Property(e => e.WoccQuantity).HasColumnName("WOCC_Quantity");
                entity.Property(e => e.WoccTaxAmount)
                    .HasColumnType("money")
                    .HasColumnName("WOCC_TaxAmount");
                entity.Property(e => e.WoccTaxBase)
                    .HasColumnType("money")
                    .HasColumnName("WOCC_TaxBase");
                entity.Property(e => e.WoccTaxCode)
                    .HasMaxLength(20)
                    .HasColumnName("WOCC_TaxCode");
                entity.Property(e => e.WoccTaxCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("WOCC_TaxCountryCode");
                entity.Property(e => e.WoccTaxRate).HasColumnName("WOCC_TaxRate");
                entity.Property(e => e.WoccTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WOCC_TimeStamp");
                entity.Property(e => e.WoccUnitOfMeasureId)
                    .HasMaxLength(20)
                    .HasColumnName("WOCC_UnitOfMeasure_Id");
                entity.Property(e => e.WoccWorkingOrderLineCostId).HasColumnName("WOCC_WorkingOrderLineCost_Id");
                entity.Property(e => e.WoccWorkingOrderLineId).HasColumnName("WOCC_WorkingOrderLine_Id");
                entity.Property(e => e.WoccWorkingOrderLinePartyId).HasColumnName("WOCC_WorkingOrderLineParty_Id");

                entity.HasOne(d => d.WoccInvolvedCoverage).WithMany(p => p.WorkingOrderLineCoverages)
                    .HasForeignKey(d => d.WoccInvolvedCoverageId)
                    .HasConstraintName("FK_WorkingOrderLineCoverages_InvolvedCoverages");

                entity.HasOne(d => d.WoccInvolvedObject).WithMany(p => p.WorkingOrderLineCoverages)
                    .HasForeignKey(d => d.WoccInvolvedObjectId)
                    .HasConstraintName("FK_WorkingOrderLineCoverages_InvolvedObjects");

                entity.HasOne(d => d.WoccProduct).WithMany(p => p.WorkingOrderLineCoverages)
                    .HasForeignKey(d => d.WoccProductId)
                    .HasConstraintName("FK_WorkingOrderLineCoverages_Products");

                entity.HasOne(d => d.WoccUnitOfMeasure).WithMany(p => p.WorkingOrderLineCoverages)
                    .HasForeignKey(d => d.WoccUnitOfMeasureId)
                    .HasConstraintName("FK_WorkingOrderLineCoverages_UnitOfMeasures");

                entity.HasOne(d => d.WoccWorkingOrderLineCost).WithMany(p => p.WorkingOrderLineCoverages)
                    .HasForeignKey(d => d.WoccWorkingOrderLineCostId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_WorkingOrderLineCoverages_WorkingOrderLineCosts");

                entity.HasOne(d => d.WoccWorkingOrderLine).WithMany(p => p.WorkingOrderLineCoverages)
                    .HasForeignKey(d => d.WoccWorkingOrderLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderLineCoverages_WorkingOrderLines");

                entity.HasOne(d => d.WoccWorkingOrderLineParty).WithMany(p => p.WorkingOrderLineCoverages)
                    .HasForeignKey(d => d.WoccWorkingOrderLinePartyId)
                    .HasConstraintName("FK_WorkingOrderLineCoverages_WorkingOrderLineParties");
            });

            modelBuilder.Entity<WorkingOrderLineCoverageNote>(entity =>
            {
                entity.HasKey(e => e.WoccnId);

                entity.ToTable("WorkingOrderLineCoverageNotes", "dos");

                entity.Property(e => e.WoccnId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WOCCN_Id");
                entity.Property(e => e.WoccnCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOCCN_CreatedBy");
                entity.Property(e => e.WoccnCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOCCN_CreatedDate");
                entity.Property(e => e.WoccnFreeText).HasColumnName("WOCCN_FreeText");
                entity.Property(e => e.WoccnLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOCCN_LastModifiedBy");
                entity.Property(e => e.WoccnLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOCCN_LastModifiedDate");
                entity.Property(e => e.WoccnLineNumber).HasColumnName("WOCCN_LineNumber");
                entity.Property(e => e.WoccnNoteTypeId).HasColumnName("WOCCN_NoteType_Id");
                entity.Property(e => e.WoccnRoleCodeId).HasColumnName("WOCCN_RoleCode_Id");
                entity.Property(e => e.WoccnTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WOCCN_TimeStamp");
                entity.Property(e => e.WoccnWorkingOrderLineCoverageId).HasColumnName("WOCCN_WorkingOrderLineCoverage_Id");

                entity.HasOne(d => d.WoccnNoteType).WithMany(p => p.WorkingOrderLineCoverageNotes)
                    .HasForeignKey(d => d.WoccnNoteTypeId)
                    .HasConstraintName("FK_WorkingOrderLineCoverageNotes_NoteTypes");

                entity.HasOne(d => d.WoccnRoleCode).WithMany(p => p.WorkingOrderLineCoverageNotes)
                    .HasForeignKey(d => d.WoccnRoleCodeId)
                    .HasConstraintName("FK_WorkingOrderLineCoverageNotes_RoleCodes");

                entity.HasOne(d => d.WoccnWorkingOrderLineCoverage).WithMany(p => p.WorkingOrderLineCoverageNotes)
                    .HasForeignKey(d => d.WoccnWorkingOrderLineCoverageId)
                    .HasConstraintName("FK_WorkingOrderLineCoverageNotes_WorkingOrderLineCoverages");
            });

            modelBuilder.Entity<WorkingOrderLineCoveragesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_WorkingOrderLineCoverages_History_ID");

                entity.ToTable("WorkingOrderLineCoverages_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.WoccClaimReserveAmount)
                    .HasColumnType("money")
                    .HasColumnName("WOCC_ClaimReserveAmount");
                entity.Property(e => e.WoccClaimReserveClassificationId)
                    .HasMaxLength(20)
                    .HasColumnName("WOCC_ClaimReserveClassification_Id");
                entity.Property(e => e.WoccCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOCC_CreatedBy");
                entity.Property(e => e.WoccCreatedDate).HasColumnName("WOCC_CreatedDate");
                entity.Property(e => e.WoccCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("WOCC_CurrencyCode");
                entity.Property(e => e.WoccDiscount)
                    .HasColumnType("money")
                    .HasColumnName("WOCC_Discount");
                entity.Property(e => e.WoccExchangeRate).HasColumnName("WOCC_ExchangeRate");
                entity.Property(e => e.WoccExchangeRateId).HasColumnName("WOCC_ExchangeRate_Id");
                entity.Property(e => e.WoccExtraProductDescription)
                    .HasMaxLength(225)
                    .HasColumnName("WOCC_ExtraProductDescription");
                entity.Property(e => e.WoccFixedRate).HasColumnName("WOCC_FixedRate");
                entity.Property(e => e.WoccGrossAmount)
                    .HasColumnType("money")
                    .HasColumnName("WOCC_GrossAmount");
                entity.Property(e => e.WoccId).HasColumnName("WOCC_Id");
                entity.Property(e => e.WoccInactive).HasColumnName("WOCC_Inactive");
                entity.Property(e => e.WoccInactiveDate).HasColumnName("WOCC_InactiveDate");
                entity.Property(e => e.WoccInvolvedCoverageId).HasColumnName("WOCC_InvolvedCoverage_Id");
                entity.Property(e => e.WoccInvolvedObjectId).HasColumnName("WOCC_InvolvedObject_Id");
                entity.Property(e => e.WoccIsTaxExempted).HasColumnName("WOCC_IsTaxExempted");
                entity.Property(e => e.WoccIsTaxImport).HasColumnName("WOCC_IsTaxImport");
                entity.Property(e => e.WoccIsTaxReversedCharge).HasColumnName("WOCC_IsTaxReversedCharge");
                entity.Property(e => e.WoccItemPrice)
                    .HasColumnType("money")
                    .HasColumnName("WOCC_ItemPrice");
                entity.Property(e => e.WoccLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOCC_LastModifiedBy");
                entity.Property(e => e.WoccLastModifiedDate).HasColumnName("WOCC_LastModifiedDate");
                entity.Property(e => e.WoccLeadCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("WOCC_LeadCurrencyCode");
                entity.Property(e => e.WoccLineNumber).HasColumnName("WOCC_LineNumber");
                entity.Property(e => e.WoccMaxGrossAmount)
                    .HasColumnType("money")
                    .HasColumnName("WOCC_MaxGrossAmount");
                entity.Property(e => e.WoccMaxNetAmount)
                    .HasColumnType("money")
                    .HasColumnName("WOCC_MaxNetAmount");
                entity.Property(e => e.WoccMaxTaxAmount)
                    .HasColumnType("money")
                    .HasColumnName("WOCC_MaxTaxAmount");
                entity.Property(e => e.WoccNetAmount)
                    .HasColumnType("money")
                    .HasColumnName("WOCC_NetAmount");
                entity.Property(e => e.WoccPriority).HasColumnName("WOCC_Priority");
                entity.Property(e => e.WoccProductId).HasColumnName("WOCC_Product_Id");
                entity.Property(e => e.WoccQuantity).HasColumnName("WOCC_Quantity");
                entity.Property(e => e.WoccTaxAmount)
                    .HasColumnType("money")
                    .HasColumnName("WOCC_TaxAmount");
                entity.Property(e => e.WoccTaxBase)
                    .HasColumnType("money")
                    .HasColumnName("WOCC_TaxBase");
                entity.Property(e => e.WoccTaxCode)
                    .HasMaxLength(20)
                    .HasColumnName("WOCC_TaxCode");
                entity.Property(e => e.WoccTaxCountryCode)
                    .HasMaxLength(3)
                    .HasColumnName("WOCC_TaxCountryCode");
                entity.Property(e => e.WoccTaxRate).HasColumnName("WOCC_TaxRate");
                entity.Property(e => e.WoccUnitOfMeasureId)
                    .HasMaxLength(20)
                    .HasColumnName("WOCC_UnitOfMeasure_Id");
                entity.Property(e => e.WoccWorkingOrderLineCostId).HasColumnName("WOCC_WorkingOrderLineCost_Id");
                entity.Property(e => e.WoccWorkingOrderLineId).HasColumnName("WOCC_WorkingOrderLine_Id");
            });

            modelBuilder.Entity<WorkingOrderLineCurrentStatus>(entity =>
            {
                entity.HasKey(e => e.WlcsId);

                entity.ToTable("WorkingOrderLineCurrentStatus", "dos");

                entity.Property(e => e.WlcsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WLCS_Id");
                entity.Property(e => e.WlcsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WLCS_CreatedBy");
                entity.Property(e => e.WlcsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WLCS_CreatedDate");
                entity.Property(e => e.WlcsCurrentStatusCode)
                    .HasMaxLength(10)
                    .HasColumnName("WLCS_CurrentStatusCode");
                entity.Property(e => e.WlcsCurrentStatusHistoryId).HasColumnName("WLCS_CurrentStatusHistory_Id");
                entity.Property(e => e.WlcsCurrentStatusHistoryStartDate).HasColumnName("WLCS_CurrentStatusHistoryStartDate");
                entity.Property(e => e.WlcsCurrentStatusName)
                    .HasMaxLength(250)
                    .HasColumnName("WLCS_CurrentStatusName");
                entity.Property(e => e.WlcsCurrentStatusTypeId)
                    .HasMaxLength(20)
                    .HasColumnName("WLCS_CurrentStatusType_Id");
                entity.Property(e => e.WlcsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WLCS_LastModifiedBy");
                entity.Property(e => e.WlcsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WLCS_LastModifiedDate");
                entity.Property(e => e.WlcsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WLCS_TimeStamp");

                entity.HasOne(d => d.WlcsCurrentStatusHistory).WithMany(p => p.WorkingOrderLineCurrentStatuses)
                    .HasForeignKey(d => d.WlcsCurrentStatusHistoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderLineCurrentStatus_WorkingOrderLineStatusHistory");

                entity.HasOne(d => d.WlcsCurrentStatusType).WithMany(p => p.WorkingOrderLineCurrentStatuses)
                    .HasForeignKey(d => d.WlcsCurrentStatusTypeId)
                    .HasConstraintName("FK_WorkingOrderLineCurrentStatus_WorkingOrderLineStatusTypes");

                entity.HasOne(d => d.Wlcs).WithOne(p => p.WorkingOrderLineCurrentStatus)
                    .HasForeignKey<WorkingOrderLineCurrentStatus>(d => d.WlcsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderLineCurrentStatus_WorkingOrderLines");
            });

            modelBuilder.Entity<WorkingOrderLineInvolvedObject>(entity =>
            {
                entity.HasKey(e => e.WolioId);

                entity.ToTable("WorkingOrderLineInvolvedObjects", "dos");

                entity.Property(e => e.WolioId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WOLIO_Id");
                entity.Property(e => e.WolioCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOLIO_CreatedBy");
                entity.Property(e => e.WolioCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOLIO_CreatedDate");
                entity.Property(e => e.WolioLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOLIO_LastModifiedBy");
                entity.Property(e => e.WolioLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOLIO_LastModifiedDate");
                entity.Property(e => e.WolioWorkingOrderInvolvedObjectId).HasColumnName("WOLIO_WorkingOrderInvolvedObject_Id");
                entity.Property(e => e.WolioWorkingOrderLineId).HasColumnName("WOLIO_WorkingOrderLine_Id");

                entity.HasOne(d => d.WolioWorkingOrderInvolvedObject).WithMany(p => p.WorkingOrderLineInvolvedObjects)
                    .HasForeignKey(d => d.WolioWorkingOrderInvolvedObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderInvolvedObjects_WorkingOrderInvolvedObject");

                entity.HasOne(d => d.WolioWorkingOrderLine).WithMany(p => p.WorkingOrderLineInvolvedObjects)
                    .HasForeignKey(d => d.WolioWorkingOrderLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderInvolvedObjects_WorkingOrderLines");
            });

            modelBuilder.Entity<WorkingOrderLineIsExecuteVatDeductableHistory>(entity =>
            {
                entity.HasKey(e => e.WlvhId);

                entity.ToTable("WorkingOrderLineIsExecuteVatDeductableHistory", "dos");

                entity.Property(e => e.WlvhId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WLVH_Id");
                entity.Property(e => e.WlvhCreatedBy)
                    .HasMaxLength(250)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                    .HasColumnName("WLVH_CreatedBy");
                entity.Property(e => e.WlvhCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WLVH_CreatedDate");
                entity.Property(e => e.WlvhEmployeeId).HasColumnName("WLVH_Employee_Id");
                entity.Property(e => e.WlvhIsExecuteVatDeductable).HasColumnName("WLVH_IsExecuteVatDeductable");
                entity.Property(e => e.WlvhIsVatDeductableChangeReason)
                    .HasMaxLength(250)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                    .HasColumnName("WLVH_IsVatDeductableChangeReason");
                entity.Property(e => e.WlvhLastModifiedBy)
                    .HasMaxLength(250)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                    .HasColumnName("WLVH_LastModifiedBy");
                entity.Property(e => e.WlvhLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WLVH_LastModifiedDate");
                entity.Property(e => e.WlvhStartDate).HasColumnName("WLVH_StartDate");
                entity.Property(e => e.WlvhTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WLVH_TimeStamp");
                entity.Property(e => e.WlvhWorkingOrderLineId).HasColumnName("WLVH_WorkingOrderLine_Id");

                entity.HasOne(d => d.WlvhEmployee).WithMany(p => p.WorkingOrderLineIsExecuteVatDeductableHistories)
                    .HasForeignKey(d => d.WlvhEmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderLineIsExecuteVatDeductableHistory_Employees");

                entity.HasOne(d => d.WlvhWorkingOrderLine).WithMany(p => p.WorkingOrderLineIsExecuteVatDeductableHistories)
                    .HasForeignKey(d => d.WlvhWorkingOrderLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderLineIsExecuteVatDeductableHistory_WorkingOrderLines");
            });

            modelBuilder.Entity<WorkingOrderLineIsOwnRiskHistory>(entity =>
            {
                entity.HasKey(e => e.WlohId);

                entity.ToTable("WorkingOrderLineIsOwnRiskHistory", "dos");

                entity.Property(e => e.WlohId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WLOH_Id");
                entity.Property(e => e.WlohCreatedBy)
                    .HasMaxLength(250)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                    .HasColumnName("WLOH_CreatedBy");
                entity.Property(e => e.WlohCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WLOH_CreatedDate");
                entity.Property(e => e.WlohEmployeeId).HasColumnName("WLOH_Employee_Id");
                entity.Property(e => e.WlohIsOwnRisk).HasColumnName("WLOH_IsOwnRisk");
                entity.Property(e => e.WlohIsOwnRiskChangeReason)
                    .HasMaxLength(250)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                    .HasColumnName("WLOH_IsOwnRiskChangeReason");
                entity.Property(e => e.WlohLastModifiedBy)
                    .HasMaxLength(250)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                    .HasColumnName("WLOH_LastModifiedBy");
                entity.Property(e => e.WlohLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WLOH_LastModifiedDate");
                entity.Property(e => e.WlohStartDate).HasColumnName("WLOH_StartDate");
                entity.Property(e => e.WlohTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WLOH_TimeStamp");
                entity.Property(e => e.WlohWorkingOrderLineId).HasColumnName("WLOH_WorkingOrderLine_Id");

                entity.HasOne(d => d.WlohEmployee).WithMany(p => p.WorkingOrderLineIsOwnRiskHistories)
                    .HasForeignKey(d => d.WlohEmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderLineIsOwnRiskHistory_Employees");

                entity.HasOne(d => d.WlohWorkingOrderLine).WithMany(p => p.WorkingOrderLineIsOwnRiskHistories)
                    .HasForeignKey(d => d.WlohWorkingOrderLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderLineIsOwnRiskHistory_WorkingOrderLines");
            });

            modelBuilder.Entity<WorkingOrderLineLogHistory>(entity =>
            {
                entity.HasKey(e => e.WolhId);

                entity.ToTable("WorkingOrderLineLogHistory", "dos");

                entity.Property(e => e.WolhId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WOLH_Id");
                entity.Property(e => e.WolhCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOLH_CreatedBy");
                entity.Property(e => e.WolhCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOLH_CreatedDate");
                entity.Property(e => e.WolhFreeText)
                    .HasColumnType("ntext")
                    .HasColumnName("WOLH_FreeText");
                entity.Property(e => e.WolhLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOLH_LastModifiedBy");
                entity.Property(e => e.WolhLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOLH_LastModifiedDate");
                entity.Property(e => e.WolhLineNumber).HasColumnName("WOLH_LineNumber");
                entity.Property(e => e.WolhLogHistoryTypeId).HasColumnName("WOLH_LogHistoryType_Id");
                entity.Property(e => e.WolhRoleCodeId).HasColumnName("WOLH_RoleCode_Id");
                entity.Property(e => e.WolhTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WOLH_TimeStamp");
                entity.Property(e => e.WolhWorkingOrderLineId).HasColumnName("WOLH_WorkingOrderLine_Id");

                entity.HasOne(d => d.WolhLogHistoryType).WithMany(p => p.WorkingOrderLineLogHistories)
                    .HasForeignKey(d => d.WolhLogHistoryTypeId)
                    .HasConstraintName("FK_WorkingOrderLineLogHistory_LogHistoryTypes");

                entity.HasOne(d => d.WolhRoleCode).WithMany(p => p.WorkingOrderLineLogHistories)
                    .HasForeignKey(d => d.WolhRoleCodeId)
                    .HasConstraintName("FK_WorkingOrderLineLogHistory_RoleCodes");

                entity.HasOne(d => d.WolhWorkingOrderLine).WithMany(p => p.WorkingOrderLineLogHistories)
                    .HasForeignKey(d => d.WolhWorkingOrderLineId)
                    .HasConstraintName("FK_WorkingOrderLineLogHistory_WorkingOrderLines");
            });

            modelBuilder.Entity<WorkingOrderLineLogHistoryHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_WorkingOrderLineLogHistory_History_ID");

                entity.ToTable("WorkingOrderLineLogHistory_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.WolhCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOLH_CreatedBy");
                entity.Property(e => e.WolhCreatedDate).HasColumnName("WOLH_CreatedDate");
                entity.Property(e => e.WolhFreeText)
                    .HasColumnType("ntext")
                    .HasColumnName("WOLH_FreeText");
                entity.Property(e => e.WolhId).HasColumnName("WOLH_Id");
                entity.Property(e => e.WolhLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOLH_LastModifiedBy");
                entity.Property(e => e.WolhLastModifiedDate).HasColumnName("WOLH_LastModifiedDate");
                entity.Property(e => e.WolhLineNumber).HasColumnName("WOLH_LineNumber");
                entity.Property(e => e.WolhLogHistoryTypeId).HasColumnName("WOLH_LogHistoryType_Id");
                entity.Property(e => e.WolhRoleCodeId).HasColumnName("WOLH_RoleCode_Id");
                entity.Property(e => e.WolhWorkingOrderLineId).HasColumnName("WOLH_WorkingOrderLine_Id");
            });

            modelBuilder.Entity<WorkingOrderLineNote>(entity =>
            {
                entity.HasKey(e => e.WolnId);

                entity.ToTable("WorkingOrderLineNotes", "dos");

                entity.Property(e => e.WolnId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WOLN_Id");
                entity.Property(e => e.WolnCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOLN_CreatedBy");
                entity.Property(e => e.WolnCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOLN_CreatedDate");
                entity.Property(e => e.WolnFreeText).HasColumnName("WOLN_FreeText");
                entity.Property(e => e.WolnLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOLN_LastModifiedBy");
                entity.Property(e => e.WolnLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOLN_LastModifiedDate");
                entity.Property(e => e.WolnLineNumber).HasColumnName("WOLN_LineNumber");
                entity.Property(e => e.WolnNoteTypeId).HasColumnName("WOLN_NoteType_Id");
                entity.Property(e => e.WolnRoleCodeId).HasColumnName("WOLN_RoleCode_Id");
                entity.Property(e => e.WolnTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WOLN_TimeStamp");
                entity.Property(e => e.WolnWorkingOrderLineId).HasColumnName("WOLN_WorkingOrderLine_Id");

                entity.HasOne(d => d.WolnNoteType).WithMany(p => p.WorkingOrderLineNotes)
                    .HasForeignKey(d => d.WolnNoteTypeId)
                    .HasConstraintName("FK_WorkingOrderLineNotes_NoteTypes");

                entity.HasOne(d => d.WolnRoleCode).WithMany(p => p.WorkingOrderLineNotes)
                    .HasForeignKey(d => d.WolnRoleCodeId)
                    .HasConstraintName("FK_WorkingOrderLineNotes_RoleCodes");

                entity.HasOne(d => d.WolnWorkingOrderLine).WithMany(p => p.WorkingOrderLineNotes)
                    .HasForeignKey(d => d.WolnWorkingOrderLineId)
                    .HasConstraintName("FK_WorkingOrderLineNotes_WorkingOrderLines");
            });

            modelBuilder.Entity<WorkingOrderLineOperationalStatus>(entity =>
            {
                entity.HasKey(e => e.WolosId);

                entity.ToTable("WorkingOrderLineOperationalStatuses", "dos");

                entity.Property(e => e.WolosId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WOLOS_Id");
                entity.Property(e => e.WolosCode)
                    .HasMaxLength(10)
                    .HasColumnName("WOLOS_Code");
                entity.Property(e => e.WolosCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOLOS_CreatedBy");
                entity.Property(e => e.WolosCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOLOS_CreatedDate");
                entity.Property(e => e.WolosInactive).HasColumnName("WOLOS_Inactive");
                entity.Property(e => e.WolosLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOLOS_LastModifiedBy");
                entity.Property(e => e.WolosLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOLOS_LastModifiedDate");
                entity.Property(e => e.WolosLocalizableEntryId).HasColumnName("WOLOS_LocalizableEntry_Id");
                entity.Property(e => e.WolosLongName)
                    .HasMaxLength(250)
                    .HasColumnName("WOLOS_LongName");
                entity.Property(e => e.WolosShortName)
                    .HasMaxLength(50)
                    .HasColumnName("WOLOS_ShortName");
                entity.Property(e => e.WolosTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WOLOS_TimeStamp");
                entity.Property(e => e.WolosWorkingOrderLineOperationalStatusTypeId)
                    .HasMaxLength(20)
                    .HasColumnName("WOLOS_WorkingOrderLineOperationalStatusType_Id");

                entity.HasOne(d => d.WolosLocalizableEntry).WithMany(p => p.WorkingOrderLineOperationalStatuses)
                    .HasForeignKey(d => d.WolosLocalizableEntryId)
                    .HasConstraintName("FK_WorkingOrderLineOperationalStatuses_LocalizableEntries");

                entity.HasOne(d => d.WolosWorkingOrderLineOperationalStatusType).WithMany(p => p.WorkingOrderLineOperationalStatuses)
                    .HasForeignKey(d => d.WolosWorkingOrderLineOperationalStatusTypeId)
                    .HasConstraintName("FK_WorkingOrderLineOperationalStatuses_WorkingOrderLineOperationalStatusTypes");
            });

            modelBuilder.Entity<WorkingOrderLineOperationalStatusHistory>(entity =>
            {
                entity.HasKey(e => e.WolshId);

                entity.ToTable("WorkingOrderLineOperationalStatusHistory", "dos");

                entity.Property(e => e.WolshId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WOLSH_Id");
                entity.Property(e => e.WolshCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOLSH_CreatedBy");
                entity.Property(e => e.WolshCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOLSH_CreatedDate");
                entity.Property(e => e.WolshEmployeeId).HasColumnName("WOLSH_Employee_Id");
                entity.Property(e => e.WolshLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOLSH_LastModifiedBy");
                entity.Property(e => e.WolshLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOLSH_LastModifiedDate");
                entity.Property(e => e.WolshStartDate).HasColumnName("WOLSH_StartDate");
                entity.Property(e => e.WolshStatusChangeReason)
                    .HasMaxLength(250)
                    .HasColumnName("WOLSH_StatusChangeReason");
                entity.Property(e => e.WolshTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WOLSH_TimeStamp");
                entity.Property(e => e.WolshWorkingOrderLineId).HasColumnName("WOLSH_WorkingOrderLine_Id");
                entity.Property(e => e.WolshWorkingOrderLineOperationalStatusId).HasColumnName("WOLSH_WorkingOrderLineOperationalStatus_Id");

                entity.HasOne(d => d.WolshWorkingOrderLine).WithMany(p => p.WorkingOrderLineOperationalStatusHistories)
                    .HasForeignKey(d => d.WolshWorkingOrderLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderLineOperationalStatusHistory_WorkingOrderLines");

                entity.HasOne(d => d.WolshWorkingOrderLineOperationalStatus).WithMany(p => p.WorkingOrderLineOperationalStatusHistories)
                    .HasForeignKey(d => d.WolshWorkingOrderLineOperationalStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderLineOperationalStatusHistory_WorkingOrderLineOperationalStatuses");
            });

            modelBuilder.Entity<WorkingOrderLineOperationalStatusType>(entity =>
            {
                entity.HasKey(e => e.WolstId);

                entity.ToTable("WorkingOrderLineOperationalStatusTypes", "dos");

                entity.Property(e => e.WolstId)
                    .HasMaxLength(20)
                    .HasColumnName("WOLST_Id");
                entity.Property(e => e.WolstCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOLST_CreatedBy");
                entity.Property(e => e.WolstCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOLST_CreatedDate");
                entity.Property(e => e.WolstInactive).HasColumnName("WOLST_Inactive");
                entity.Property(e => e.WolstLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOLST_LastModifiedBy");
                entity.Property(e => e.WolstLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOLST_LastModifiedDate");
                entity.Property(e => e.WolstLocalizableEntryId).HasColumnName("WOLST_LocalizableEntry_Id");
                entity.Property(e => e.WolstName)
                    .HasMaxLength(250)
                    .HasColumnName("WOLST_Name");
                entity.Property(e => e.WolstTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WOLST_TimeStamp");

                entity.HasOne(d => d.WolstLocalizableEntry).WithMany(p => p.WorkingOrderLineOperationalStatusTypes)
                    .HasForeignKey(d => d.WolstLocalizableEntryId)
                    .HasConstraintName("FK_WorkingOrderLineOperationalStatusTypes_LocalizableEntries");
            });

            modelBuilder.Entity<WorkingOrderLineParty>(entity =>
            {
                entity.HasKey(e => e.WolpId);

                entity.ToTable("WorkingOrderLineParties", "dos");

                entity.Property(e => e.WolpId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WOLP_Id");
                entity.Property(e => e.WolpCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOLP_CreatedBy");
                entity.Property(e => e.WolpCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOLP_CreatedDate");
                entity.Property(e => e.WolpLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOLP_LastModifiedBy");
                entity.Property(e => e.WolpLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOLP_LastModifiedDate");
                entity.Property(e => e.WolpTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WOLP_TimeStamp");
                entity.Property(e => e.WolpWorkingOrderLineId).HasColumnName("WOLP_WorkingOrderLine_Id");
                entity.Property(e => e.WolpWorkingOrderPartyId).HasColumnName("WOLP_WorkingOrderParty_Id");

                entity.HasOne(d => d.WolpWorkingOrderLine).WithMany(p => p.WorkingOrderLineParties)
                    .HasForeignKey(d => d.WolpWorkingOrderLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderLineParties_WorkingOrderLines");

                entity.HasOne(d => d.WolpWorkingOrderParty).WithMany(p => p.WorkingOrderLineParties)
                    .HasForeignKey(d => d.WolpWorkingOrderPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderLineParties_WorkingOrderParties");
            });

            modelBuilder.Entity<WorkingOrderLineStatus>(entity =>
            {
                entity.HasKey(e => e.WlsId);

                entity.ToTable("WorkingOrderLineStatuses", "dos", tb => tb.HasTrigger("th_dos_WorkingOrderLineStatuses_TraceHistory"));

                entity.Property(e => e.WlsId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WLS_Id");
                entity.Property(e => e.WlsCode)
                    .HasMaxLength(10)
                    .HasColumnName("WLS_Code");
                entity.Property(e => e.WlsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WLS_CreatedBy");
                entity.Property(e => e.WlsCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WLS_CreatedDate");
                entity.Property(e => e.WlsInactive).HasColumnName("WLS_Inactive");
                entity.Property(e => e.WlsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WLS_LastModifiedBy");
                entity.Property(e => e.WlsLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WLS_LastModifiedDate");
                entity.Property(e => e.WlsLocalizableEntryId).HasColumnName("WLS_LocalizableEntry_Id");
                entity.Property(e => e.WlsLongName)
                    .HasMaxLength(250)
                    .HasColumnName("WLS_LongName");
                entity.Property(e => e.WlsShortName)
                    .HasMaxLength(50)
                    .HasColumnName("WLS_ShortName");
                entity.Property(e => e.WlsTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WLS_TimeStamp");
                entity.Property(e => e.WlsWorkingOrderLineStatusTypeId)
                    .HasMaxLength(20)
                    .HasColumnName("WLS_WorkingOrderLineStatusType_Id");

                entity.HasOne(d => d.WlsLocalizableEntry).WithMany(p => p.WorkingOrderLineStatuses)
                    .HasForeignKey(d => d.WlsLocalizableEntryId)
                    .HasConstraintName("FK_WorkingOrderLineStatuses_LocalizableEntries");

                entity.HasOne(d => d.WlsWorkingOrderLineStatusType).WithMany(p => p.WorkingOrderLineStatuses)
                    .HasForeignKey(d => d.WlsWorkingOrderLineStatusTypeId)
                    .HasConstraintName("FK_WorkingOrderLineStatuses_WorkingOrderLineStatusTypes");
            });

            modelBuilder.Entity<WorkingOrderLineStatusHistory>(entity =>
            {
                entity.HasKey(e => e.WlshId);

                entity.ToTable("WorkingOrderLineStatusHistory", "dos", tb =>
                {
                    tb.HasTrigger("td_WorkingOrderLineStatusHistory");
                    tb.HasTrigger("th_dos_WorkingOrderLineStatusHistory_TraceHistory");
                    tb.HasTrigger("tr_WorkingOrderLineStatusHistory");
                });

                entity.Property(e => e.WlshId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WLSH_Id");
                entity.Property(e => e.WlshCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WLSH_CreatedBy");
                entity.Property(e => e.WlshCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WLSH_CreatedDate");
                entity.Property(e => e.WlshEmployeeId).HasColumnName("WLSH_Employee_Id");
                entity.Property(e => e.WlshLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WLSH_LastModifiedBy");
                entity.Property(e => e.WlshLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WLSH_LastModifiedDate");
                entity.Property(e => e.WlshStartDate).HasColumnName("WLSH_StartDate");
                entity.Property(e => e.WlshStatusChangeReason)
                    .HasMaxLength(250)
                    .HasColumnName("WLSH_StatusChangeReason");
                entity.Property(e => e.WlshTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WLSH_TimeStamp");
                entity.Property(e => e.WlshWorkingOrderLineId).HasColumnName("WLSH_WorkingOrderLine_Id");
                entity.Property(e => e.WlshWorkingOrderLineStatusId).HasColumnName("WLSH_WorkingOrderLineStatus_Id");

                entity.HasOne(d => d.WlshWorkingOrderLine).WithMany(p => p.WorkingOrderLineStatusHistories)
                    .HasForeignKey(d => d.WlshWorkingOrderLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderLineStatusHistory_WorkingOrderLines");

                entity.HasOne(d => d.WlshWorkingOrderLineStatus).WithMany(p => p.WorkingOrderLineStatusHistories)
                    .HasForeignKey(d => d.WlshWorkingOrderLineStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderLineStatusHistory_WordkingOrderLineStatuses");
            });

            modelBuilder.Entity<WorkingOrderLineStatusHistoryHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_WorkingOrderLineStatusHistory_History_ID");

                entity.ToTable("WorkingOrderLineStatusHistory_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.WlshCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WLSH_CreatedBy");
                entity.Property(e => e.WlshCreatedDate).HasColumnName("WLSH_CreatedDate");
                entity.Property(e => e.WlshEmployeeId).HasColumnName("WLSH_Employee_Id");
                entity.Property(e => e.WlshId).HasColumnName("WLSH_Id");
                entity.Property(e => e.WlshLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WLSH_LastModifiedBy");
                entity.Property(e => e.WlshLastModifiedDate).HasColumnName("WLSH_LastModifiedDate");
                entity.Property(e => e.WlshStartDate).HasColumnName("WLSH_StartDate");
                entity.Property(e => e.WlshStatusChangeReason)
                    .HasMaxLength(250)
                    .HasColumnName("WLSH_StatusChangeReason");
                entity.Property(e => e.WlshWorkingOrderLineId).HasColumnName("WLSH_WorkingOrderLine_Id");
                entity.Property(e => e.WlshWorkingOrderLineStatusId).HasColumnName("WLSH_WorkingOrderLineStatus_Id");
            });

            modelBuilder.Entity<WorkingOrderLineStatusType>(entity =>
            {
                entity.HasKey(e => e.WltyId);

                entity.ToTable("WorkingOrderLineStatusTypes", "dos", tb => tb.HasTrigger("th_dos_WorkingOrderLineStatusTypes_TraceHistory"));

                entity.Property(e => e.WltyId)
                    .HasMaxLength(20)
                    .HasColumnName("WLTY_Id");
                entity.Property(e => e.WltyCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WLTY_CreatedBy");
                entity.Property(e => e.WltyCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WLTY_CreatedDate");
                entity.Property(e => e.WltyInactive).HasColumnName("WLTY_Inactive");
                entity.Property(e => e.WltyLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WLTY_LastModifiedBy");
                entity.Property(e => e.WltyLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WLTY_LastModifiedDate");
                entity.Property(e => e.WltyLocalizableEntryId).HasColumnName("WLTY_LocalizableEntry_Id");
                entity.Property(e => e.WltyName)
                    .HasMaxLength(250)
                    .HasColumnName("WLTY_Name");
                entity.Property(e => e.WltyTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WLTY_TimeStamp");

                entity.HasOne(d => d.WltyLocalizableEntry).WithMany(p => p.WorkingOrderLineStatusTypes)
                    .HasForeignKey(d => d.WltyLocalizableEntryId)
                    .HasConstraintName("FK_WorkingOrderLineStatusTypes_LocalizableEntries");
            });

            modelBuilder.Entity<WorkingOrderLineStatusTypesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_WorkingOrderLineStatusTypes_History_ID");

                entity.ToTable("WorkingOrderLineStatusTypes_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.WltyCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WLTY_CreatedBy");
                entity.Property(e => e.WltyCreatedDate).HasColumnName("WLTY_CreatedDate");
                entity.Property(e => e.WltyId)
                    .HasMaxLength(20)
                    .HasColumnName("WLTY_Id");
                entity.Property(e => e.WltyInactive).HasColumnName("WLTY_Inactive");
                entity.Property(e => e.WltyLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WLTY_LastModifiedBy");
                entity.Property(e => e.WltyLastModifiedDate).HasColumnName("WLTY_LastModifiedDate");
                entity.Property(e => e.WltyLocalizableEntryId).HasColumnName("WLTY_LocalizableEntry_Id");
                entity.Property(e => e.WltyName)
                    .HasMaxLength(250)
                    .HasColumnName("WLTY_Name");
            });

            modelBuilder.Entity<WorkingOrderLineStatusesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_WorkingOrderLineStatuses_History_ID");

                entity.ToTable("WorkingOrderLineStatuses_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.WlsCode)
                    .HasMaxLength(10)
                    .HasColumnName("WLS_Code");
                entity.Property(e => e.WlsCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WLS_CreatedBy");
                entity.Property(e => e.WlsCreatedDate).HasColumnName("WLS_CreatedDate");
                entity.Property(e => e.WlsId).HasColumnName("WLS_Id");
                entity.Property(e => e.WlsInactive).HasColumnName("WLS_Inactive");
                entity.Property(e => e.WlsLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WLS_LastModifiedBy");
                entity.Property(e => e.WlsLastModifiedDate).HasColumnName("WLS_LastModifiedDate");
                entity.Property(e => e.WlsLocalizableEntryId).HasColumnName("WLS_LocalizableEntry_Id");
                entity.Property(e => e.WlsLongName)
                    .HasMaxLength(250)
                    .HasColumnName("WLS_LongName");
                entity.Property(e => e.WlsShortName)
                    .HasMaxLength(50)
                    .HasColumnName("WLS_ShortName");
                entity.Property(e => e.WlsWorkingOrderLineStatusTypeId)
                    .HasMaxLength(20)
                    .HasColumnName("WLS_WorkingOrderLineStatusType_Id");
            });

            modelBuilder.Entity<WorkingOrderLineTime>(entity =>
            {
                entity.HasKey(e => e.WoltId);

                entity.ToTable("WorkingOrderLineTimes", "dos", tb => tb.HasTrigger("th_dos_WorkingOrderLineTimes_TraceHistory"));

                entity.Property(e => e.WoltId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WOLT_Id");
                entity.Property(e => e.WoltCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOLT_CreatedBy");
                entity.Property(e => e.WoltCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOLT_CreatedDate");
                entity.Property(e => e.WoltDate)
                    .HasColumnType("datetime")
                    .HasColumnName("WOLT_Date");
                entity.Property(e => e.WoltDescription)
                    .HasMaxLength(255)
                    .HasColumnName("WOLT_Description");
                entity.Property(e => e.WoltDuration).HasColumnName("WOLT_Duration");
                entity.Property(e => e.WoltLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOLT_LastModifiedBy");
                entity.Property(e => e.WoltLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOLT_LastModifiedDate");
                entity.Property(e => e.WoltTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WOLT_TimeStamp");
                entity.Property(e => e.WoltWorkingOrderLineId).HasColumnName("WOLT_WorkingOrderLine_Id");

                entity.HasOne(d => d.WoltWorkingOrderLine).WithMany(p => p.WorkingOrderLineTimes)
                    .HasForeignKey(d => d.WoltWorkingOrderLineId)
                    .HasConstraintName("FK_WorkingOrderLineTimes_WorkingOrderLines");
            });

            modelBuilder.Entity<WorkingOrderLineTimesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_WorkingOrderLineTimes_History_ID");

                entity.ToTable("WorkingOrderLineTimes_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.WoltCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOLT_CreatedBy");
                entity.Property(e => e.WoltCreatedDate).HasColumnName("WOLT_CreatedDate");
                entity.Property(e => e.WoltDate)
                    .HasColumnType("datetime")
                    .HasColumnName("WOLT_Date");
                entity.Property(e => e.WoltDescription)
                    .HasMaxLength(255)
                    .HasColumnName("WOLT_Description");
                entity.Property(e => e.WoltDuration).HasColumnName("WOLT_Duration");
                entity.Property(e => e.WoltId).HasColumnName("WOLT_Id");
                entity.Property(e => e.WoltLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOLT_LastModifiedBy");
                entity.Property(e => e.WoltLastModifiedDate).HasColumnName("WOLT_LastModifiedDate");
                entity.Property(e => e.WoltWorkingOrderLineId).HasColumnName("WOLT_WorkingOrderLine_Id");
            });

            modelBuilder.Entity<WorkingOrderLineTrigger>(entity =>
            {
                entity.HasKey(e => e.WltId);

                entity.ToTable("WorkingOrderLineTriggers", "dos");

                entity.Property(e => e.WltId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WLT_Id");
                entity.Property(e => e.WltCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WLT_CreatedBy");
                entity.Property(e => e.WltCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WLT_CreatedDate");
                entity.Property(e => e.WltLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WLT_LastModifiedBy");
                entity.Property(e => e.WltLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WLT_LastModifiedDate");
                entity.Property(e => e.WltTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WLT_TimeStamp");
                entity.Property(e => e.WltTriggerSequence).HasColumnName("WLT_TriggerSequence");
                entity.Property(e => e.WltWorkingOrderLineTriggerTypeId)
                    .HasMaxLength(20)
                    .HasColumnName("WLT_WorkingOrderLineTriggerType_Id");

                entity.HasOne(d => d.Wlt).WithOne(p => p.WorkingOrderLineTrigger)
                    .HasForeignKey<WorkingOrderLineTrigger>(d => d.WltId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderLineTriggers_WorkingOrderLines");

                entity.HasOne(d => d.WltWorkingOrderLineTriggerType).WithMany(p => p.WorkingOrderLineTriggers)
                    .HasForeignKey(d => d.WltWorkingOrderLineTriggerTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderLineTriggers_WorkingOrderLineTriggerTypes");
            });

            modelBuilder.Entity<WorkingOrderLineTriggerType>(entity =>
            {
                entity.HasKey(e => e.WolttId);

                entity.ToTable("WorkingOrderLineTriggerTypes", "dos");

                entity.Property(e => e.WolttId)
                    .HasMaxLength(20)
                    .HasColumnName("WOLTT_Id");
                entity.Property(e => e.WolttCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOLTT_CreatedBy");
                entity.Property(e => e.WolttCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOLTT_CreatedDate");
                entity.Property(e => e.WolttInactive).HasColumnName("WOLTT_Inactive");
                entity.Property(e => e.WolttLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOLTT_LastModifiedBy");
                entity.Property(e => e.WolttLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOLTT_LastModifiedDate");
                entity.Property(e => e.WolttName)
                    .HasMaxLength(250)
                    .HasColumnName("WOLTT_Name");
                entity.Property(e => e.WolttTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WOLTT_TimeStamp");
            });

            modelBuilder.Entity<WorkingOrderLinesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_WorkingOrderLines_History_ID");

                entity.ToTable("WorkingOrderLines_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.WolCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOL_CreatedBy");
                entity.Property(e => e.WolCreatedDate).HasColumnName("WOL_CreatedDate");
                entity.Property(e => e.WolCurrencyCode)
                    .HasMaxLength(3)
                    .HasColumnName("WOL_CurrencyCode");
                entity.Property(e => e.WolDeliveryAddressId).HasColumnName("WOL_DeliveryAddress_Id");
                entity.Property(e => e.WolDeliveryDate).HasColumnName("WOL_DeliveryDate");
                entity.Property(e => e.WolDossierPartyId).HasColumnName("WOL_DossierParty_Id");
                entity.Property(e => e.WolDossierPriorityId).HasColumnName("WOL_DossierPriority_Id");
                entity.Property(e => e.WolDossierWorkActivityId).HasColumnName("WOL_DossierWorkActivity_Id");
                entity.Property(e => e.WolDueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("WOL_DueDate");
                entity.Property(e => e.WolId).HasColumnName("WOL_Id");
                entity.Property(e => e.WolInvoiceToPayorAddressId).HasColumnName("WOL_InvoiceToPayorAddress_Id");
                entity.Property(e => e.WolInvoiceToPayorId).HasColumnName("WOL_InvoiceToPayor_Id");
                entity.Property(e => e.WolIsClosed).HasColumnName("WOL_IsClosed");
                entity.Property(e => e.WolIsExecuteVatdeductable).HasColumnName("WOL_IsExecuteVATdeductable");
                entity.Property(e => e.WolIsForProductSelection).HasColumnName("WOL_IsForProductSelection");
                entity.Property(e => e.WolIsManuallyAdded).HasColumnName("WOL_IsManuallyAdded");
                entity.Property(e => e.WolIsOwnRisk).HasColumnName("WOL_IsOwnRisk");
                entity.Property(e => e.WolIsPayorDossierParty).HasColumnName("WOL_IsPayorDossierParty");
                entity.Property(e => e.WolIsSubContractor).HasColumnName("WOL_IsSubContractor");
                entity.Property(e => e.WolLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOL_LastModifiedBy");
                entity.Property(e => e.WolLastModifiedDate).HasColumnName("WOL_LastModifiedDate");
                entity.Property(e => e.WolLineNumber).HasColumnName("WOL_LineNumber");
                entity.Property(e => e.WolOurReference)
                    .HasMaxLength(250)
                    .HasColumnName("WOL_OurReference");
                entity.Property(e => e.WolParentId).HasColumnName("WOL_Parent_Id");
                entity.Property(e => e.WolPurchaseOrderId).HasColumnName("WOL_PurchaseOrder_Id");
                entity.Property(e => e.WolPurchaseOrderLineId).HasColumnName("WOL_PurchaseOrderLine_Id");
                entity.Property(e => e.WolSubContractorId).HasColumnName("WOL_SubContractor_Id");
                entity.Property(e => e.WolSupplierId).HasColumnName("WOL_Supplier_Id");
                entity.Property(e => e.WolTaskWorkActivityId).HasColumnName("WOL_TaskWorkActivity_Id");
                entity.Property(e => e.WolWorkingOrderId).HasColumnName("WOL_WorkingOrder_Id");
                entity.Property(e => e.WolYourReference)
                    .HasMaxLength(30)
                    .HasColumnName("WOL_YourReference");
            });

            modelBuilder.Entity<WorkingOrderLogHistory>(entity =>
            {
                entity.HasKey(e => e.WolId);

                entity.ToTable("WorkingOrderLogHistory", "dos");

                entity.Property(e => e.WolId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WOL_Id");
                entity.Property(e => e.WolCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOL_CreatedBy");
                entity.Property(e => e.WolCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOL_CreatedDate");
                entity.Property(e => e.WolFreeText)
                    .HasColumnType("ntext")
                    .HasColumnName("WOL_FreeText");
                entity.Property(e => e.WolLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOL_LastModifiedBy");
                entity.Property(e => e.WolLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOL_LastModifiedDate");
                entity.Property(e => e.WolLineNumber).HasColumnName("WOL_LineNumber");
                entity.Property(e => e.WolLogHistoryTypeId).HasColumnName("WOL_LogHistoryType_Id");
                entity.Property(e => e.WolRoleCodeId).HasColumnName("WOL_RoleCode_Id");
                entity.Property(e => e.WolTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WOL_TimeStamp");
                entity.Property(e => e.WolWorkingOrderId).HasColumnName("WOL_WorkingOrder_Id");

                entity.HasOne(d => d.WolLogHistoryType).WithMany(p => p.WorkingOrderLogHistories)
                    .HasForeignKey(d => d.WolLogHistoryTypeId)
                    .HasConstraintName("FK_WorkingOrderLogHistory_LogHistoryTypes");

                entity.HasOne(d => d.WolRoleCode).WithMany(p => p.WorkingOrderLogHistories)
                    .HasForeignKey(d => d.WolRoleCodeId)
                    .HasConstraintName("FK_WorkingOrderLogHistory_RoleCodes");

                entity.HasOne(d => d.WolWorkingOrder).WithMany(p => p.WorkingOrderLogHistories)
                    .HasForeignKey(d => d.WolWorkingOrderId)
                    .HasConstraintName("FK_WorkingOrderLogHistory_WorkingOrders");
            });

            modelBuilder.Entity<WorkingOrderLogHistoryHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_WorkingOrderLogHistory_History_ID");

                entity.ToTable("WorkingOrderLogHistory_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.WolCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOL_CreatedBy");
                entity.Property(e => e.WolCreatedDate).HasColumnName("WOL_CreatedDate");
                entity.Property(e => e.WolFreeText)
                    .HasColumnType("ntext")
                    .HasColumnName("WOL_FreeText");
                entity.Property(e => e.WolId).HasColumnName("WOL_Id");
                entity.Property(e => e.WolLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOL_LastModifiedBy");
                entity.Property(e => e.WolLastModifiedDate).HasColumnName("WOL_LastModifiedDate");
                entity.Property(e => e.WolLineNumber).HasColumnName("WOL_LineNumber");
                entity.Property(e => e.WolLogHistoryTypeId).HasColumnName("WOL_LogHistoryType_Id");
                entity.Property(e => e.WolRoleCodeId).HasColumnName("WOL_RoleCode_Id");
                entity.Property(e => e.WolWorkingOrderId).HasColumnName("WOL_WorkingOrder_Id");
            });

            modelBuilder.Entity<WorkingOrderNote>(entity =>
            {
                entity.HasKey(e => e.WonId);

                entity.ToTable("WorkingOrderNotes", "dos");

                entity.Property(e => e.WonId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WON_Id");
                entity.Property(e => e.WonCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WON_CreatedBy");
                entity.Property(e => e.WonCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WON_CreatedDate");
                entity.Property(e => e.WonFreeText)
                    .HasColumnType("ntext")
                    .HasColumnName("WON_FreeText");
                entity.Property(e => e.WonLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WON_LastModifiedBy");
                entity.Property(e => e.WonLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WON_LastModifiedDate");
                entity.Property(e => e.WonLineNumber).HasColumnName("WON_LineNumber");
                entity.Property(e => e.WonNoteTypeId).HasColumnName("WON_NoteType_Id");
                entity.Property(e => e.WonRoleCodeId).HasColumnName("WON_RoleCode_Id");
                entity.Property(e => e.WonTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WON_TimeStamp");
                entity.Property(e => e.WonTitle)
                    .HasMaxLength(50)
                    .HasColumnName("WON_Title");
                entity.Property(e => e.WonWorkingOrderId).HasColumnName("WON_WorkingOrder_Id");

                entity.HasOne(d => d.WonNoteType).WithMany(p => p.WorkingOrderNotes)
                    .HasForeignKey(d => d.WonNoteTypeId)
                    .HasConstraintName("FK_WorkingOrderNotes_NoteTypes");

                entity.HasOne(d => d.WonRoleCode).WithMany(p => p.WorkingOrderNotes)
                    .HasForeignKey(d => d.WonRoleCodeId)
                    .HasConstraintName("FK_WorkingOrderNotes_RoleCodes");

                entity.HasOne(d => d.WonWorkingOrder).WithMany(p => p.WorkingOrderNotes)
                    .HasForeignKey(d => d.WonWorkingOrderId)
                    .HasConstraintName("FK_WorkingOrderNotes_WorkingOrders");
            });

            modelBuilder.Entity<WorkingOrderNoteRole>(entity =>
            {
                entity.HasKey(e => e.WonrId);

                entity.ToTable("WorkingOrderNoteRoles", "dos");

                entity.Property(e => e.WonrId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WONR_Id");
                entity.Property(e => e.WonrAuthorizationGroupRoleId)
                    .HasMaxLength(50)
                    .HasColumnName("WONR_AuthorizationGroupRole_Id");
                entity.Property(e => e.WonrCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WONR_CreatedBy");
                entity.Property(e => e.WonrCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WONR_CreatedDate");
                entity.Property(e => e.WonrLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WONR_LastModifiedBy");
                entity.Property(e => e.WonrLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WONR_LastModifiedDate");
                entity.Property(e => e.WonrTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WONR_TimeStamp");
                entity.Property(e => e.WonrWorkingOrderNoteId).HasColumnName("WONR_WorkingOrderNote_Id");

                entity.HasOne(d => d.WonrAuthorizationGroupRole).WithMany(p => p.WorkingOrderNoteRoles)
                    .HasForeignKey(d => d.WonrAuthorizationGroupRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderNoteRoles_AuthorizationGroupRoles");

                entity.HasOne(d => d.WonrWorkingOrderNote).WithMany(p => p.WorkingOrderNoteRoles)
                    .HasForeignKey(d => d.WonrWorkingOrderNoteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderNoteRoles_WorkingOrderNotes");
            });

            modelBuilder.Entity<WorkingOrderNotesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_WorkingOrderNotes_History_ID");

                entity.ToTable("WorkingOrderNotes_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.WonCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WON_CreatedBy");
                entity.Property(e => e.WonCreatedDate).HasColumnName("WON_CreatedDate");
                entity.Property(e => e.WonFreeText)
                    .HasColumnType("ntext")
                    .HasColumnName("WON_FreeText");
                entity.Property(e => e.WonId).HasColumnName("WON_Id");
                entity.Property(e => e.WonLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WON_LastModifiedBy");
                entity.Property(e => e.WonLastModifiedDate).HasColumnName("WON_LastModifiedDate");
                entity.Property(e => e.WonLineNumber).HasColumnName("WON_LineNumber");
                entity.Property(e => e.WonNoteTypeId).HasColumnName("WON_NoteType_Id");
                entity.Property(e => e.WonRoleCodeId).HasColumnName("WON_RoleCode_Id");
                entity.Property(e => e.WonTitle)
                    .HasMaxLength(50)
                    .HasColumnName("WON_Title");
                entity.Property(e => e.WonWorkingOrderId).HasColumnName("WON_WorkingOrder_Id");
            });

            modelBuilder.Entity<WorkingOrderParty>(entity =>
            {
                entity.HasKey(e => e.WopId);

                entity.ToTable("WorkingOrderParties", "dos");

                entity.Property(e => e.WopId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WOP_Id");
                entity.Property(e => e.WopCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOP_CreatedBy");
                entity.Property(e => e.WopCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOP_CreatedDate");
                entity.Property(e => e.WopDossierAssignmentPartyId).HasColumnName("WOP_DossierAssignmentParty_Id");
                entity.Property(e => e.WopDossierPartyId).HasColumnName("WOP_DossierParty_Id");
                entity.Property(e => e.WopLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOP_LastModifiedBy");
                entity.Property(e => e.WopLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOP_LastModifiedDate");
                entity.Property(e => e.WopTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WOP_TimeStamp");
                entity.Property(e => e.WopWorkingOrderId).HasColumnName("WOP_WorkingOrder_Id");

                entity.HasOne(d => d.WopDossierAssignmentParty).WithMany(p => p.WorkingOrderParties)
                    .HasForeignKey(d => d.WopDossierAssignmentPartyId)
                    .HasConstraintName("FK_WorkingOrderParties_DossierAssignmentParties");

                entity.HasOne(d => d.WopDossierParty).WithMany(p => p.WorkingOrderParties)
                    .HasForeignKey(d => d.WopDossierPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderParties_DossierParties");

                entity.HasOne(d => d.WopWorkingOrder).WithMany(p => p.WorkingOrderParties)
                    .HasForeignKey(d => d.WopWorkingOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderParties_WorkingOrders");
            });

            modelBuilder.Entity<WorkingOrderStatus>(entity =>
            {
                entity.HasKey(e => e.WstId);

                entity.ToTable("WorkingOrderStatuses", "dos", tb => tb.HasTrigger("th_dos_WorkingOrderStatuses_TraceHistory"));

                entity.Property(e => e.WstId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WST_Id");
                entity.Property(e => e.WstCode)
                    .HasMaxLength(10)
                    .HasColumnName("WST_Code");
                entity.Property(e => e.WstCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WST_CreatedBy");
                entity.Property(e => e.WstCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WST_CreatedDate");
                entity.Property(e => e.WstInactive).HasColumnName("WST_Inactive");
                entity.Property(e => e.WstLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WST_LastModifiedBy");
                entity.Property(e => e.WstLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WST_LastModifiedDate");
                entity.Property(e => e.WstLocalizableEntryId).HasColumnName("WST_LocalizableEntry_Id");
                entity.Property(e => e.WstLongName)
                    .HasMaxLength(250)
                    .HasColumnName("WST_LongName");
                entity.Property(e => e.WstShortName)
                    .HasMaxLength(50)
                    .HasColumnName("WST_ShortName");
                entity.Property(e => e.WstTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WST_TimeStamp");
                entity.Property(e => e.WstWorkingOrderStatusTypeId)
                    .HasMaxLength(20)
                    .HasColumnName("WST_WorkingOrderStatusType_Id");

                entity.HasOne(d => d.WstLocalizableEntry).WithMany(p => p.WorkingOrderStatuses)
                    .HasForeignKey(d => d.WstLocalizableEntryId)
                    .HasConstraintName("FK_WorkingOrderStatuses_LocalizableEntries");

                entity.HasOne(d => d.WstWorkingOrderStatusType).WithMany(p => p.WorkingOrderStatuses)
                    .HasForeignKey(d => d.WstWorkingOrderStatusTypeId)
                    .HasConstraintName("FK_WorkingOrderStatuses_WorkingOrderStatusTypes");
            });

            modelBuilder.Entity<WorkingOrderStatusHistory>(entity =>
            {
                entity.HasKey(e => e.WshId);

                entity.ToTable("WorkingOrderStatusHistory", "dos", tb =>
                {
                    tb.HasTrigger("th_dos_WorkingOrderStatusHistory_TraceHistory");
                    tb.HasTrigger("tr_WorkingOrderStatusHistory");
                });

                entity.Property(e => e.WshId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WSH_Id");
                entity.Property(e => e.WshCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WSH_CreatedBy");
                entity.Property(e => e.WshCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WSH_CreatedDate");
                entity.Property(e => e.WshEmployeeId).HasColumnName("WSH_Employee_Id");
                entity.Property(e => e.WshLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WSH_LastModifiedBy");
                entity.Property(e => e.WshLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WSH_LastModifiedDate");
                entity.Property(e => e.WshStartDate).HasColumnName("WSH_StartDate");
                entity.Property(e => e.WshStatusChangeReason)
                    .HasMaxLength(250)
                    .HasColumnName("WSH_StatusChangeReason");
                entity.Property(e => e.WshTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WSH_TimeStamp");
                entity.Property(e => e.WshWorkingOrderId).HasColumnName("WSH_WorkingOrder_Id");
                entity.Property(e => e.WshWorkingOrderStatusId).HasColumnName("WSH_WorkingOrderStatus_Id");

                entity.HasOne(d => d.WshWorkingOrder).WithMany(p => p.WorkingOrderStatusHistories)
                    .HasForeignKey(d => d.WshWorkingOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderStatusHistory_WorkingOrders");

                entity.HasOne(d => d.WshWorkingOrderStatus).WithMany(p => p.WorkingOrderStatusHistories)
                    .HasForeignKey(d => d.WshWorkingOrderStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkingOrderStatusHistory_WordkingOrderStatuses");
            });

            modelBuilder.Entity<WorkingOrderStatusHistoryHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_WorkingOrderStatusHistory_History_ID");

                entity.ToTable("WorkingOrderStatusHistory_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.WshCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WSH_CreatedBy");
                entity.Property(e => e.WshCreatedDate).HasColumnName("WSH_CreatedDate");
                entity.Property(e => e.WshEmployeeId).HasColumnName("WSH_Employee_Id");
                entity.Property(e => e.WshId).HasColumnName("WSH_Id");
                entity.Property(e => e.WshLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WSH_LastModifiedBy");
                entity.Property(e => e.WshLastModifiedDate).HasColumnName("WSH_LastModifiedDate");
                entity.Property(e => e.WshStartDate).HasColumnName("WSH_StartDate");
                entity.Property(e => e.WshStatusChangeReason)
                    .HasMaxLength(250)
                    .HasColumnName("WSH_StatusChangeReason");
                entity.Property(e => e.WshWorkingOrderId).HasColumnName("WSH_WorkingOrder_Id");
                entity.Property(e => e.WshWorkingOrderStatusId).HasColumnName("WSH_WorkingOrderStatus_Id");
            });

            modelBuilder.Entity<WorkingOrderStatusType>(entity =>
            {
                entity.HasKey(e => e.WtyId);

                entity.ToTable("WorkingOrderStatusTypes", "dos", tb => tb.HasTrigger("th_dos_WorkingOrderStatusTypes_TraceHistory"));

                entity.Property(e => e.WtyId)
                    .HasMaxLength(20)
                    .HasColumnName("WTY_Id");
                entity.Property(e => e.WtyCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WTY_CreatedBy");
                entity.Property(e => e.WtyCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WTY_CreatedDate");
                entity.Property(e => e.WtyInactive).HasColumnName("WTY_Inactive");
                entity.Property(e => e.WtyLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WTY_LastModifiedBy");
                entity.Property(e => e.WtyLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WTY_LastModifiedDate");
                entity.Property(e => e.WtyLocalizableEntryId).HasColumnName("WTY_LocalizableEntry_Id");
                entity.Property(e => e.WtyName)
                    .HasMaxLength(250)
                    .HasColumnName("WTY_Name");
                entity.Property(e => e.WtyTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WTY_TimeStamp");

                entity.HasOne(d => d.WtyLocalizableEntry).WithMany(p => p.WorkingOrderStatusTypes)
                    .HasForeignKey(d => d.WtyLocalizableEntryId)
                    .HasConstraintName("FK_WorkingOrderStatusTypes_LocalizableEntries");
            });

            modelBuilder.Entity<WorkingOrderStatusTypesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_WorkingOrderStatusTypes_History_ID");

                entity.ToTable("WorkingOrderStatusTypes_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.WtyCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WTY_CreatedBy");
                entity.Property(e => e.WtyCreatedDate).HasColumnName("WTY_CreatedDate");
                entity.Property(e => e.WtyId)
                    .HasMaxLength(20)
                    .HasColumnName("WTY_Id");
                entity.Property(e => e.WtyInactive).HasColumnName("WTY_Inactive");
                entity.Property(e => e.WtyLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WTY_LastModifiedBy");
                entity.Property(e => e.WtyLastModifiedDate).HasColumnName("WTY_LastModifiedDate");
                entity.Property(e => e.WtyLocalizableEntryId).HasColumnName("WTY_LocalizableEntry_Id");
                entity.Property(e => e.WtyName)
                    .HasMaxLength(250)
                    .HasColumnName("WTY_Name");
            });

            modelBuilder.Entity<WorkingOrderStatusesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_WorkingOrderStatuses_History_ID");

                entity.ToTable("WorkingOrderStatuses_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.WstCode)
                    .HasMaxLength(10)
                    .HasColumnName("WST_Code");
                entity.Property(e => e.WstCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WST_CreatedBy");
                entity.Property(e => e.WstCreatedDate).HasColumnName("WST_CreatedDate");
                entity.Property(e => e.WstId).HasColumnName("WST_Id");
                entity.Property(e => e.WstInactive).HasColumnName("WST_Inactive");
                entity.Property(e => e.WstLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WST_LastModifiedBy");
                entity.Property(e => e.WstLastModifiedDate).HasColumnName("WST_LastModifiedDate");
                entity.Property(e => e.WstLocalizableEntryId).HasColumnName("WST_LocalizableEntry_Id");
                entity.Property(e => e.WstLongName)
                    .HasMaxLength(250)
                    .HasColumnName("WST_LongName");
                entity.Property(e => e.WstShortName)
                    .HasMaxLength(50)
                    .HasColumnName("WST_ShortName");
                entity.Property(e => e.WstWorkingOrderStatusTypeId)
                    .HasMaxLength(20)
                    .HasColumnName("WST_WorkingOrderStatusType_Id");
            });

            modelBuilder.Entity<WorkingOrderSubType>(entity =>
            {
                entity.HasKey(e => e.WostId);

                entity.ToTable("WorkingOrderSubTypes", "dos");

                entity.Property(e => e.WostId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WOST_Id");
                entity.Property(e => e.WostCode)
                    .HasMaxLength(10)
                    .IsFixedLength()
                    .HasColumnName("WOST_Code");
                entity.Property(e => e.WostCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOST_CreatedBy");
                entity.Property(e => e.WostCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOST_CreatedDate");
                entity.Property(e => e.WostLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOST_LastModifiedBy");
                entity.Property(e => e.WostLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOST_LastModifiedDate");
                entity.Property(e => e.WostName)
                    .HasMaxLength(50)
                    .IsFixedLength()
                    .HasColumnName("WOST_Name");
                entity.Property(e => e.WostTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WOST_TimeStamp");
            });

            modelBuilder.Entity<WorkingOrderType>(entity =>
            {
                entity.HasKey(e => e.WotId).HasName("PK_WorkingOrderType");

                entity.ToTable("WorkingOrderTypes", "dos");

                entity.Property(e => e.WotId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WOT_Id");
                entity.Property(e => e.WotCode)
                    .HasMaxLength(10)
                    .IsFixedLength()
                    .HasColumnName("WOT_Code");
                entity.Property(e => e.WotCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOT_CreatedBy");
                entity.Property(e => e.WotCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("WOT_CreatedDate");
                entity.Property(e => e.WotLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOT_LastModifiedBy");
                entity.Property(e => e.WotLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("WOT_LastModifiedDate");
                entity.Property(e => e.WotName)
                    .HasMaxLength(50)
                    .IsFixedLength()
                    .HasColumnName("WOT_Name");
                entity.Property(e => e.WotTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WOT_TimeStamp");
            });

            modelBuilder.Entity<WorkingOrderView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("WorkingOrder_View", "dos");

                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.EmployeeEmail).HasMaxLength(250);
                entity.Property(e => e.Feature).HasMaxLength(10);
                entity.Property(e => e.MainActivityCode).HasMaxLength(10);
                entity.Property(e => e.MainActivityName).HasMaxLength(20);
                entity.Property(e => e.Number).HasMaxLength(50);
                entity.Property(e => e.Product).HasMaxLength(20);
                entity.Property(e => e.QualityCheckStatus).HasMaxLength(10);
                entity.Property(e => e.Status).HasMaxLength(10);
                entity.Property(e => e.SubStatus).HasMaxLength(10);
            });

            modelBuilder.Entity<WorkingOrderViewHandlingStatus>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("WorkingOrder_View_Handling_Status", "dos");

                entity.Property(e => e.EmployeeEmail).HasMaxLength(250);
                entity.Property(e => e.Feature).HasMaxLength(10);
                entity.Property(e => e.QualityCheckStatus).HasMaxLength(10);
                entity.Property(e => e.Status).HasMaxLength(10);
            });

            modelBuilder.Entity<WorkingOrderVisitInformation>(entity =>
            {
                entity.HasKey(e => e.WovId);

                entity.ToTable("WorkingOrderVisitInformations", "dos", tb => tb.HasTrigger("th_dos_WorkingOrderVisitInformations_TraceHistory"));

                entity.Property(e => e.WovId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("WOV_Id");
                entity.Property(e => e.WovCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOV_CreatedBy");
                entity.Property(e => e.WovCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOV_CreatedDate");
                entity.Property(e => e.WovLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOV_LastModifiedBy");
                entity.Property(e => e.WovLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("WOV_LastModifiedDate");
                entity.Property(e => e.WovTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("WOV_TimeStamp");
                entity.Property(e => e.WovVisitInformationId).HasColumnName("WOV_VisitInformation_Id");
                entity.Property(e => e.WovWorkingOrderId).HasColumnName("WOV_WorkingOrder_Id");

                entity.HasOne(d => d.WovVisitInformation).WithMany(p => p.WorkingOrderVisitInformations)
                    .HasForeignKey(d => d.WovVisitInformationId)
                    .HasConstraintName("FK_WorkingOrderVisitInformations_VisitInformations");

                entity.HasOne(d => d.WovWorkingOrder).WithMany(p => p.WorkingOrderVisitInformations)
                    .HasForeignKey(d => d.WovWorkingOrderId)
                    .HasConstraintName("FK_WorkingOrderVisitInformations_WorkingOrders");
            });

            modelBuilder.Entity<WorkingOrderVisitInformationsHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_WorkingOrderVisitInformations_History_ID");

                entity.ToTable("WorkingOrderVisitInformations_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.WovCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOV_CreatedBy");
                entity.Property(e => e.WovCreatedDate).HasColumnName("WOV_CreatedDate");
                entity.Property(e => e.WovId).HasColumnName("WOV_Id");
                entity.Property(e => e.WovLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WOV_LastModifiedBy");
                entity.Property(e => e.WovLastModifiedDate).HasColumnName("WOV_LastModifiedDate");
                entity.Property(e => e.WovVisitInformationId).HasColumnName("WOV_VisitInformation_Id");
                entity.Property(e => e.WovWorkingOrderId).HasColumnName("WOV_WorkingOrder_Id");
            });

            modelBuilder.Entity<WorkingOrdersHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId).HasName("PK_dos-hist_WorkingOrders_History_ID");

                entity.ToTable("WorkingOrders_History", "dos-hist");

                entity.Property(e => e.HistoryId)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasColumnName("History_ID");
                entity.Property(e => e.HistoryTriggerDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("History_TriggerDateTime");
                entity.Property(e => e.HistoryTriggerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasColumnName("History_TriggerType");
                entity.Property(e => e.HistoryTriggeredBy)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_name())")
                    .HasColumnName("History_TriggeredBy");
                entity.Property(e => e.WoCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WO_CreatedBy");
                entity.Property(e => e.WoCreatedDate).HasColumnName("WO_CreatedDate");
                entity.Property(e => e.WoDossierAssignmentId).HasColumnName("WO_DossierAssignment_Id");
                entity.Property(e => e.WoDossierId).HasColumnName("WO_Dossier_Id");
                entity.Property(e => e.WoEmployeeId).HasColumnName("WO_Employee_Id");
                entity.Property(e => e.WoId).HasColumnName("WO_Id");
                entity.Property(e => e.WoLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("WO_LastModifiedBy");
                entity.Property(e => e.WoLastModifiedDate).HasColumnName("WO_LastModifiedDate");
                entity.Property(e => e.WoWorkingOrderNumber)
                    .HasMaxLength(50)
                    .HasColumnName("WO_WorkingOrderNumber");
            });

            modelBuilder.Entity<WorkingOrdersSearchView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("WorkingOrdersSearchView", "ux");

                entity.Property(e => e.AssignmentNumber).HasMaxLength(20);
                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.DossierNumber).HasMaxLength(20);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.LeadCurrencyCode).HasMaxLength(3);
                entity.Property(e => e.WorkingOrderNumber).HasMaxLength(50);
                entity.Property(e => e.WorkingOrderTypeCode)
                    .HasMaxLength(10)
                    .IsFixedLength();
                entity.Property(e => e.WorkingOrderTypeName)
                    .HasMaxLength(50)
                    .IsFixedLength();
            });

            modelBuilder.Entity<WorkingOrdersWithoutPurchaseInvoicesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("WorkingOrdersWithoutPurchaseInvoicesView", "dos");

                entity.Property(e => e.CreatedBy).HasMaxLength(250);
                entity.Property(e => e.LastModifiedBy).HasMaxLength(250);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<XmlInvoiceTranslation>(entity =>
            {
                entity.HasKey(e => e.XitId);

                entity.ToTable("XmlInvoiceTranslations", "fin");

                entity.Property(e => e.XitId)
                    .HasDefaultValueSql("(newid())")
                    .HasColumnName("XIT_Id");
                entity.Property(e => e.XitCreatedBy)
                    .HasMaxLength(250)
                    .HasColumnName("XIT_CreatedBy");
                entity.Property(e => e.XitCreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("XIT_CreatedDate");
                entity.Property(e => e.XitDescriptor)
                    .HasMaxLength(50)
                    .HasColumnName("XIT_Descriptor");
                entity.Property(e => e.XitElementName)
                    .HasMaxLength(250)
                    .HasColumnName("XIT_ElementName");
                entity.Property(e => e.XitInactive).HasColumnName("XIT_Inactive");
                entity.Property(e => e.XitLastModifiedBy)
                    .HasMaxLength(250)
                    .HasColumnName("XIT_LastModifiedBy");
                entity.Property(e => e.XitLastModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnName("XIT_LastModifiedDate");
                entity.Property(e => e.XitOriginalValue)
                    .HasMaxLength(250)
                    .HasColumnName("XIT_OriginalValue");
                entity.Property(e => e.XitTimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("XIT_TimeStamp");
                entity.Property(e => e.XitTranslatedValue)
                    .HasMaxLength(250)
                    .HasColumnName("XIT_TranslatedValue");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }

}
